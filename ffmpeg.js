var D="0.12.9",c=`https://unpkg.com/@ffmpeg/core@${D}/dist/umd/ffmpeg-core.js`,r;(function(E){E.LOAD="LOAD",E.EXEC="EXEC",E.FFPROBE="FFPROBE",E.WRITE_FILE="WRITE_FILE",E.READ_FILE="READ_FILE",E.DELETE_FILE="DELETE_FILE",E.RENAME="RENAME",E.CREATE_DIR="CREATE_DIR",E.LIST_DIR="LIST_DIR",E.DELETE_DIR="DELETE_DIR",E.ERROR="ERROR",E.DOWNLOAD="DOWNLOAD",E.PROGRESS="PROGRESS",E.LOG="LOG",E.MOUNT="MOUNT",E.UNMOUNT="UNMOUNT"})(r||(r={}));var R=(()=>{let E=0;return()=>E++})();var _=new Error("unknown message type"),a=new Error("ffmpeg is not loaded, call `await ffmpeg.load()` first"),f=new Error("called FFmpeg.terminate()"),p=new Error("failed to import ffmpeg-core.js");var O=class{#e=null;#E={};#r={};#s=[];#i=[];loaded=!1;#o=()=>{this.#e&&(this.#e.onmessage=({data:{id:t,type:e,data:s}})=>{switch(e){case r.LOAD:this.loaded=!0,this.#E[t](s);break;case r.MOUNT:case r.UNMOUNT:case r.EXEC:case r.FFPROBE:case r.WRITE_FILE:case r.READ_FILE:case r.DELETE_FILE:case r.RENAME:case r.CREATE_DIR:case r.LIST_DIR:case r.DELETE_DIR:this.#E[t](s);break;case r.LOG:this.#s.forEach(i=>i(s));break;case r.PROGRESS:this.#i.forEach(i=>i(s));break;case r.ERROR:this.#r[t](s);break}delete this.#E[t],delete this.#r[t]})};#t=({type:t,data:e},s=[],i)=>this.#e?new Promise((h,n)=>{let o=R();this.#e&&this.#e.postMessage({id:o,type:t,data:e},s),this.#E[o]=h,this.#r[o]=n,i?.addEventListener("abort",()=>{n(new DOMException(`Message # ${o} was aborted`,"AbortError"))},{once:!0})}):Promise.reject(a);on(t,e){t==="log"?this.#s.push(e):t==="progress"&&this.#i.push(e)}off(t,e){t==="log"?this.#s=this.#s.filter(s=>s!==e):t==="progress"&&(this.#i=this.#i.filter(s=>s!==e))}load=({classWorkerURL:t,...e}={},{signal:s}={})=>(this.#e||(this.#e=t?new Worker(new URL(t,import.meta.url),{type:"module"}):new Worker(new URL("./worker.js",import.meta.url),{type:"module"}),this.#o()),this.#t({type:r.LOAD,data:e},void 0,s));exec=(t,e=-1,{signal:s}={})=>this.#t({type:r.EXEC,data:{args:t,timeout:e}},void 0,s);ffprobe=(t,e=-1,{signal:s}={})=>this.#t({type:r.FFPROBE,data:{args:t,timeout:e}},void 0,s);terminate=()=>{let t=Object.keys(this.#r);for(let e of t)this.#r[e](f),delete this.#r[e],delete this.#E[e];this.#e&&(this.#e.terminate(),this.#e=null,this.loaded=!1)};writeFile=(t,e,{signal:s}={})=>{let i=[];return e instanceof Uint8Array&&i.push(e.buffer),this.#t({type:r.WRITE_FILE,data:{path:t,data:e}},i,s)};mount=(t,e,s)=>{let i=[];return this.#t({type:r.MOUNT,data:{fsType:t,options:e,mountPoint:s}},i)};unmount=t=>{let e=[];return this.#t({type:r.UNMOUNT,data:{mountPoint:t}},e)};readFile=(t,e="binary",{signal:s}={})=>this.#t({type:r.READ_FILE,data:{path:t,encoding:e}},void 0,s);deleteFile=(t,{signal:e}={})=>this.#t({type:r.DELETE_FILE,data:{path:t}},void 0,e);rename=(t,e,{signal:s}={})=>this.#t({type:r.RENAME,data:{oldPath:t,newPath:e}},void 0,s);createDir=(t,{signal:e}={})=>this.#t({type:r.CREATE_DIR,data:{path:t}},void 0,e);listDir=(t,{signal:e}={})=>this.#t({type:r.LIST_DIR,data:{path:t}},void 0,e);deleteDir=(t,{signal:e}={})=>this.#t({type:r.DELETE_DIR,data:{path:t}},void 0,e)};var d;(function(E){E.MEMFS="MEMFS",E.NODEFS="NODEFS",E.NODERAWFS="NODERAWFS",E.IDBFS="IDBFS",E.WORKERFS="WORKERFS",E.PROXYFS="PROXYFS"})(d||(d={}));export{d as FFFSType,O as FFmpeg};
