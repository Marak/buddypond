/* Desktop.js - Buddy Pond - Marak Squires - 2023 */

// import Folder from '../file-explorer/Folder/Folder.js';
import Folder from "./lib/Folder.js";
import File from "./lib/File.js";

// shortcuts
import addShortCut from "./lib/shortcuts/addShortCut.js";
import addFolder from "./lib/addFolder.js";
import removeShortCut from "./lib/shortcuts/removeShortCut.js";
import arrangeShortcuts from "./lib/shortcuts/arrangeShortCuts.js";

// context menu(s)
import setupContextMenu from "./lib/contextmenu/setupContextMenu.js";
import showContextMenu from "./lib/contextmenu/showContextMenu.js";

// utils
import buildJsTreeData from "../file-explorer/lib/buildJsTreeData.js";
import viewSource from "./lib/viewSource.js";


// default data
import defaultDesktopShortcuts from "./lib/defaultDesktopShortcuts.js";

export default class Desktop {
    constructor(bp, options = {}) {
        this.bp = bp;
        this.options = options;

        this.apps = {}; // registered apps

        this.folders = [];

        // Setup containers for the desktop and shortcuts
        this.container = document.createElement('div');
        this.container.id = 'desktop-container';
        this.container.className = 'desktop-container';

        this.shortCutsContainer = document.createElement('div');
        this.shortCutsContainer.id = 'desktop-shortcuts-container';
        this.shortCutsContainer.className = 'desktop-shortcuts-container';
        this.container.appendChild(this.shortCutsContainer);



        // Set parent container
        this.parent = options.parent || document.body;
        this.parent.appendChild(this.container);

        this.enableShortcutDragging = true;

        if (typeof options.enableShortcutDragging === 'boolean') {
            this.enableShortcutDragging = options.enableShortcutDragging;
        }

        // Context menu for desktop
        this.setupContextMenu();
    }

    async init() {
        await this.bp.load('/v5/apps/based/desktop/desktop.css');

        // Used for parsing shortcuts, not needed ( for now )
        //let yaml = await this.bp.importModule('/v5/apps/based/ui/vendor/js-yaml.min.js', {}, false);
        //this.yaml = yaml.jsYamlDefault;

        // Render the default shortcuts
        defaultDesktopShortcuts();

        /*
        if (this.bp.settings.wallpaper_url) {
            // won't work unless desktop is already loaded
            this.bp.apps.desktop.setWallpaper(this.bp.settings.wallpaper_url);
        } else {
            this.bp.apps.wallpaper.wallpaperManager.active = this.bp.settings.wallpaper_name || 'solid';
            this.bp.apps.wallpaper.wallpaperManager.start();
        }
        */

        // check if there is a wallpaper_url
        /*
        if (this.bp.settings.wallpaper_url) {
            this.setWallpaper(this.bp.settings.wallpaper_url);
        }
        */

        // console.log('this.bp.settings.active_theme', this.bp.settings.active_theme)
        /*
        if (this.bp.settings.active_theme) {
            // alert(this.bp.settings.active_theme);
            this.bp.apps.themes.applyTheme(this.bp.settings.active_theme);
        }
        */



        // if (this.bp.settings.wallpaper) {

        // TODO: after launch, port legacy wallpaper app
        // this.setupWallpaper(); // Set initial wallpaper
        return 'loaded desktop';
    }

    async load() {
        return;
        // get file list from cdn
        // returns cloudFiles.files ( a flat array of relative file and directory paths )
        let cloudFiles = await this.bp.apps.client.api.listFiles('desktop', 6);

        // converts the flat array of files and directories into a nested jsTree data structure
        // this conforms to the jsTree data format
        /*

        // Expected format of the node (there are no required fields)
            {
            id          : "string" // will be autogenerated if omitted
            text        : "string" // node text
            icon        : "string" // string for custom
            state       : {
                opened    : boolean  // is the node open
                disabled  : boolean  // is the node disabled
                selected  : boolean  // is the node selected
            },
            children    : []  // array of strings or objects
            li_attr     : {}  // attributes for the generated LI node
            a_attr      : {}  // attributes for the generated A node
            }
        */

        // TODO: which will be easier to write a renderer for? flat array or tree data?
        // We believe tree data will be easier to write a renderer for
        let treeData = buildJsTreeData(this.bp.me, cloudFiles.files);
        console.log('treeData', treeData);

        // example shortcut format
        let yamlStr = `
                type: Shortcut
                target: /path/to/application.exe
                parameters:
                startIn: /path/to/
                args: "--example-arg"
                icon: /path/to/icon.png
                hotkey: Ctrl+Alt+A
                description: "A shortcut to an application"
        `;
        // load the yaml as json
        let doc = this.yaml.load(yamlStr);
        console.log(doc);

        // we now have treeData which is the form of a jsTree data structure
        let userRoot = treeData[0]; // the top node is the buddyname / user root / foldername on CDN
        console.log('userRoot', userRoot) // the desktop folder itself ( since we query for it )
        let desktopRoot = userRoot.children[0]; // the desktop folder itself ( since we query for it )

        // the problem is now we intended to render the "Desktop" folder contents at the top-level
        // ( such that all its children are visible on the desktop )
        // however; with the current structure we see a "desktop" folder on the desktop
        // TODO: we need a way to render the co ntents of a folder at a top-level
        // or change the way folders are rendered
        // render the userRoot
        this.renderNode(desktopRoot, this.shortCutsContainer, 0, true);
       // arrangeDesktop(); // global ( for now remove later )

        return;



    }

    renderNode(node, parentElement, depth = 0, skipFolderUI = false) {
        console.log('renderNode', node, parentElement, depth, skipFolderUI);
        if (node.children && node.children.length > 0) {
            // Check if we should skip rendering the folder UI (used for top-level folder)
            if (skipFolderUI) {
                // Directly render the children in the parent element
                node.children.forEach(child => this.renderNode(child, parentElement, depth + 1));
            } else {
                // It's a folder and should be rendered as such
                const folder = new Folder(node, parentElement, this, depth);
                folder.render();
            }
        } else {
            // It's a file or shortcut
            if (node.text.endsWith('.yml')) {
                const shortcut = new Shortcut(node, parentElement);
                shortcut.render();
            } else {
                const file = new File(node, parentElement, this, depth);
                file.render();
            }
        }
    }

    toggleMute () {
        if (this.bp.settings.audio_enabled === false) {
          this.bp.set('audio_enabled', true);
          $('.volumeFull').show();
          $('.volumeMuted').hide();
          this.bp.play('desktop/assets/audio/VOLUME-ON.mp3', { tryHard: Infinity });
        } else {
          this.bp.set('audio_enabled', false);
          $('.volumeFull').hide();
          $('.volumeMuted').show();
        }
    }

    openFolder(folderId) {
        console.log('openFolder', folderId);
        // Find the folder by ID
        const folder = this.folders.find(f => f.data.name === folderId);
        if (folder) {
            // Open the folder (this could be a method in the Folder class)
            folder.open();
        } else {
            console.error(`Folder with ID ${folderId} not found.`);
        }
    }

}

Desktop.prototype.Folder = Folder;
Desktop.prototype.File = File;
Desktop.prototype.addShortCut = addShortCut;
Desktop.prototype.addFolder = addFolder;
Desktop.prototype.removeShortCut = removeShortCut;
Desktop.prototype.arrangeShortcuts = arrangeShortcuts;
Desktop.prototype.setupContextMenu = setupContextMenu;
Desktop.prototype.showContextMenu = showContextMenu;
// Desktop.prototype.buildJsTreeData = buildJsTreeData;
Desktop.prototype.viewSource = viewSource;

Desktop.prototype.showDesktopIcons = function showDesktopIcons() {
    this.shortCutsContainer.style.display = 'flex';
    if (this.bp.isMobile()) {
        this.shortCutsContainer.style.position = 'absolute';
        this.shortCutsContainer.style.left = '0px';
        this.shortCutsContainer.style.bottom = '0px';
    }
}

class Shortcut {
    constructor(data, parentElement) {
        this.data = data;
        this.parentElement = parentElement;
    }

    render() {
        const shortcutElement = document.createElement('div');
        shortcutElement.textContent = this.data.text || this.data.id;
        shortcutElement.className = 'shortcut';

        shortcutElement.classList.add('icon', 'shortcut', 'bp-desktop-iconp');   

        this.parentElement.appendChild(shortcutElement);
    }
}