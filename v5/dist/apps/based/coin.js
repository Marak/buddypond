const e={};class t{constructor(t){this.resourceName=t,e[this.resourceName]={},this.memoryStore=e}create(t,s,o){Object.keys(o).forEach((t=>{if(o[t].required&&(void 0===s[t]||null===s[t]))throw new Error(`${t} is required`);if(o[t].unique){if(Object.values(e[this.resourceName]).some((e=>e[t]===s[t])))throw new Error(`${t} must be unique`)}if(o[t].type&&typeof s[t]!==o[t].type)throw new Error(`${t} must be of type ${o[t].type} value is ${s[t]}`)}));const n=Math.random().toString(36).substring(2,10),r={id:n,owner:t};return Object.keys(o).forEach((e=>{r[e]=s[e]||null})),e[this.resourceName][n]=r,r}get(t,s){const o=e[this.resourceName][s];return o&&o.owner===t?o:null}update(t,s,o,n){const r=e[this.resourceName][s];if(!r||r.owner!==t)throw new Error(`${this.resourceName} not found or unauthorized`);return Object.keys(n).forEach((e=>{if(n[e].required&&(void 0===o[e]||null===o[e]))throw new Error(`${e} is required`)})),Object.keys(n).forEach((e=>{void 0!==o[e]&&(r[e]=o[e])})),r}remove(t,s){const o=e[this.resourceName][s];if(!o||o.owner!==t)throw new Error(`${this.resourceName} not found or unauthorized`);return delete e[this.resourceName][s],{success:!0}}search(t,s){return Object.values(e[this.resourceName]).filter((e=>e.owner===t&&Object.keys(s).every((t=>e[t]===s[t]))))}list(t){return Object.values(e[this.resourceName]).filter((e=>e.owner===t))}all(){return Object.values(e[this.resourceName])}}class s{constructor(e,t={}){this.resourceName=e,this.apiEndpoint=t.apiEndpoint,t.bp&&(this.bp=t.bp)}async apiRequest(e,t,s=null,o=null){const n={method:e,headers:{"Content-Type":"application/json"}};s&&(n.body=JSON.stringify(s)),this.bp.qtokenid&&(n.headers.Authorization=`Bearer ${this.bp.qtokenid}`),n.headers["X-Me"]=this.bp.me;let r=`${this.apiEndpoint}/${t}`;if(o){r+=`?${new URLSearchParams(o).toString()}`}const i=await fetch(r,n);if(!i.ok){console.log("API request failed:",i);try{let e=await i.json();throw console.log("API request failed:",e),new Error(`${e.error}`)}catch(e){throw console.log("error",e),new Error(e)}throw new Error(`API request failed: ${json.error}`)}return i.json()}async create(e,t){return console.log("calling create",`${this.resourceName}`,t),this.apiRequest("POST",`${this.resourceName}`,t)}async get(e,t){return this.apiRequest("GET",`${this.resourceName}/${e}/${t}`)}async update(e,t){return console.log(`calling update ${this.resourceName}/${e}`,t),this.apiRequest("PUT",`${this.resourceName}/${e}`,t)}async remove(e){return this.apiRequest("DELETE",`${this.resourceName}/${e}`)}async list(){return console.log("calling list",`${this.resourceName}`),this.apiRequest("GET",`${this.resourceName}`)}async all(){return this.apiRequest("GET",this.resourceName)}async search(e,t,s={}){return this.apiRequest("POST",`${this.resourceName}/search`,t,s)}}class o{constructor(e){this.resourceName=e,this.dbName="BuddyPondResourceDB",this.version=1,this.db=null,this.init()}async init(){return new Promise(((e,t)=>{const s=indexedDB.open(this.dbName,this.version);s.onupgradeneeded=e=>{let t=e.target.result;t.objectStoreNames.contains(this.resourceName)||t.createObjectStore(this.resourceName,{keyPath:"id"})},s.onsuccess=t=>{this.db=t.target.result,e()},s.onerror=e=>{t(`IndexedDB Error: ${e.target.errorCode}`)}}))}async _withStore(e,t){return this.db||await this.init(),new Promise(((s,o)=>{const n=this.db.transaction(this.resourceName,e).objectStore(this.resourceName),r=t(n);r.onsuccess=()=>s(r.result),r.onerror=()=>o(r.error)}))}async create(e,t,s){const o={id:Math.random().toString(36).substring(2,10),owner:e};return Object.keys(s).forEach((e=>{o[e]=t[e]||null})),await this._withStore("readwrite",(e=>e.add(o))),o}async get(e,t){const s=await this._withStore("readonly",(e=>e.get(t)));return s&&s.owner===e?s:null}async update(e,t,s,o){const n=await this.get(e,t);if(!n)throw new Error(`${this.resourceName} not found or unauthorized`);return Object.keys(o).forEach((e=>{void 0!==s[e]&&(n[e]=s[e])})),await this._withStore("readwrite",(e=>e.put(n))),n}async remove(e,t){if(!await this.get(e,t))throw new Error(`${this.resourceName} not found or unauthorized`);return await this._withStore("readwrite",(e=>e.delete(t))),{success:!0}}async list(e){return new Promise(((t,s)=>{this._withStore("readonly",(o=>{const n=o.getAll();n.onsuccess=()=>{t(n.result.filter((t=>t.owner===e)))},n.onerror=()=>s(n.error)}))}))}async all(){return new Promise(((e,t)=>{this._withStore("readonly",(s=>{const o=s.getAll();o.onsuccess=()=>e(o.result),o.onerror=()=>t(o.error)}))}))}}const n={};class r{constructor(e,t){if(this.name=e,this.schema=t.schema||{},this.providerType=t.provider||"memory",0===Object.keys(this.schema).length)throw new Error(`Schema definition is required for resource: ${e}`);n[this.name]=this.schema,this.provider=this._createProvider(this.providerType,t),this.provider.bp=t.bp}_createProvider(e,n){switch(e){case"rest":return new s(this.name,n);case"indexeddb":return new o(this.name,n);default:return new t(this.name)}}create(e,t){return this.provider.create(e,t,this.schema)}get(e,t){return this.provider.get(e,t)}update(e,t,s){return this.provider.update(e,t,s,this.schema)}remove(e,t){return this.provider.remove(e,t)}list(e){return this.provider.list(e)}search(e,t,s){return this.provider.search(e,t,s)}all(){return this.provider.all()}async apiRequest(e,t,s=null){return this.provider.apiRequest(e,t,s)}}async function i(e){let t=(await this.resource.list()).results;console.log("All Coins:",t),a.call(this,e,t),c.call(this,e,t);let s=$(".coin-names");s.html(""),t.forEach((e=>{e.symbol!==this.context?s.append(`<option value="${e.symbol}">${e.name}</option>`):s.append(`<option value="${e.symbol}" selected>${e.name}</option>`)})),$(".loading-coins",e.content).hide()}function a(e,t){let s=t.filter((e=>e.owner===this.bp.me));if(0===s.length)return $(".user-coin-table",e.content).hide(),void $(".no-coins",e.content).show();$(".user-coin-table",e.content).show(),$(".no-coins",e.content).hide();let o=$(".user-coin-list",e.content);o.html(""),s.forEach((t=>{let s=l.call(this,t,!1,!0,e);o.append(s)}))}function c(e,t){let s=$(".all-coin-list",e.content);s.html(""),t.forEach((t=>{if("listed"!==t.status)return;let o=l.call(this,t,!0,!1,e);s.append(o)}))}function l(e,t=!1,s=!1,o){const n=e.supply.toLocaleString("en-US");let r="listed"===e.status?"Delist":"List",a=$(`\n        <tr>\n            <td>${e.symbol}</td>\n            <td>${e.name}</td>\n            <td>${n}</td>\n            ${t?`<td>${e.owner}</td>`:""}\n            ${s?`<td>\n                <button class="listDelistCoin" title="${r} your coin on the BuddyCoin Market">${r} Coin</button>\n                <button class="removeCoin">Destroy</button>\n            </td>`:""}\n        </tr>\n    `);return"listed"===e.status&&(a.find(".removeCoin").prop("disabled",!0),a.find(".removeCoin").addClass("disabled")),a.on("click",(async t=>{if($(t.target).hasClass("listDelistCoin")){if("listed"===e.status){let t=await this.resource.update(e.id,{status:"private"});return console.log("set private updatedResponse",t),i.call(this,o),!1}if("private"===e.status){let t=await this.resource.update(e.id,{status:"listed"});return console.log("set listed updatedResponse",t),i.call(this,o),!1}return!1}if($(t.target).hasClass("removeCoin"))return await this.resource.remove(e.symbol),i.call(this,o),!1;e.symbol,e.status})),a}let u=class{constructor(e={}){this.name=e.name||"Good Buddy Points",this.symbol=e.symbol||"GBP",this.owner=e.owner||"Randolph",this.supply=e.supply||1/0,this.resource=e.resource,this.me=e.me,this.stubBalances={Bob:{GBP:0}},this.apiClientStub={balanceOf:(e,t)=>(console.log("API Call: balanceOf",e,t,this.stubBalances[t][e]),console.log("stubBalances",this.stubBalances),this.stubBalances[t][e]),mint:(e,t,s={})=>{if(this.stubBalances[s.owner]||(this.stubBalances[s.owner]={}),console.log("check to see if the minted amount is greater than the supply",this.supply,t),this.supply<t)throw new Error("Cannot mint more than the supply.");this.stubBalances[s.owner][e]=(this.stubBalances[s.owner][e]||0)+t,console.log("API Call: mint",e,t,s)},burn:(e,t,s,o={})=>{if(this.stubBalances[s][e]<t)throw new Error("Not enough balance to burn.");this.stubBalances[s][e]-=t,console.log("API Call: burn",e,t,s,o)},send:(e,t,s,o,n={})=>{if(console.log("apiClientStub.send",e,t,s,n,this.stubBalances[o][e]),this.stubBalances[o][e]<t)throw new Error("Not enough balance.");this.stubBalances[o][e]-=t,this.stubBalances[s]=this.stubBalances[s]||{},this.stubBalances[s][e]=(this.stubBalances[s][e]||0)+t,console.log("API Call: send",e,t,s,n)},receive:(e,t,s,o={})=>{this.stubBalances[s]=this.stubBalances[s]||{},this.stubBalances[s][e]=(this.stubBalances[s][e]||0)+t,console.log("API Call: receive",e,t,s,o)},setSupply:(e,t,s)=>{console.log("API Call: setSupply",e,t,s)},getSupply:e=>(console.log("API Call: getSupply",e,this.supply),this.supply)}}getSupply(){return this.apiClientStub.getSupply(this.symbol)}setSupply(e,t){if(t!==this.owner)throw new Error("Only the owner can set the supply.");this.supply=e,this.apiClientStub.setSupply(this.symbol,e,t)}send(e,t,s){return this.apiClientStub.send(this.symbol,e,t,s,{owner:this.owner})}receive(e,t,s){return this.apiClientStub.receive(this.symbol,e,t,s,{owner:this.owner})}mint(e){return this.apiClientStub.mint(this.symbol,e,{owner:this.owner})}burn(e,t){return this.apiClientStub.burn(this.symbol,e,t,{owner:this.owner})}balanceOf(e){return this.apiClientStub.balanceOf(this.symbol,e)}};u.prototype.mintCoin=async function(e,t){console.log("mintCoin",t);try{let e=await this.resource.create(t.symbol,{name:t.name,symbol:t.symbol,owner:t.owner,supply:t.supply,price:t.price});return console.log("mintCoin response",e),$(".coin-error").text(""),$(".coin-success").text("Coin minted successfully "+JSON.stringify(e)),e}catch(e){console.error("Error minting coin:",e),$(".coin-error").text(e.message)}},u.prototype.sendCoin=async function(e,t){console.log("sendCoin",t);try{let e=await this.resource.apiRequest("POST",`portfolio/${t.from}/transfer`,t);return console.log("transfering coins",t,e),$(".coin-error").text(""),$("#coin-send-name").trigger("change"),$(".coin-send-message").html(`Sent ${t.amount} ${t.symbol} to ${t.to}!`),e}catch(e){console.error("Error sending coin:",e),$(".coin-error").text(e.message)}$(".coin-send-message").text("Sent coin to buddy!")};class h{constructor(e,t={}){return this.bp=e,this}async init(){this.html=await this.bp.load("/v5/apps/based/coin/coin.html"),this.css=await this.bp.load("/v5/apps/based/coin/coin.css"),this.coinWindows=[],this.resource=new r("coin",{provider:"rest",apiEndpoint:this.bp.config.coinEndpoint||"/",schema:{name:{type:"string",required:!0},symbol:{type:"string",unique:!0,required:!0},owner:{type:"string",required:!0},supply:{type:"number",required:!0}},bp:this.bp}),this.coin=new u({resource:this.resource,me:this.bp.me}),this.portfolio=new s("portfolio",{apiEndpoint:buddypond.portfolioEndpoint||"/",bp:this.bp})}async render(){return this.html}async open(e={}){let t=e.context;"default"===t&&(t="GBP");let s=e.type||"";this.context=t,this.type=s;let o="coin";if(this.coinWindows[o])this.coinWindows[o].focus();else{let e=this.coinWindows[o]=this.bp.apps.ui.windowManager.createWindow({id:o,title:"Buddy Coins",icon:"desktop/assets/images/icons/icon_coin_64.png",x:250,y:75,width:800,height:600,minWidth:200,minHeight:200,type:"coin",parent:$("#desktop")[0],className:"coin-window-content",resizable:!0,minimizable:!0,maximizable:!0,closable:!0,focusable:!0,maximized:!1,minimized:!1,onClose:()=>{this.coinWindows[o]=null}});await this.render(e),this.eventBind(e),s&&this.tabs.navigateToTab("#coin-"+s),"Marak"!==this.bp.me&&($("#mint-coin").attr("disabled","disabled"),$("#mint-coin").addClass("disabled"),$("#mint-coin").attr("title","You do not have permission to Mint new coins!"))}}}h.prototype.eventBind=function(e){async function t(){let t=$("#coin-leaderboard-symbol",e.content).val(),s=await this.portfolio.apiRequest("POST","portfolio/top",{symbol:t}),o=$(".leaderboard-list",e.content);o.empty(),s.results.forEach(((e,t)=>{let s=e.total_amount*e.price;s=s.toLocaleString("en-US",{style:"currency",currency:"USD"}),e.total_amount=e.total_amount.toLocaleString("en-US",{minimumFractionDigits:0,maximumFractionDigits:0}),o.append(`\n                    <tr>\n                        <td>${t+1}</td>\n                        <td>${e.owner}</td>\n                        <td>${e.symbol}</td>\n                        <td>${e.total_amount}</td>\n                        <td>${s}</td>\n                    </tr>\n                `)})),$(".loading-leaderboard",e.content).hide()}console.log("this.coinWindow.content",e.content),this.tabs=new this.bp.apps.ui.Tabs(".tabs-container",e.content),this.tabs.onTab((async e=>{$(".coin-error").text(""),console.log("tabId",e),"#coin-leaderboard"===e&&await t.call(this)})),$("#coin-leaderboard-symbol",e.content).change((async()=>{$(".loading-leaderboard",e.content).show(),await t.call(this)})),$(".mint-coin",e.content).click((async()=>{let t=document.querySelector("#coin-name").value.trim(),s=document.querySelector("#coin-symbol").value.trim(),o=parseInt(document.querySelector("#coin-supply").value,10),n=parseFloat(document.querySelector("#coin-price").value);!t||!s||isNaN(o)||o<=0?alert("Please enter valid coin details."):this.coin.mintCoin(e.content,{name:t,owner:this.bp.me,symbol:s,supply:o,price:n})})),$(".send-coin",e.content).click((async()=>{let t=$("#coin-send-to").val(),s=$("#coin-send-name").val(),o=$("#coin-send-amount").val();this.portfolio.transfer(e.content,{from:this.bp.me,to:t,symbol:s,amount:o})})),$("#coin-send-name",e.content).change((async()=>{let t=$("#coin-send-name").val(),s=$("#coin-balance",e.content);await this.bp.load("portfolio");const o=await this.bp.apps.portfolio.resource.search(this.bp.me,{owner:this.bp.me});console.log("assetsassetsassets",t,o.results);let n=o.results;$("#coin-send-name",e.content).empty(),n.forEach((o=>{console.log(`asset.symbol: ${o.symbol} === currentCoin: ${t}`,o),$("#coin-send-name",e.content).append(`<option value="${o.symbol}">${o.symbol}</option>`),o.symbol===t&&(s.text(o.amount),$("#coin-send-name",e.content).val(o.symbol))}))})),$("#coin-send-name",e.content).change()},h.prototype.updateCoinList=i,h.prototype.render=async function(e){$(e.content).html(this.html),await this.updateCoinList(e),$("#coin-send-name",e.content).val(this.context)},h.prototype.createInitialCoins=async function(){try{await this.resource.create("BUX",{name:"BuddyBux",symbol:"BUX",supply:1e7,status:"listed",owner:"Marak"})}catch(e){console.error(e),$(".coin-error").text(e.message)}try{await this.resource.create("MEGA",{name:"Megabytes",symbol:"MEGA",supply:1e9,status:"listed",price:.01,owner:"Marak"})}catch(e){console.error(e),$(".coin-error").text(e.message)}try{await this.resource.create("GBP",{name:"Good Buddy Points",symbol:"GBP",supply:1e10,status:"listed",price:.001,owner:"Marak"})}catch(e){console.error(e),$(".coin-error").text(e.message)}};export{h as default};
//# sourceMappingURL=coin.js.map
