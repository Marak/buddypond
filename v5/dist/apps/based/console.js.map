{"version":3,"file":"console.js","sources":["../../../apps/based/console/console.js"],"sourcesContent":["export default class Console {\n    constructor(bp, options = {}) {\n        this.bp = bp;\n        return this;\n    }\n\n    async init() {\n        this.bp.log('Hello from Console');\n\n\n        // await this.bp.load('buddyscript');\n\n        // we can load modules or html fragments or css files here\n        // using this.bp.load() method\n\n        // injects CSS link tag into the head of document\n        await this.bp.load('/v5/apps/based/console/console.css');\n\n        // fetches html from the fragment and returns it as a string\n        this.html = await this.bp.load('/v5/apps/based/console/console.html');\n\n\n        \n        $(document).on('keydown', (e) => {\n\n            // if key is 192 and shift is pressed, open the console\n            if (event.which == 192 && event.shiftKey) {\n                this.open();\n                return false;\n              }\n          \n\n        })\n\n        return 'loaded Console';\n    }\n\n    async open () {\n\n\n        let consoleWindow = this.bp.apps.ui.windowManager.createWindow({\n            id: 'console',\n            title: 'Console',\n            x: 50,\n            y: 100,\n            width: 800,\n            height: 400,\n            minWidth: 200,\n            minHeight: 200,\n            parent: $('#desktop')[0],\n            content: this.html,\n            resizable: true,\n            minimizable: true,\n            maximizable: true,\n            closable: true,\n            focusable: true,\n            maximized: false,\n            minimized: false,\n            onOpen : () => {\n                // set focus to the input\n                $('.console_message_text', this.content).focus();\n            }\n        });\n\n        this.consoleWindow = consoleWindow;\n\n        // add a \"/\" to each command for consistency\n        let sourceCommands = Object.keys(this.bp.apps.buddyscript.commands).map((command) => {\n            return '/' + command;\n        });\n\n\n        $('.console_message_text', consoleWindow.content).autocomplete({\n            source: sourceCommands\n        }); \n\n        $('.console_send_message_form', consoleWindow.content).on('submit', (e) => {\n            e.preventDefault();\n            //this.bp.apps.buddyscript.parseCommand(val);\n            return false;\n        });\n\n        // on enter key or clicking .consoleMessageSubmit, send the message\n        $('.consoleMessageSubmit', consoleWindow.content).on('click', () => {\n            let val = $('.console_message_text', consoleWindow.content).val();\n            this.bp.apps.buddyscript.parseCommand(val);\n            this.log(val);\n            // empty the input\n            $('.console_message_text', consoleWindow.content).val('');\n            e.preventDefault();\n            return false;\n        });\n\n        $('.console_message_text', consoleWindow.content).on('keypress', (e) => {\n            if (e.which === 13) {\n                let val = $('.console_message_text', consoleWindow.content).val();\n                this.bp.apps.buddyscript.parseCommand(val);\n                $('.console_message_text', consoleWindow.content).val('');\n                this.log(val);\n                e.preventDefault();\n                return false;\n\n            }\n        });\n\n    }\n\n    log (val) {\n        let consoleItems = $('.console li').length;\n        if (consoleItems > 10) {\n          $('.console li').get(0).remove();\n        }\n        let output = val;\n        let now = new Date();\n        let dateString = DateFormat.format.date(new Date(), 'HH:mm:ss');\n        $('.console').append('<li>' + dateString + ': ' + output + '</li>');\n        \n    }\n}\n\n\n"],"names":["Console","constructor","bp","options","this","init","log","load","html","$","document","on","e","event","which","shiftKey","open","consoleWindow","apps","ui","windowManager","createWindow","id","title","x","y","width","height","minWidth","minHeight","parent","content","resizable","minimizable","maximizable","closable","focusable","maximized","minimized","onOpen","focus","sourceCommands","Object","keys","buddyscript","commands","map","command","autocomplete","source","preventDefault","val","parseCommand","length","get","remove","output","dateString","DateFormat","format","date","Date","append"],"mappings":"AAAe,MAAMA,EACjB,WAAAC,CAAYC,EAAIC,EAAU,IAEtB,OADAC,KAAKF,GAAKA,EACHE,IACf,CAEI,UAAMC,GA4BF,OA3BAD,KAAKF,GAAGI,IAAI,4BASNF,KAAKF,GAAGK,KAAK,sCAGnBH,KAAKI,WAAaJ,KAAKF,GAAGK,KAAK,uCAI/BE,EAAEC,UAAUC,GAAG,WAAYC,IAGvB,GAAmB,KAAfC,MAAMC,OAAgBD,MAAME,SAE5B,OADAX,KAAKY,QACE,KAMR,gBACf,CAEI,UAAMA,GAGF,IAAIC,EAAgBb,KAAKF,GAAGgB,KAAKC,GAAGC,cAAcC,aAAa,CAC3DC,GAAI,UACJC,MAAO,UACPC,EAAG,GACHC,EAAG,IACHC,MAAO,IACPC,OAAQ,IACRC,SAAU,IACVC,UAAW,IACXC,OAAQrB,EAAE,YAAY,GACtBsB,QAAS3B,KAAKI,KACdwB,WAAW,EACXC,aAAa,EACbC,aAAa,EACbC,UAAU,EACVC,WAAW,EACXC,WAAW,EACXC,WAAW,EACXC,OAAS,KAEL9B,EAAE,wBAAyBL,KAAK2B,SAASS,WAIjDpC,KAAKa,cAAgBA,EAGrB,IAAIwB,EAAiBC,OAAOC,KAAKvC,KAAKF,GAAGgB,KAAK0B,YAAYC,UAAUC,KAAKC,GAC9D,IAAMA,IAIjBtC,EAAE,wBAAyBQ,EAAcc,SAASiB,aAAa,CAC3DC,OAAQR,IAGZhC,EAAE,6BAA8BQ,EAAcc,SAASpB,GAAG,UAAWC,IACjEA,EAAEsC,kBAEK,KAIXzC,EAAE,wBAAyBQ,EAAcc,SAASpB,GAAG,SAAS,KAC1D,IAAIwC,EAAM1C,EAAE,wBAAyBQ,EAAcc,SAASoB,MAM5D,OALA/C,KAAKF,GAAGgB,KAAK0B,YAAYQ,aAAaD,GACtC/C,KAAKE,IAAI6C,GAET1C,EAAE,wBAAyBQ,EAAcc,SAASoB,IAAI,IACtDvC,EAAEsC,kBACK,KAGXzC,EAAE,wBAAyBQ,EAAcc,SAASpB,GAAG,YAAaC,IAC9D,GAAgB,KAAZA,EAAEE,MAAc,CAChB,IAAIqC,EAAM1C,EAAE,wBAAyBQ,EAAcc,SAASoB,MAK5D,OAJA/C,KAAKF,GAAGgB,KAAK0B,YAAYQ,aAAaD,GACtC1C,EAAE,wBAAyBQ,EAAcc,SAASoB,IAAI,IACtD/C,KAAKE,IAAI6C,GACTvC,EAAEsC,kBACK,CAEvB,IAGA,CAEI,GAAA5C,CAAK6C,GACkB1C,EAAE,eAAe4C,OACjB,IACjB5C,EAAE,eAAe6C,IAAI,GAAGC,SAE1B,IAAIC,EAASL,EAETM,EAAaC,WAAWC,OAAOC,KAAK,IAAIC,KAAQ,YACpDpD,EAAE,YAAYqD,OAAO,OAASL,EAAa,KAAOD,EAAS,QAEnE"}