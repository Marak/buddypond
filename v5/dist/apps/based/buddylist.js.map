{"version":3,"file":"buddylist.js","sources":["../../../apps/based/buddylist/lib/renderOrUpdateBuddyInBuddyList.js","../../../apps/based/buddylist/lib/message/createChatMessageElement.js","../../../apps/based/buddylist/lib/message/checkForLinksInMessage.js","../../../apps/based/buddylist/lib/message/isValidUrl.js","../../../apps/based/buddylist/lib/message/isValidYoutubeLink.js","../../../apps/based/buddylist/lib/message/isValidGithubLink.js","../../../apps/based/buddylist/lib/forbiddenNotes.js","../../../apps/based/buddylist/lib/message/setupInputEvents.js","../../../apps/based/buddylist/lib/message/setupAutocomplete.js","../../../apps/based/buddylist/lib/ChatWindowButtonBar.js","../../../apps/based/buddylist/lib/message/setupChatWindowButtons.js","../../../apps/based/buddylist/lib/message/scrollToBottom.js","../../../apps/based/buddylist/lib/message/populateRoomList.js","../../../apps/based/buddylist/lib/openChatWindow.js","../../../apps/based/buddylist/lib/defaultProfileFiles.js","../../../apps/based/buddylist/lib/generateDefaultProfile.js","../../../apps/based/buddylist/lib/message/bindMessageContextMenu.js","../../../apps/based/buddylist/lib/ws/Client.js","../../../apps/based/buddylist/buddylist.js","../../../apps/based/buddylist/lib/ws/createWebSocketClient.js","../../../apps/based/buddylist/lib/defaultChatWindowButtons.js","../../../apps/based/buddylist/lib/message/renderGeoFlag.js","../../../apps/based/buddylist/lib/message/parseMarkdownWithoutPTags.js","../../../apps/based/buddylist/lib/message/renderChatMessage.js","../../../apps/based/buddylist/lib/renderBuddyRequests.js","../../../apps/based/buddylist/lib/processProfile.js","../../../apps/based/buddylist/lib/buddylistUIEvents.js","../../../apps/based/buddylist/lib/requestDefaultCoinAllocations.js","../../../apps/based/buddylist/lib/sortBuddyList.js","../../../apps/based/buddylist/lib/showContextMenu.js","../../../apps/based/buddylist/lib/message/createMessageContextMenu.js","../../../apps/based/buddylist/lib/loadUserApps.js","../../../apps/based/buddylist/lib/message/sendMessageHandler.js","../../../apps/based/buddylist/lib/message/showCard.js","../../../apps/based/buddylist/lib/buddy/defaultAvatarSvg.js"],"sourcesContent":["// Timeout is for legacy API before websocket connections\n// We should now have a reliable way to track buddy status via websocket disconnect events\n// 15 minute hard-code timeout ( if setStatus() was missed )\nlet buddyTimeoutsInterval = 1000 * 60 * 60 * 5; // 5 hours, shoudn't be needed unless unknown error on server\n\nexport default function renderOrUpdateBuddyInBuddyList(data) {\n  let bp = this.bp;\n  let buddyname = data.name;\n  let buddydata = data.profile;\n\n  this.bp.buddyTimeouts = this.bp.buddyTimeouts || {};\n\n  // console.log('renderOrUpdateBuddyInBuddyList', buddyname, buddydata);\n\n  // Track previous connection status to detect changes\n  let buddyListItems = document.querySelectorAll('.buddylist li');\n  let existingBuddy = Array.from(buddyListItems).find(el => el.dataset.buddy === buddyname);\n  let wasConnected = existingBuddy ? existingBuddy.querySelector('.buddy-status').textContent.includes('🟢') : false;\n\n  // Handle status update only if status field is present\n  if (buddydata.hasOwnProperty('status')) {\n    if (buddydata.status === 'online') {\n      buddydata.isConnected = true;\n    } else {\n      buddydata.isConnected = false;\n    }\n\n    // console.log('isConnected', buddydata.isConnected, buddyname, buddydata.status);\n\n    // Clear the timeout if it exists\n    if (this.bp.buddyTimeouts[buddyname]) {\n      clearTimeout(this.bp.buddyTimeouts[buddyname]);\n      delete this.bp.buddyTimeouts[buddyname];\n    }\n\n    // Remark: Added 5/18/2025: Adds check if user hasn't been online for a while ( this is needed for legacy API )\n    // This may still stay in as CF worker could miss disconnect events\n    // TODO: consider re-implementing a keepAlive ping each 30 minutes\n    let now = new Date().getTime();\n    //console.log('BuddyList: buddydata.utime', buddyname, buddydata.utime, 'now', now);\n    let diff = now - buddydata.utime;\n    //console.log('BuddyList: diff', buddyname, buddydata.utime, diff, buddyTimeoutsInterval);  \n    // console.log('buddydata.utime', buddydata.utime, 'now', now, 'diff', diff);\n    // console.log('BuddyList: diff', buddyname, buddydata.utime, diff, buddyTimeoutsInterval);\n    // If buddy hasn't been online for a while, set them to offline\n    if (buddydata.isConnected && diff > buddyTimeoutsInterval) {\n      // console.log('Setting offline due to timeout', buddyname, buddydata.utime, diff);\n      // TODO: add this back in?\n      buddydata.isConnected = false;\n    }\n\n    /*\n    Remark: Removed 5/17/2025, no longer depending on utime / keepAlives\n    let now = new Date().getTime();\n    let diff = now - buddydata.utime;\n    if (now - buddydata.utime > buddyTimeoutsInterval) {\n      // console.log('Setting offline due to timeout', buddyname, buddydata.utime, diff);\n      buddydata.isConnected = false;\n    }\n    */\n    // Remark: Removed 5/17/2025, no longer depending on utime / keepAlives\n    // We may need to add this back in the future for cases when CF worker abruptly disconnects\n    // This would rely on a ping mechanism to keep the connection alive and update the utime\n    // Set a timeout to mark buddy as offline if they are currently connected\n    /*\n    if (buddydata.isConnected) {\n      this.bp.buddyTimeouts[buddyname] = setTimeout(() => {\n        let _data = {\n          name: buddyname,\n          profile: {\n            buddyname: buddyname,\n            isConnected: false,\n            status: 'offline',\n            utime: new Date().getTime(),\n            dtime: new Date().getTime(),\n            newMessages: false\n          }\n        };\n        renderOrUpdateBuddyInBuddyList.call(this, _data, false);\n      }, buddyTimeoutsInterval * 1.5);\n    }\n    */\n\n    // Play sound based on status change\n    // Don't play sound if buddy is me\n    if (buddyname !== this.bp.me) {\n      if (buddydata.isConnected && !wasConnected) {\n        // compare now time with buddydata.utime\n        // if less than 5 seconds, don't play sound\n        let now = new Date().getTime();\n        let diff = now - buddydata.utime;\n        if (diff > 300) {\n          bp.play('desktop/assets/audio/BUDDY-IN.mp3'); // Buddy comes online\n        }\n      } else if (!buddydata.isConnected && wasConnected) {\n        // Remark: Removed the signout sound as it was too loud / jarring\n        // bp.play('desktop/assets/audio/BUDDY-OUT.wav'); // Buddy goes offline\n      }\n    }\n  }\n\n  // Use existing isConnected if available, otherwise derive from DOM state\n  let isConnected = buddydata.hasOwnProperty('isConnected') ? buddydata.isConnected : wasConnected;\n  // console.log(buddydata);\n  if (buddydata.newMessages && buddydata.newMessages) {\n    isConnected = true;\n    this.bp.apps.buddylist.openChatWindow({ context: buddyname, type: 'buddy' });\n  }\n\n  let connectedStatusIcon = isConnected ? '🟢' : '🟠';\n  let isCalling = buddydata.isCalling ? '<span>📞</span>' : '';\n  let newMessages = buddydata.newMessages ? '<span>💬</span>' : '';\n\n  let lastSeen = buddydata.utime ? buddydata.utime : 0;\n  let lastSeenDate = new Date(lastSeen);\n  let lastSeenString = '';\n\n  try {\n    lastSeenString = 'Last seen: ' + lastSeenDate.toLocaleString('en-US', {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: true\n    });\n  } catch (err) {\n    console.log('Error formatting last seen date', err);\n  }\n\n  // Update or create buddy list item\n  let buddyListItemEl;\n  if (existingBuddy) {\n    // Update existing element to prevent flicker\n    buddyListItemEl = existingBuddy;\n    buddyListItemEl.dataset.utime = buddydata.utime;\n    buddyListItemEl.title = lastSeenString;\n    buddyListItemEl.querySelector('.buddy-status').innerHTML = `${newMessages}${connectedStatusIcon}${isCalling}`;\n    buddyListItemEl.querySelector('.message-buddy').textContent = buddyname;\n    buddyListItemEl.style.display = buddydata.status === 'hidden' ? 'none' : '';\n  } else {\n    // Create new element if buddy doesn't exist\n    let buddyListItem = `<li data-buddy=\"${buddyname}\" data-utime=\"${buddydata.utime}\" class=\"buddy-message-sender\" title=\"${lastSeenString}\">\n                          <span class=\"buddy-status\">${newMessages}${connectedStatusIcon}${isCalling}</span> \n                          <a data-buddy=\"${buddyname}\" class=\"message-buddy\" href=\"#\" draggable=\"false\">${buddyname}</a>\n                        </li>`;\n    buddyListItemEl = document.createElement('div');\n    buddyListItemEl.innerHTML = buddyListItem;\n    buddyListItemEl = buddyListItemEl.firstChild;\n\n    if (buddydata.status === 'hidden') {\n      buddyListItemEl.style.display = 'none';\n    }\n  }\n\n  if (buddydata.utime) {\n    let formattedDate = DateFormat.format.date(buddydata.utime, 'E MMMM dd, hh:mm:ss a');\n    $(buddyListItemEl).find('.buddy-status').attr('title', formattedDate);\n  }\n\n  // Append new buddy or ensure existing one is in the list\n  if (!existingBuddy) {\n    $('.buddylist').append(buddyListItemEl);\n  }\n\n  // Re-sort the entire buddy list\n  this.sortBuddyList();\n\n  // Add context menu functionality\n  attachContextMenu.call(this, buddyListItemEl);\n}\n\nfunction attachContextMenu(buddyElement) {\n  $(buddyElement).on('contextmenu', (e) => {\n    e.preventDefault();\n    let buddyName = e.target.closest('li').dataset.buddy;\n    this.showContextMenu(e.pageX, e.pageY, buddyName);\n  });\n}","import renderGeoFlag from './renderGeoFlag.js';\nimport parseMarkdownWithoutPTags from './parseMarkdownWithoutPTags.js';\n\n// Configuration\nconst config = {\n  useMarkdown: true,\n  allowHTML: true,\n};\n\n// New function to create hover menu\n// TODO: remove buttons, just use icons\n// TODO: update bindMessageContextMenu() method to bind to the icons instead of buttons\nfunction createHoverMenu(message) {\n  const hoverMenu = document.createElement('div');\n  hoverMenu.className = \n  'aim-hover-menu';\n\n  const menuItems = [];\n\n  if (message.from === this.bp.me || this.bp.me === 'Marak') { // TODO: admin rbac\n    menuItems.push({ text: 'Edit Message', action: 'edit-message',  icon: 'fa-duotone fa-regular fa-pencil' });\n  }\n\n  menuItems.push({ text: 'Reply Message', action: 'reply-message', icon: 'fa-duotone fa-regular fa-reply' });\n  menuItems.push({ text: '...', action: 'more-options', icon: 'fa-solid fa-regular fa-ellipsis' });\n\n\n  menuItems.forEach(item => {\n    const button = document.createElement('button');\n    button.setAttribute('data-action', item.action);\n    button.className = 'aim-hover-menu-item';\n\n    if (item.icon) {\n      const icon = document.createElement('i');\n      icon.className = item.icon;\n      button.appendChild(icon);\n      button.appendChild(document.createTextNode(' ')); // Add space between icon and text\n    } else {\n      button.appendChild(document.createTextNode(item.text));\n    }\n    // set title hint with item.text  \n    button.setAttribute('title', item.text);\n    hoverMenu.appendChild(button);\n  });\n\n  return hoverMenu;\n}\n\nexport default function createChatMessageElement(message, messageTime, chatWindow, container) {\n  // Create main message container\n  const chatMessage = document.createElement('div');\n  chatMessage.className = 'aim-chat-message';\n  chatMessage.setAttribute('data-id', message.id);\n  chatMessage.setAttribute('data-from', message.from);\n  chatMessage.setAttribute('data-to', message.to);\n  chatMessage.setAttribute('data-type', message.type);\n  chatMessage.setAttribute('data-uuid', message.uuid);\n  chatMessage.setAttribute('data-chat-id', message.chatId);\n\n  // Profile picture (SVG)\n  const profilePicture = document.createElement('div');\n  profilePicture.className = 'aim-profile-picture';\n\n  if (!message.profilePicture) {\n    // check if we happen to have a profilePicture in local cache\n    // this may happen if Randolph or other admin is sending messages on behalf of a user\n    // TODO: better way to do this...\n    if (\n      this.bp.apps.buddylist.data.profileState &&\n      this.bp.apps.buddylist.data.profileState.buddylist &&\n      this.bp.apps.buddylist.data.profileState.buddylist[message.from] && \n      this.bp.apps.buddylist.data.profileState.buddylist[message.from].profile_picture) {\n      message.profilePicture = this.bp.apps.buddylist.data.profileState.buddylist[message.from].profile_picture;\n    }\n\n  }\n\n  if (message.profilePicture) {\n    // use url as profile picture src\n    const img = document.createElement('img');\n    img.src = message.profilePicture;\n    img.alt = `${message.from}'s avatar`;\n    img.className = 'aim-chat-message-profile-picture-img';\n    profilePicture.appendChild(img);\n  } else {\n    const defaultAvatar = this.defaultAvatarSvg(message.from);\n    profilePicture.innerHTML = defaultAvatar;\n  }\n\n  // console.log('profilePicture', profilePicture);\n  profilePicture.alt = `${message.from}'s avatar`;\n\n  // Message content wrapper\n  const contentWrapper = document.createElement('div');\n  contentWrapper.className = 'aim-content-wrapper';\n\n  // Message header (sender + timestamp)\n  const messageHeader = document.createElement('div');\n  messageHeader.className = 'aim-message-header';\n\n  const sender = document.createElement('span');\n  sender.className = 'aim-sender';\n  sender.textContent = message.from === 'anonymous'\n    ? `Anonymous (${message.tripcode || 'tr1pc0d3'})`\n    : message.from;\n\n  const timestamp = document.createElement('span');\n  timestamp.className = 'aim-timestamp';\n  timestamp.textContent = messageTime;\n\n  // Message meta (geoflag + badges placeholder)\n  const messageMeta = document.createElement('div');\n  messageMeta.className = 'aim-message-meta';\n\n  const geoFlag = renderGeoFlag(message);\n  const badgesContainer = document.createElement('span');\n  badgesContainer.className = 'aim-badges';\n\n  messageMeta.appendChild(geoFlag);\n  messageMeta.appendChild(badgesContainer);\n\n  messageHeader.appendChild(sender);\n  messageHeader.appendChild(messageMeta);\n  messageHeader.appendChild(timestamp);\n\n  // Reply indicator (if message is a reply)\n  let replyIndicator = null;\n  if (message.replyto) {\n    const repliedMessage = chatWindow.content.querySelector(\n      `.aim-chat-message[data-uuid=\"${message.replyto}\"]`\n    );\n    if (repliedMessage) {\n      const repliedSender = repliedMessage.querySelector('.aim-sender')?.textContent || 'Unknown';\n      const repliedText = repliedMessage.querySelector('.aim-message-content')?.innerText || '';\n\n      replyIndicator = document.createElement('div');\n      replyIndicator.className = 'aim-reply-indicator';\n      replyIndicator.innerHTML = `\n        <span class=\"aim-reply-sender\">${repliedSender}</span>\n        <span class=\"aim-reply-content\">${repliedText}</span>\n      `;\n\n      // Add click handler to scroll to the replied message\n      const replySender = replyIndicator.querySelector('.aim-reply-sender');\n      replySender.addEventListener('click', () => {\n        repliedMessage.scrollIntoView({ behavior: 'smooth', block: 'center' });\n        repliedMessage.classList.add('aim-highlight');\n        setTimeout(() => repliedMessage.classList.remove('aim-highlight'), 2000);\n      });\n    }\n  }\n\n  // Message content\n  const messageContent = document.createElement('div');\n  messageContent.className = 'aim-message-content';\n\n  const processedText = config.useMarkdown\n    ? parseMarkdownWithoutPTags(message.text)\n    : message.text;\n\n  if (config.allowHTML) {\n    messageContent.innerHTML = processedText;\n  } else {\n    messageContent.textContent = processedText;\n  }\n\n  // Hover menu\n  const hoverMenu = createHoverMenu.call(this, message)\n\n  // Assemble message\n  contentWrapper.appendChild(messageHeader);\n  if (replyIndicator) {\n    contentWrapper.appendChild(replyIndicator);\n  }\n  contentWrapper.appendChild(messageContent);\n  contentWrapper.appendChild(hoverMenu);\n\n  chatMessage.appendChild(profilePicture);\n  chatMessage.appendChild(contentWrapper);\n\n  if (container) { // card container?\n    contentWrapper.appendChild(container);\n  }\n\n  // Image load handler\n  chatMessage.querySelectorAll('img').forEach(img => {\n    img.addEventListener('load', () => {\n      // Implement scrollToBottom when ready\n    });\n  });\n\n  insertChatMessage(chatWindow, message, chatMessage);\n  return chatMessage;\n}\n\nfunction insertChatMessage(chatWindow, message, chatMessage) {\n  // console.log('insertChatMessage', chatWindow, message, chatMessage);\n  let aimMessages = chatWindow.content.querySelector('.aim-messages');\n\n  if (message.type === 'pond') {\n    // console.log('Inserting message into pond chat window', message);\n    // TODO: find the specific .aim-messages-container for the pond\n    aimMessages = chatWindow.content.querySelector(`.aim-messages-container[data-context=\"${message.to}\"] .aim-messages`);\n    // console.log('Pond messages container found:', aimMessages);\n  }\n\n  if (!aimMessages) {\n    console.error('aim-messages not found. user most likely not in the chat window');\n    return;\n  }\n  const allMessages = Array.from(aimMessages.querySelectorAll('.aim-chat-message'));\n  let inserted = false;\n\n  for (const existingMessage of allMessages) {\n    const existingId = parseInt(existingMessage.getAttribute('data-id'), 10);\n    if (message.id < existingId) {\n      aimMessages.insertBefore(chatMessage, existingMessage);\n      inserted = true;\n      break;\n    }\n  }\n\n  if (!inserted) {\n    aimMessages.appendChild(chatMessage);\n  }\n\n  return chatMessage;\n}\n","// TODO: move all this app specific code *outside* of the buddylist / renderMessage\n// use the system.addMessageProcessor() API instead\n\nimport isValidUrl from './isValidUrl.js';\nimport isValidYoutubeLink from './isValidYoutubeLink.js';\nimport isValidGithubLink from './isValidGithubLink.js';\n\nexport default function checkForLinksInMessage(message) {\n  const text = message.text || '';\n\n  // Basic URL regex — matches http(s) links\n  const urlRegex = /https?:\\/\\/(?:[^\\s()<>\\[\\]{}\"']+|\\([^\\s()]*?\\))+/gi;\n  let match = text.match(urlRegex);\n  // match = [message.text];\n\n  if (match && isValidUrl(match[0])) {\n    let contentUrl = match[0];\n    // console.log('Found URL in message:', contentUrl);\n    message.card = {\n      url: contentUrl,\n      type: 'website',\n    };\n\n    // Determine file type from extension\n    let ext = contentUrl.split('.').pop().split(/\\#|\\?/)[0]; // Strip off hash/query\n    if (ext && typeof ext === 'string') {\n      if (buddypond.supportedImageTypesExt.includes(ext.toLowerCase())) {\n        message.card.type = 'image';\n      }\n      if (buddypond.supportedAudioTypesExt.includes(ext.toLowerCase())) {\n        message.card.type = 'audio';\n      }\n      if (buddypond.supportedVideoTypesExt.includes(ext.toLowerCase())) {\n        message.card.type = 'video';\n      }\n    }\n\n    // YouTube link handling\n    if (isValidYoutubeLink(contentUrl)) {\n      const videoId = new URL(contentUrl).searchParams.get('v');\n      if (videoId) {\n        message.card.type = 'youtube';\n        message.card.thumbnail = `https://img.youtube.com/vi/${videoId}/0.jpg`;\n        message.card.context = videoId;\n      }\n    }\n\n    // GitHub link handling\n    if (isValidGithubLink(contentUrl)) {\n      message.card.type = 'github';\n      const githubRegex = /^https?:\\/\\/github\\.com\\/([^\\/]+)\\/([^\\/]+)\\/blob\\/([^\\/]+)\\/(.+)$/;\n      const match = contentUrl.match(githubRegex);\n      if (match) {\n        message.card.owner = match[1];\n        message.card.repo = match[2];\n        message.card.filename = match[4];\n      } else {\n        console.error(\"Invalid GitHub URL format.\");\n      }\n    }\n  }\n}\n","export default function isValidUrl(messageText) {\n    if (!messageText) return false;\n  \n    messageText = messageText.trim(); // Trim whitespace from both ends\n  \n    try {\n      const url = new URL(messageText);\n  \n      // Ensure the URL has http or https protocol\n      if (url.protocol === \"http:\" || url.protocol === \"https:\") {\n        // console.log('This is a valid URL:', url.href);\n        return true;\n      }\n  \n      return false; // Invalid if protocol is not http or https\n    } catch (error) {\n      return false; // If an error is thrown, it's not a valid URL\n    }\n  }","export default function checkIsValidYoutubeLink(url) {\n    const regex = /(?:youtube\\.com\\/(?:[^\\/]+\\/.+\\/|(?:v|e(?:mbed)?)\\/|.*[?&]v=)|youtu\\.be\\/)([^\"&?\\/\\s]{11})/;\n    const match = url.match(regex);\n    return match ? match[1] : null; // Return video ID or null\n}\n","export default function isValidGithubLink(url) {\n    const regex = /^https?:\\/\\/github\\.com\\/([^\\/]+)\\/([^\\/]+)\\/blob\\/([^\\/]+)\\/(.+)$/;\n    const match = url.match(regex);\n    return match ? match.slice(1) : null; \n    // Returns [owner, repo, branch, filePath] or null\n}\n","// contains list of bad words we dont't want the Desktop to render\n// these are stored as Base64 so we don't have to see them introduced into the codebase\n// if you wish to view the list simply run: \"console.log(atob(forbiddenNotes.base64))\" in console\n\nlet forbiddenNotes = {\n  \"base64\": \"WyI0cjVlIiwiNWgxdCIsIjVoaXQiLCJhNTUiLCJhbmFsIiwiYW51cyIsImFyNWUiLCJhcnJzZSIsImFyc2UiLCJhc3MiLCJhc3MtZnVja2VyIiwiYXNzZXMiLCJhc3NmdWNrZXIiLCJhc3NmdWtrYSIsImFzc2hvbGUiLCJhc3Nob2xlcyIsImFzc3dob2xlIiwiYV9zX3MiLCJiIXRjaCIsImIwMGJzIiwiYjE3Y2giLCJiMXRjaCIsImJhbGxiYWciLCJiYWxscyIsImJhbGxzYWNrIiwiYmFzdGFyZCIsImJlYXN0aWFsIiwiYmVhc3RpYWxpdHkiLCJiZWxsZW5kIiwiYmVzdGlhbCIsImJlc3RpYWxpdHkiLCJiaStjaCIsImJpYXRjaCIsImJpdGNoIiwiYml0Y2hlciIsImJpdGNoZXJzIiwiYml0Y2hlcyIsImJpdGNoaW4iLCJiaXRjaGluZyIsImJsb29keSIsImJsb3cgam9iIiwiYmxvd2pvYiIsImJsb3dqb2JzIiwiYm9pb2xhcyIsImJvbGxvY2siLCJib2xsb2siLCJib25lciIsImJvb2IiLCJib29icyIsImJvb29icyIsImJvb29vYnMiLCJib29vb29icyIsImJvb29vb29vYnMiLCJicmVhc3RzIiwiYnVjZXRhIiwiYnVnZ2VyIiwiYnVtIiwiYnVubnkgZnVja2VyIiwiYnV0dCIsImJ1dHRob2xlIiwiYnV0dG11bmNoIiwiYnV0dHBsdWciLCJjMGNrIiwiYzBja3N1Y2tlciIsImNhcnBldCBtdW5jaGVyIiwiY2F3ayIsImNoaW5rIiwiY2lwYSIsImNsMXQiLCJjbGl0IiwiY2xpdG9yaXMiLCJjbGl0cyIsImNudXQiLCJjb2NrIiwiY29jay1zdWNrZXIiLCJjb2NrZmFjZSIsImNvY2toZWFkIiwiY29ja211bmNoIiwiY29ja211bmNoZXIiLCJjb2NrcyIsImNvY2tzdWNrICIsImNvY2tzdWNrZWQgIiwiY29ja3N1Y2tlciIsImNvY2tzdWNraW5nIiwiY29ja3N1Y2tzICIsImNvY2tzdWthIiwiY29ja3N1a2thIiwiY29rIiwiY29rbXVuY2hlciIsImNva3N1Y2thIiwiY29vbiIsImNveCIsImNyYXAiLCJjdW0iLCJjdW1tZXIiLCJjdW1taW5nIiwiY3VtcyIsImN1bXNob3QiLCJjdW5pbGluZ3VzIiwiY3VuaWxsaW5ndXMiLCJjdW5uaWxpbmd1cyIsImN1bnQiLCJjdW50bGljayAiLCJjdW50bGlja2VyICIsImN1bnRsaWNraW5nICIsImN1bnRzIiwiY3lhbGlzIiwiY3liZXJmdWMiLCJjeWJlcmZ1Y2sgIiwiY3liZXJmdWNrZWQgIiwiY3liZXJmdWNrZXIiLCJjeWJlcmZ1Y2tlcnMiLCJjeWJlcmZ1Y2tpbmcgIiwiZDFjayIsImRhbW4iLCJkaWNrIiwiZGlja2hlYWQiLCJkaWxkbyIsImRpbGRvcyIsImRpbmsiLCJkaW5rcyIsImRpcnNhIiwiZGxjayIsImRvZy1mdWNrZXIiLCJkb2dnaW4iLCJkb2dnaW5nIiwiZG9ua2V5cmliYmVyIiwiZG9vc2giLCJkdWNoZSIsImR5a2UiLCJlamFjdWxhdGUiLCJlamFjdWxhdGVkIiwiZWphY3VsYXRlcyAiLCJlamFjdWxhdGluZyAiLCJlamFjdWxhdGluZ3MiLCJlamFjdWxhdGlvbiIsImVqYWt1bGF0ZSIsImYgdSBjIGsiLCJmIHUgYyBrIGUgciIsImY0bm55IiwiZmFnIiwiZmFnZ2luZyIsImZhZ2dpdHQiLCJmYWdnb3QiLCJmYWdncyIsImZhZ290IiwiZmFnb3RzIiwiZmFncyIsImZhbm55IiwiZmFubnlmbGFwcyIsImZhbm55ZnVja2VyIiwiZmFueXkiLCJmYXRhc3MiLCJmY3VrIiwiZmN1a2VyIiwiZmN1a2luZyIsImZlY2siLCJmZWNrZXIiLCJmZWxjaGluZyIsImZlbGxhdGUiLCJmZWxsYXRpbyIsImZpbmdlcmZ1Y2sgIiwiZmluZ2VyZnVja2VkICIsImZpbmdlcmZ1Y2tlciAiLCJmaW5nZXJmdWNrZXJzIiwiZmluZ2VyZnVja2luZyAiLCJmaW5nZXJmdWNrcyAiLCJmaXN0ZnVjayIsImZpc3RmdWNrZWQgIiwiZmlzdGZ1Y2tlciAiLCJmaXN0ZnVja2VycyAiLCJmaXN0ZnVja2luZyAiLCJmaXN0ZnVja2luZ3MgIiwiZmlzdGZ1Y2tzICIsImZsYW5nZSIsImZvb2siLCJmb29rZXIiLCJmdWNrIiwiZnVja2EiLCJmdWNrZWQiLCJmdWNrZXIiLCJmdWNrZXJzIiwiZnVja2hlYWQiLCJmdWNraGVhZHMiLCJmdWNraW4iLCJmdWNraW5nIiwiZnVja2luZ3MiLCJmdWNraW5nc2hpdG1vdGhlcmZ1Y2tlciIsImZ1Y2ttZSAiLCJmdWNrcyIsImZ1Y2t3aGl0IiwiZnVja3dpdCIsImZ1ZGdlIHBhY2tlciIsImZ1ZGdlcGFja2VyIiwiZnVrIiwiZnVrZXIiLCJmdWtrZXIiLCJmdWtraW4iLCJmdWtzIiwiZnVrd2hpdCIsImZ1a3dpdCIsImZ1eCIsImZ1eDByIiwiZl91X2NfayIsImdhbmdiYW5nIiwiZ2FuZ2JhbmdlZCAiLCJnYW5nYmFuZ3MgIiwiZ2F5bG9yZCIsImdheXNleCIsImdvYXRzZSIsImdvZC1kYW0iLCJnb2QtZGFtbmVkIiwiZ29kZGFtbiIsImdvZGRhbW5lZCIsImhhcmRjb3Jlc2V4ICIsImhlbGwiLCJoZXNoZSIsImhvYXIiLCJob2FyZSIsImhvZXIiLCJob21vIiwiaG9yZSIsImhvcm5pZXN0IiwiaG9ybnkiLCJob3RzZXgiLCJqYWNrLW9mZiAiLCJqYWNrb2ZmIiwiamFwIiwiamVyay1vZmYgIiwiamlzbSIsImppeiAiLCJqaXptICIsImppenoiLCJrYXdrIiwia25vYiIsImtub2JlYWQiLCJrbm9iZWQiLCJrbm9iZW5kIiwia25vYmhlYWQiLCJrbm9iam9ja3kiLCJrbm9iam9rZXkiLCJrb2NrIiwia29uZHVtIiwia29uZHVtcyIsImt1bSIsImt1bW1lciIsImt1bW1pbmciLCJrdW1zIiwia3VuaWxpbmd1cyIsImtpdW50IiwibDNpK2NoIiwibDNpdGNoIiwibGFiaWEiLCJsbWZhbyIsImx1c3QiLCJsdXN0aW5nIiwibTBmMCIsIm0wZm8iLCJtNDV0ZXJiYXRlIiwibWE1dGVyYjgiLCJtYTV0ZXJiYXRlIiwibWFzb2NoaXN0IiwibWFzdGVyLWJhdGUiLCJtYXN0ZXJiOCIsIm1hc3RlcmJhdCoiLCJtYXN0ZXJiYXQzIiwibWFzdGVyYmF0ZSIsIm1hc3RlcmJhdGlvbiIsIm1hc3RlcmJhdGlvbnMiLCJtYXN0dXJiYXRlIiwibW8tZm8iLCJtb2YwIiwibW9mbyIsIm1vdGhhZnVjayIsIm1vdGhhZnVja2EiLCJtb3RoYWZ1Y2thcyIsIm1vdGhhZnVja2F6IiwibW90aGFmdWNrZWQgIiwibW90aGFmdWNrZXIiLCJtb3RoYWZ1Y2tlcnMiLCJtb3RoYWZ1Y2tpbiIsIm1vdGhhZnVja2luZyAiLCJtb3RoYWZ1Y2tpbmdzIiwibW90aGFmdWNrcyIsIm1vdGhlciBmdWNrZXIiLCJtb3RoZXJmdWNrIiwibW90aGVyZnVja2VkIiwibW90aGVyZnVja2VyIiwibW90aGVyZnVja2VycyIsIm1vdGhlcmZ1Y2tpbiIsIm1vdGhlcmZ1Y2tpbmciLCJtb3RoZXJmdWNraW5ncyIsIm1vdGhlcmZ1Y2trYSIsIm1vdGhlcmZ1Y2tzIiwibXVmZiIsIm11dGhhIiwibXV0aGFmZWNrZXIiLCJtdXRoYWZ1Y2trZXIiLCJtdXRoZXIiLCJtdXRoZXJmdWNrZXIiLCJuMWdnYSIsIm4xZ2dlciIsIm5hemkiLCJuaWdnM3IiLCJuaWdnNGgiLCJuaWdnYSIsIm5pZ2dhaCIsIm5pZ2dhcyIsIm5pZ2dheiIsIm5pZ2dlciIsIm5pZ2dlcnMiLCJub2IiLCJub2Igam9rZXkiLCJub2JoZWFkIiwibm9iam9ja3kiLCJub2Jqb2tleSIsIm51bWJudXRzIiwibnV0c2FjayIsIm9yZ2FzaW0gIiwib3JnYXNpbXMgIiwib3JnYXNtIiwib3JnYXNtcyAiLCJwMHJuIiwicGF3biIsInBlY2tlciIsInBlbmlzIiwicGVuaXNmdWNrZXIiLCJwaG9uZXNleCIsInBodWNrIiwicGh1ayIsInBodWtlZCIsInBodWtpbmciLCJwaHVra2VkIiwicGh1a2tpbmciLCJwaHVrcyIsInBodXEiLCJwaWdmdWNrZXIiLCJwaW1waXMiLCJwaXNzIiwicGlzc2VkIiwicGlzc2VyIiwicGlzc2VycyIsInBpc3NlcyAiLCJwaXNzZmxhcHMiLCJwaXNzaW4gIiwicGlzc2luZyIsInBpc3NvZmYgIiwicG9vcCIsInBvcm4iLCJwb3JubyIsInBvcm5vZ3JhcGh5IiwicG9ybm9zIiwicHJpY2siLCJwcmlja3MgIiwicHJvbiIsInB1YmUiLCJwdXNzZSIsInB1c3NpIiwicHVzc2llcyIsInB1c3N5IiwicHVzc3lzICIsInJlY3R1bSIsInJldGFyZCIsInJpbWphdyIsInJpbW1pbmciLCJzIGhpdCIsInMuby5iLiIsInNhZGlzdCIsInNjaGxvbmciLCJzY3Jld2luZyIsInNjcm9hdCIsInNjcm90ZSIsInNjcm90dW0iLCJzZW1lbiIsInNleCIsInNoISsiLCJzaCF0Iiwic2gxdCIsInNoYWciLCJzaGFnZ2VyIiwic2hhZ2dpbiIsInNoYWdnaW5nIiwic2hlbWFsZSIsInNoaSsiLCJzaGl0Iiwic2hpdGRpY2siLCJzaGl0ZSIsInNoaXRlZCIsInNoaXRleSIsInNoaXRmdWNrIiwic2hpdGZ1bGwiLCJzaGl0aGVhZCIsInNoaXRpbmciLCJzaGl0aW5ncyIsInNoaXRzIiwic2hpdHRlZCIsInNoaXR0ZXIiLCJzaGl0dGVycyAiLCJzaGl0dGluZyIsInNoaXR0aW5ncyIsInNoaXR0eSAiLCJza2FuayIsInNsdXQiLCJzbHV0cyIsInNtZWdtYSIsInNtdXQiLCJzbmF0Y2giLCJzb24tb2YtYS1iaXRjaCIsInNwYWMiLCJzcHVuayIsInNfaF9pX3QiLCJ0MXR0MWU1IiwidDF0dGllcyIsInRlZXRzIiwidGVleiIsInRlc3RpY2FsIiwidGVzdGljbGUiLCJ0aXQiLCJ0aXRmdWNrIiwidGl0cyIsInRpdHQiLCJ0aXR0aWU1IiwidGl0dGllZnVja2VyIiwidGl0dGllcyIsInRpdHR5ZnVjayIsInRpdHR5d2FuayIsInRpdHdhbmsiLCJ0b3NzZXIiLCJ0dXJkIiwidHc0dCIsInR3YXQiLCJ0d2F0aGVhZCIsInR3YXR0eSIsInR3dW50IiwidHd1bnRlciIsInYxNGdyYSIsInYxZ3JhIiwidmFnaW5hIiwidmlhZ3JhIiwidnVsdmEiLCJ3MDBzZSIsIndhbmciLCJ3YW5rIiwid2Fua2VyIiwid2Fua3kiLCJ3aG9hciIsIndob3JlIiwid2lsbGllcyIsIndpbGx5IiwieHJhdGVkIiwieHh4Il0=\"\n};\n\nforbiddenNotes.randowFunWord = function randowFunWord() {\n  let words = [\"daffodil\", \"chrysanthemum\", \"waffles\", \"puppies\", \"senpai\", \"kohai\", \"rainbow\", \"fluffy\", \"marklar\"];\n  // TODO: use bp.random() in order to get seedable randomness\n  // this will provide consistent results across all client instances\n  var item = words[Math.floor(Math.random() * words.length)];\n  return item;\n}\n\nforbiddenNotes.containsBadWord = function (str) {\n  // Convert input to lowercase for case-insensitive matching\n  const lowerStr = str.toLowerCase();\n  // Check each forbidden word using word boundaries\n  return forbiddenNotes.decoded.some(function (fnote) {\n    // Create a regex with word boundaries for whole-word matching\n    const regex = new RegExp(`\\\\b${fnote}\\\\b`, 'i');\n    const found = regex.test(lowerStr);\n    return found;\n  });\n};\n\nforbiddenNotes.filter = function (str) {\n  forbiddenNotes.decoded.forEach(function (fnote) {\n    str = str.replace(new RegExp(\"\\\\b\" + fnote + \"\\\\b\"), forbiddenNotes.randowFunWord())\n    str = str.replace(new RegExp(\"\\\\b\" + fnote + \"\\\\b\", \"gi\"), forbiddenNotes.randowFunWord())\n  });\n  return str;\n}\n\nforbiddenNotes.decoded = JSON.parse(atob(forbiddenNotes.base64))\n\nexport default forbiddenNotes;\n","export default function setupInputEvents(windowType, contextName, chatWindow) {\n    const $input = $(\".aim-input\", chatWindow.content);\n    const $form = $(\".message_form\", chatWindow.content);\n    const $sendButton = $(\".aim-send-btn\", chatWindow.content);\n\n    $input.keydown((e) => {\n        if (e.which === 13 && e.shiftKey) {\n            const inputValue = $input.val();\n            const cursorPosition = $input[0].selectionStart;\n            const newValue = inputValue.slice(0, cursorPosition) + \"\\n\" + inputValue.slice(cursorPosition);\n            $input.val(newValue);\n            $input[0].setSelectionRange(cursorPosition + 1, cursorPosition + 1);\n            return false;\n        }\n\n        if (e.which === 13) {\n            const message = $input.val().replace(/\\n/g, \"<br>\");\n            $input.val(message);\n            $form.submit();\n            e.preventDefault();\n            return false;\n        }\n\n        this.bp.emit(\"buddy::typing\", {\n            from: this.bp.me,\n            to: contextName,\n            type: windowType,\n            isTyping: true,\n            ctime: Date.now(),\n        });\n    });\n\n    $input.on(\"keyup\", (e) => {\n        const inputValue = $input.val();\n        $sendButton.css(\"opacity\", inputValue.length > 0 ? 1 : 0.5);\n    });\n}\n","export default function setupAutocomplete(chatWindow) {\n    if (!this.options.autocomplete) return;\n\n    const commands = Object.keys(this.options.autocomplete).map((command) => `/${command}`);\n    $(\".aim-input\", chatWindow.content).autocomplete({\n        source: commands,\n        search: (event, ui) => {\n            const firstChar = event.target.value.charAt(0);\n            return [\"/\", \"\\\\\"].includes(firstChar);\n        },\n    });\n}","export default class ChatWindowButtonBar {\n    constructor(bp, options = {}) {\n        this.bp = bp;\n        this.options = options;\n\n        // Button objects provided via options\n        const inputButtons = options.buttons || [];\n\n        // Read stored order of button labels\n        const storedOrder = this.bp.settings?.['buttonBar.buttons'];\n\n        if (Array.isArray(storedOrder)) {\n            // Sort input buttons by stored order\n            this.buttons = this.sortButtonsByOrder(inputButtons, storedOrder);\n        } else {\n            this.buttons = inputButtons;\n        }\n\n        this.container = this.render();       // DOM\n        this.enableDragAndDrop();             // jQuery UI sorting\n        return this;\n    }\n\n    render() {\n        const buttonBar = document.createElement('div');\n        buttonBar.classList.add('button-bar');\n\n        this.buttons.forEach(button => {\n            const element = this.createButtonElement(button);\n            buttonBar.appendChild(element);\n        });\n\n        return buttonBar;\n    }\n\n    createButtonElement(button) {\n        let element;\n\n        const baseDataset = {\n            context: this.options.context || button.text,\n            type: this.options.type || 'buddy'\n        };\n\n        if (button.image) {\n            element = document.createElement('img');\n            element.src = button.image;\n            element.alt = button.text;\n            element.title = button.text;\n            element.draggable = false;\n        } else {\n            element = document.createElement('button');\n            element.innerText = button.text;\n        }\n\n        Object.entries(baseDataset).forEach(([key, value]) => {\n            element.dataset[key] = value;\n        });\n\n        element.classList.add('button-bar-button');\n        if (button.className) {\n            element.classList.add(button.className);\n        }\n\n        element.dataset.text = button.text;\n        element.onclick = button.onclick;\n\n        return element;\n    }\n\n    addButton(button) {\n        if (this.buttons.some(b => b.text === button.text)) {\n            console.warn(`Button with text \"${button.text}\" already exists.`);\n            return;\n        }\n        \n\n        this.buttons.push(button);\n        const newButtonElement = this.createButtonElement(button);\n        this.container.appendChild(newButtonElement);\n        this.refreshSortable();\n    }\n\n    removeButton(buttonText) {\n        const index = this.buttons.findIndex(button => button.text === buttonText);\n        if (index === -1) return;\n\n        this.buttons.splice(index, 1);\n\n        const children = Array.from(this.container.children);\n        for (const el of children) {\n            if ((el.innerText === buttonText || el.alt === buttonText) && el.classList.contains('button-bar-button')) {\n                this.container.removeChild(el);\n                break;\n            }\n        }\n\n        this.refreshSortable();\n        this.saveButtonOrder();\n    }\n\n    enableDragAndDrop() {\n        $(this.container).sortable({\n            items: '.button-bar-button',\n            tolerance: 'pointer',\n            stop: () => this.syncButtonOrder()\n        });\n    }\n\n    refreshSortable() {\n        $(this.container).sortable('refresh');\n    }\n\n    syncButtonOrder() {\n        const orderedTexts = Array.from(this.container.children).map(el => el.dataset.text);\n        this.buttons = orderedTexts\n            .map(text => this.buttons.find(b => b.text === text))\n            .filter(Boolean);\n\n        this.saveButtonOrder();\n    }\n\n    saveButtonOrder() {\n        const orderedTexts = this.buttons.map(b => b.text);\n        this.bp.set('buttonBar.buttons', orderedTexts);\n\n        const openWindows = this.bp.apps.ui.windowManager.findWindows({\n            app: 'buddylist',\n            type: ['buddy', 'pond']\n        });\n\n        console.log('openWindows to reorder', openWindows);\n\n        openWindows.forEach(window => {\n            if (window.buttonBar) {\n                // Reorder buttons\n                window.buttonBar.buttons = this.sortButtonsByOrder(window.buttonBar.buttons, orderedTexts);\n\n                // Re-render DOM\n                window.buttonBar.reRenderButtons();\n            }\n        });\n    }\n\n    //reRenderButtons() is only used when making a remote change to the button order from an outside source\n    // drag and drop does not use this method and instead uses syncButtonOrder\n    // we use reRenderButtons to update the button bar in all other existing open windows\n    reRenderButtons() {\n        // Clear the container\n        this.container.innerHTML = '';\n\n        // Recreate and append all buttons in current order\n        this.buttons.forEach(button => {\n            const el = this.createButtonElement(button);\n            this.container.appendChild(el);\n        });\n\n        // Re-enable drag and drop after replacing children\n        this.refreshSortable();\n    }\n\n    sortButtonsByOrder(buttons, order) {\n        const buttonMap = Object.fromEntries(buttons.map(b => [b.text, b]));\n        const ordered = order.map(text => buttonMap[text]).filter(Boolean);\n\n        // Append any new buttons not in stored order\n        const remaining = buttons.filter(b => !order.includes(b.text));\n        return [...ordered, ...remaining];\n    }\n}\n","import ChatWindowButtonBar from \"../ChatWindowButtonBar.js\";\n\n\nexport default function setupChatWindowButtons(windowType, contextName, chatWindow) {\n    if (!this.options.chatWindowButtons) return;\n\n    let buttons = this.options.chatWindowButtons.slice();\n    if (windowType === \"pond\") {\n        buttons = buttons.filter((button) => button.type !== \"buddy-only\");\n    }\n\n    if (isIOS()) {\n        buttons = buttons.filter((button) => button.env !== \"desktop-only\");\n    }\n\n    chatWindow.buttonBar = new ChatWindowButtonBar(this.bp, {\n        context: contextName,\n        type: windowType,\n        buttons,\n    });\n    $(\".aim-message-controls\", chatWindow.content).prepend(chatWindow.buttonBar.container);\n}\n\nfunction isIOS() {\n    return /iPad|iPhone|iPod/.test(navigator.userAgent) && \"ontouchend\" in document;\n}","// Scroll to the bottom of the chat window\nexport default function scrollToBottom(parent, retryDelay = 0, retryCount = 0) {\n  // console.log('scrollToBottom', parent, retryDelay, retryCount);\n  if (!parent) {\n    console.log('No parent element provided.');\n    return;\n  }\n  if (retryCount > 5) {\n    console.log('Max retry count reached. Stopping scroll attempt.');\n    return;\n  }\n  $('.aim-chat-area', parent).scrollTop(99999999)\n\n  // check if the scroll is still at 0\n  const scrollTop = $('.aim-chat-area', parent).scrollTop();\n\n  if (scrollTop === 0) {\n    // scroll to the bottom\n    retryDelay += 200;\n    retryCount++;\n    setTimeout(() => {\n      scrollToBottom(parent, retryDelay, retryCount);\n    }, retryDelay);\n  }\n}","// Populates or updates the pond room list in the chat window\n// Does not clear existing entries; updates connection counts and adds/removes rooms as needed\n// Manages .aim-room-active class only when an activeContext is specified\nexport default function populateRoomList(hotPonds, chatWindow, activeContext = null) {\n    console.log('populateRoomList called with hotPonds:', hotPonds, 'chatWindow:', chatWindow, 'activeContext:', activeContext);\n    const roomList = $(\".aim-room-list-items\", chatWindow.content);\n    if (!roomList.length) return;\n\n    if (!hotPonds || !Array.isArray(hotPonds)) return;\n\n    // Sort ponds by connection count (descending)\n    const sortedPonds = [...hotPonds].sort((a, b) => b.connection_count - a.connection_count);\n\n    // Track user-opened ponds\n    const userOpenedPonds = this.data.activePonds || [];\n\n    // Track existing room items to determine which to remove\n    const existingPondIds = new Set();\n    roomList.find(\".aim-room-item\").each((_, item) => {\n        const pondId = $(item).data(\"pond\");\n        if (pondId) existingPondIds.add(pondId);\n    });\n\n    // Update or add room items\n    sortedPonds.forEach((pond) => {\n        const pondId = pond.pond_id;\n        const pondName = pondId.replace(\"pond/\", \"\");\n        const isUserOpened = userOpenedPonds.includes(pondId);\n        const isActive = pondId === activeContext;\n\n        // Check for existing room item\n        const existingItem = $(`.aim-room-item[data-pond=\"${pondId}\"]`, roomList);\n        if (existingItem.length) {\n            // Update existing item\n            existingItem.find(\".aim-room-list-item-score\").text(pond.connection_count);\n            const closeButton = existingItem.find(\".aim-room-close-btn\");\n            if (isUserOpened) {\n                if (!closeButton.length) {\n                    existingItem.append(`<button class=\"aim-room-close-btn\" data-context=\"${pondId}\">X</button>`);\n                }\n            } else {\n                closeButton.remove();\n            }\n            // Update active class only if activeContext is specified\n            if (activeContext !== null) {\n                existingItem.toggleClass(\"aim-room-active\", isActive);\n            }\n            existingPondIds.delete(pondId); // Mark as processed\n        } else {\n            // Create new room item\n            const closeButton = isUserOpened\n                ? `<button class=\"aim-room-close-btn\" data-context=\"${pondId}\">X</button>`\n                : \"\";\n            roomList.append(`\n                <li class=\"aim-room-item aim-room-list-item ${isActive && activeContext !== null ? \"aim-room-active\" : \"\"}\" data-pond=\"${pondId}\" data-context=\"${pondId}\">\n                    <span class=\"aim-room-list-item-name\">#${pondName}</span>\n                    <span class=\"aim-room-list-item-score\">${pond.connection_count}</span>\n                    ${closeButton}\n                </li>\n            `);\n        }\n\n        // Ensure messages container exists for active or opened ponds\n        if (isActive || isUserOpened) {\n            ensureMessagesContainer.call(this, pondId, chatWindow, this.bp.apps.client);\n        }\n    });\n\n    // Remove room items for ponds no longer in hotPonds\n    existingPondIds.forEach((pondId) => {\n        $(`.aim-room-item[data-pond=\"${pondId}\"]`, roomList).remove();\n    });\n\n    // If activeContext is specified, ensure only the active room has .aim-room-active\n    if (activeContext !== null) {\n        roomList.find(\".aim-room-item\").not(`[data-pond=\"${activeContext}\"]`).removeClass(\"aim-room-active\");\n    }\n}","import forbiddenNotes from \"./forbiddenNotes.js\";\nimport setupInputEvents from \"./message/setupInputEvents.js\";\nimport setupAutocomplete from \"./message/setupAutocomplete.js\";\nimport setupChatWindowButtons from \"./message/setupChatWindowButtons.js\";\nimport scrollToBottom from \"./message/scrollToBottom.js\";\n\n// this is now handled in the pond.js file\nimport populateRoomList from \"./message/populateRoomList.js\";\nimport updateRoomList from \"./message/updateRoomList.js\";\n// Updates the list of connected users for a specific pond chat\n// data.chatId specifies the pond context (e.g., \"pond/general\")\n\n// Updates the list of connected users for a specific pond chat\n// data.chatId specifies the pond context (e.g., \"pond/general\")\nfunction updatePondConnectedUsers(data) {\n    const chatId = data.chatId;\n    if (!chatId) {\n        console.log(\"No chatId provided for updating pond connected users\");\n        return;\n    }\n\n    let context = chatId.replace(\"pond/\", \"\");\n\n    // Select the user list for the specific pond\n    const userList = $(`.aim-user-list[data-context=\"${context}\"][data-type=\"pond\"] .aim-user-list-items`);\n\n    console.log('found userList:', userList.length, 'for chatId:', chatId, userList);\n    if (!userList.length) {\n        console.log(`No .aim-user-list-items found for chatId: ${chatId}`);\n        return;\n    }\n\n    console.log(\"Updating pond connected users for chatId:\", chatId, data);\n\n    // Track existing users to identify disconnected ones\n    const existingUserIds = new Set();\n    userList.find(\".aim-user-item\").each((_, item) => {\n        const userId = $(item).data(\"username\");\n        if (userId) {\n            existingUserIds.add(userId);\n        } else {\n            console.log(\"Found invalid .aim-user-item without data-username, removing:\", item);\n            $(item).remove(); // Remove empty/invalid items\n        }\n    });\n\n    // Update or add user items\n    (data.users || []).forEach((user) => {\n        const { userId, profilePicture } = user;\n        if (!userId || typeof userId !== \"string\") {\n            console.log(\"Skipping invalid user with missing or non-string userId:\", user);\n            return; // Skip invalid users\n        }\n\n        const userItem = $(`.aim-user-item[data-username=\"${userId}\"]`, userList);\n\n        if (userItem.length) {\n            // Update existing user only if data has changed\n            const $textElement = userItem.find(\".aim-user-item-text\");\n            if ($textElement.text() !== userId) {\n                console.log(`Updating userId text for ${userId}`);\n                $textElement.text(userId);\n            }\n\n            const $profileContainer = userItem.find(\".aim-profile-picture\");\n            const $newProfileElement = createProfilePictureElement.call(this, userId, profilePicture, $profileContainer);\n            if ($newProfileElement) {\n                console.log(`Updating profile picture for ${userId}`);\n                $profileContainer.empty().append($newProfileElement.html());\n            } else {\n                console.log(`No profile picture update needed for ${userId}`);\n            }\n\n            existingUserIds.delete(userId); // Mark as processed\n        } else {\n            // Create new user item\n            console.log(\"Adding user to aim-user-list-items:\", user);\n            const $userItem = $(\"<li>\", {\n                class: \"aim-user-item\",\n                \"data-username\": userId,\n            });\n            const $profilePicture = createProfilePictureElement.call(this, userId, profilePicture);\n            const $userText = $(\"<span>\", {\n                class: \"aim-user-item-text\",\n                text: userId,\n            });\n            //console.log('$profilePicture', $profilePicture.html())\n            //console.log('$userItem', $userItem.html())\n            $userItem.append($profilePicture, $userText);\n            userList.append($userItem);\n        }\n    });\n\n    // Remove disconnected users\n    console.log('checking existingUserIds for removal:', existingUserIds);\n    existingUserIds.forEach((userId) => {\n        $(`.aim-user-item[data-username=\"${userId}\"]`, userList).remove();\n    });\n}\n\n// Creates a profile picture element for a user\n// Returns null if no update is needed for existing users\nfunction createProfilePictureElement(userId, profilePicture, $existingContainer = null) {\n    const $profilePicture = $(\"<div>\", { class: \"aim-profile-picture\" });\n\n    if (profilePicture) {\n        const $img = $(\"<img>\", {\n            class: \"aim-chat-message-profile-picture-img\",\n            src: profilePicture,\n            alt: `${userId}'s avatar`,\n        });\n        $img.attr('draggable', 'false');\n        $profilePicture.append($img);\n\n        // For existing users, check if update is needed\n        if ($existingContainer) {\n            const $currentImg = $existingContainer.find(\".aim-chat-message-profile-picture-img\");\n            if ($currentImg.length && $currentImg.attr(\"src\") === profilePicture) {\n                return null; // No update needed\n            }\n        }\n    } else {\n        const defaultAvatarSvg = this.defaultAvatarSvg(userId);\n        $profilePicture.html(defaultAvatarSvg);\n\n        // For existing users, check if SVG content is unchanged\n        if ($existingContainer) {\n            const currentHtml = $existingContainer.html().trim();\n            if (currentHtml === defaultAvatarSvg.trim()) {\n                return null; // No update needed\n            }\n        }\n    }\n\n    return $profilePicture;\n}\n\nexport default function openChatWindow(data) {\n    const { windowType, contextName, windowTitle } = determineWindowParameters(data);\n    if (!isValidContextName(contextName)) {\n        return;\n    }\n\n    if (!this.populateRoomList) {\n        this.populateRoomList = populateRoomList.bind(this);\n    }\n\n    if (!this.updatePondConnectedUsers) {\n        this.updatePondConnectedUsers = updatePondConnectedUsers.bind(this);\n    }\n\n    if (!this.joinPond) {\n        this.joinPond = joinPond.bind(this);\n    }\n\n    const client = this.bp.apps.client;\n    const windowId = generateWindowId(windowType, contextName);\n    const existingWindow = this.bp.apps.ui.windowManager.getWindow(windowId);\n\n    if (existingWindow) {\n        handleExistingWindow(existingWindow, windowType, contextName, client, this);\n        return existingWindow;\n    }\n\n    return createNewChatWindow.call(this, {\n        windowType,\n        contextName,\n        windowTitle,\n        windowId,\n        client,\n        data,\n    });\n}\n\nfunction determineWindowParameters(data) {\n    let windowType = data.pondname ? \"pond\" : \"buddy\";\n    let contextName = data.pondname || data.name;\n    let windowTitle = windowType === \"pond\" ? \"Pond Chat\" : \"\";\n\n    if (data.context) {\n        contextName = data.context;\n    }\n\n    if (data.type) {\n        windowType = data.type;\n    }\n\n    contextName = contextName.toString();\n\n    return { windowType, contextName, windowTitle };\n}\n\nfunction isValidContextName(contextName) {\n    const pondName = contextName.replace(\"pond/\", \"\");\n    if (forbiddenNotes.containsBadWord(pondName)) {\n        console.error(\"Forbidden context name:\", contextName);\n        alert(\"Pond name not allowed, please choose a different name.\");\n        return false;\n    }\n    return true;\n}\n\nfunction generateWindowId(windowType, contextName) {\n    return windowType === \"pond\"\n        ? \"pond_message_main\"\n        : `buddy_message_-${contextName}`;\n}\n\nfunction handleExistingWindow(chatWindow, windowType, contextName, client, context) {\n    if (windowType === \"pond\") {\n        console.log(\"Opening pond window\", windowType, contextName);\n        // Use context.data.hotPonds if available, otherwise skip population\n        //const hotPonds = context.data.hotPonds || [];\n        //populateRoomList.call(context, hotPonds, chatWindow, contextName);\n        // Ensure the messages container exists and is subscribed\n        ensureMessagesContainer.call(context, contextName, chatWindow, client);\n        toggleMessagesContainer(contextName, chatWindow);\n    }\n    chatWindow.focus();\n}\n\nfunction createNewChatWindow({ windowType, contextName, windowTitle, windowId, client, data }) {\n    const windowConfig = buildWindowConfig.call(this, windowType, contextName, windowTitle, windowId, data);\n    const chatWindow = this.bp.apps.ui.windowManager.createWindow({\n        ...windowConfig,\n        onOpen: async (_window) => {\n            await initializeChatWindow.call(this, windowType, contextName, _window, client);\n        },\n        onClose: () => {\n            if (windowType === \"pond\") {\n                const roomList = $(\".aim-room-list-items\", chatWindow.content);\n                roomList.find(\".aim-room-item\").each((_, item) => {\n                    const context = $(item).data(\"context\");\n                    client.removeSubscription(\"pond\", context);\n                });\n                this.data.activePonds = [];\n                // might be better in joinPond() function\n\n            } else {\n                client.removeSubscription(windowType, contextName);\n            }\n        },\n    });\n\n    if (windowType === \"pond\") {\n        setupCloseButtonHandler.call(this, chatWindow, client);\n        $(\".no-open-ponds\", chatWindow.content).hide();\n        $('.aim-message-controls', chatWindow.content).flexShow();\n\n    }\n\n    chatWindow.loggedIn = true;\n    return chatWindow;\n}\n\nfunction buildWindowConfig(windowType, contextName, windowTitle, windowId, data) {\n    const isBuddy = windowType === \"buddy\";\n    let iconImagePath = isBuddy ? \"\" : \"desktop/assets/images/icons/icon_pond_64.png\";\n\n    if (isBuddy && this.bp.apps.buddylist.data.profileState?.buddylist?.[contextName]?.profile_picture) {\n        iconImagePath = this.bp.apps.buddylist.data.profileState.buddylist[contextName].profile_picture;\n    }\n\n    return {\n        app: \"buddylist\",\n        id: windowId,\n        title: isBuddy ? contextName : windowTitle,\n        icon: iconImagePath,\n        type: windowType,\n        context: contextName,\n        parent: this.bp.apps.ui.parent,\n        className: \"chatWindow\",\n        x: data.x || 50,\n        y: 50,\n        width: isBuddy ? 600 : 1000,\n        height: isBuddy ? 500 : 600,\n    };\n}\n\nasync function initializeChatWindow(windowType, contextName, chatWindow, client) {\n    setupChatWindow.call(this, windowType, contextName, chatWindow);\n    client.addSubscription(windowType, contextName);\n\n    if (windowType === \"buddy\") {\n        clearBuddyNewMessages.call(this, contextName);\n    }\n\n    if (windowType === \"pond\") {\n        // Populate room list with hot ponds if available\n        // const hotPonds = this.data.hotPonds || [];\n        let hotPonds = this.bp.apps?.pond?.data?.hotPonds || [];\n        populateRoomList.call(this, hotPonds, chatWindow, contextName);\n        // send getConnectedUsers message to the pond\n        toggleMessagesContainer(contextName, chatWindow);\n    }\n\n    await renderMessages.call(this, contextName, chatWindow);\n    focusInputField(chatWindow);\n}\n\nfunction clearBuddyNewMessages(contextName) {\n    if (\n        this.data.profileState?.buddylist?.[contextName]?.newMessages\n    ) {\n        this.data.profileState.buddylist[contextName].newMessages = false;\n        this.client.receivedInstantMessage(contextName, (err, re) => {\n            // console.log(\"receivedInstantMessage\", err, re);\n        });\n    }\n}\n\nasync function renderMessages(contextName, chatWindow) {\n    this.data.processedMessages[contextName] = this.data.processedMessages[contextName] || [];\n    const messagesToRender = [...this.data.processedMessages[contextName]];\n    this.data.processedMessages[contextName] = [];\n\n    for (const message of messagesToRender) {\n        try {\n            await this.renderChatMessage(message, chatWindow, true);\n        } catch (err) {\n            console.error(\"Error rendering message\", message, err, chatWindow);\n        }\n    }\n}\n\nfunction focusInputField(chatWindow) {\n    function attemptFocus() {\n        const aimInput = $(\".aim-input\", chatWindow.content);\n        if (aimInput.length === 0) {\n            setTimeout(attemptFocus, 100);\n            return;\n        }\n        aimInput.focus();\n    }\n    attemptFocus();\n}\n\n\nfunction ensureMessagesContainer(contextName, chatWindow, client) {\n    const chatArea = $(\".aim-chat-area\", chatWindow.content);\n    const userListArea = $(\".aim-user-list-area\", chatWindow.content);\n    if (!chatArea.length || !userListArea.length) {\n        console.log(\"Missing chatArea or userListArea for context:\", contextName);\n        return;\n    }\n\n    // Normalize context for user list (e.g., \"pond/general\" -> \"general\")\n    const userListContext = contextName.replace(\"pond/\", \"\");\n\n    // Create message container if missing\n    let existingContainer = $(`.aim-messages-container[data-context=\"${contextName}\"]`, chatArea);\n    if (!existingContainer.length) {\n        console.log(\"Creating new messages container for context:\", contextName);\n        const newContainer = document.createElement(\"div\");\n        newContainer.className = \"aim-messages-container\";\n        newContainer.setAttribute(\"data-context\", contextName);\n        newContainer.setAttribute(\"data-type\", \"pond\");\n        newContainer.style.display = \"none\";\n        newContainer.innerHTML = `\n            <div class=\"aim-messages-header\">\n                <h2 class=\"aim-chat-title\"><span class=\"aim-chat-username\">#${userListContext}</span></h2>\n                <button class=\"aim-close-chat-btn\">Close</button>\n            </div>\n            <div class=\"aim-no-messages\">\n                Your conversation has just started. You can send a message using the form below.\n            </div>\n            <div class=\"aim-messages\"></div>\n        `;\n        chatArea.append(newContainer);\n\n        client.addSubscription(\"pond\", contextName);\n        this.data.activePonds = this.data.activePonds || [];\n        if (!this.data.activePonds.includes(contextName)) {\n            this.data.activePonds.push(contextName);\n        }\n        $(\".no-open-ponds\", chatWindow.content).hide();\n        $(\".aim-message-controls\", chatWindow.content).flexShow();\n    }\n\n    // Create user list if missing\n    let existingUserList = $(`.aim-user-list[data-context=\"${userListContext}\"][data-type=\"pond\"]`, userListArea);\n    if (!existingUserList.length) {\n        console.log(\"Creating new user list for context:\", userListContext);\n        const newUserList = document.createElement(\"div\");\n        newUserList.className = \"aim-user-list\";\n        newUserList.setAttribute(\"data-context\", userListContext);\n        newUserList.setAttribute(\"data-type\", \"pond\");\n        newUserList.style.display = \"none\";\n        newUserList.innerHTML = `\n            <div class=\"aim-user-list-header\">\n                <h3>Buddies</h3>\n            </div>\n            <ul class=\"aim-user-list-items\"></ul>\n        `;\n        userListArea.append(newUserList);\n    }\n}\n\nfunction toggleMessagesContainer(contextName, chatWindow) {\n    const chatArea = $(\".aim-chat-area\", chatWindow.content);\n    const userListArea = $(\".aim-user-list-area\", chatWindow.content);\n    if (!chatArea.length || !userListArea.length) {\n        console.log(\"Missing chatArea or userListArea for context:\", contextName);\n        return;\n    }\n\n    // Hide all message containers and user lists\n    $(\".aim-messages-container\", chatArea).hide();\n    $(\".aim-user-list\", userListArea).hide();\n\n    // Normalize context for user list (e.g., \"pond/general\" -> \"general\")\n    const userListContext = contextName.replace(\"pond/\", \"\");\n\n    // Select target elements\n    const targetContainer = $(`.aim-messages-container[data-context=\"${contextName}\"][data-type=\"pond\"]`, chatArea);\n    const targetUserList = $(`.aim-user-list[data-context=\"${userListContext}\"][data-type=\"pond\"]`, userListArea);\n\n    if (!targetContainer.length) {\n        console.log(\"Creating messages container for context:\", contextName);\n        ensureMessagesContainer.call(this, contextName, chatWindow, this.bp.apps.client);\n        // Re-select after creation\n        targetContainer = $(`.aim-messages-container[data-context=\"${contextName}\"][data-type=\"pond\"]`, chatArea);\n    }\n\n    // Show target elements\n    if (targetContainer.length) {\n        console.log(\"Showing messages container for context:\", contextName);\n        targetContainer.show();\n    }\n    if (targetUserList.length) {\n        console.log(\"Showing user list for context:\", userListContext);\n        targetUserList.show();\n    }\n\n    // Fallback: Show first available context if target is missing\n    if (!targetContainer.length || !targetUserList.length) {\n        const availableContainers = $(\".aim-messages-container\", chatArea);\n        if (availableContainers.length > 0) {\n            const firstContext = availableContainers.first().data(\"context\");\n            const firstUserListContext = firstContext.replace(\"pond/\", \"\");\n            console.log(\"Falling back to first context:\", firstContext);\n\n            $(`.aim-messages-container[data-context=\"${firstContext}\"]`, chatArea).show();\n            $(`.aim-user-list[data-context=\"${firstUserListContext}\"][data-type=\"pond\"]`, userListArea).show();\n\n            $(\".aim-room-item\", chatWindow.content).removeClass(\"aim-room-active\");\n            $(`.aim-room-item[data-context=\"${firstContext}\"]`, chatWindow.content).addClass(\"aim-room-active\");\n            $(\".message_form .aim-to\", chatWindow.content).val(firstContext);\n        } else {\n            console.log(\"No available message containers or user lists\");\n        }\n    }\n\n    scrollToBottom(chatWindow.content);\n}\n\nfunction setupChatWindow(windowType, contextName, chatWindow) {\n    const chatWindowTemplate = this.messageTemplateString;\n    const cloned = document.createElement(\"div\");\n    cloned.innerHTML = chatWindowTemplate;\n\n    const aimMessagesContainer = $(\".aim-messages-container\", cloned)[0];\n    aimMessagesContainer.setAttribute(\"data-context\", contextName);\n    aimMessagesContainer.setAttribute(\"data-type\", windowType);\n    \n\n    if (windowType === \"buddy\") {\n        $(\".aim-user-list-area\", cloned).remove();\n        $(\".aim-room-list\", cloned).remove();\n        $('.aim-messages-header', cloned).remove();\n    } else {\n\n\n        const aimUserListContainer = $(\".aim-user-list\", cloned)[0];\n        aimUserListContainer.setAttribute(\"data-context\", contextName);        \n        aimUserListContainer.setAttribute(\"data-type\", windowType);\n\n        $('.aim-chat-title', cloned).text(`#${contextName.replace(\"pond/\", \"\")}`);\n\n        $('.joinPondForm', cloned).on('submit', (e) => {\n            e.preventDefault();\n            // get value from #customPondName\n            try {\n                let pondName = $('.customPondName').val();\n                joinPond.call(this, pondName);\n\n            } catch (err) {\n                console.error(\"Error joining pond:\", err);\n            }\n            return false;\n        });\n\n\n    }\n\n    chatWindow.container.classList.add(\"has-droparea\");\n    chatWindow.content.appendChild($(\".aim-window\", cloned)[0]);\n\n    setupAutocomplete.call(this, chatWindow);\n    setupChatWindowButtons.call(this, windowType, contextName, chatWindow);\n    setupMessageForm.call(this, windowType, contextName, chatWindow);\n    setupInputEvents.call(this, windowType, contextName, chatWindow);\n\n    if (windowType === \"pond\") {\n        $(\".aim-user-list-items\").on(\"click\", (e) => {\n            const username = $(e.target).closest('.aim-user-item').data(\"username\");\n\n            if (!username) {\n                console.error(\"No username found in clicked element\");\n                return;\n            }\n\n            this.openChatWindow({ name: username });\n\n\n        });\n\n        setupRoomListClickHandler.call(this, chatWindow);\n\n    }\n}\n\nfunction setupMessageForm(windowType, contextName, chatWindow) {\n    $(\".message_form .aim-to\", chatWindow.content).val(contextName);\n\n    $(\".message_form\", chatWindow.content).submit(async (e) => {\n        e.preventDefault();\n        await this.sendMessageHandler(e, chatWindow, windowType, contextName);\n    });\n}\n\nfunction setupRoomListClickHandler(chatWindow) {\n    $(\".aim-room-list-items\", chatWindow.content).on(\"click\", \".aim-room-item\", (e) => {\n        let selectedContext = $(e.target).parent().data(\"context\");\n        if (!selectedContext) {\n            console.warn(\"No context found for clicked room item target\", e.target);\n            return;\n        }\n        selectedContext = selectedContext.replace(\"pond/\", \"\");\n        //console.log(\"Selected context:\", selectedContext);\n        $(\".aim-room-item\", chatWindow.content).removeClass(\"aim-room-active\");\n        $(e.target).addClass(\"aim-room-active\");\n        ensureMessagesContainer.call(this, selectedContext, chatWindow, this.bp.apps.client);\n        $(\".message_form .aim-to\", chatWindow.content).val(selectedContext);\n        toggleMessagesContainer(selectedContext, chatWindow);\n        // TODO: Implement logic to load messages for selectedContext\n    });\n}\n\nfunction setupCloseButtonHandler(chatWindow, client) {\n    // Handle both .aim-close-chat-btn (in .aim-messages-container) and .aim-room-close-btn (in room list)\n    $(\".aim-chat-area, .aim-room-list-items\", chatWindow.content).on(\"click\", \".aim-close-chat-btn, .aim-room-close-btn\", (ev) => {\n        ev.stopPropagation();\n        const parentElement = ev.target.closest(\".aim-messages-container, .aim-room-item\");\n        if (!parentElement) return;\n\n        const context = parentElement.getAttribute(\"data-context\");\n        console.log(\"Closing pond chat for context:\", context);\n\n        // Remove subscription and container\n        client.removeSubscription(\"pond\", context);\n        $(`.aim-messages-container[data-context=\"${context}\"]`, chatWindow.content).remove();\n        $(`.aim-room-item[data-context=\"${context}\"]`, chatWindow.content).remove();\n\n        // Update active ponds\n        this.data.activePonds = this.data.activePonds.filter((pond) => pond !== context);\n\n        // clear out this.data.processedMessages[contextName] = [];\n        if (this.data.processedMessages[context]) {\n            this.data.processedMessages[context] = [];\n        }\n\n        // Switch to another pond or hide all containers\n        const remainingContainers = $(\".aim-messages-container\", chatWindow.content);\n        if (remainingContainers.length > 0) {\n            const nextContext = remainingContainers.first().data(\"context\");\n            toggleMessagesContainer(nextContext, chatWindow);\n            $(\".aim-room-item\", chatWindow.content).removeClass(\"aim-room-active\");\n            $(`.aim-room-item[data-context=\"${nextContext}\"]`, chatWindow.content).addClass(\"aim-room-active\");\n            $(\".message_form .aim-to\", chatWindow.content).val(nextContext);\n        } else {\n            $(\".aim-messages-container\", chatWindow.content).hide();\n            $(\".message_form .aim-to\", chatWindow.content).val(\"\");\n        }\n\n        // find the .aim-room-list-item with data-pond matching context\n        const roomItem = $(`.aim-room-item[data-context=\"pond/${context}\"]`, chatWindow.content);\n        // find the .aim-room-list-item and remove active class\n        $(\".aim-room-list-item-name\", roomItem).removeClass(\"aim-room-active\");\n\n        // get current count of .aim-chat-area, if 2 show .no-open-ponds\n        const chatAreas = $(\".aim-chat-area\", chatWindow.content);\n        console.log(\"Current chat areas count:\", chatAreas.length);\n        /*\n        if (chatAreas.length <= 1) {\n            $(\".no-open-ponds\", chatWindow.content).flexShow();\n            $('.aim-message-controls', chatWindow.content).hide();\n        }\n        else {\n            $(\".no-open-ponds\", chatWindow.content).hide();\n            $('.aim-message-controls', chatWindow.content).flexShow();\n        }\n        */\n\n    });\n}\n\n\nfunction joinPond(pondName) {\n\n    if (!pondName) {\n        console.error(\"Pond name is required to join a pond.\");\n        return;\n    }\n\n    // currently all ponds exists in the main \"server\" context, pond_messages_main\n    let chatWindow = this.bp.apps.ui.windowManager.getWindow('pond_message_main');\n\n    if (!chatWindow) {\n        // we may want to open  bp.open('buddylist', { context: pondName, type: 'pond' }); in this case\n        console.error(\"Pond message main window not found, cannot join pond.\");\n        // TODO: might be easier to just open the window here instread of parent API doing it\n        // see: apps/pond/pond.js for example\n        /*\n        const pondMainWindow = this.bp.apps.ui.windowManager.getWindow('pond_message_main');\n        if (pondMainWindow) {\n            this.bp.apps.buddylist.joinPond(pondName);\n            pondMainWindow.focus();\n        } else {\n            this.bp.apps.buddylist.openChatWindow({ pondname: pondName });\n        }\n        */\n        return;\n    }\n    // this.openChatWindow({ pondname: pondName });\n    let selectedContext = `${pondName}`;\n    ensureMessagesContainer.call(this, selectedContext, chatWindow, this.bp.apps.client);\n    $(\".message_form .aim-to\", chatWindow.content).val(selectedContext);\n    toggleMessagesContainer(selectedContext, chatWindow);\n\n}","const defaultProfileFiles = {\n    'index.html': `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>My BuddyPond Profile</title>\n    <link rel=\"stylesheet\" href=\"./style.css\">\n</head>\n<body>\n    <h1>My Profile</h1>\n    <div class=\"profile-section\">\n        <p>Welcome to my BuddyPond profile, hosted on the BuddyPond CDN!</p>\n        <p><strong>Customize Your Profile:</strong></p>\n        <ul>\n            <li>This default profile includes <code>index.html</code>, <code>style.css</code>, and <code>profile.js</code>.</li>\n            <li>You may use any files, the only requirement is <code>index.html</code> must be located in root.</li>\n            <li>Edit or upload files in the <strong>Buddy Files</strong> app (root directory).</li>\n            <li>Add any static files (HTML, CSS, JS, images) or projects (e.g., React, Vue).</li>\n            <li>Use relative paths (e.g., <code>./style.css</code>) to link files.</li>\n        </ul>\n        <p><strong>Example:</strong> Click to change text color.</p>\n        <button id=\"toggleButton\">Toggle Text Color</button>\n        <p class=\"color-text\">This text changes color!</p>\n    </div>\n    <script src=\"./profile.js\"></script>\n</body>\n</html>`,\n    'style.css': `\nbody {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    background-color: #f4f4f9;\n    color: #333;\n    margin: 0;\n    padding: 20px;\n    line-height: 1.5;\n}\nh1 {\n    color: #007bff;\n    text-align: center;\n}\n.profile-section {\n    max-width: 600px;\n    margin: 0 auto;\n}\nul {\n    padding-left: 20px;\n    font-size: 0.9em;\n}\ncode {\n    background: #f0f0f0;\n    padding: 2px 4px;\n    border-radius: 3px;\n}\nbutton {\n    background-color: #007bff;\n    color: white;\n    padding: 8px 16px;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n    display: block;\n    margin: 10px auto;\n}\nbutton:hover {\n    background-color: #0056b3;\n}\n.color-text {\n    font-size: 1.1em;\n    text-align: center;\n    transition: color 0.3s ease;\n}\n.color-text.toggled {\n    color: #dc3545;\n}`,\n    'profile.js': `\nconst text = document.querySelectorAll('.color-text');\nconst button = document.getElementById('toggleButton');\nbutton.addEventListener('click', () => {\n    text.forEach(item => item.classList.toggle('toggled'));\n});\n`\n};\n\nexport default defaultProfileFiles;","\n// the best way to determine if user has a profile seems to be to just\n// check the CDN for index.html, style.css, and profile.js files\n// if any of them 404, we will programmatically create them here\n// generateDefaultProfile() is called on auth::qtoken ( login success )\n// so on each logic we will check if the profile exists\n// if we didn't do this, we'd have to check profile on File Explorer open or Profile open or Pad open,\n// which would result in a fragmented code and a delay in UI while we check for profile existence\n\nimport defaultProfileFiles from './defaultProfileFiles.js';\n\nexport default async function generateDefaultProfile(qtoken) {\n    const basePath = \"https://files.buddypond.com/\" + qtoken.me;\n\n    // TODO: move to portfolio / faucet\n    // await requestDefaultCoinAllocations.call(this, qtoken);\n\n\n    for (const [fileName, fileContent] of Object.entries(defaultProfileFiles)) {\n        try {\n            const response = await fetch(`${basePath}/${fileName}`);\n            if (!response.ok) throw new Error('File not found, needs creation');\n\n            // check if not 200 response\n            // if not, throw error\n            if (response.status !== 200) throw new Error('File not found, needs creation');\n\n            // check if new location is four-ohh-four, if so, throw error\n            if (response.url === 'https://buddypond.com/four-ohh-four') {\n                throw new Error('File not found, needs creation');\n            }\n\n        } catch (error) {\n            console.log(`Creating ${fileName}: ${error.message}`);\n            const blob = new Blob([fileContent], { type: getFileType(fileName) });\n            const file = new File([blob], fileName, {\n                type: blob.type,\n                lastModified: new Date()\n            });\n            file.filePath = `${fileName}`; // maybe\n\n            try {\n                await this.bp.apps.client.api.uploadFile(file);\n                console.log(`${fileName} uploaded successfully.`);\n            } catch (uploadError) {\n                console.error(`Error uploading ${fileName}: ${uploadError.message}`);\n            }\n        }\n    }\n}\n\nfunction getFileType(fileName) {\n    if (fileName.endsWith('.html')) return 'text/html';\n    if (fileName.endsWith('.css')) return 'text/css';\n    if (fileName.endsWith('.js')) return 'application/javascript';\n    return 'text/plain';\n}\n\n\nasync function requestDefaultCoinAllocations(qtoken) {\n    // before generating the default profile files ( for home page)\n    // we need to establish the users initial MEGA ( Megabytes ) asset allocation in their portfolio\n    // since the user's initial state will have no record, we can simply attempt to add\n    // backend will allow initial allocation of 10 MEGA to all users\n\n    //\n    // Request default MEGA allocation\n    //\n    try {\n        await this.bp.load('portfolio');\n\n\n        await this.bp.apps.portfolio.resource.apiRequest('POST', 'portfolio/' + qtoken.me + '/MEGA', {\n            symbol: 'MEGA',\n            owner: qtoken.me,\n            amount: 10,\n            available: 10,\n            price: 0.1,\n            cost: 0\n        });\n\n    } catch (error) {\n        console.log('Error creating MEGA asset for user', error);\n    }\n\n    //\n    // Request default GBP allocation\n    //\n    try {\n        await this.bp.load('portfolio'); // should be cached at this stage\n        await this.bp.apps.portfolio.resource.apiRequest('POST',  'portfolio/' + qtoken.me + '/GBP', {\n            symbol: 'GBP',\n            owner: qtoken.me,\n            amount: 10000,\n            available: 10000,\n            price: 0.001,\n            cost: 0\n        });\n    } catch (error) {\n        console.log('Error creating GBP asset for user', error);\n    }\n}","import scrollToBottom from \"./scrollToBottom.js\";\n\n// TODO: add logic for \"reply-message\" action\n//       reply-message action should open a small \"replying to\" box above the closest .aim-message-sender element\n//       The \"Replying to {BuddyName}\" box should contain the message text and a small \"cancel\" button at the right / end of the box\n//       We can assume that data-from will be the same as the sender of the message we are replying to\n\nexport default function bindMessageContextMenu() {\n\n\n\n  bindProfilePictureClick.call(this);\n\n  // Single event delegation for context menu, hover menu, and edit hint actions\n  document.addEventListener('click', (event) => {\n    const target = event.target;\n    let action = target.getAttribute('data-action');\n\n    // Handle context menu item click\n    if (target.classList.contains('aim-context-menu-item') && action) {\n      handleContextMenuItemClick.call(this, action, target);\n      return;\n    }\n\n    // Handle hover menu item click\n\n    // TODO: there must be a better way to do this\n    // Remark: The issue is that we wish to cover the click action for the parent item and all its potential children\n    let isHoverMenuAction = $(target).hasClass('aim-hover-menu-item') || $(target).parents().hasClass('aim-hover-menu-item');\n    action = target.getAttribute('data-action') || target.parentNode.getAttribute('data-action');\n\n    if (isHoverMenuAction && action) {\n      handleContextMenuItemClick.call(this, action, target);\n      return;\n    }\n\n    // Handle edit hint action click (escape/enter)\n    if (target.classList.contains('aim-edit-hint-action') && action) {\n      handleEditHintAction.call(this, action, target);\n      return;\n    }\n\n    // Handle reply cancel button click\n    if (target.classList.contains('aim-reply-cancel') && action === 'cancel-reply') {\n      // get the closest reply box\n      const replyBox = target.closest('.aim-reply-box');\n      cancelReply.call(this, replyBox);\n      return;\n    }\n\n    // Close existing context menu and reset hover menu\n    closeMenus.call(this);\n  });\n}\n\n// Handle context menu or hover menu item click\nfunction handleContextMenuItemClick(action, target) {\n  performAction.call(this, action, target);\n  if (action !== 'more-options') {\n    closeMenus.call(this);\n  }\n}\n\n// Handle edit hint action (escape/enter)\nfunction handleEditHintAction(action, target) {\n  const messageContent = target.closest('.aim-editable-container')?.querySelector('.aim-message-content');\n  if (!messageContent) {\n    console.error('No message content found for edit hint action');\n    return;\n  }\n\n  const messageUUID = messageContent.closest('.aim-chat-message')?.getAttribute('data-uuid');\n  const originalMessage = document.querySelector(`.aim-chat-message[data-uuid=\"${messageUUID}\"]`);\n  if (!originalMessage) {\n    console.error('No original message found');\n    return;\n  }\n\n  const messageData = {\n    uuid: messageUUID,\n    chatId: originalMessage.getAttribute('data-chat-id'),\n    text: originalMessage.getAttribute('data-original-text') || messageContent.innerText\n  };\n\n  if (action === 'cancel-edit') {\n    cancelEdit.call(this, messageContent, messageData.text);\n  } else if (action === 'save-edit') {\n    saveEdit.call(this, messageContent, messageData);\n  }\n\n}\n\n// Close active context and hover menus\nfunction closeMenus() {\n  if (this.activeMessageContextMenu) {\n    this.activeMessageContextMenu.remove();\n    this.activeMessageContextMenu = null;\n  }\n  if (this.activeMessageHoverMenu) {\n    this.activeMessageHoverMenu = null; // Rely on CSS for hiding hover menu\n  }\n  if (this.activeReplyBox) {\n    return;\n    this.activeReplyBox.remove();\n    this.activeReplyBox = null;\n    this.bp.replyMode = false;\n  }\n}\n\n// Perform the specified action\nfunction performAction(action, target) {\n  const closestTarget = target.closest('.aim-context-menu') || target.closest('.aim-chat-message');\n  if (!closestTarget) {\n    console.error('No closest target found');\n    return;\n  }\n  // console.log('closestTarget', closestTarget);\n  const messageUUID = closestTarget.getAttribute('data-uuid');\n  const messageChatId = closestTarget.getAttribute('data-chat-id');\n  const messageFrom = closestTarget.getAttribute('data-from');\n  const messageData = {\n    uuid: messageUUID,\n    chatId: messageChatId,\n    from: messageFrom,\n  };\n\n  const originalMessage = document.querySelector(`.aim-chat-message[data-uuid=\"${messageUUID}\"]`);\n  if (!originalMessage) {\n    console.error('No original message found');\n    return;\n  }\n\n  messageData.text = originalMessage.querySelector('.aim-message-content').innerText;\n\n  if (!messageData.uuid || !messageData.chatId) {\n    console.error('No message data found');\n    return;\n  }\n\n  switch (action) {\n    case 'add-reaction':\n      console.log('Add reaction clicked');\n      break;\n    case 'edit-message':\n      editMessage.call(this, messageData);\n      break;\n    case 'reply-message':\n      replyMessage.call(this, messageData, originalMessage);\n      break;\n    case 'more-options':\n      event.preventDefault();\n      const closestMessage = target.closest('.aim-chat-message');\n      console.log('closestMessage', closestMessage);\n      if (closestMessage) {\n        this.createMessageContextMenu(target, closestMessage);\n      }\n\n      break;\n    case 'quote-message':\n      console.log('Quote message clicked');\n      break;\n    case 'say-message':\n      console.log('Say message clicked');\n      console.log('sayMessage', messageData);\n      this.bp.emit('say::message', messageData);\n      break;\n    case 'report-message':\n      console.log('Report message clicked');\n      break;\n    case 'copy-message':\n      console.log('Copy message clicked');\n      break;\n    case 'delete-message':\n      deleteMessage.call(this, messageData);\n      break;\n    case 'cast-spell':\n      this.bp.open('spellbook', { context: messageData.from, output: 'buddy'});\n      break;\n    default:\n      console.error(`Unknown action: ${action}`);\n  }\n}\n\n// Delete a message\nfunction deleteMessage(messageData) {\n  console.log('Deleting message', messageData);\n  buddypond.removeInstantMessage(messageData);\n}\n\n// Edit a message\nfunction editMessage(messageData) {\n  const messageContent = document.querySelector(\n    `.aim-chat-message[data-uuid=\"${messageData.uuid}\"] .aim-message-content`\n  );\n  if (!messageContent) {\n    console.error('No message content found');\n    return;\n  }\n\n  this.bp.ignoreUIControlKeys = true;\n  const originalText = messageData.text;\n\n  // Wrap message content in an editable container\n  const editableContainer = document.createElement('div');\n  editableContainer.className = 'aim-editable-container';\n  messageContent.parentNode.insertBefore(editableContainer, messageContent);\n  editableContainer.appendChild(messageContent);\n\n  // Store original text for restoration\n  messageContent.closest('.aim-chat-message').setAttribute('data-original-text', originalText);\n\n  // Make content editable\n  messageContent.setAttribute('contenteditable', 'true');\n  messageContent.setAttribute('data-editing', 'true');\n  messageContent.focus();\n\n  // Add UX hint message\n  const editHint = document.createElement('div');\n  editHint.className = 'aim-edit-hint';\n  editHint.innerHTML = `\n    <span class=\"aim-edit-hint-action\" data-action=\"cancel-edit\">escape</span> to cancel • \n    <span class=\"aim-edit-hint-action\" data-action=\"save-edit\">enter</span> to save\n  `;\n  editableContainer.appendChild(editHint);\n\n  // find the closest chatWindow\n  const chatWindow = messageContent.closest('.chatWindow');\n\n  scrollToBottom(chatWindow);\n\n  // Named event handler for keydown\n  const handleKeydown = (event) => {\n    if (event.key === 'Escape') {\n      cancelEdit.call(this, messageContent, originalText);\n      cleanupListeners();\n      event.preventDefault();\n      event.stopPropagation();\n    } else if (event.key === 'Enter') {\n      saveEdit.call(this, messageContent, messageData);\n      cleanupListeners();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  };\n\n  // Named event handler for blur\n  const handleBlur = (ev) => {\n    // ensure the target was not \".aim-edit-hint-action\"\n    console.log('handleBlur', ev.relatedTarget, ev.target.classList);\n    if (ev.relatedTarget && !ev.relatedTarget.classList.contains('aim-edit-hint-action')) {\n      cancelEdit.call(this, messageContent, originalText);\n      cleanupListeners();\n    }\n  };\n\n  // Cleanup function for event listeners\n  const cleanupListeners = () => {\n    messageContent.removeEventListener('keydown', handleKeydown);\n    messageContent.removeEventListener('blur', handleBlur);\n    this.bp.ignoreUIControlKeys = false;\n  };\n\n  // Attach event listeners\n  messageContent.addEventListener('keydown', handleKeydown);\n  messageContent.addEventListener('blur', handleBlur);\n\n  console.log('Editing message', messageData);\n}\n\n// Cancel editing and restore original text\nfunction cancelEdit(messageContent, originalText, restoreText = true) {\n  const editableContainer = messageContent.closest('.aim-editable-container');\n  if (editableContainer) {\n    // Move messageContent back to its original parent\n    editableContainer.parentNode.insertBefore(messageContent, editableContainer);\n    editableContainer.remove();\n  }\n\n  messageContent.setAttribute('contenteditable', 'false');\n  messageContent.removeAttribute('data-editing');\n  if (restoreText) {\n    messageContent.innerText = originalText;\n  }\n  messageContent.blur();\n\n  const messageElement = messageContent.closest('.aim-chat-message');\n  if (messageElement) {\n    messageElement.removeAttribute('data-original-text');\n  }\n\n  console.log('Edit cancelled');\n  this.bp.ignoreUIControlKeys = false;\n}\n\n// Save edited message\nasync function saveEdit(messageContent, messageData) {\n  const editableContainer = messageContent.closest('.aim-editable-container');\n  if (editableContainer) {\n    console.log('Editable container found', editableContainer);\n    // Move messageContent back to its original parent\n    // throws error:  Failed to execute 'insertBefore' on 'Node': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?\n    // is the blur event already removing this?\n    //editableContainer.parentNode.insertBefore(messageContent, editableContainer);\n    //editableContainer.remove();\n  }\n\n  const newMessageText = messageContent.innerText;\n  messageContent.setAttribute('contenteditable', 'false');\n  messageContent.removeAttribute('data-editing');\n  messageContent.blur();\n\n  const messageElement = messageContent.closest('.aim-chat-message');\n  if (messageElement) {\n    messageElement.removeAttribute('data-original-text');\n  }\n\n  console.log('Edit saved', newMessageText);\n\n  await buddypond.editInstantMessage({\n    from: messageData.from,\n    chatId: messageData.chatId,\n    uuid: messageData.uuid,\n    text: newMessageText,\n  });\n\n  // close the edit hint\n  cancelEdit.call(this, messageContent, null, false);\n}\n\n// Reply to a message\nfunction replyMessage(messageData, originalMessage) {\n  // Close any existing reply box\n  if (this.activeReplyBox) {\n    this.activeReplyBox.remove();\n    this.activeReplyBox = null;\n  }\n\n\n  this.bp.ignoreUIControlKeys = true;\n  this.bp.replyData = messageData; // Store reply data for message submission\n\n  // Create reply box\n  const replyBox = document.createElement('div');\n  replyBox.className = 'aim-reply-box';\n  replyBox.innerHTML = `\n    <span class=\"aim-reply-header\">Replying to ${messageData.from}</span>\n    <button class=\"aim-reply-cancel\" data-action=\"cancel-reply\">Cancel</button>\n  `;\n  //   <span class=\"aim-reply-text\">${messageData.text}</span>\n\n\n  // Insert reply box above .aim-message-sender\n  console.log(\"originalMessage\", originalMessage)\n  const messageSender = $(originalMessage).parent().parent().parent().parent().find('.aim-message-sender')[0];\n  console.log('REEE messageSender', messageSender);\n  if (!messageSender) {\n    console.error('No message sender found');\n    return;\n  }\n  messageSender.parentNode.insertBefore(replyBox, messageSender);\n\n  // Store active reply box\n  this.activeReplyBox = replyBox;\n  // this.activeReplyUUID = messageData.uuid;\n  // find the closet input named \"message_replyto\"\n  const replyInput = replyBox.closest('.chatWindow').querySelector('input[name=\"message_replyto\"]');\n  const messageTextInput = replyBox.closest('.chatWindow').querySelector('textarea[name=\"message_text\"]');\n  // set the value of the input to the messageData.uuid\n  // set the focus to the replyInput\n  if (replyInput) {\n    replyInput.value = messageData.uuid;\n  } else {\n    console.error('No reply input found');\n  }\n  if (messageTextInput) {\n    messageTextInput.focus();\n  } else {\n    console.error('No message text input found');\n  }\n\n  // Find the closest chatWindow and scroll to bottom\n  const chatWindow = originalMessage.closest('.chatWindow');\n  if (chatWindow) {\n    scrollToBottom(chatWindow);\n  }\n\n  const handleKeydown = (event) => {\n    if (event.key === 'Escape') {\n      //cancelEdit(messageContent, originalText);\n      cancelReply.call(this, replyBox);\n      cleanupListeners();\n      event.preventDefault();\n      event.stopPropagation();\n    } else if (event.key === 'Enter') {\n      // saveEdit.call(this, messageContent, messageData);\n      cleanupListeners();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  };\n\n  // Cleanup function for event listeners\n  const cleanupListeners = () => {\n    messageTextInput.removeEventListener('keydown', handleKeydown);\n    // messageTextInput.removeEventListener('blur', handleBlur);\n    this.bp.ignoreUIControlKeys = false;\n  };\n\n  messageTextInput.addEventListener('keydown', handleKeydown);\n\n  console.log('Reply mode activated', messageData);\n\n}\n\n// Cancel reply mode\nfunction cancelReply(replyBox) {\n  console.log('Cancel reply', replyBox);\n  console.log('aimReplyBox', replyBox);\n  if (replyBox) {\n\n    // clear out the .aim-replyto input value\n    const replyInput = replyBox.closest('.chatWindow').querySelector('input[name=\"message_replyto\"]');\n    if (replyInput) {\n      replyInput.value = '';\n    } else {\n      console.error('No reply input found');\n    }\n\n    replyBox.remove();\n    this.activeReplyBox = null;\n    this.bp.ignoreUIControlKeys = false;\n    this.bp.replyData = null;\n  }\n\n  console.log('Reply cancelled');\n}\n\nfunction bindProfilePictureClick() {\n\n  document.addEventListener('click', (event) => {\n    let target = event.target;\n    // if target is svg and parent has class aim-profile-picture\n    // console.log(' bindProfilePictureClick target', target, target.tagName);\n    if ($(target).parents().hasClass('aim-profile-picture')) {\n      //if (target.classList.contains('.aim-avatar')) {\n      const chatMessageElement = target.closest('.aim-chat-message')\n      if (!chatMessageElement) {\n        // console.error('No chat message element found');\n        return;\n      }\n      let buddyname = chatMessageElement.getAttribute('data-from');\n      console.log('Profile picture clicked', buddyname);\n\n      if (buddyname === this.bp.me) {\n        // opens profile edit page\n        this.bp.open('profile', { context: 'edit' });\n      } else {\n        // opens profile page\n        // this.bp.emit('profile::view', buddyname);\n        this.bp.open('user-profile', { context: buddyname });\n\n      }\n\n    }\n  });\n\n}","import createWebSocketClient from './createWebSocketClient.js';\n\nexport default class Client {\n  constructor(bp, options = {}) {\n    this.bp = bp;\n    this.config = {\n      host: \"\",\n      api: \"\",\n    };\n\n    this.api = buddypond;\n\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 999999; // Set to a high number for unlimited attempts\n    this.maxBackoffDelay = 10000; // 10 seconds\n    this.isIntentionallyClosed = false; // Flag to track intentional closure\n\n    return this;\n  }\n}\n\nClient.prototype.connect = async function connectBuddyListWs() {\n  console.log(\"Connecting to BuddyList WebSocket...\");\n  this.wsClient = await this.createWebSocketClient();\n  console.log(\"Connected to BuddyList WebSocket:\", this.wsClient);\n  // TODO: needs to return / await the connection event\n  // TODO: should emit buddylist::connected event ( not auth::qtokenid event )\n  this.bp.emit('buddylist::connected', this.wsClient);\n}\n\nClient.prototype.disconnect = async function disconnectBuddyListWs() {\n  console.log(\"Attempting disconnecting from BuddyList WebSocket...\");\n  if (this.wsClient) {\n    this.wsClient.closeConnection();\n    this.wsClient = null;\n    console.log(\"Disconnected from BuddyList WebSocket\");\n  } else {\n    console.log(\"No active WebSocket connection to disconnect\");\n  }\n}\n\nClient.prototype.addBuddy = async function addBuddy(buddyname, cb) {\n  console.log(\"NEW Calling addBuddy\", this, buddyname);\n\n  apiRequest('/buddylist/' + this.bp.me + '/add-buddy', 'POST', {\n    buddyname: buddyname\n  }, function (err, data) {\n    cb(err, data);\n  })\n}\n\nClient.prototype.receivedInstantMessage = async function receivedInstantMessage(buddyName, cb) {\n  this.wsClient.send(JSON.stringify({\n    action: \"receivedInstantMessage\",\n    buddyname: buddyName,\n  }));\n  cb(null);\n}\n\nClient.prototype.setStatus = async function setStatus(buddyName, update, cb = function noop () {}) {\n  // use wsClient to send the status update\n  console.log('calling setStatus', buddyName, update);\n  this.wsClient.send(JSON.stringify({\n    action: \"setStatus\",\n    buddyname: buddyName,\n    status: update.status,\n    profilePicture: update.profilePicture\n  }));\n  cb(null);\n};\n\nClient.prototype.createWebSocketClient = createWebSocketClient;\n\nfunction apiRequest(uri, method, data, cb) {\n  let url;\n\n  url = buddypond.endpoint + uri;\n\n  // console.log(\"making apiRequest\", url, method, data);\n\n  let headers = {\n    \"Accept\": \"application/json\",\n    \"Content-Type\": \"application/json; charset=utf-8\",\n    \"X-Me\": buddypond.me, // ✅ Include X-Me header for user identification\n  };\n\n  if (buddypond.qtokenid) {\n    headers[\"Authorization\"] = `Bearer ${buddypond.qtokenid}`; // ✅ Use Authorization header\n  }\n\n  let body = method === \"POST\" ? JSON.stringify(data) : undefined;\n\n  // Prepare fetch options\n  const options = {\n    method: method,\n    headers: headers,\n    body: body,\n    // credentials: \"include\",  // ✅ Allow CORS with cookies/auth headers\n  };\n\n  // Handling fetch timeout manually\n  const controller = new AbortController();\n  const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 sec timeout\n\n  buddypond.incrementPackets(\"packetsSent\");\n  let perf = { start: new Date() };\n  // console.log(\"apiRequest\", url, options);\n  fetch(url, { ...options, signal: controller.signal })\n    .then(response => {\n      clearTimeout(timeoutId);\n      if (!response.ok) {\n        // Parse JSON for non-2xx responses\n        return response.json().then(errorData => {\n          // Create a custom error with status and JSON data\n          const error = new Error(`HTTP ${response.status}: ${response.statusText}`);\n          error.status = response.status;\n          error.data = errorData; // Attach JSON payload\n          throw error;\n        });\n      }\n      return response.json();\n    })\n    .then(data => {\n      buddypond.incrementPackets(\"packetsReceived\");\n      perf.end = new Date();\n      buddypond.addPerfTime(perf);\n      cb(null, data);\n    })\n    .catch(error => {\n      let msg = \"Fetch connection error. Retrying shortly.\";\n      if (error.name === \"AbortError\") {\n        msg = \"Fetch request timeout\";\n      } else if (error.message.includes(\"Payload Too Large\")) {\n        msg = \"File upload was too large. Try a smaller file.\";\n      } else if (error.status === 400 && error.data) {\n        // Use the JSON payload from the 400 error\n        msg = error.data.error || error.data.message || \"Invalid input. Please try again.\";\n      } else {\n        msg = error.message;\n      }\n      console.error(\"❌ API Request Failed:\", error);\n      cb(new Error(msg), error.data || null);\n    });\n}","// TODO: decouple Buddylist class from Message Class\n// TODO: formalize Message class\n\nimport processBuddylist from \"./lib/processProfile.js\";\nimport renderOrUpdateBuddyInBuddyList from \"./lib/renderOrUpdateBuddyInBuddyList.js\";\nimport createChatMessageElement from \"./lib/message/createChatMessageElement.js\";\nimport renderChatMessage from \"./lib/message/renderChatMessage.js\";\nimport renderBuddyRequests from \"./lib/renderBuddyRequests.js\";\nimport buddylistUIEvents from \"./lib/buddylistUIEvents.js\";\nimport openChatWindow from \"./lib/openChatWindow.js\";\nimport generateDefaultProfile from \"./lib/generateDefaultProfile.js\";\nimport requestDefaultCoinAllocations from \"./lib/requestDefaultCoinAllocations.js\";\nimport defaultChatWindowButtons from \"./lib/defaultChatWindowButtons.js\";\nimport sortBuddyList from \"./lib/sortBuddyList.js\";\n// buddylist context menu\nimport showContextMenu from \"./lib/showContextMenu.js\";\n// chat message context menu\nimport bindMessageContextMenu from \"./lib/message/bindMessageContextMenu.js\";\nimport createMessageContextMenu from \"./lib/message/createMessageContextMenu.js\";\nimport loadUserApps from \"./lib/loadUserApps.js\";\n\nimport sendMessageHandler from \"./lib/message/sendMessageHandler.js\";\nimport showCard from \"./lib/message/showCard.js\";\nimport scrollToBottom from \"./lib/message/scrollToBottom.js\";\n\nimport defaultAvatarSvg from \"./lib/buddy/defaultAvatarSvg.js\";\n\n\n\n// new ws api\nimport Client from './lib/ws/Client.js';\n\n// TODO: why does client care about making UUID at all?\n// this is the responsibility of the server\n// TODO: remove uuid(), is most likely used for local render of message before server confirms ( which is removed atm )\nfunction uuid() {\n    return new Date().getTime();\n}\n\nexport default class BuddyList {\n    constructor(bp, options = {}) {\n        this.bp = bp;\n        this.data = {\n            processedMessages: {},\n            profileState: {\n                me: null,\n                status: null, // are these used?\n                profilePicture: null, // are these used?\n                updates: {}\n            },\n            avatarCache: new Map()\n        };\n\n        this.defaultPond = 'Buddy';\n        this.subscribedBuddies = [];\n        this.subscribedPonds = [];\n        this.options = options;\n        this.showedHelp = false;\n\n        // alias global logout to the buddylist logout\n        // buddylist logout will handle both buddylist and message logout\n        this.bp.logout = this.logout.bind(this);\n\n        // pull in the default button\n        this.options.chatWindowButtons = this.options.chatWindowButtons || defaultChatWindowButtons(this.bp);\n\n        // add any active buttons that have been added in this session\n        // add the this.bp.apps.desktop.enabledChatWindowButtons array to this.options.chatWindowButtons\n\n        let enabledChatWindowButtons = this.bp.apps.desktop.enabledChatWindowButtons;\n        // iterate through each button and fetch the appList data.chatButton data ( hydrate the button )\n        if (enabledChatWindowButtons && Array.isArray(enabledChatWindowButtons)) {\n            enabledChatWindowButtons.forEach(buttonMeta => {\n                let app = this.bp.apps.desktop.appList[buttonMeta.name];\n                if (app && app.chatButton) {\n                    this.options.chatWindowButtons.push(app.chatButton);\n                }\n            });\n        }\n\n        this.opened = false;\n        this.showingIsTyping = this.showingIsTyping || {};\n\n        this.activeMessageContextMenu = null;\n\n        this.faucetAttempts = 0;\n\n    }\n\n    async init() {\n        // Add event when user closes browser window or navigates away\n        window.addEventListener('beforeunload', (event) => {\n            // Show warning message\n            //event.preventDefault();\n            //event.returnValue = \"Are you sure you want to leave? Your status will be set to offline.\";\n            // Attempt to set status to offline (you may need a sync alternative)\n            // if page has quickly refreshed, client might be defined yet or connected\n            if (this.client) {\n                this.client.setStatus(this.bp.me, {\n                    status: 'offline'\n                }, function (err, re) {\n                    console.log('buddypond.setStatus', err, re);\n                });\n\n            }\n            //return event.returnValue;\n        });\n        // this.bp.load('ramblor');\n\n        await this.bp.appendScript('/v5/apps/based/buddylist/vendor/marked.min.js');\n\n        // TODO: we can load this lazier\n        this.bp.vendor.dicebear = await this.bp.importModule('/v5/apps/based/buddylist/vendor/dicebear.core.js', {}, false);\n        this.bp.vendor.dicebearAvatars = await this.bp.importModule('/v5/apps/based/buddylist/vendor/dicebear.identicon.js', {}, false);\n        //console.log('LOADED dicebear', this.dicebear);\n        //console.log('LOADED dicebearAvatars', this.dicebearAvatars);\n\n        this.bindMessageContextMenu();\n\n        // TODO: probably should remove this event and just use handleAuthSuccess handler?\n        /*\n        this.bp.on('auth::qtoken', 'connect-to-websocket-server', (qtoken) => {\n            //this.qtokenid = qtoken.qtokenid;\n            //this.api.qtokenid = this.qtokenid;\n            //this.api.me = qtoken.me;\n            //this.me = qtoken.me;\n            //this.bp.me = this.me;\n            //this.bp.qtokenid = this.qtokenid;\n            //this.client = new this.Client(bp);\n            //this.client.connect();\n        });\n        */\n\n    }\n\n    async open(config = { type: 'buddylist-profile' }) {\n        // buddylist supports (2) window types for bp.open('buddylist, { type: 'buddylist-profile' })\n        // 'buddylist-profile' - the default buddylist window\n        // 'buddylist-chat' - a chat window\n        // console.log('BuddyList open config', config)\n\n        if (typeof config.type !== 'string') {\n            config.type = 'buddylist-profile';\n        }\n\n        if (config.type === 'buddylist-profile') {\n\n            // TODO: have the ability to close and re-open the buddylist gracefully\n\n            if (this.opened) {\n                this.buddyListWindow.open();\n                this.bp.apps.ui.windowManager.focusWindow(this.buddyListWindow);\n                this.buddyListWindow.restore();\n                $('.loginForm input[name=\"username\"]').focus();\n                return 'buddylist already open';\n            }\n\n            this.opened = true;\n\n            const htmlStr = await this.bp.fetchHTMLFragment('/v5/apps/based/buddylist/buddylist.html');\n            this.messageTemplateString = await this.bp.fetchHTMLFragment('/v5/apps/based/buddylist/message.html');\n            this.bp.appendCSS('/v5/apps/based/buddylist/buddylist.css');\n            this.bp.appendCSS('/v5/apps/based/buddylist/messages.css');\n\n            // this.bp.apps.themes.applyTheme(this.bp.settings.active_theme);\n\n\n            // await this.bp.importModule('https://cdn.jsdelivr.net/npm/uuid@11.0.3/+esm', {}, false)\n\n            // loads affirmations messages via the affirmations app\n            let affirmations = await this.bp.importModule('affirmations');\n\n            const buddyListWindow = this.createBuddyListWindow();\n            buddyListWindow.content.appendChild(this.createHTMLContent(htmlStr));\n            this.buddyListWindow = buddyListWindow;\n            this.registerEventHandlers();\n            this.handleAuthentication();\n            this.buddylistUIEvents();\n            return 'hello buddyList';\n        }\n\n        // Remark: is this code still used? can we remove? handled by openChatWindow\n        // called from elsewhere?\n        if (config.type === 'pond') {\n            console.log('BuddyList open config.type is pond', config);\n            // the type of window is a chat window\n            // we *don't* need to re-render the buddylist-profile \n            this.openChatWindow(config);\n        }\n\n\n        if (config.type === 'chat') {\n            // the type of window is a chat window\n            // we *don't* need to re-render the buddylist-profile \n            this.openChatWindow(config);\n        }\n\n    }\n\n    createBuddyListWindow() {\n\n        // calculate right side of screen\n        let x = window.innerWidth - 350;\n\n        return this.bp.apps.ui.windowManager.createWindow({\n            app: 'buddylist',\n            type: 'buddylist-profile',\n            title: 'Buddy List',\n            icon: '/desktop/assets/images/icons/icon_profile_64.png',\n            id: 'buddyListWindow',\n            parent: this.bp.apps.ui.parent,\n            width: 250,\n            height: 500,\n            x: x,\n            y: 75,\n            onOpen: () => {\n\n                // Remark: We seeing a race condition where the input field is not focusable\n                // Most likely due to element being hidden / shown\n                // We hooked into window focus events and everything appeared OK in regards to conflicting focus() calls\n                // The issue is most likely due to the element being hidden\n                // This still doesn't work as intended since the element might actually be hidden\n                // TODO: find a better way to handle this\n                function focusOnInput() {\n                    const $loginInput = $('.loginForm input[name=\"username\"]');\n                    console.log('focusOnInput: Found elements:', $loginInput.length, $loginInput);\n\n                    // If the element doesn’t exist, retry after a delay\n                    if ($loginInput.length === 0) {\n                        console.log('Input not found, retrying in 100ms');\n                        setTimeout(focusOnInput, 100);\n                        return;\n                    }\n\n                    // Check if the element is focusable\n                    const input = $loginInput[0]; // Get the raw DOM element\n                    const isFocusable = input.offsetParent !== null && // Visible in the DOM\n                        !input.disabled && // Not disabled\n                        input.tabIndex !== -1 && // Focusable via tab\n                        getComputedStyle(input).visibility !== 'hidden' && // Not hidden\n                        getComputedStyle(input).display !== 'none'; // Not display: none\n\n                    if (!isFocusable) {\n                        console.log('Input is not focusable yet, retrying in 100ms', {\n                            isVisible: input.offsetParent !== null,\n                            isEnabled: !input.disabled,\n                            tabIndex: input.tabIndex,\n                            visibility: getComputedStyle(input).visibility,\n                            display: getComputedStyle(input).display\n                        });\n                        setTimeout(focusOnInput, 100);\n                        return;\n                    }\n\n                    // Attempt to focus and verify\n                    $loginInput.focus();\n                    setTimeout(() => {\n                        if (document.activeElement === input) {\n                            console.log('Focus successful on:', input);\n                        } else {\n                            console.warn('Focus failed, active element is:', document.activeElement);\n                            // Optionally retry\n                            setTimeout(focusOnInput, 100);\n                        }\n                    }, 0); // Check focus in the next tick\n                }\n                // focusOnInput();\n                // if we call this in console after load, it works\n                $('.loginForm input[name=\"username\"]').focus();\n\n            },\n            onClose: () => {\n                this.opened = false;\n            }\n        });\n\n    }\n\n    registerEventHandlers() {\n\n        this.bp.on('auth::qtoken', 'handle-auth-success', qtoken => this.handleAuthSuccess(qtoken));\n\n        // On auth success, load user specific apps ( TODO: should pull from DB )\n        this.bp.on('auth::qtoken', 'load-user-apps', qtoken => this.loadUserApps());\n\n        // Generate default profile files ( TODO: don't run this each time, keep track on profile state if users generated default profile )\n        this.bp.on('auth::qtoken', 'generate-default-profile-files', qtoken => {\n            // give the app a moment to load messages and open windows before generating default profile\n            // TODO: we could do this server-side instead\n            setTimeout(() => {\n                try {\n                    // alert('Generating default profile files');\n                    this.generateDefaultProfile(qtoken)\n\n                } catch (err) {\n                    console.error('generate-default-profile-files', err);\n                }\n            }, 6000);\n\n        });\n\n        this.bp.on('buddylist-websocket::connected', 'update-buddylist-connected', ws => {\n            // sets buddylist status to online\n            $('.onlineStatusSelect').val('online');\n            $('.loggedOut').flexHide();\n            $('.loggedIn').flexShow();\n\n            this.bp.apps.buddylist.client.wsClient.send(JSON.stringify({\n                action: 'getCoinBalance',\n                buddyname: this.bp.me,\n                qtokenid: this.bp.qtokenid,\n            }));\n\n            //$('.loggedIn').addClass('show');\n        });\n\n        // Remark: This has been removed in favor of letting windows manage their own state\n        // If the buddylist emits newMessages: true for a buddy, the window will open automatically calling getMessages\n        //this.bp.on('client::websocketConnected', 'get-latest-messages', ws => this.getLatestMessages());\n\n        this.bp.on('profile::buddylist', 'process-buddylist', ev => this.processBuddylist(ev.data));\n\n        this.bp.on('profile::buddy::in', 'render-or-update-buddy-in-buddylist', data => this.renderOrUpdateBuddyInBuddyList(data));\n        this.bp.on('profile::buddy::out', 'remove-buddy-from-buddylist', data => {\n            console.log('profile::buddy::out', data);\n            const buddyName = data.name;\n            let buddyListItem = $(`li[data-buddy=\"${buddyName}\"]`, '.buddylist');\n            console.log('buddyListItem', buddyListItem);\n            buddyListItem.remove();\n        });\n\n        this.bp.on('profile::fullBuddyList', 'render-or-update-buddy-in-buddylist', data => {\n            let buddylist = data.buddylist || {};\n            console.log('profile::buddy::full_profile', data);\n            for (let b in buddylist) {\n                let buddy = {\n                    name: b,\n                    profile: buddylist[b]\n                }\n                this.data.profileState = this.data.profileState || {};\n                this.data.profileState.buddylist = this.data.profileState.buddylist || {};\n\n                this.data.profileState.buddylist[b] = buddy.profile;\n                // console.log('renderOrUpdateBuddyInBuddyList', buddy);\n                this.renderOrUpdateBuddyInBuddyList(buddy);\n            }\n\n            if (buddylist[this.bp.me]) {\n                // for now...needs to change shape of server response to include root fields?\n                if (buddylist[this.bp.me].profile_picture) {\n                    console.log('setting profilePicture', buddylist[this.bp.me].profile_picture);\n                    this.data.profileState.profilePicture = buddylist[this.bp.me].profile_picture;\n                }\n                if (buddylist[this.bp.me].status) {\n                    console.log('setting status', buddylist[this.bp.me].status);\n                    this.data.profileState.status = buddylist[this.bp.me].status;\n                }\n            }\n\n            if (data.email) {\n                this.data.profileState.email = data.email;\n                // update the email input field\n                $('.buddy_email').val(data.email);\n            }\n\n            if (typeof data.emailVerified === 'boolean') {\n                this.data.profileState.emailVerified = data.emailVerified;\n                // update the email verified checkbox\n                // $('.buddy_email_verified').prop('checked', data.emailVerified);\n                if (data.emailVerified) {\n                    $('.buddy_email_verified_text').html('Email Verified');\n                } else {\n                    $('.buddy_email_verified_text').html('Email Not Verified');\n                }\n            }\n\n            // iterate through all buddies and call renderOrUpdateBuddyInBuddylist\n\n        });\n\n\n\n\n        // Remark: removing buddy-in sound because Marak account is friends without everyone is is constantly triggering the sound\n        // We'll have to be smarter about when to play sounds and limit the amount of BUDDY-IN a single buddy can trigger\n        // total amount of buddy-in sounds per time window ( in case of 100s of buddies, etc )\n        // this.bp.on('profile::buddy::in', 'play-buddy-in-sound', data => bp.play('desktop/assets/audio/BUDDY-IN.wav'));\n\n        // Remark: buddy-out sound disabled until new client connection logic with backend is fully tested \n        //         ( was triggering too many sounds too often )\n        //this.bp.on('profile::buddy::out', 'play-buddy-out-sound', data => bp.play('desktop/assets/audio/BUDDY-OUT.wav'));\n        this.bp.on('buddy::message::processed', 'play-im-sound', data => {\n            if (data.noAlert) {\n                // don't play sound if noAlert is set by server\n                return;\n            }\n            // only play sounds for recent messages\n            let messageTime = new Date(data.ctime);\n            let now = new Date().getTime();\n            //console.log(\"messageTime\", messageTime);\n            //console.log(\"now\", new Date());\n            if (now - messageTime.getTime() < 5000) {\n                bp.play('desktop/assets/audio/IM.wav');\n            }\n        });\n\n        this.bp.on('profile::buddy::newmessage', 'open-chat-window', data => {\n            // open the new chat window only if not already open\n            let windowId = `buddy_message_-` + data.name;\n            let win = this.bp.apps.ui.windowManager.getWindow(windowId);\n            if (!win) {\n                this.openChatWindow(data)\n            }\n        });\n\n        this.bp.on('profile::buddy::newmessage', 'mark-messages-as-read', data => this.buddyReadNewMessages(data));\n\n        this.bp.on('profile::buddy::calling', 'start-call', data => {\n            // legacy BP API\n            // console.log(\"profile::buddy::calling\", data);\n            desktop.app.videochat.startCall(false, data.name, function (err, re) {\n                console.log('startCall callback', err, re);\n            });\n\n        });\n\n        // buddylist should not respond to auth::logout \n        // this.bp.on('auth::logout', 'logout', () => this.logout());\n\n        this.bp.on('profile::status', 'update-profile-status', status => {\n            if (status === 'signout') {\n                this.logout()\n            }\n            this.client.setStatus(this.bp.me, { status }, function (err, re) {\n                if (err) {\n                    console.error('error setting status', err);\n                }\n                // console.log('setStatus', err, re);\n            });\n            /*\n            buddypond.setStatus(this.bp.me, { status }, function(err, re){\n                // console.log('errrrr', err, re);\n            });\n            */\n\n        });\n\n        this.bp.on('buddy::messages', 'render-chat-message', data => this.handleChatMessages(data));\n        this.bp.on('buddy::sendMessage', 'send-buddy-message-to-server', data => this.sendMessageToServer(data));\n        // this.bp.on('pond::sendMessage', 'send-pond-message-to-server', data => this.sendPondMessageToServer(data));\n\n        //this.bp.on('buddy::sendMessage', 'process-buddymessage-bs', data => this.bp.apps.buddyscript.parseCommand(data.text));\n        //this.bp.on('pond::sendMessage', 'process-pondmessage-bs', data => this.bp.apps.buddyscript.parseCommand(data.text));\n\n        // remote isTyping event from server\n        // TODO: move to separate file\n        this.bp.on(\"buddy::isTyping\", \"show-is-typing-message\", message => {\n            // console.log('show-is-typing-message', message);\n            // TODO: move to separate file\n            // TODO: move this to a separate file / function\n            // Handling typing message display\n            if (message.isTyping === true) {\n                // check to see if message.from is the same as the current user\n                // if so, ignore the message\n                if (message.from === this.bp.me) {\n                    return;\n                }\n\n                // check the ctime of the message\n                // console.log(\"isTyping message\", message);\n                let messageTime = new Date(message.ctime);\n                // console.log(\"messageTime\", messageTime.getTime());\n                let now = new Date().getTime();\n                let windowId;\n                if (message.type === 'buddy') {\n                    if (message.to === this.bp.me) {\n                        windowId = `buddy_message_-${message.from}`;\n                    } else {\n                        windowId = `buddy_message_-${message.to}`;\n                    }\n                }\n\n                if (message.type === 'pond') {\n                    windowId = `pond_message_-${message.to}`;\n                }\n\n                let chatWindow = this.bp.apps.ui.windowManager.getWindow(windowId);\n                // don't process isTyping messages over 3 seconds old\n                if (now - messageTime.getTime() > 3000) {\n                    // console.log(\"isTyping message too old\", message);\n                    // return;\n                }\n\n                let typingIndicatorId = `typing-${message.from}`;\n                let typingMessage = `${message.from} is typing...`;\n\n                // Check if the typing indicator for this user already exists\n                let typingIndicator = $(`.aim-typing span[data-user=\"${message.from}\"]`, chatWindow.content);\n                // console.log('typingIndicator', typingIndicator);\n                // console.log('typingMessage', typingMessage);\n                if (typingIndicator.length === 0) {\n                    // If it does not exist, create a new span and append it to the .aim-typing area\n                    typingIndicator = $('<span></span>')\n                        .attr('data-user', message.from)\n                        .text(typingMessage)\n                        .appendTo($('.aim-typing', chatWindow.content));\n                } else {\n                    // If it exists, just update the text\n                    typingIndicator.text(typingMessage);\n                }\n\n                // Clear any existing timeout for this user\n                // console.log(\"CLEARING OLD TIMER\")\n                if (this.showingIsTyping[typingIndicatorId]) {\n                    clearTimeout(this.showingIsTyping[typingIndicatorId]);\n                }\n\n                // console.log(\"CREATING NEW TIMER\")\n                // Set a new timeout to remove the typing message after very short pause\n                // since there already is a delay from the server\n                this.showingIsTyping[typingIndicatorId] = setTimeout(() => {\n                    typingIndicator.remove();\n                }, 500);\n                return;\n            }\n        })\n\n        // local typing event TOOD: better name\n        // when buddy is typing send a message to the ws server\n        this.bp.on('buddy::typing', 'send-typing-message-to-server', data => {\n            // we don't want to spam typing messages, so we will only send a message every 2 seconds\n            this.lastTypingMessage = this.lastTypingMessage || 0;\n            if (new Date().getTime() - this.lastTypingMessage < 2000) {\n                // return;\n            }\n            this.lastTypingMessage = new Date().getTime();\n            // console.log('buddy::typing', data);\n\n            let chatId = '';\n\n            if (data.type === 'buddy') {\n                let buddyNames = [data.from, data.to].sort();\n                chatId = 'buddy/' + buddyNames.join('/');\n            }\n\n            if (data.type === 'pond') {\n                chatId = 'pond/' + data.to;\n            }\n\n            bp.apps.client.sendWsMessage(chatId, {\n                action: 'send',\n                chatId: chatId,\n                buddyname: buddypond.me,\n                qtokenid: buddypond.qtokenid,\n                message: {\n                    ...data,\n                    chatId,\n                    isTyping: true\n                }\n            });\n            /*\n            if (data.type === 'pond') {\n                this.sendPondMessageToServer(data, false);\n            } else {\n                this.sendMessageToServer(data, false);\n            }\n            */\n            // this.bp.apps.client.sendMessage({ id: uuid(), method: 'sendMessage', data: data });\n\n\n        });\n\n        // TODO: this handler could instead bind to bp.apps.system.messages\n        // a System allows for sending and receiving messages to a sequence of handlers\n        /*\n        */\n        // the buddylist registers with the \"messages\" system\n        // in order to receive messages from other systems\n        /*\n        // this will get or create a system called \"messages\"\n        // the send and recieve handlers should get ordered in the order they are registered\n        // unless the order is specified, which should put the system in the correct order by number values and then undefined last\n        bp.apps.system.registerSystem('messages', {\n            registrant: 'buddylist',\n            send: {\n                // since send is missing name and handler, it will be ignored\n            },\n            receive: {\n                name: 'buddylist-processes-messages',\n                order: 2, // we can stack multiple systems in order\n                handler: (message) => {\n                    console.log('buddylist-processes-messages', message);\n                }\n            }\n        });\n        // this event can be anywhere, doesn't have to be in the buddylist\n        // prob should be though :-D\n        // by sending the events to the messages system, they will \n        // go through the processing chain ( if any exists for that system )\n        // and then we recieved via the receive handler\n        this.bp.on(\n            'buddy::messages',\n            'send-messages-to-messages-system',\n            data => this.bp.apps.systems.messages.send({\n                name: 'buddylist-processes-messages',\n                data: data\n        }));\n       // example of another app which filters messages\n\n        bp.apps.system.registerSystem('messages', {\n            registrant: 'shorten-text',\n            send: {\n                // since send is missing name and handler, it will be ignored\n            },\n            receive: {\n                name: 'shorten-text',\n                order: 1, // we can stack multiple systems in order\n                handler: (message) => {\n                    console.log('shorten text', message);\n                    return message.text.substr(0, 1);\n                }\n            }\n        });\n        */\n        this.bp.on('buddylist-websocket::reward', 'update-local-coin-balance', data => {\n            // TODO: move this into rewards app\n            //$('#menu-bar-coin-balance').text(data.message.newBalance);\n            if (!data.success) {\n                console.log(data.message);\n                return;\n            }\n            window.rollToNumber($('#menu-bar-coin-balance'), data.message.newBalance)\n\n            // TODO: better condition to check if portfolio app is loaded and ready\n            if (this.bp.apps.portfolio && this.bp.apps.portfolio.portfolioWindow && this.bp.apps.portfolio.portfolioWindow.content && this.bp.apps.portfolio.portfolioData) {\n\n                this.bp.apps.portfolio.updateCoinRow(data.message.symbol, {\n                    symbol: data.message.symbol,\n                    amount: data.message.newBalance,\n                    available: data.message.newBalance,\n                    price: 0.001,\n                    cost: 0.001 * data.message.newBalance\n                });\n\n                let coinSendSelector = $('#coin-send-name');\n                let coinSendBalance = $('#current-balance');\n\n                // if coinSendSelector value is \"GBP\"\n                if (coinSendSelector.val() === 'GBP') {\n                    // set the coin balance to the new balance\n                    // window.rollToNumber(coinSendBalance, data.message.newBalance)\n                    const formattedValue = data.message.newBalance.toLocaleString('en-US');\n\n                    coinSendBalance.text(formattedValue);\n                }\n            }\n        });\n\n        this.bp.on('buddylist-websocket::coinBalance', 'update-local-coin-balance', async (data) => {\n            console.log('buddylist-websocket::coinBalance', data);\n            if (typeof data.message.balance === 'number') {\n                window.rollToNumber($('#menu-bar-coin-balance'), data.message.balance)\n            } else {\n                this.faucetAttempts++;\n                // should work on 1, adds safe guard in case service is down\n                // we don't want to spam the faucet service or getCoinBalance\n                if (this.faucetAttempts < 3) {\n                    // request initial coin balance, null indicates no portfolio entry for GBP\n                    // if no portfolio entry, request the default coin allocations\n                    await this.requestDefaultCoinAllocations();\n                    // make another request to get the coin balance\n                    this.bp.apps.buddylist.client.wsClient.send(JSON.stringify({\n                        action: 'getCoinBalance',\n                        buddyname: this.bp.me,\n                        qtokenid: this.bp.qtokenid,\n                    }));\n                } else {\n                    console.warn('BuddyList: Too many faucet attempts, not requesting balance again this session');\n                }\n\n            }\n\n        })\n    }\n\n    createHTMLContent(htmlStr) {\n        const html = document.createElement('div');\n        html.innerHTML = htmlStr;\n        $('.loginForm input[name=\"username\"]').focus();\n        return html;\n    }\n\n    getLatestMessages() {\n        // This can also be called when closing a chat window to let the server\n        // know we are no longer interested in messages from that buddy or pond\n        const data = {\n            buddyname: this.subscribedBuddies.join(','),\n            pondname: this.subscribedPonds.join(','),\n            me: this.bp.me\n        };\n        this.bp.apps.client.sendMessage({ id: uuid(), method: 'getMessages', data: data });\n    }\n\n    buddyReadNewMessages(data) {\n        this.bp.log(\"BuddyReadNewMessages\", data);\n        const buddyName = data.name;\n    }\n\n    async handleChatMessages(data) {\n        // console.log('handleChatMessages', data);\n        let windowsToUpdate = new Set();\n        for (const message of data.result.messages) {\n            try {\n                // check to see if we have newMessages in local profile for message.from\n                // if so, send buddypond.receiveInstantMessage(message.from)\n                if (message.from && this.data.profileState && this.data.profileState.buddylist && this.data.profileState.buddylist[message.from] && this.data.profileState.buddylist[message.from].newMessages) {\n                    // console.log(\"SENDING READ NEWMESSAGES ALERT\");\n                    this.data.profileState.buddylist[message.from].newMessages = false;\n                    this.client.receivedInstantMessage(message.from, function (err, re) {\n                        console.log('receivedInstantMessage', err, re);\n                    });\n                }\n                // console.log('handleChatMessages message', message);\n                // return the chatWindow which the message was rendered in\n                let chatWindow = await this.renderChatMessage(message);\n                windowsToUpdate.add(chatWindow);\n\n            } catch (err) {\n                console.log('error rendering chat message', message, err)\n            }\n        }\n        for (const chatWindow of windowsToUpdate) {\n            if (chatWindow && chatWindow.content) {\n                this.scrollToBottom(chatWindow.content);\n            }\n        }\n\n        // show help card if local storage does not have the card shown\n        // TODO: remove false\n        // if (true || !this.bp.settings['viewed-help-card']) {\n        if (!this.showedHelp) {\n            let chatWindow = windowsToUpdate.values().next().value;\n            this.showCard({\n                chatWindow,\n                cardName: 'help'\n            });\n            // console.log('showing help card', chatWindow);\n            this.showedHelp = true;\n        }\n\n        /*\n        if (!localStorage.getItem('buddylist-help-card-shown')) {\n            localStorage.setItem('buddylist-help-card-shown', true);\n        }\n        */\n\n    }\n\n    sendMessageToServer(data, emitLocal = false) {\n        this.bp.log('buddy::sendMessage', data);\n        data.uuid = uuid();\n\n        if (data.text === '') {\n            console.log('will not sendMessageToServer: no text');\n            return;\n        }\n\n        // so confusing client.sendMessage....maybe should be sendWorkerMessage...dunno\n        if (data.type === 'pond') {\n            console.log('sendMessageToServer', data);\n            buddypond.pondSendMessage(data.to, data.text, data, function (err, result) {\n                console.log('pondSendMessage', err, result)\n                console.log(err, result)\n            })\n\n        }\n        if (data.type === 'buddy') {\n            console.log('sendMessageToServer', data);\n            buddypond.sendMessage(data.to, data.text, data, function (err, result) {\n                console.log('pondSendMessage', err, result)\n                console.log(err, result)\n            });\n        }\n        /*\n        this.bp.apps.client.sendMessage({ id: data.uuid, method: 'sendMessage', data: data });\n        data.name = data.to;\n        if (emitLocal) {\n            data.ctime = new Date().getTime();\n            if (this.data.profileState) {\n                data.location = this.data.profileState.location || 'outer space';\n            }\n            this.renderChatMessage(data);\n        }\n        */\n    }\n\n    /*\n    sendPondMessageToServer(data, emitLocal = false) {\n        data.type = 'pond';\n        this.bp.log('pond::sendMessage', data);\n        data.uuid = uuid();\n        data.pondname = data.to;\n        // console.log('sendPondMessageToServer', data);\n        this.bp.apps.client.sendMessage({ id: data.uuid, method: 'sendMessage', data: data });\n        if (emitLocal) {\n            data.ctime = new Date().getTime();\n            if (this.data.profileState) {\n                data.location = this.data.profileState.location || 'outer space';\n            }\n            this.renderChatMessage(data);\n        }\n    }\n    */\n\n    // called on open to verify token ( if exists )\n    // signup / login logic is in buddylistUIEvents.js\n    handleAuthentication() {\n        const api = this.bp.apps.client.api;\n        const localToken = localStorage.getItem('qtokenid');\n        const me = localStorage.getItem('me');\n        if (!localToken) return;\n        // console.log('localToken', localToken, me);\n        api.verifyToken(me, localToken, (err, data) => {\n            if (err) {\n                console.error('Failed to verify token:', err);\n                $('.password').show();\n                $('.loginForm .error').text('Failed to authenticate buddy');\n                return;\n            }\n            console.log('verified token', data);\n            if (data.success) {\n                // A pre-existing token was found and verified, emit the auth event\n                this.bp.emit('auth::qtoken', { qtokenid: localToken, me: me, hasPassword: data.user.hasPassword });\n                $('.loggedIn').flexShow();\n                $('.loggedOut').flexHide();\n                if (!data.user.hasPassword) {\n                    this.bp.open('pincode');\n                }\n\n                // loads the hotpond client that populates room lists\n                bp.load('pond');\n\n\n\n            } else {\n                $('.loginForm .error').text('Failed to authenticate buddy');\n                $('.password').show();\n                console.error('Failed to authenticate buddy:');\n            }\n        });\n\n    }\n\n    // TODO: this event should only set the qtokenid and local settings?\n    // it could open the chat window?\n    // maybe also could connect to the websocket server for buddylist?\n    // opening the default window initializes the messages client\n    async handleAuthSuccess(qtoken) {\n        // console.log('handleAuthSuccess', qtoken);\n        if (this.client) {\n            console.error('buddylist websocket client already exists and has not been closed. This should not happen');\n            return;\n        }\n\n        this.bp.me = qtoken.me;\n        this.bp.qtokenid = qtoken.qtokenid;\n        this.data.profileState = this.data.profileState || {};\n        this.data.profileState.me = this.bp.me;\n\n        $('#me_title').html('Welcome ' + this.bp.me);\n\n        // TODO: connect-to-websocket-server should happen here\n        // plays welcome message\n        this.bp.play('desktop/assets/audio/WELCOME.mp3', { tryHard: Infinity });\n\n\n        // this will eventually trigger the buddylist::connected event\n        this.client = new this.Client(bp);\n        let connected = await this.client.connect();\n\n        if (!qtoken.hasPassword){\n            // if the user does not have a password, open the pincode window\n            this.bp.open('pincode');\n        }\n\n        // wait until buddylist is connected and then opens default chat window if defined\n        if (this.defaultPond) {\n            setTimeout(() => {\n                let chatWindow = this.openChatWindow({ pondname: this.defaultPond });\n            }, 100);\n        }\n\n    }\n}\n\nBuddyList.prototype.renderOrUpdateBuddyInBuddyList = renderOrUpdateBuddyInBuddyList;\nBuddyList.prototype.createChatMessageElement = createChatMessageElement;\nBuddyList.prototype.renderChatMessage = renderChatMessage;\nBuddyList.prototype.renderBuddyRequests = renderBuddyRequests;\nBuddyList.prototype.processBuddylist = processBuddylist;\nBuddyList.prototype.buddylistUIEvents = buddylistUIEvents;\nBuddyList.prototype.openChatWindow = openChatWindow;\nBuddyList.prototype.generateDefaultProfile = generateDefaultProfile;\nBuddyList.prototype.requestDefaultCoinAllocations = requestDefaultCoinAllocations;\nBuddyList.prototype.sortBuddyList = sortBuddyList;\nBuddyList.prototype.showContextMenu = showContextMenu;\n\nBuddyList.prototype.createMessageContextMenu = createMessageContextMenu;\nBuddyList.prototype.bindMessageContextMenu = bindMessageContextMenu;\nBuddyList.prototype.loadUserApps = loadUserApps;\nBuddyList.prototype.sendMessageHandler = sendMessageHandler;\nBuddyList.prototype.showCard = showCard;\nBuddyList.prototype.scrollToBottom = scrollToBottom;\n\nBuddyList.prototype.defaultAvatarSvg = defaultAvatarSvg;\n\n\n// new API\nBuddyList.prototype.Client = Client;\n\n\nBuddyList.prototype.logout = function () {\n    // set status to online\n\n    $('.loginButton').prop('disabled', false);\n    $('.loginButton').removeClass('disabled');\n    $('#menu-bar-coin-balance').text('0');\n\n    this.client.setStatus(this.bp.me, {\n        status: 'offline'\n    }, (err, re) => {\n        console.log('buddypond.setStatus', err, re);\n        // close any open chat windows\n        $('.chatWindow').remove(); // maybe, they could stay open as well\n        // disconnect the client\n        // this.bp.apps.client.logout();\n        $('.password').val('');\n        $('.loggedIn').flexHide();\n        $('.loggedOut').flexShow();\n\n        this.data.profileState = null;\n        this.bp.play('desktop/assets/audio/GOODBYE.wav');\n        // TODO can we now remove bp.apps.client.logout()?\n        this.bp.apps.client.logout();\n        this.client.disconnect();\n        this.client = null;\n        // clear out the local .data scope\n        this.data = {\n            processedMessages: {},\n            profileState: {\n            },\n            activeUsersInContext: {},\n            activeUsers: [],\n            activePonds: []\n        };\n        // empty the buddylist\n        $('.buddylist').empty();\n\n        // hide any .dialog\n        $('.dialog').remove();\n\n    });\n}","// Remark: createWebSocketClient is a prototype method of Client, as Client.createWebSocketClient()\nexport default function createWebSocketClient() {\n  // Track reconnect state\n\n  console.log(`Creating WebSocket client for buddylist`);\n  return new Promise((resolve, reject) => {\n    const wsClient = new WebSocket(\n      `${buddypond.buddylistWsEndpoint}?me=${buddypond.me}&qtokenid=${buddypond.qtokenid}`\n    );\n\n    // Handle open event\n    const handleOpen = () => {\n      console.log('WebSocket connection opened to buddylist');\n      this.reconnectAttempts = 0; // Reset reconnect attempts\n\n      this.wsClient = wsClient; // Store the WebSocket instance\n\n      wsClient.send(\n        JSON.stringify({\n          action: 'getProfile',\n          buddyname: buddypond.me,\n          qtokenid: buddypond.qtokenid,\n        })\n      );\n      // Emit connected event\n      bp.emit('buddylist-websocket::connected');\n\n      /*\n      this.updateStatusInterval = setInterval(() => {\n        let status = 'online'; // Default status\n        try {\n          status = bp.apps.buddylist.data.profileState.status;\n        } catch (error) {\n          console.log('Error retrieving profile state status for updateStatusInterval:', error);\n        }\n        // console.log('Sending status update to buddylist:', status);\n        this.bp.emit('profile::status', status);\n      }, 1000 * 60 * 5); // Refresh status every 5 minutes\n      */  \n      /*\n      this.pingInterval = setInterval(() => {\n        if (wsClient.readyState === WebSocket.OPEN) {\n          wsClient.send(JSON.stringify({ action: 'ping' }));\n        }\n      }, 10000);\n      */\n      resolve(wsClient); // Resolve with the WebSocket instance\n    };\n\n    // Handle message event\n    // TODO: move to a separate function\n    const handleMessage = (event) => {\n      try {\n        const parseData = JSON.parse(event.data);\n        // console.log('Got back from server:', parseData);\n        switch (parseData.action) {\n          case 'buddy_added':\n            // console.log('buddy_added WebSocket message received:', parseData);\n            bp.emit('profile::buddy::in', {\n              name: parseData.buddyname,\n              profile: parseData.profile || { ctime: new Date().getTime(), dtime: 0 },\n            });\n            break;\n\n          case 'getRemoteProfiles':\n            console.log('getRemoteProfiles message received:', parseData);\n            if (parseData.profile && parseData.profile.buddylist) {\n              bp.emit('profile::fullBuddyList', parseData.profile);\n            } else {\n              console.error('getProfile message received but no buddylist:', parseData);\n            }\n\n            break;\n          case 'getProfile':\n            console.log('getProfile message received:', parseData);\n\n            if (parseData.profile && parseData.profile.buddylist) {\n              bp.emit('profile::fullBuddyList', parseData.profile);\n            } else {\n              console.error('getProfile message received but no buddylist:', parseData);\n            }\n            // TODO: after getting profile, create a new call that wil fetch all buddies DO's to get\n            // most updated state ( a reverse of setStatus() call )\n            // this will ensure we always get the most recent updates for all buddies in case our DO\n            // wasn't updated or missed an update or setStatus() truncation limit for users not recently active\n            // send a message now to getRemoteProfiles\n            console.log('Requesting remote profiles for all buddies');\n            // After getting the initial profile ( single DO state, quick load ),\n            // we can request remote profiles for all buddies\n            // This will fetch all buddies DO's and get their most recent state\n            // This is useful for getting the most recent updates for all buddies in case our DO\n            // wasn't updated or missed an update or setStatus() truncation limit for users not recently active\n            wsClient.send(\n              JSON.stringify({\n                action: 'getRemoteProfiles',\n                buddyname: buddypond.me,\n                qtokenid: buddypond.qtokenid,\n              })\n            );\n            break;\n          case 'ping':\n            // console.log('pong message received:', parseData);\n            break;\n          case 'buddy_removed':\n            // alert('buddy_removed WebSocket message received:', parseData);\n            console.log('buddy_removed WebSocket message received:', parseData);\n            this.bp.emit('profile::buddy::out', { name: parseData.buddyname });\n            break;\n          case 'rewards:response':\n            // console.log('rewards:response message received:', parseData);\n            if (parseData.success) {\n              bp.emit('buddylist-websocket::reward', {\n                success: true,\n                message: parseData.message,\n                reward: parseData.reward,\n              });\n\n            } else {\n              bp.emit('buddylist-websocket::reward', {\n                success: false,\n                message: parseData.message,\n              });\n            }\n            break;\n          case 'getCoinBalance':\n            console.log('getCoinBalance message received:', parseData);\n            if (parseData.success) {\n              bp.emit('buddylist-websocket::coinBalance', parseData);\n            } else {\n              bp.emit('buddylist-websocket::coinBalance', parseData);\n            }\n            break;\n          default:\n            console.log('Last message:', event.data);\n            console.warn('Unknown action received:', parseData);\n            break;\n        }\n      } catch (error) {\n        console.log('Last message:', event.data);\n        console.error('Error parsing WebSocket message:', error);\n        bp.emit('buddylist-websocket::error', { error: 'Message parsing failed' });\n      }\n    };\n\n    // Handle close event\n    const handleClose = (event) => {\n      console.log('WebSocket connection closed to', 'buddylist', 'Code:', event.code, 'Reason:', event.reason);\n\n      // clearInterval(this.pingInterval);\n      clearInterval(this.updateStatusInterval);\n\n      bp.emit('buddylist-websocket::disconnected', { code: event.code, reason: event.reason });\n\n      // Reconnect only if not intentionally closed\n      if (!this.isIntentionallyClosed && this.reconnectAttempts < this.maxReconnectAttempts) {\n        const delay = Math.min(\n          200 * Math.pow(2, this.reconnectAttempts) * (1 + 0.1 * Math.random()), // Exponential backoff with jitter\n          this.maxBackoffDelay\n        );\n        console.log(`Scheduling reconnect attempt ${this.reconnectAttempts + 1} for buddylist in ${delay}ms`);\n        setTimeout(async () => {\n          this.reconnectAttempts++;\n          bp.emit('buddylist-websocket::reconnecting', { attempt: this.reconnectAttempts });\n          try {\n            const newWsClient = await this.createWebSocketClient(); // Attempt to reconnect\n            // Update event listeners to the new WebSocket instance\n            Object.assign(wsClient, newWsClient);\n            this.wsClient = newWsClient;\n          } catch (error) {\n            console.error('Reconnect failed:', error);\n          }\n        }, delay);\n      } else if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n        console.error(`Max reconnect attempts (${this.maxReconnectAttempts}) reached for buddylist. Giving up.`);\n        bp.emit('buddylist-websocket::reconnect_failed');\n      }\n    };\n\n    // Handle error event\n    const handleError = (event) => {\n      console.error('WebSocket error buddylist', event);\n      bp.emit('buddylist-websocket::error', { error: 'WebSocket error' });\n      // Reject the promise if connection hasn't opened yet\n      if (wsClient.readyState !== WebSocket.OPEN) {\n        reject(new Error('WebSocket connection failed'));\n      }\n      // Close to trigger reconnect logic in handleClose\n      wsClient.close(1000, 'Error occurred');\n    };\n\n    // Add event listeners\n    wsClient.addEventListener('open', handleOpen.bind(this));\n    wsClient.addEventListener('message', handleMessage.bind(this));\n    wsClient.addEventListener('close', handleClose.bind(this));\n    wsClient.addEventListener('error', handleError.bind(this));\n\n    // Method to intentionally close the WebSocket\n    wsClient.closeConnection = () => {\n      this.isIntentionallyClosed = true;\n      console.log(`Intentionally closing WebSocket for buddylist`);\n      wsClient.close(1000, 'Normal closure');\n      // Remove event listeners to prevent memory leaks\n      wsClient.removeEventListener('open', handleOpen);\n      wsClient.removeEventListener('message', handleMessage);\n      wsClient.removeEventListener('close', handleClose);\n      wsClient.removeEventListener('error', handleError);\n      bp.emit('buddylist-websocket::closed');\n    };\n  });\n}","export default function defaultChatWindowButtons(bp) {\n\n    return [\n\n        {\n            text: 'Image Search',\n            image: 'desktop/assets/images/icons/icon_image-search_64.png',\n            onclick: async (ev) => {\n                let context = ev.target.dataset.context;\n                let type = ev.target.dataset.type;\n                // Open the image search window\n                bp.open('image-search', {\n                    output: type || 'buddy',\n                    context: context,\n                    provider: 'giphy-stickers'\n                });\n                return false;\n            }\n        },\n\n        {\n            text: 'BuddySound',\n            image: 'desktop/assets/images/icons/icon_soundrecorder_64.png',\n            onclick: (ev) => {\n                console.log('BuddySound button clicked', ev);\n                let context = ev.target.dataset.context;\n                let type = ev.target.dataset.type;\n                bp.open('soundrecorder', { type: type || 'buddy', output: type || 'buddy', context: context });\n\n            }\n        },\n        /* TOOD: add gifstudio back ( with better UX and features )\n        {\n            text: 'BuddyGif',\n            image: 'desktop/assets/images/icons/icon_gifstudio_64.png',\n            onclick: (ev) => {\n                let context = ev.target.dataset.context;\n                let type = ev.target.dataset.type;\n                JQDX.openWindow('gifstudio', { type: type || 'buddy', context: context, output: type || 'buddy' });\n            }\n        },\n        */\n        {\n            text: 'BuddyPaint',\n            image: 'desktop/assets/images/icons/icon_paint_64.png',\n            onclick: (ev) => {\n                let context = ev.target.dataset.context;\n                let type = ev.target.dataset.type;\n                bp.open('paint', { type: type || 'buddy', output: type || 'buddy', context: context });\n            }\n        },\n        {\n            text: 'BuddySnap',\n            image: 'desktop/assets/images/icons/svg/1f4f7.svg',\n            onclick: (ev) => {\n                let context = ev.target.dataset.context;\n                let type = ev.target.dataset.type;\n                // desktop.ui.openWindow('mirror', { type: type || 'buddy', context: context, output: type || 'buddy' });\n                bp.open('camera', { type: type || 'buddy', output: type || 'buddy', context: context });\n            }\n        },\n        {\n            text: 'BuddyEmoji',\n            image: 'desktop/assets/images/icons/svg/1f600.svg',\n            className: 'emojiPicker',\n            onclick: async (ev) => {\n                // EmojiPicker lazy load is a special case\n                // All other BuddyPond deps / lazy imports with await bp.load() are fine to work as expected\n                // We usually don't need to check existence of the app before loading it\n                // For EmojiPicker we need to recall the original click event with same parameters\n                // This could be resolved by using a new EmojiPicker library or patching the current one\n                if (!bp.apps['emoji-picker']) { // this is not a normal practice for user in await bp.load()\n                    await bp.load('emoji-picker');\n                    // Create a new MouseEvent with the original event's coordinates\n                    const newEvent = new MouseEvent('click', {\n                        bubbles: true,\n                        cancelable: true,\n                        clientX: ev.clientX, // Preserve original x coordinate\n                        clientY: ev.clientY, // Preserve original y coordinate\n                        // Include other relevant properties if needed\n                        button: ev.button,\n                        target: ev.target\n                    });\n                    // Dispatch the new event on the original target\n                    ev.target.dispatchEvent(newEvent);\n                    return;\n                }\n                // now that the emoji-picker is loaded, we can open it as normal\n\n                // focus on the .emojiPicker input\n                $('.emojiPicker').focus();\n\n                // we need to add class activeTextArea to the active textarea\n                // so we can append the emoji to the correct textarea\n                // remove the activeTextArea from all other textareas\n                $('.activeTextArea').removeClass('activeTextArea');\n\n                let messageControls = $(ev.target).closest('.aim-message-controls');\n                // find the closest textarea to the ev.target\n                $('.aim-input', messageControls).addClass('activeTextArea');\n\n            }\n        },\n        {\n            text: 'BuddyCall',\n            type: 'buddy-only',\n            image: 'desktop/assets/images/icons/icon_phone_64.png',\n            onclick: (ev) => {\n                let context = ev.target.dataset.context;\n                let type = ev.target.dataset.type;\n                // desktop.ui.openWindow('mirror', { type: type || 'buddy', context: context, output: type || 'buddy' });\n                bp.open('videochat', { type: type || 'buddy', output: type || 'buddy', context: context, isHost: true });\n\n                // should send message to buddy that will open the videocall window on receiving end\n                let message = {\n                    from: bp.me,\n                    to: context,\n                    text: 'Let\\'s have a video call',\n                    type: 'buddy',\n                    card: {\n                        type: 'videochat'\n                    }\n                }\n\n\n                console.log('BuddyCall message', message);\n                // send message to buddy\n                buddypond.sendCardMessage(message, function (err, response) {\n                    if (err) {\n                        console.error('Error sending message', err);\n                    } else {\n                        console.log('Message sent', response);\n                    }\n                });\n\n\n            }\n        },\n        // spellbook\n        {\n            text: 'Spellbook',\n            image: 'desktop/assets/images/icons/icon_spellbook_64.png',\n            onclick: (ev) => {\n                ev.preventDefault();\n                ev.stopPropagation();\n\n                let context = ev.target.dataset.context;\n                let type = ev.target.dataset.type;\n                // desktop.ui.openWindow('spellbook', { type: type || 'buddy', context: context, output: type || 'buddy' });\n                bp.open('spellbook', { type: type || 'buddy', output: type || 'buddy', context: context });\n            }\n        },\n        // buddycoins\n        {\n            text: 'BuddyCoins',\n            image: 'desktop/assets/images/icons/icon_coin_64.png',\n            onclick: (ev) => {\n                let context = ev.target.dataset.context;\n                let type = ev.target.dataset.type;\n                // desktop.ui.openWindow('coin', { type: type || 'buddy', context: context, output: type || 'buddy' });\n                bp.open('portfolio', { type: type || 'buddy', output: context, context: '#portfolio-transfer' });\n            }\n        },\n        /* // TODO: add Dictate with improved UX */\n        {\n            text: 'Dictate',\n            env: 'desktop-only',\n            image: 'desktop/assets/images/icons/icon_dictate_64.png',\n            onclick: async (ev) => {\n                let context = ev.target.dataset.context;\n                let type = ev.target.dataset.type;\n                let targetEl = $('.aim-input', $(ev.target).parent().parent());\n                await bp.open('dictate', { type: type || 'buddy', output: type || 'buddy', context: context, targetEl: targetEl });\n            }\n        },\n        {\n            text: 'BuddyHelp',\n            image: 'desktop/assets/images/icons/icon_help_64.png',\n            align: 'right',\n            onclick: (ev) => {\n                let context = ev.target.dataset.context;\n                let type = ev.target.dataset.type;\n                // TODO: better way to get the windowId\n                let windowIdPrefix = type === 'pond' ? 'pond_message_-' : 'buddy_message_-';\n                let windowId = windowIdPrefix + context;\n                // console.log('opening chat window ', windowId)\n                let chatWindow = bp.apps.ui.windowManager.getWindow(windowId);\n                console.log('chatWindow', chatWindow);\n                // bp.apps.buddylist.showCard({ chatWindow, cardName: 'help' });\n\n                let aimInput = chatWindow.content.querySelector('.aim-input');\n                let sendButton = chatWindow.content.querySelector('.aim-send-btn');\n                if (aimInput) {\n                    aimInput.value = '/help';\n                    aimInput.dispatchEvent(new Event('input', { bubbles: true })); // Trigger input event\n                }\n                if (sendButton) {\n                    sendButton.click(); // Simulate button click\n                }\n\n\n\n\n            }\n        }\n    ]\n}","export default function renderGeoFlag(message) {\n    if (message.location === 'outer space' || !message.location) {\n      // Set Antarctica to the default flag when the location is 'outer space'\n      message.location = 'AQ';\n    }\n  \n    if (!message.location || message.location === 'outer space') {\n      return document.createElement('span');  // Return an empty span if no flag should be displayed\n    }\n  \n    // Create an image element for the flag\n    let img = document.createElement('img');\n    img.className = 'geoFlag';\n    img.src = `desktop/assets/geo-flags/flags/4x3/${message.location.toLowerCase()}.svg`;\n    return img;\n  }\n  ","// Function to remove outer <p> tags\nexport default function parseMarkdownWithoutPTags(markdown) {\n  if (!markdown) return ''; // empty text\n  \n    // Supported colors and styles\n    const supportedColors = ['red', 'blue', 'green', 'yellow', 'purple', 'orange', 'black', 'white', 'gray', 'cyan', 'magenta', 'pink'];\n    const supportedStyles = ['bold', 'italic', 'underline', 'strike', 'blink', 'reverse', 'hidden', 'dim', 'rainbow'];\n    \n    // Custom renderer for links to add target=\"_blank\"\n    const linkExtension = {\n      name: 'link',\n      level: 'inline',\n      renderer(token) {\n        // Ensure href is properly encoded\n        const href = token.href.replace(/\"/g, '&quot;');\n        // Add target=\"_blank\" and rel=\"noopener\" for security\n        return `<a href=\"${href}\" target=\"_blank\" rel=\"noopener\">${this.parser.parseInline(token.tokens)}</a>`;\n      }\n    };\n\n\n    const styleExtension = {\n      name: 'style',\n      level: 'inline',\n    \n      tokenizer(src) {\n        const match = /^((?:\\w+\\.)*\\w+)\\(\\s*([\\s\\S]+?)\\s*\\)/.exec(src);\n        if (match) {\n          const raw = match[0];\n          const modifiers = match[1].split('.');\n          const text = match[2];\n    \n          const isValid = modifiers.every(mod => supportedColors.includes(mod) || supportedStyles.includes(mod));\n          if (!isValid) return;\n    \n          return {\n            type: 'style',\n            raw,\n            modifiers,\n            text,\n            tokens: this.lexer.inlineTokens(text)\n          };\n        }\n      },\n    \n      renderer(token) {\n        let content = this.parser.parseInline(token.tokens);\n    \n        // Apply modifiers in reverse order to maintain proper nesting\n        token.modifiers.reverse().forEach(mod => {\n          if (supportedColors.includes(mod)) {\n            content = `<span style=\"color: ${mod};\">${content}</span>`;\n          } else if (mod === 'bold') {\n            content = `<strong>${content}</strong>`;\n          } else if (mod === 'italic') {\n            content = `<em>${content}</em>`;\n          } else if (mod === 'underline') {\n            content = `<u>${content}</u>`;\n          } else if (mod === 'strike') {\n            content = `<s>${content}</s>`;\n          } else if (mod === 'blink') {\n            // Using CSS animation instead of deprecated <blink> tag\n            content = `<span style=\"animation: blink 1s step-start infinite;\">${content}</span>`;\n          } else if (mod === 'reverse') {\n            content = content.split('').reverse().join('');\n          } else if (mod === 'hidden') {\n            content = `<span style=\"visibility: hidden;\" onmouseover=\"this.style.visibility='visible'\" onmouseout=\"this.style.visibility='hidden'\">${content}</span>`;\n          } else if (mod === 'dim') {\n            content = `<span style=\"opacity: 0.5;\">${content}</span>`;\n          } else if (mod === 'rainbow') {\n            content = content\n              .split('')\n              .map((char, i) => `<span style=\"color: hsl(${(i * 360) / content.length}, 100%, 50%);\">${char}</span>`)\n              .join('');\n          }\n        });\n    \n        return content;\n      },\n    \n      walkTokens(token) {\n        if (token.type === 'style') {\n          console.log(`Detected style token: ${token.modifiers.join('.')}`);\n        }\n      }\n    };\n    \n    marked.use({ extensions: [styleExtension, linkExtension] });\n    \n    let html;\n    try {\n      html = marked.parse(markdown);\n    } catch (error) {\n      html = markdown;\n    }\n  \n    return html.replace(/^<p>(.*?)<\\/p>\\s*$/s, '$1');\n    // Explanation:\n    // ^<p>       → Matches the opening <p> at the start\n    // (.*?)      → Captures the content inside (non-greedy)\n    // <\\/p>\\s*$  → Matches the closing </p> with optional trailing whitespace\n    // $1         → Returns only the captured content\n  }","// import forbiddenNotes from '../forbiddenNotes.js';\nimport checkForLinksInMessage from './checkForLinksInMessage.js';\n\nexport default async function renderChatMessage(message, _chatWindow) {\n    // console.log('renderChatMessage', message, _chatWindow);\n    // console.log('renderChatMessage', message, _chatWindow);\n    let context = 'default';\n\n    // profanity filter, could also be done in the backend\n    if (message.text && message.text.length > 0) {\n      message.text = forbiddenNotes.filter(message.text);\n    }\n\n    // TODO: needs to check for links inside the message, not just entire links\n    checkForLinksInMessage(message);\n\n    // if there is a #pondname in the message, add a pond card type\n    if (message.text && message.text.length > 0) {\n        let pondNames = findAllHashPondNames(message.text);\n        if (pondNames.length > 0) {\n            message.card = {\n                type: 'pond',\n                pondNames: pondNames\n            }\n        }\n    }\n\n    // Determine the window ID based on the message context\n    let windowId = `buddy_message_-${message.to}`;\n\n    // dynamically create the windowId based on the message details\n    if (message.type === 'buddy') {\n        if (message.to === this.bp.me) {\n            /*\n            // we need to check if message.from is not part of the buddy type chatId, could be a bot talking in the buddy chat\n            // this differs from pond chats, as its a third party in a two person chat\n            // the whole approach here is a bit awkward, but is required if we wish for bots to join buddy chat conversations\n            // check if message.from is not part of the chatId\n            let participants = message.chatId.split('/');\n            // remove the first item from the array\n            participants.shift();\n            // check if message.from is not inside the participants array\n            if (!participants.includes(message.from)) {\n              // this means a third party is sending a message in a buddy chat ( a bot most likely )\n              // we need to set the windowId to be the non-me participant\n              let notMe = participants.find(participant => participant !== this.bp.me);\n              // console.log('Setting windowId for non-me participant', notMe);\n              windowId = `buddy_message_-${notMe}`;\n              context = notMe;\n            } else {\n              // regular buddy conversation with (2) participants\n              windowId = `buddy_message_-${message.from}`;\n              context = message.from;\n            }\n            */\n            windowId = `buddy_message_-${message.from}`;\n            context = message.from;\n\n\n        } else {\n            windowId = `buddy_message_-${message.to}`;\n            context = message.to;\n        }\n    }\n\n    if (message.type === 'pond') {\n        context = message.to;\n        // windowId = `pond_message_-${message.to}`;\n        windowId = \"pond_message_main\";\n    }\n    // console.log('windowIdwindowId', windowId)\n    // TODO: scope on processedMessages needs to be keyed by type in addition to context\n    this.data.processedMessages[context] = this.data.processedMessages[context] || [];\n\n    // Stores all active users across all chat windows\n    this.data.activeUsers = this.data.activeUsers || [];\n\n    // Stores all buddies that are currently active in the context of the chat window\n    this.data.activeUsersInContext = this.data.activeUsersInContext || {};\n    this.data.activeUsersInContext[context] = this.data.activeUsersInContext[context] || [];\n\n    this.data.activePonds = this.data.activePonds || [];\n    if (message.type === 'pond') {\n        // If message.to is not in the activePonds, add it\n        if (message.to && !this.data.activePonds.includes(message.to)) {\n            this.data.activePonds.push(message.to);\n            this.bp.emit('pond::activePondAdded', message.to);\n        }\n    }\n\n    if (message.type === 'buddy') {\n        // If message.to is not in the activeUsers, add it\n        if (message.to && !this.data.activeUsers.includes(message.to)) {\n            this.data.activeUsers.push(message.to);\n            this.bp.emit('buddy::activeUserAdded', message.to);\n        }\n        // If message.to is not in the activeUsersInContext, add it\n        if (message.to && !this.data.activeUsersInContext[context].includes(message.to)) {\n            this.data.activeUsersInContext[context].push(message.to);\n        }\n    }\n\n    // If message.from is not in the activeUsers, add it\n    if (message.from && !this.data.activeUsers.includes(message.from)) {\n        this.data.activeUsers.push(message.from);\n        this.bp.emit('buddy::activeUserAdded', message.from);\n    }\n\n\n    // If message.from is not in the activeUsersInContext, add it\n    if (message.from && !this.data.activeUsersInContext[context].includes(message.from)) {\n        this.data.activeUsersInContext[context].push(message.from);\n    }\n\n    // Remark: Removing and editing messages do not currently require a windowId since they currently\n    // do not have a from / to property\n    // We may want to change this in the future to allow for more granular control directly in the chatWindow instance\n    if (message.removed) {\n        console.log(\"ATTEMPTING TO REMOVE MESSAGE\", message);\n        // find the chatMessage by uuid\n        let removedMessageEl = $(`.aim-chat-message[data-uuid=\"${message.removed}\"]`); // could be document as well?\n        if (removedMessageEl.length > 0) {\n            // remove the removed message\n            removedMessageEl.remove();\n        }\n        return;\n    }\n\n    if (message.edited) {\n        console.log(\"ATTEMPTING TO EDIT MESSAGE\", message);\n        // find the chatMessage by uuid\n        let editedMessageEl = $(`.aim-chat-message[data-uuid=\"${message.edited}\"]`); // could be document as well?\n\n        if (!editedMessageEl.length > 0) {\n            console.error('No original message found');\n            return;\n        }\n\n        // get the aim-message-content and set the text to the new message\n        let editedMessageContent = editedMessageEl.find('.aim-message-content');\n        if (editedMessageContent.length > 0) {\n            // remove the edited message\n            editedMessageContent.html(message.text);\n        }\n        return;\n    }\n\n    // console.log('current windows', this.bp.windows);\n    // console.log('renderChatMessage windowId', windowId, message);\n    let chatWindow = this.bp.apps.ui.windowManager.getWindow(windowId);\n\n    if (_chatWindow) {\n        chatWindow = _chatWindow;\n    }\n\n    if (!chatWindow || !chatWindow.content) {\n        console.log('chat window not ready, trying again soon', windowId, message);\n        console.log(message);\n        return;\n    }\n\n    // Check if message already exists in the DOM\n    if (document.querySelector(`.chatMessage[data-uuid=\"${message.uuid}\"]`)) {\n        return; // Message is already rendered\n    }\n\n    // check to see if this command is less than 10 seconds old\n    // TODO: split local and remote commands\n    // TODO: should probably go through card codepath\n    // this means we create the bs-card on the client\n    // we should only run local commands on the client\n    let now = new Date().getTime();\n    let messageTime = new Date(message.ctime).getTime();\n    // needs to determine if this command should be run locally or remotely\n    // for now, only run locally\n    // check to see  if message.from is bp.me\n\n\n    // console.log('checking this.data.processedMessages[context]', this.data.processedMessages[context]);\n    // Check if message has been processed to avoid duplication\n    for (let i = 0; i < this.data.processedMessages[context].length; i++) {\n        if (this.data.processedMessages[context][i].uuid === message.uuid) {\n            // console.log('Message already processed, skipping rendering', message);\n            // if the message has already been processed by UUID, then it's a duplicate and we should not render it\n            return chatWindow;\n            // we have a special case here we wish to re-render the client message\n            // this indicates the server filtered parts of the message and it should be removed and re-rendered\n            if (this.data.processedMessages[context][i].from === this.bp.me && this.data.processedMessages[context][i].text !== message.text) {\n                // find the chatMessage by uuid\n                let filteredMessageEl = $(`.chatMessage[data-uuid=\"${message.uuid}\"]`, chatWindow.content);\n                if (filteredMessageEl.length > 0) {\n                    // remove the filtered message\n                    filteredMessageEl.remove();\n                    //this.bp.emit('buddy::message::gotfiltered', message);\n                }\n            } else {\n                // else there is no special filtering case from server\n                // and the messaged is a duplicate, return and do not render\n                return;\n            }\n        }\n    }\n\n    // Manage size of processedMessages to prevent memory leaks\n    if (this.data.processedMessages[context].length > 5000) {\n        this.data.processedMessages[context].shift();\n    }\n\n    // Add the processed message UUID to prevent reprocessing\n    this.data.processedMessages[context].push(message);\n\n    // check if this is an Agent message which gets processed first\n    if (message.type === 'agent') {\n\n        // Legacy BP API\n        if (desktop && desktop.app && desktop.app.spellbook && desktop.app.spellbook[message.text]) {\n            desktop.app.spellbook[message.text]();\n            return;\n        } else {\n            console.log('unknown agent message', message);\n        }\n    }\n\n    // TODO: allow buddylist to register message processors\n    // Is most likely best handled using SystemsManager from ECS code\n    // this way all app can register an update method\n    // we can give each app an onMessage method and have the ECS S delegate the message to the app\n    // bp.apps.buddylist.addMessageProcessor('buddyscript', function (message) {});\n    // bp.apps.buddylist.addMessageProcessor('card', function (message) {});\n    // etc\n    // this way we don't have to pollute the buddylist with all the message processing logic\n    // TODO: Migrate TTS app to v5 API\n\n    if (this.bp.apps.say && message.text && message.text.startsWith('/say')) {\n        // this is a /say message\n        this.bp.apps.say.processMessages(message);\n    }\n\n    // check if mobile, is so shorten the time\n    // legacy API\n    if (this.bp.isMobile()) {\n        messageTime = DateFormat.format.date(messageTime, 'hh:mm:ss a');\n\n    } else {\n        messageTime = DateFormat.format.date(messageTime, 'E MMMM dd, hh:mm:ss a');\n    }\n\n    // Format message time\n    messageTime = messageTime.toString();\n\n    // Check to see if message is type card\n\n    let container;\n    if (message.card && this.bp && this.bp.apps && this.bp.apps.card) {\n        //console.log('message is', message);\n        //console.log('message is card', message.card);\n\n        let cardData = message.card;\n        // console.log(\"USING CARD\", cardData, message);\n        // make sure card has props\n        if (Object.keys(cardData).length > 0) {\n            cardData.message = message; // TODO probably should clone for CardManager, etc\n            // default JSON rendering will now fail by default due to nested messages cards with arbitrary props ( no .data scope either ), .context might be good...\n            let cardManager = this.bp.apps.card.cardManager;\n            // console.log('cardManager.loadCard', cardData);\n            const _card = await cardManager.loadCard(cardData.type, cardData, chatWindow);\n            container = document.createElement('div');\n            container.classList.add('cardContainer');\n            let d = await _card.render(container);\n        }\n\n    }\n\n    let bp = this.bp;\n\n    this.createChatMessageElement(message, messageTime, chatWindow, container);\n\n    // console.log('parseChatMessage result', result);\n\n\n    // emit the freshly processed message for any post processing events ( such as playing a sound )\n    if (message.type === 'pond') {\n        this.bp.emit('pond::message::processed', message);\n    } else {\n        this.bp.emit('buddy::message::processed', message);\n    }\n\n    return chatWindow;\n\n}\n\n// TODO: add via addMessageProcessor() on `marked` and `pond` apps\n\nfunction findAllHashPondNames(text) {\n    // Decode HTML entities more comprehensively\n    const decodedText = decodeEntities(text);\n    // Regex: # followed by at least one letter/digit, then optional letters/digits/underscores/hyphens\n    // Requires space or start of string before #, supports Unicode\n    const hashPondNameRegex = /(^|\\s)#([a-zA-Z0-9\\p{L}][a-zA-Z0-9\\p{L}_-]*)/gu;\n    return Array.from(decodedText.matchAll(hashPondNameRegex), m => m[2]);\n}\n\nfunction decodeEntities(text) {\n    const entities = {\n        '&amp;': '&',\n        '&quot;': '\"',\n        '&lt;': '<',\n        '&gt;': '>',\n        '&apos;': \"'\",\n        '&nbsp;': ' ',\n        // Add more as needed\n    };\n    return text.replace(/&[a-zA-Z0-9#]+;/g, match => entities[match] || match);\n}","export default function renderBuddyRequests (buddyrequests) {\n    //console.log(\"renderBuddyRequests\", buddyrequests);\n\n    $('.you_have_no_buddies').hide();\n    let api = this.bp.apps.client.api;\n\n    if (buddyrequests) {\n  \n      $('.pendingIncomingBuddyRequests').html('');\n      $('.pendingOutgoingBuddyRequests').html('');\n      $('.loading').remove();\n  \n      for (let buddy in buddyrequests) {\n        let buddyrequest = buddyrequests[buddy];\n        buddyrequest = JSON.parse(buddyrequest);\n        if (buddyrequest.to === this.bp.me) {\n          $('.pendingIncomingBuddyRequests').append('<li>' + buddyrequest.from + ' - <a href=\"#\" class=\"approveBuddyRequest pointer\" data-buddyname=\"' + buddyrequest.from +'\">Approve</a> / <a href=\"#\" class=\"denyBuddyRequest pointer\" data-buddyname=\"' + buddyrequest.from +'\">Remove</a> </li>');\n        } else {\n          $('.pendingOutgoingBuddyRequests').append('<li>' + buddyrequest.to + ' - <a href=\"#\" class=\"denyBuddyRequest pointer\" data-buddyname=\"' + buddyrequest.to +'\">Remove</a></li>');\n        }\n      }\n  \n      $('.apiResult').val(JSON.stringify(buddyrequests, true, 2));\n  \n      // desktop.app.buddylist.pendingIncomingBuddyRequests = desktop.app.buddylist.pendingIncomingBuddyRequests || 0;\n      this.data.pendingIncomingBuddyRequests = this.data.pendingIncomingBuddyRequests || 0;\n\n      let totalIncomingBuddyRequests = $('.pendingIncomingBuddyRequests li').length;\n  \n      if (totalIncomingBuddyRequests > this.data.pendingIncomingBuddyRequests) {\n        this.data.pendingIncomingBuddyRequests = totalIncomingBuddyRequests;\n  \n        // Remark: short delay is used here to provide nice login experience if Buddy has requests\n        //         allows WELCOME sound to play\n        //         A better solution here is to here priority option for playing sound with queue\n        setTimeout(function () {\n          // this.bp.apps.play('YOUVEGOTMAIL.wav'); // TODO add 'play' app\n        }, 2222);\n      }\n  \n      if (totalIncomingBuddyRequests === 0) {\n        $('.pendingIncomingBuddyRequestsHolder').hide();\n      } else {\n        $('.pendingIncomingBuddyRequestsHolder').show();\n      }\n  \n      if ($('.pendingOutgoingBuddyRequests li').length == 0) {\n        $('.pendingOutgoingBuddyRequestsHolder').hide();\n      } else {\n        $('.pendingOutgoingBuddyRequestsHolder').show();\n      }\n  \n      // TODO: remove links in real-time from client for approve / deny ( no lags or double clicks )\n      //  '.pendingIncomingBuddyRequests'\n      $('.denyBuddyRequest').on('click', function () {\n        $(this).parent().hide();\n        api.denyBuddy($(this).attr('data-buddyname'), function (err, data) {\n          $('.apiResult').val(JSON.stringify(data, true, 2));\n        });\n        return false;\n      });\n  \n      $('.approveBuddyRequest', '.pendingIncomingBuddyRequests').on('click', function () {\n        $(this).parent().hide();\n        let buddyName = $(this).attr('data-buddyname');\n        api.approveBuddy(buddyName, function (err, data) {\n          $('.apiResult').val(JSON.stringify(data, true, 2));\n        });\n        return false;\n      });\n    }\n  \n  }","\n\nexport default async function processProfile(profileState) {\n  // console.log('processBuddylist', profileState);\n\n  // if the client hasn't seen the buddylist yet, we start from empty state\n  if (!this.data.buddylist) {\n    this.data.buddylist = {};\n  }\n  if (!this.data.buddyrequests) {\n    this.data.buddyrequests = {};\n  }\n\n  //console.log('processProfile', profileState);\n  //console.log('this.data.profileState', this.data.profileState);\n  if (this.data.profileState &&\n    (\n      Number(profileState.powerlevel) > Number(this.data.profileState.powerlevel)\n    )\n  ) {\n\n    // Assuming there's a container with ID 'powerLevelContainer' in your HTML\n    const powerLevel = bp.apps.powerlevel.popup;\n\n    // Example of increasing to level 4\n    powerLevel.show(profileState.powerlevel, {\n      duration: 7777\n    });\n  }\n\n  // merge the profile state, don't overwrite\n  this.data.profileState = { ...profileState };\n  // profileState is a JSON document representing entire user profile\n  // console.log('profileState', profileState);\n  if (profileState.system) {\n    $('.totalConnectedCount').html(profileState.system.totalIsConnected);\n    $('.totalOnlineCount').html(profileState.system.totalIsOnline);\n  }\n\n  // metadata about ponds users is joined or ponds of interest ( such as viewing popular ponds list )\n  if (profileState.ponds && profileState.ponds.ponds) {\n    profileState.ponds.ponds.forEach(function (pond) {\n      // check to see if we have an open window with data-app=\"buddylist\" data-type=\"pond\" and data-context=\"${pondName}\"\n      let win = $('#pond_message_-' + pond.name);\n      // update the window-title-text with the number of connected users\n      if (win) {\n        $('.window-title-text', win).html(pond.name + ' Pond (' + pond.connected + ')');\n      }\n    });\n  }\n\n  // we will process the profileState as if it was a differential state update\n  let buddylist = profileState.buddylist;\n  let profileNeedsUpdate = _processBuddylistData(this, buddylist);\n\n  let buddyrequests = profileState.buddyrequests;\n  _processBuddyRequestsData(this, buddyrequests);\n\n  // once we have completed processing all the buddylist profile data\n  // we will want to send back the updated document to awk that we have processed the profile\n  // and set newMessages flags to false\n  let api = this.bp.apps.client.api;\n  // console.log('getBuddyProfile', api, profileState);\n  profileState.updates = profileState.updates || {};\n\n}\n\nfunction _processBuddyRequestsData(buddylist, buddyrequests) {\n  if (buddyrequests) {\n    buddylist.renderBuddyRequests(buddyrequests);\n  }\n}\n\nfunction _processBuddylistData(buddylist, buddylistData) {\n\n  let profileNeedsUpdate = false;\n  if (buddylist) {\n    for (let b in buddylistData) {\n      let buddy = buddylistData[b];\n      let buddyName = b.replace('buddies/', '');\n      // check to see if the buddy is already in the local buddylist\n      // if not, render the buddy in the buddylist\n      /*\n      if (!buddylist.data.buddylist[b]) {\n        if (buddy.isConnected) {\n          buddylist.bp.emit('profile::buddy::in', {\n            name: buddyName,\n            buddydata: buddy\n          });\n        }\n        buddylist.data.buddylist[b] = buddy;\n      } else {\n        // check to see if buddy was connected and is no longer\n        if (!buddy.isConnected && buddylist.data.buddylist[b].isConnected) {\n          buddylist.bp.emit('profile::buddy::out', {\n            name: buddyName,\n            buddydata: buddy,\n            wasOnline: false\n          });\n        }\n      }*/\n\n\n      buddylist.renderOrUpdateBuddyInBuddyList({\n        name: buddyName,\n        buddydata: buddy,\n        wasOnline: false\n      });\n\n      // check if this buddy has sent newMessages\n      // if so, open a new window\n      // the process of opening a new chat window will connect websocket ( if not already connected )\n      // then messages will flow through the websocket\n      if (buddy.newMessages) {\n        buddylist.bp.emit('profile::buddy::newmessage', {\n          name: buddyName\n        });\n        // console.log('updaitng local profile state', buddylist.data.profileState, buddyName)\n        buddylist.data.profileState.buddylist['buddies/' + buddyName] = {\n          newMessages: false\n        };\n        profileNeedsUpdate = true;\n      }\n\n\n      if (buddy.isCalling) {\n        buddylist.bp.emit('profile::buddy::calling', {\n          name: buddyName\n        });\n      }\n\n    }\n  }\n  return profileNeedsUpdate;\n}","export default function buddylistUIEvents() {\n  let api = this.bp.apps.client.api;\n  let affirmations = this.bp.apps.affirmations.affirmations;\n\n  // bind events\n  $('.loginForm').submit((e) => {\n    e.preventDefault();\n\n    // disable the login button\n    $('.loginButton').prop('disabled', true);\n    $('.loginButton').addClass('disabled');\n\n    let username = $('.loginForm input[name=\"username\"]').val();\n    let password = $('.loginForm input[name=\"password\"]').val();\n    if (!password) {\n      password = username;\n    }\n\n    api.authBuddy(username, password, function (err, result) {\n      console.log('authBuddy', err, result);\n      if (err) {\n        if (result && result.error) {\n          $('.loginStatus').html(result.error);\n          if (result.error === 'Incorrect password.') {\n            $('.resetPasswordLink').show();\n          }\n        } else {\n          if (err.message === 'Failed to fetch') {\n            $('.loginStatus').text('Failed to connect to Buddy Pond');\n          } else {\n            $('.loginStatus').html(err.message || 'Failed to authenticate buddy');\n          }\n        }\n        $('.loginButton').prop('disabled', false);\n        $('.loginButton').removeClass('disabled');\n\n        $('.password').show();\n        console.error('Failed to authenticate buddy:', err);\n\n        return;\n      }\n      if (result.success) {\n        // attempt to connect for events after getting auth token\n        //console.log('connecting with valid qtokenid', api.qtokenid);\n        result.me = username;\n        // The user has logged in password or signed up successfully, emit the auth event\n        bp.emit('auth::qtoken', result);\n        // $('.loggedIn').flexShow();\n        $('.loginForm .error').text('');\n\n      } else {\n        // re-enable the login button\n        $('.loginButton').prop('disabled', false);\n        $('.loginButton').removeClass('disabled');\n        if (username === password) {\n          $('.password').show();\n          $('.password').focus();\n          return;\n        }\n        $('.loginForm .error').text('Failed to authenticate buddy');\n        $('.password').show();\n        console.error('Failed to authenticate buddy:');\n      }\n    });\n    return false;\n  });\n\n  $('.onlineStatusSelect').change((e) => {\n    let status = $(e.target).val();\n    console.log('status', status);\n    bp.emit('profile::status', status);\n  });\n\n  $('.forgot-password').on('click', (ev) => {\n    $('.loginForm').flexHide();\n    $('.forgot-password-modal').flexShow();\n    $('.tos-checkbox').flexHide();\n    $('.loginStatus').html('');\n    $('.resetPasswordLink').flexHide();\n  });\n\n  $('.closeForgotPassword').on('click', (ev) => {\n    $('.forgot-password-modal').flexHide();\n    $('.loginForm').flexShow();\n    $('.tos-checkbox').flexShow();\n    $('.resetPasswordLink').flexShow();\n  });\n\n  $('.resetPasswordButton').on('click', (ev) => {\n    ev.preventDefault();\n    let email = $('.resetPasswordEmail').val();\n    if (!email) {\n      $('.resetPasswordEmail').addClass('error');\n      return;\n    }\n    $('.resetPasswordEmail').removeClass('error');\n    $('.loginStatus').html('Sending password reset email...');\n    $('.resetPasswordForm').flexHide();\n    $('.resetPasswordMessage').flexHide();\n    api.sendPasswordResetEmail(email, (err, data) => {\n      console.log('sendPasswordResetEmail', err, data);\n      if (err || !data.success) {\n        $('.loginStatus').html('Failed to send password reset email.');\n        console.error(err || data);\n        return;\n      }\n      $('.loginStatus').removeClass('error').addClass('success').html(data.message);\n    });\n  });\n\n  $('.buddylist').click((e) => {\n    // check if element has a data-buddy attribute\n    if (!$(e.target).closest('.buddy-message-sender').data('buddy')) {\n      return\n    }\n    let buddyname = $(e.target).closest('.buddy-message-sender').data('buddy');\n    console.log('message-buddy', buddyname);\n    this.openChatWindow({ name: buddyname });\n  });\n\n  // Send a buddy request form\n  $('.sendBuddyRequest').on('click', (ev) => {\n    ev.preventDefault();\n    let buddyName = $('.buddy_request_name').val();\n    if (!buddyName) {\n      $('.buddy_request_name').addClass('error');\n      return;\n    }\n\n    $('.you_have_no_buddies').html('Buddy Request Sent!');\n    $('.buddy_request_name').removeClass('error');\n    $('.buddy_request_name').val('');\n    // $('.pendingOutgoingBuddyRequests').append('<li>' + buddyName + '</li>');\n    this.bp.log('buddypond.addBuddy ->', buddyName);\n\n    this.client.addBuddy(buddyName, (err, data) => {\n      console.log('buddypond.addBuddy <-', err, data);\n      if (data.error) {\n        $('.you_have_no_buddies').html(data.error);\n        console.error(data);\n        return;\n      }\n      if (!data.success) {\n        $('.you_have_no_buddies').html(data.message)\n        console.error(data);\n        return;\n      }\n      this.bp.log('buddypond.addBuddy <-', data);\n    });\n\n  });\n\n  // Initially disable the login button\n  $('.loginButton').prop('disabled', true);\n  $('.loginButton').addClass('disabled');\n\n  // Toggle the login button based on the checkbox status\n  $('#tosAgree').change(function () {\n    if ($(this).is(':checked')) {\n      $('.loginButton').prop('disabled', false);\n      $('.loginButton').removeClass('disabled');\n    } else {\n      $('.loginButton').prop('disabled', true);\n      $('.loginButton').addClass('disabled');\n    }\n  });\n\n  /*\n  // TODO: create context meny for buddy-message-sender\n  $(document).on('click', (e) => {\n    // delegate based on if e.target is a .buddy-message-sender\n    // if so, open profile for that buddy\n    //alert(e.target.classList)\n    if ($(e.target).hasClass('buddy-message-sender')) {\n      alert('buddy-message-sender');\n      let buddyName = $(e.target).text();\n      if (this.bp.admin) {\n        // roles are handled server-side, this is a simple UI route for the implied role access\n        // loading admin-profile from another user won't return admin data\n        this.bp.open('admin-profile', { context: buddyName });\n      } else {\n        // this.bp.open('user-profile', { context: buddyName });\n      }\n    }\n  });\n  */\n\n  // Append a custom context menu to the body (hidden initially)\n  // $('body').append('<div id=\"customContextMenu\" class=\"removeMessage\" style=\"display: none; position: absolute; z-index: 1000; background: white; border: 1px solid #ccc; padding: 10px;\">Remove Message</div>');\n\n  // Right-click event on elements with class .buddy-message-sender\n  /*\n  $(document).on('contextmenu', function (e) {\n\n    if (!$(e.target).hasClass('buddy-message-sender')) {\n      return true;\n    }\n\n    e.preventDefault(); // Prevent default context menu\n    let chatMessage = $(e.target).closest('.chatMessage'); // Get the chat message element\n    console.log('using chatMessage', chatMessage.html());\n    if (api.me !== 'Marak') { // could also allow users to remove their own messages\n       // set the removeMessage to disabled class\n      $('#customContextMenu').addClass('disabled');\n    }\n\n    let from = chatMessage.attr('data-from');\n    let to = chatMessage.attr('data-to');\n    let uuid = chatMessage.attr('data-uuid');\n    let type = chatMessage.attr('data-type');\n\n    console.log('type', type, 'from', from, 'uuid', uuid);\n\n    // Position the custom context menu at the mouse coordinates\n    $('#customContextMenu').css({\n      top: e.pageY + 'px',\n      left: e.pageX + 'px',\n      display: 'block'\n    });\n\n    $('#customContextMenu').off('click').on('click', async () => {\n      // Replace 'openProfile' with your actual function to open the profile\n      //openProfile(buddyName);\n\n      let context = to;\n\n      await api.removeMessage({type, from, to, uuid});\n      // $(this).hide(); // Hide the context menu after click\n    });\n  });\n  */\n\n  // Hide context menu when clicking anywhere else on the document\n  /*\n  $(document).on('click', function (e) {\n    if (!$(e.target).hasClass('buddy-message-sender')) {\n      $('#customContextMenu').hide();\n    }\n  });\n  */\n\n  // Invite a buddy link ( opens twitter with a random message )\n  $('.inviteBuddy').on('click', () => {\n    let randomInviteMessages = [\n      `Find me as \"${this.bp.me}\" on https://buddypond.com and let's start a conversation that could last a lifetime.`,\n      `I've taken my conversations to the cloud! Reach me at \"${this.bp.me}\" on https://buddypond.com where the future of messaging unfolds.`,\n      `Wave goodbye to the old and hello to the old! I'm waiting at \"${this.bp.me}\" on https://buddypond.com. Let's catch up!`,\n      `Missing chat sessions? They're back and better than ever at \"${this.bp.me}\" on https://buddypond.com. Join me and let's reconnect!`,\n      `Taking conversations to the next level. Find me at \"${this.bp.me}\" on https://buddypond.com and let's dive into new topics together!`,\n      `Remember the ease of old-school messaging? Experience it again with a twist! I'm \"${this.bp.me}\" at https://buddypond.com. Chat soon?`,\n      `I'm charting new territories in the world of digital communication. Join me as \"${this.bp.me}\" on https://buddypond.com and let's explore together!`,\n      `Just like the good old days but better! Find me on \"${this.bp.me}\" at https://buddypond.com and let's keep the conversations flowing.`,\n    ];\n    let inviteMessage = randomInviteMessages[Math.floor(Math.random() * randomInviteMessages.length)];\n    window.open(`https://twitter.com/intent/tweet?url=${inviteMessage}`);\n    return false;\n  });\n\n  function updatePositiveAffirmation() {\n    let key = affirmations[Math.floor(Math.random() * affirmations.length)];\n    $('.positiveAffirmation').html(key);\n  }\n\n  // update the positive affirmation on an interval\n  setInterval(function () {\n    $('.positiveAffirmation').fadeOut({\n      duration: 4444,\n      complete: function () {\n        updatePositiveAffirmation();\n        $('.positiveAffirmation').fadeIn({\n          duration: 4444,\n          complete: function () { }\n        });\n      }\n    });\n  }, 199800); // 3 minutes, 33 seconds\n\n  updatePositiveAffirmation();\n\n  $('.positiveAffirmation').on('click', function () {\n    updatePositiveAffirmation();\n  });\n\n\n}","\n// Remark: Server will only allocate if there is no pre-existing portion of coins\n// Remark: Server maintains a mutex lock to ensure only one request per user at a time ( spamming prevention )\nexport default async function requestDefaultCoinAllocations() {\n\n  let qtokenid = buddypond.qtokenid;\n  let me = this.bp.me;\n\n  // TODO: set a five second alarm here so messages aren't immediately sent on login\n  console.log(`requestDefaultCoinAllocations ${me} ${qtokenid}`);\n\n  let res;\n  try {\n    let faucetUrl = `${buddypond.randolphEndpoint}/randolph/faucet`;\n    console.log('faucetUrl', faucetUrl);\n    res = await fetch(faucetUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${qtokenid}`,\n        'x-me': me\n      }\n    });\n    console.log('requestDefaultCoinAllocations', res.status, res.statusText);\n    let json = await res.json();\n    console.log('requestDefaultCoinAllocations', json);\n  } catch (err) {\n    throw err;\n  }\n\n}","export default function sortBuddyList() {\n\n  let buddyList = document.querySelector('.buddylist');\n  if (!buddyList) {\n    console.log('Buddy list not found, unable to sort');\n    return;\n  }\n\n  let buddyItems = Array.from(document.querySelectorAll('.buddylist li')); // TODO: more specific selector?\n\n  buddyItems.sort((a, b) => {\n    // Sort by status (online 🟢 first)\n    let aStatus = a.querySelector('.buddy-status').textContent.includes('🟢') ? 0 : 1;\n    let bStatus = b.querySelector('.buddy-status').textContent.includes('🟢') ? 0 : 1;\n\n    if (aStatus !== bStatus) {\n      return aStatus - bStatus; // Online first\n    }\n\n    // If both are online, sort alphabetically by name\n    if (aStatus === 0 && bStatus === 0) {\n      return a.dataset.buddy.localeCompare(b.dataset.buddy);\n    }\n\n    // If both are offline, sort by utime (most recent first), then by name\n    let aUtime = parseInt(a.dataset.utime || 0);\n    let bUtime = parseInt(b.dataset.utime || 0);\n    if (aUtime !== bUtime) {\n      return bUtime - aUtime; // Higher utime (more recent) first\n    }\n\n    return a.dataset.buddy.localeCompare(b.dataset.buddy);\n  });\n\n\n  buddyList.innerHTML = '';\n  buddyItems.forEach(item => buddyList.appendChild(item));\n}","\nexport default function showContextMenu(x, y, buddyName) {\n    const $menu = $('<div>', {\n      id: 'customContextMenu',\n      css: {\n        position: 'absolute',\n        top: y,\n        left: x,\n        zIndex: 99999,\n        display: 'block',\n        background: 'white',\n        border: '1px solid #ccc',\n        padding: '10px',\n        cursor: 'pointer'\n      }\n    }).append($('<ul>').append(\n      $('<li>').text('View Profile').on('click', () => openProfile(buddyName))\n    ));\n  \n    function openProfile(buddyName) {\n      console.log('Opening profile for ' + buddyName);\n      if (bp.admin) {\n        bp.open('admin-profile', { context: buddyName });\n      } else {\n        bp.open('user-profile', { context: buddyName });\n      }\n    }\n  \n    $('#customContextMenu').remove();\n    $('body').append($menu);\n  \n    $(document).one('click', function () {\n      $('#customContextMenu').remove();\n    });\n  }\n  ","// Context menu creation\nexport default function createMessageContextMenu(target, closestMessage) {\n\n  // Remove existing context menu if any\n  if (this.activeMessageContextMenu) {\n    this.activeMessageContextMenu.remove();\n    this.activeMessageContextMenu = null;\n  }\n\n  if (this.activeMessageHoverMenu) {\n    // set display: none on the hover menu\n    // TODO: needs to swap classes instead of setting styles\n    // this.activeMessageHoverMenu.style.display = 'none';\n    this.activeMessageHoverMenu = null;\n  }\n\n  // TODO: the closest .aim-hover-menu to target should have it's hover CSS logic removed\n  // aim-hover-menu:hover sets display: flex, without its display: none\n  // we need this bypassed while the context menu is open\n  const hoverMenu = target.closest('.aim-hover-menu');\n  /*\n  console.log('hoverMenu', hoverMenu);\n  if (hoverMenu) {\n    // hoverMenu.style.display = 'flex';\n  }\n  */\n\n  const contextMenu = document.createElement('div');\n  contextMenu.className = 'aim-context-menu';\n\n  const messageFrom = closestMessage.getAttribute('data-from');\n\n\n  const menuItems = [\n    { text: 'Reply', action: 'reply-message' },\n    // { text: 'Quote', action: 'quote-message' },\n    { text: 'Say Message', action: 'say-message' },\n    // { text: 'Report Message', action: 'report-message' },\n    // { text: 'Copy Message', action: 'copy-message' },\n  ];\n\n  if (messageFrom === this.bp.me || this.bp.me === 'Marak') { // TODO: admin rbac\n    menuItems.push(\n      { text: 'Edit Message', action: 'edit-message' },\n      { text: 'Delete Message', action: 'delete-message' }\n    );\n  }\n\n  menuItems.push({\n    text: 'Cast Spell',\n    action: 'cast-spell',\n  });\n\n  menuItems.forEach(item => {\n    const menuItem = document.createElement('div');\n    menuItem.className = 'aim-context-menu-item';\n    menuItem.textContent = item.text;\n    menuItem.setAttribute('data-action', item.action);\n    contextMenu.appendChild(menuItem);\n  });\n\n  // Position the context menu\n  document.body.appendChild(contextMenu);\n  const rect = target.getBoundingClientRect();\n  contextMenu.style.left = `${rect.left - 150}px`;\n  contextMenu.style.top = `${rect.bottom + window.scrollY - 20}px`;\n\n  // set data-attr to the closest message data-chat-id and data-uuid\n  const chatId = closestMessage.getAttribute('data-chat-id');\n  const uuid = closestMessage.getAttribute('data-uuid');\n  contextMenu.setAttribute('data-chat-id', chatId);\n  contextMenu.setAttribute('data-uuid', uuid);\n  contextMenu.setAttribute('data-from', messageFrom);\n\n  this.activeMessageContextMenu = contextMenu;\n  this.activeMessageHoverMenu = hoverMenu;\n  return contextMenu;\n}\n","export default function loadUserApps() {\n    // TODO: load from saved profile\n    if (this.bp.me === 'Marak') { // TODO: admin rbac checks\n        // install Admin if not already installed\n        let installedApps = this.bp.settings.apps_installed || {};\n        console.log('installedApps', installedApps);\n        if (!installedApps['admin']) {\n            this.bp.apps.desktop.addApp('admin');\n        }\n        window.arrangeDesktop();\n    }\n}","export default async function sendMessageHandler(e, chatWindow, windowType, contextName) {\n\n  const message = $('.aim-input', chatWindow.content).val();\n\n  const _data = {\n    to: $('.aim-to', chatWindow.content).val(),\n    replyto: $('.aim-replyto', chatWindow.content).val(),\n    type: windowType,\n    from: this.bp.me,\n    message,\n    ctime: Date.now(),\n    text: message,\n    files: [],\n  };\n\n  // TODO: move file upload code to separate function\n  // Get file previews\n  const filePreviews = $('.file-preview', chatWindow.content);\n  const files = [];\n\n  if ((!message || message.length === 0) && filePreviews.length === 0) {\n    console.log('No message to send');\n    return;\n  }\n\n  // Collect all files first\n  filePreviews.each((_, filePreview) => {\n    $('.file-content', filePreview).each((_, fileContent) => {\n      const file = this.bp.apps['file-viewer'].getFile(fileContent);\n      if (file) {\n        files.push({\n          file,\n          element: fileContent\n        });\n      }\n    });\n  });\n\n  // Create status indicators for each file\n  files.forEach(({ file, element }) => {\n    const statusDiv = $('<div>', {\n      class: 'upload-status',\n      css: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        background: 'rgba(0, 0, 0, 0.7)',\n        color: 'white',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        zIndex: 1000\n      }\n    }).text('Waiting...');\n\n    $(element).css('position', 'relative').append(statusDiv);\n  });\n\n  // Process files sequentially\n  try {\n    for (const { file, element } of files) {\n      const statusDiv = $(element).find('.upload-status');\n      statusDiv.text('Uploading...');\n\n      try {\n        console.log('is there a filepath?', file.filePath);\n        console.log('this is the file', file);\n        file.filePath = file.filePath || file.name;\n\n        // we are going to perform some basic file organization and routing here\n        // when the user uploads files via the chat window, we are going to store them\n        // in the user's directory on the CDN\n        // to help out the user, will perform mime type / file ext detection here in order to upload\n        // the file to the appropriate directory such as images, audio, videos, etc\n        let supportedImageTypesExt = ['jpeg', 'png', 'gif', 'webp', 'svg']; // same as server ( for now )\n        let supportedAudioTypesExt = ['mp3', 'wav', 'ogg', 'flac', 'aac', 'm4a'];\n        let supportedVideoTypesExt = ['mp4', 'webm', 'ogg', 'avi', 'mov', 'mkv'];\n\n        // check to see if the file.name has an extension included in the supportedImageTypesExt array\n        let fileExt = file.name.split('.').pop().toLowerCase();\n        if (supportedImageTypesExt.includes(fileExt)) {\n          file.filePath = 'images/' + file.filePath;\n        }\n        if (supportedAudioTypesExt.includes(fileExt)) {\n          file.filePath = 'audio/' + file.filePath;\n        }\n        if (supportedVideoTypesExt.includes(fileExt)) {\n          file.filePath = 'videos/' + file.filePath;\n        }\n\n        // make file.filePath url encoded\n        file.filePath = encodeURIComponent(file.filePath);\n\n        console.log('assigning file path', file.filePath);\n        let fileUrl = await this.bp.apps.client.api.uploadFile(file, (progress) => {\n          statusDiv.text('Uploading: ' + progress + '%');\n        });\n\n        // now that we have the url, just send a regular message with the url\n        // the card type should automatically be detected by the server\n        // the the body of the message will be the url with extension of image, video, etc\n        let message = {\n          to: _data.to,\n          from: _data.from,\n          type: _data.type,\n          replyto: _data.replyto,\n          text: fileUrl\n        };\n        // TODO: replyto\n        console.log(\"sending multimedia message\", message);\n        this.bp.emit('buddy::sendMessage', message);\n\n        // Fade out and remove the uploaded file preview\n        await $(element).fadeOut(300);\n        $(element).remove();\n\n      } catch (error) {\n        console.error('Error uploading file:', error);\n        statusDiv.text('Failed: ' + error.message)\n          .css('background', 'rgba(255, 0, 0, 0.7)');\n\n        // Keep failed uploads visible for 2 seconds then fade out\n        await new Promise(resolve => setTimeout(resolve, 8000));\n        await $(element).fadeOut(300);\n        $(element).remove();\n      }\n    }\n  } catch (error) {\n    console.error('Error in file upload process:', error);\n  }\n\n  // Remove empty file preview containers\n  filePreviews.each((_, container) => {\n    if ($(container).children().length === 0) {\n      $(container).remove();\n    }\n  });\n\n  $('.file-preview', chatWindow.content).remove();\n\n  // Send the regular message\n  if (windowType === 'pond') {\n    _data.type = 'pond';\n  } else {\n    _data.type = 'buddy';\n  }\n\n  // TODO: move these commands to defaultCommands in buddyscript\n  if (_data.text.startsWith('/gif')) {\n    // split text to parts on space\n    let params = _data.text.split(' ').slice(1);\n    await bp.load('image-search');\n\n    if (params.length === 0) {\n      await bp.open('image-search', { query: params[0], provider: 'giphy' });\n      // clear the input\n      $('.aim-input', chatWindow.content).val('');\n      return;\n    }\n\n    let result = await bp.apps['image-search'].fetchImages(params[0], 6, 'giphy');\n    // pick a random image from the result\n    if (result.error) {\n      console.error('Image search error:', result.error);\n      // show an error message in the chat window\n      await this.showCard({ chatWindow, cardName: 'error', context: { message: result.error } });\n\n      // $('.aim-input', chatWindow.content).val('Error fetching images: ' + result.error);\n      console.error('Error fetching images:', result.error);\n      return;\n    }\n    if (result.length === 0) {\n      console.error('No images found for query:', params[0]);\n      return;\n    }\n    let randomImage = result[Math.floor(Math.random() * result.length)];\n    console.log('Random image selected:', randomImage);\n    // _data.text = randomImage; // set the text to the image URL\n    _data.card = {\n      type: 'image',\n      url: randomImage\n    };\n  }\n\n  // TODO: merge back params to query string, just pop the first one off\n  if (_data.text.startsWith('/image')) {\n    // split text to parts on space\n    let params = _data.text.split(' ').slice(1);\n    console.log('/image params', params);\n    if (params.length === 0) {\n      // if only one parameter is provided, open the image search app\n      await bp.open('image-search', { query: params[0], provider: 'pexels' });\n      // clear the input\n      $('.aim-input', chatWindow.content).val('');\n      return;\n    }\n\n    await bp.load('image-search');\n    console.log('pppp', params)\n    let result = await bp.apps['image-search'].fetchImages(params[0], 6, 'pexels');\n    // pick a random image from the result\n    if (result.error) {\n      console.error('Image search error:', result.error);\n      // show an error message in the chat window\n      await this.showCard({ chatWindow, cardName: 'error', context: { message: result.error } });\n\n      // $('.aim-input', chatWindow.content).val('Error fetching images: ' + result.error);\n      console.error('Error fetching images:', result.error);\n      return;\n    }\n    if (result.length === 0) {\n      console.error('No images found for query:', params[0]);\n      return;\n    }\n    let randomImage = result[Math.floor(Math.random() * result.length)];\n    console.log('Random image selected:', randomImage);\n    // _data.text = randomImage; // set the text to the image URL\n    _data.card = {\n      type: 'image',\n      url: randomImage\n    };\n  }\n\n  // if this is a buddyscript command, but not a /say command\n  // say has a special meaning in the context of the chat window\n  // as it should be sent as regular text message ( should be a card later, click to repeat )\n  // TODO: needs to rebuild bs system to support local transform commands\n  if (_data.text.startsWith('/')\n    && !_data.text.startsWith('/say')\n    && !_data.text.startsWith('/roll')\n    && !_data.text.startsWith('/gif')\n    && !_data.text.startsWith('/image')\n  ) {\n    // TODO: process the card locall here\n    /*\n    _data.card = {\n     type: 'bs'\n   };\n   */\n    // runs local BS script command\n    // alert('bs card')\n\n    let bs = this.bp.apps.buddyscript.parseCommand(_data.text);\n    console.log('got back buddyscript command', bs);\n    if (bs.pipe) {\n      //if (now - messageTime < 10000) {\n      // pipeable / immediate run commands should only persist for 10 seconds\n      bs.pipe({\n      chatWindow,\n      contextName,\n      windowType\n    });\n      // clear the input\n      $('.aim-input', chatWindow.content).val('');\n      return false;\n\n      // }\n    }\n\n    console.log('buddyscript command', bs);\n    if (bs.type === 'show-card') {\n      // show the bs card\n      let cardData = bs.data;\n      this.showCard({\n        chatWindow,\n        cardName: 'bs',\n        context: {\n          ...bs\n        }\n      });\n    }\n    $('.aim-input', chatWindow.content).val('');\n\n    return false;\n  }\n\n  console.log(`Sending message to ${_data.to} from ${_data.from} of type ${_data.type}:`, _data.text);\n  console.log(_data.text.startsWith('\\\\'));\n  if (_data.text.startsWith('\\\\')) {\n   \n    // let bs = this.bp.apps.buddyscript.parseCommand(_data.text);\n    // console.log('backwards command', bs);\n    _data.card = {\n      type: 'bs',\n      command: _data.text.replace('\\\\', '/').trim(),\n      //commandData: bs\n    };\n\n  }\n\n\n  // TODO: check if this is a valid BS command\n  // if so, we need to construct a card to show the command\n\n  // TODO: add support for sending /bs commands with \\ instead of /\n  /*\n  if (_data.text.startsWith('\\\\')) {\n    // the command is a /foo style command\n    // extract the command from the text\n    let command = _data.text.split(' ')[0].replace('\\\\', '');\n    alert(command)\n    _data.text = 'Sent app using `\\\\' + command + '` command'; // TODO: better UX message\n    _data.card = {\n      type: 'app', // coould also be a \"bs\" card, might need distinction between app and bs commands\n      context: command\n    };\n  }\n  */\n\n  console.log('emitting message', _data);\n  this.bp.emit('buddy::sendMessage', _data);\n\n  // Clear input\n  $('.aim-input', chatWindow.content).val('');\n\n  // Hide the aim-reply-box\n  $('.aim-reply-box', chatWindow.content).remove();\n\n  // clear the replyTo input value\n  $('.aim-replyto', chatWindow.content).val('');\n  /*\n  const replyBox = target.closest('.aim-reply-box');\n  if (replyBox) {\n    replyBox.remove();\n    this.activeReplyBox = null;\n    this.bp.replyMode = false;\n    this.bp.replyData = null;\n  }\n  */\n\n  let $sendButton = $('.aim-send-btn', chatWindow.content);\n  $sendButton.css('opacity', 0.5);\n\n\n}","export default async function showCard({chatWindow, cardName, context = {}}) {\n\n    // render the help card and do not send the message\n    let cardManager = this.bp.apps.card.cardManager;\n    // console.log('cardManager.loadCard', cardData);\n    const _card = await cardManager.loadCard(cardName, context, chatWindow);\n    let container = document.createElement('div');\n    container.classList.add('cardContainer');\n    let d = await _card.render(container, chatWindow);\n    if (!chatWindow) {\n      console.error('chatWindow not found. user most likely not in the chat window');\n      return;\n    }\n    const aimMessages = chatWindow.content.querySelector('.aim-messages');\n    if (!aimMessages) {\n      console.error('aim-messages not found. user most likely not in the chat window');\n      return;\n    }\n\n    // append container to the aim-messages at the end\n    aimMessages.appendChild(container);\n\n    // empty the aim-input\n    $('.aim-input', chatWindow.content).val('');\n\n    // scroll to the bottom of the chat window\n    // aimMessages.scrollTop = aimMessages.scrollHeight;\n    container.scrollIntoView({\n      behavior: 'instant'\n    });\n\n    return d;\n  }\n","export default function defaultAvatarSvg(username) {\n  // Check if avatar is already cached\n  if (this.data.avatarCache.has(username)) {\n    return this.data.avatarCache.get(username);\n  }\n\n  // Create an identicon avatar using DiceBear\n  const avatar = this.bp.vendor.dicebear.createAvatar(this.bp.vendor.dicebearAvatars, {\n    seed: username, // Username as seed for consistent avatar\n    size: 40, // Avatar size in pixels\n    backgroundColor: [\"#f0f0f0\"], // Optional: Customize background\n  });\n\n  // Convert avatar to SVG string\n  const svg = avatar.toString();\n\n  // Store in cache\n  this.data.avatarCache.set(username, svg);\n\n  return svg;\n}"],"names":["attachContextMenu","buddyElement","$","on","e","preventDefault","buddyName","target","closest","dataset","buddy","this","showContextMenu","pageX","pageY","createHoverMenu","message","hoverMenu","document","createElement","className","menuItems","from","bp","me","push","text","action","icon","forEach","item","button","setAttribute","appendChild","createTextNode","checkForLinksInMessage","match","messageText","trim","url","URL","protocol","error","isValidUrl","contentUrl","card","type","ext","split","pop","buddypond","supportedImageTypesExt","includes","toLowerCase","supportedAudioTypesExt","supportedVideoTypesExt","isValidYoutubeLink","videoId","searchParams","get","thumbnail","context","slice","isValidGithubLink","githubRegex","owner","repo","filename","console","forbiddenNotes","base64","setupInputEvents","windowType","contextName","chatWindow","$input","content","$form","$sendButton","keydown","which","shiftKey","inputValue","val","cursorPosition","selectionStart","newValue","setSelectionRange","replace","submit","emit","to","isTyping","ctime","Date","now","css","length","setupAutocomplete","options","autocomplete","commands","Object","keys","map","command","source","search","event","ui","firstChar","value","charAt","randowFunWord","words","Math","floor","random","containsBadWord","str","lowerStr","decoded","some","fnote","RegExp","test","filter","JSON","parse","atob","ChatWindowButtonBar","constructor","inputButtons","buttons","storedOrder","settings","Array","isArray","sortButtonsByOrder","container","render","enableDragAndDrop","buttonBar","classList","add","element","createButtonElement","baseDataset","image","src","alt","title","draggable","innerText","entries","key","onclick","addButton","b","warn","newButtonElement","refreshSortable","removeButton","buttonText","index","findIndex","splice","children","el","contains","removeChild","saveButtonOrder","sortable","items","tolerance","stop","syncButtonOrder","orderedTexts","find","Boolean","set","openWindows","apps","windowManager","findWindows","app","log","window","reRenderButtons","innerHTML","order","buttonMap","fromEntries","setupChatWindowButtons","chatWindowButtons","navigator","userAgent","env","prepend","scrollToBottom","parent","retryDelay","retryCount","scrollTop","setTimeout","populateRoomList","hotPonds","activeContext","roomList","sortedPonds","sort","a","connection_count","userOpenedPonds","data","activePonds","existingPondIds","Set","each","_","pondId","pond","pond_id","pondName","isUserOpened","isActive","existingItem","closeButton","append","remove","toggleClass","delete","ensureMessagesContainer","call","client","not","removeClass","updatePondConnectedUsers","chatId","userList","existingUserIds","userId","users","user","profilePicture","userItem","$textElement","$profileContainer","$newProfileElement","createProfilePictureElement","empty","html","$userItem","class","$profilePicture","$userText","$existingContainer","$img","attr","$currentImg","defaultAvatarSvg","createNewChatWindow","windowTitle","windowId","windowConfig","buildWindowConfig","createWindow","onOpen","async","_window","initializeChatWindow","onClose","removeSubscription","setupCloseButtonHandler","hide","flexShow","loggedIn","isBuddy","iconImagePath","buddylist","profileState","profile_picture","id","x","y","width","height","setupChatWindow","addSubscription","clearBuddyNewMessages","toggleMessagesContainer","renderMessages","attemptFocus","aimInput","focus","focusInputField","newMessages","receivedInstantMessage","err","re","processedMessages","messagesToRender","renderChatMessage","chatArea","userListArea","userListContext","newContainer","style","display","newUserList","targetContainer","targetUserList","show","availableContainers","firstContext","first","firstUserListContext","addClass","chatWindowTemplate","messageTemplateString","cloned","aimMessagesContainer","aimUserListContainer","joinPond","setupMessageForm","username","openChatWindow","name","setupRoomListClickHandler","sendMessageHandler","selectedContext","ev","stopPropagation","parentElement","getAttribute","remainingContainers","nextContext","roomItem","chatAreas","getWindow","defaultProfileFiles","getFileType","fileName","endsWith","handleContextMenuItemClick","performAction","closeMenus","handleEditHintAction","messageContent","querySelector","messageUUID","originalMessage","messageData","uuid","cancelEdit","saveEdit","activeMessageContextMenu","activeMessageHoverMenu","activeReplyBox","closestTarget","editMessage","replyMessage","closestMessage","createMessageContextMenu","deleteMessage","open","output","removeInstantMessage","ignoreUIControlKeys","originalText","editableContainer","parentNode","insertBefore","editHint","handleKeydown","cleanupListeners","handleBlur","relatedTarget","removeEventListener","addEventListener","restoreText","removeAttribute","blur","messageElement","newMessageText","editInstantMessage","replyData","replyBox","messageSender","replyInput","messageTextInput","cancelReply","bindProfilePictureClick","parents","hasClass","chatMessageElement","buddyname","Client","config","host","api","reconnectAttempts","maxReconnectAttempts","maxBackoffDelay","isIntentionallyClosed","getTime","prototype","connect","wsClient","createWebSocketClient","disconnect","closeConnection","addBuddy","cb","uri","method","endpoint","headers","Accept","qtokenid","body","stringify","controller","AbortController","timeoutId","abort","incrementPackets","perf","start","fetch","signal","then","response","clearTimeout","ok","json","errorData","Error","status","statusText","end","addPerfTime","catch","msg","apiRequest","send","setStatus","update","Promise","resolve","reject","WebSocket","buddylistWsEndpoint","handleOpen","handleMessage","parseData","profile","dtime","success","reward","handleClose","code","reason","clearInterval","updateStatusInterval","delay","min","pow","attempt","newWsClient","assign","handleError","readyState","OPEN","close","bind","BuddyList","updates","avatarCache","Map","defaultPond","subscribedBuddies","subscribedPonds","showedHelp","logout","provider","load","newEvent","MouseEvent","bubbles","cancelable","clientX","clientY","dispatchEvent","messageControls","isHost","sendCardMessage","targetEl","align","sendButton","Event","click","defaultChatWindowButtons","enabledChatWindowButtons","desktop","buttonMeta","appList","chatButton","opened","showingIsTyping","faucetAttempts","init","appendScript","vendor","dicebear","importModule","dicebearAvatars","bindMessageContextMenu","buddyListWindow","focusWindow","restore","htmlStr","fetchHTMLFragment","appendCSS","createBuddyListWindow","createHTMLContent","registerEventHandlers","handleAuthentication","buddylistUIEvents","innerWidth","qtoken","handleAuthSuccess","loadUserApps","generateDefaultProfile","ws","flexHide","processBuddylist","renderOrUpdateBuddyInBuddyList","buddyListItem","email","emailVerified","noAlert","messageTime","play","buddyReadNewMessages","videochat","startCall","handleChatMessages","sendMessageToServer","typingIndicatorId","typingMessage","typingIndicator","appendTo","lastTypingMessage","join","sendWsMessage","rollToNumber","newBalance","portfolio","portfolioWindow","portfolioData","updateCoinRow","symbol","amount","available","price","cost","coinSendSelector","coinSendBalance","formattedValue","toLocaleString","balance","requestDefaultCoinAllocations","getLatestMessages","pondname","sendMessage","windowsToUpdate","result","messages","values","next","showCard","cardName","emitLocal","pondSendMessage","localToken","localStorage","getItem","verifyToken","hasPassword","tryHard","Infinity","buddydata","buddyTimeouts","buddyListItems","querySelectorAll","existingBuddy","wasConnected","textContent","hasOwnProperty","isConnected","diff","utime","buddyListItemEl","connectedStatusIcon","isCalling","lastSeen","lastSeenDate","lastSeenString","year","month","day","hour","minute","second","hour12","firstChild","formattedDate","DateFormat","format","date","sortBuddyList","createChatMessageElement","chatMessage","img","defaultAvatar","contentWrapper","messageHeader","sender","tripcode","timestamp","messageMeta","geoFlag","location","renderGeoFlag","badgesContainer","replyIndicator","replyto","repliedMessage","repliedSender","repliedText","scrollIntoView","behavior","block","processedText","markdown","supportedColors","supportedStyles","linkExtension","level","renderer","token","href","parser","parseInline","tokens","styleExtension","tokenizer","exec","raw","modifiers","every","mod","lexer","inlineTokens","reverse","char","i","walkTokens","marked","use","extensions","parseMarkdownWithoutPTags","aimMessages","allMessages","inserted","existingMessage","existingId","parseInt","insertChatMessage","_chatWindow","pondNames","decodedText","entities","decodeEntities","hashPondNameRegex","matchAll","m","findAllHashPondNames","activeUsers","activeUsersInContext","removed","removedMessageEl","edited","editedMessageEl","editedMessageContent","shift","spellbook","say","startsWith","processMessages","isMobile","toString","cardData","cardManager","_card","loadCard","renderBuddyRequests","buddyrequests","buddyrequest","pendingIncomingBuddyRequests","totalIncomingBuddyRequests","denyBuddy","approveBuddy","Number","powerlevel","popup","duration","system","totalIsConnected","totalIsOnline","ponds","win","connected","buddylistData","profileNeedsUpdate","wasOnline","_processBuddylistData","_processBuddyRequestsData","affirmations","updatePositiveAffirmation","prop","password","authBuddy","change","sendPasswordResetEmail","is","randomInviteMessages","inviteMessage","setInterval","fadeOut","complete","fadeIn","determineWindowParameters","alert","isValidContextName","generateWindowId","existingWindow","handleExistingWindow","basePath","fileContent","blob","Blob","file","File","lastModified","filePath","uploadFile","uploadError","res","faucetUrl","randolphEndpoint","Authorization","buddyList","buddyItems","aStatus","bStatus","localeCompare","aUtime","bUtime","$menu","position","top","left","zIndex","background","border","padding","cursor","admin","openProfile","one","contextMenu","messageFrom","menuItem","rect","getBoundingClientRect","bottom","scrollY","isHoverMenuAction","installedApps","apps_installed","addApp","arrangeDesktop","_data","files","filePreviews","filePreview","getFile","statusDiv","right","color","alignItems","justifyContent","fileExt","encodeURIComponent","fileUrl","progress","params","query","fetchImages","randomImage","bs","buddyscript","parseCommand","pipe","d","has","svg","createAvatar","seed","size","backgroundColor"],"mappings":"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"}