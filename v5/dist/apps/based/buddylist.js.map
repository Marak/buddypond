{"version":3,"file":"buddylist.js","sources":["../../../apps/based/buddylist/lib/renderOrUpdateBuddyInBuddyList.js","../../../apps/based/buddylist/lib/message/createChatMessageElement.js","../../../apps/based/buddylist/lib/forbiddenNotes.js","../../../apps/based/buddylist/lib/message/checkForLinksInMessage.js","../../../apps/based/buddylist/lib/message/isValidUrl.js","../../../apps/based/buddylist/lib/message/isValidYoutubeLink.js","../../../apps/based/buddylist/lib/message/isValidGithubLink.js","../../../apps/based/buddylist/lib/message/setupInputEvents.js","../../../apps/based/buddylist/lib/message/setupAutocomplete.js","../../../apps/based/buddylist/lib/ChatWindowButtonBar.js","../../../apps/based/buddylist/lib/message/setupChatWindowButtons.js","../../../apps/based/buddylist/lib/message/scrollToBottom.js","../../../apps/based/buddylist/lib/message/populateRoomList.js","../../../apps/based/buddylist/lib/openChatWindow.js","../../../apps/based/buddylist/lib/defaultProfileFiles.js","../../../apps/based/buddylist/lib/generateDefaultProfile.js","../../../apps/based/buddylist/lib/message/bindMessageContextMenu.js","../../../apps/based/buddylist/lib/ws/Client.js","../../../apps/based/buddylist/buddylist.js","../../../apps/based/buddylist/lib/ws/createWebSocketClient.js","../../../apps/based/buddylist/lib/defaultChatWindowButtons.js","../../../apps/based/buddylist/lib/message/renderGeoFlag.js","../../../apps/based/buddylist/lib/message/parseMarkdownWithoutPTags.js","../../../apps/based/buddylist/lib/message/renderChatMessage.js","../../../apps/based/buddylist/lib/renderBuddyRequests.js","../../../apps/based/buddylist/lib/processProfile.js","../../../apps/based/buddylist/lib/buddylistUIEvents.js","../../../apps/based/buddylist/lib/requestDefaultCoinAllocations.js","../../../apps/based/buddylist/lib/sortBuddyList.js","../../../apps/based/buddylist/lib/showContextMenu.js","../../../apps/based/buddylist/lib/message/createMessageContextMenu.js","../../../apps/based/buddylist/lib/loadUserApps.js","../../../apps/based/buddylist/lib/message/sendMessageHandler.js","../../../apps/based/buddylist/lib/message/showCard.js","../../../apps/based/buddylist/lib/buddy/defaultAvatarSvg.js"],"sourcesContent":["// Timeout is for legacy API before websocket connections\n// We should now have a reliable way to track buddy status via websocket disconnect events\n// 15 minute hard-code timeout ( if setStatus() was missed )\nlet buddyTimeoutsInterval = 1000 * 60 * 60 * 5; // 5 hours, shoudn't be needed unless unknown error on server\n\nexport default function renderOrUpdateBuddyInBuddyList(data) {\n  let bp = this.bp;\n  let buddyname = data.name;\n  let buddydata = data.profile;\n\n  this.bp.buddyTimeouts = this.bp.buddyTimeouts || {};\n\n  // console.log('renderOrUpdateBuddyInBuddyList', buddyname, buddydata);\n\n  // Track previous connection status to detect changes\n  let buddyListItems = document.querySelectorAll('.buddylist li');\n  let existingBuddy = Array.from(buddyListItems).find(el => el.dataset.buddy === buddyname);\n  let wasConnected = existingBuddy ? existingBuddy.querySelector('.buddy-status').textContent.includes('🟢') : false;\n\n  // Handle status update only if status field is present\n  if (buddydata.hasOwnProperty('status')) {\n    if (buddydata.status === 'online') {\n      buddydata.isConnected = true;\n    } else {\n      buddydata.isConnected = false;\n    }\n\n    // console.log('isConnected', buddydata.isConnected, buddyname, buddydata.status);\n\n    // Clear the timeout if it exists\n    if (this.bp.buddyTimeouts[buddyname]) {\n      clearTimeout(this.bp.buddyTimeouts[buddyname]);\n      delete this.bp.buddyTimeouts[buddyname];\n    }\n\n    // Remark: Added 5/18/2025: Adds check if user hasn't been online for a while ( this is needed for legacy API )\n    // This may still stay in as CF worker could miss disconnect events\n    // TODO: consider re-implementing a keepAlive ping each 30 minutes\n    let now = new Date().getTime();\n    //console.log('BuddyList: buddydata.utime', buddyname, buddydata.utime, 'now', now);\n    let diff = now - buddydata.utime;\n    //console.log('BuddyList: diff', buddyname, buddydata.utime, diff, buddyTimeoutsInterval);  \n    // console.log('buddydata.utime', buddydata.utime, 'now', now, 'diff', diff);\n    // console.log('BuddyList: diff', buddyname, buddydata.utime, diff, buddyTimeoutsInterval);\n    // If buddy hasn't been online for a while, set them to offline\n    if (buddydata.isConnected && diff > buddyTimeoutsInterval) {\n      // console.log('Setting offline due to timeout', buddyname, buddydata.utime, diff);\n      // TODO: add this back in?\n      buddydata.isConnected = false;\n    }\n\n    /*\n    Remark: Removed 5/17/2025, no longer depending on utime / keepAlives\n    let now = new Date().getTime();\n    let diff = now - buddydata.utime;\n    if (now - buddydata.utime > buddyTimeoutsInterval) {\n      // console.log('Setting offline due to timeout', buddyname, buddydata.utime, diff);\n      buddydata.isConnected = false;\n    }\n    */\n    // Remark: Removed 5/17/2025, no longer depending on utime / keepAlives\n    // We may need to add this back in the future for cases when CF worker abruptly disconnects\n    // This would rely on a ping mechanism to keep the connection alive and update the utime\n    // Set a timeout to mark buddy as offline if they are currently connected\n    /*\n    if (buddydata.isConnected) {\n      this.bp.buddyTimeouts[buddyname] = setTimeout(() => {\n        let _data = {\n          name: buddyname,\n          profile: {\n            buddyname: buddyname,\n            isConnected: false,\n            status: 'offline',\n            utime: new Date().getTime(),\n            dtime: new Date().getTime(),\n            newMessages: false\n          }\n        };\n        renderOrUpdateBuddyInBuddyList.call(this, _data, false);\n      }, buddyTimeoutsInterval * 1.5);\n    }\n    */\n\n    // Play sound based on status change\n    // Don't play sound if buddy is me\n    if (buddyname !== this.bp.me) {\n      if (buddydata.isConnected && !wasConnected) {\n        // compare now time with buddydata.utime\n        // if less than 5 seconds, don't play sound\n        let now = new Date().getTime();\n        let diff = now - buddydata.utime;\n        if (diff > 300) {\n          bp.play('desktop/assets/audio/BUDDY-IN.mp3'); // Buddy comes online\n        }\n      } else if (!buddydata.isConnected && wasConnected) {\n        // Remark: Removed the signout sound as it was too loud / jarring\n        // bp.play('desktop/assets/audio/BUDDY-OUT.wav'); // Buddy goes offline\n      }\n    }\n  }\n\n  // Use existing isConnected if available, otherwise derive from DOM state\n  let isConnected = buddydata.hasOwnProperty('isConnected') ? buddydata.isConnected : wasConnected;\n  // console.log(buddydata);\n  if (buddydata.newMessages && buddydata.newMessages) {\n    isConnected = true;\n    this.bp.apps.buddylist.openChatWindow({ context: buddyname, type: 'buddy' });\n  }\n\n  let connectedStatusIcon = isConnected ? '🟢' : '🟠';\n  let isCalling = buddydata.isCalling ? '<span>📞</span>' : '';\n  let newMessages = buddydata.newMessages ? '<span>💬</span>' : '';\n\n  let lastSeen = buddydata.utime ? buddydata.utime : 0;\n  let lastSeenDate = new Date(lastSeen);\n  let lastSeenString = '';\n\n  try {\n    lastSeenString = 'Last seen: ' + lastSeenDate.toLocaleString('en-US', {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: true\n    });\n  } catch (err) {\n    console.log('Error formatting last seen date', err);\n  }\n\n  // Update or create buddy list item\n  let buddyListItemEl;\n  if (existingBuddy) {\n    // Update existing element to prevent flicker\n    buddyListItemEl = existingBuddy;\n    buddyListItemEl.dataset.utime = buddydata.utime;\n    buddyListItemEl.title = lastSeenString;\n    buddyListItemEl.querySelector('.buddy-status').innerHTML = `${newMessages}${connectedStatusIcon}${isCalling}`;\n    buddyListItemEl.querySelector('.message-buddy').textContent = buddyname;\n    buddyListItemEl.style.display = buddydata.status === 'hidden' ? 'none' : '';\n  } else {\n    // Create new element if buddy doesn't exist\n    let buddyListItem = `<li data-buddy=\"${buddyname}\" data-utime=\"${buddydata.utime}\" class=\"buddy-message-sender\" title=\"${lastSeenString}\">\n                          <span class=\"buddy-status\">${newMessages}${connectedStatusIcon}${isCalling}</span> \n                          <a data-buddy=\"${buddyname}\" class=\"message-buddy\" href=\"#\" draggable=\"false\">${buddyname}</a>\n                        </li>`;\n    buddyListItemEl = document.createElement('div');\n    buddyListItemEl.innerHTML = buddyListItem;\n    buddyListItemEl = buddyListItemEl.firstChild;\n\n    if (buddydata.status === 'hidden') {\n      buddyListItemEl.style.display = 'none';\n    }\n  }\n\n  if (buddydata.utime) {\n    let formattedDate = DateFormat.format.date(buddydata.utime, 'E MMMM dd, hh:mm:ss a');\n    $(buddyListItemEl).find('.buddy-status').attr('title', formattedDate);\n  }\n\n  // Append new buddy or ensure existing one is in the list\n  if (!existingBuddy) {\n    $('.buddylist').append(buddyListItemEl);\n  }\n\n  // Re-sort the entire buddy list\n  this.sortBuddyList();\n\n  // Add context menu functionality\n  attachContextMenu.call(this, buddyListItemEl);\n}\n\nfunction attachContextMenu(buddyElement) {\n  $(buddyElement).on('contextmenu', (e) => {\n    e.preventDefault();\n    let buddyName = e.target.closest('li').dataset.buddy;\n    this.showContextMenu(e.pageX, e.pageY, buddyName);\n  });\n}","import renderGeoFlag from './renderGeoFlag.js';\nimport parseMarkdownWithoutPTags from './parseMarkdownWithoutPTags.js';\n\n// Configuration\nconst config = {\n  useMarkdown: true,\n  allowHTML: true,\n};\n\n// New function to create hover menu\n// TODO: remove buttons, just use icons\n// TODO: update bindMessageContextMenu() method to bind to the icons instead of buttons\nfunction createHoverMenu(message) {\n  const hoverMenu = document.createElement('div');\n  hoverMenu.className = \n  'aim-hover-menu';\n\n  const menuItems = [];\n\n  if (message.from === this.bp.me || this.bp.me === 'Marak') { // TODO: admin rbac\n    menuItems.push({ text: 'Edit Message', action: 'edit-message',  icon: 'fa-duotone fa-regular fa-pencil' });\n  }\n\n  menuItems.push({ text: 'Reply Message', action: 'reply-message', icon: 'fa-duotone fa-regular fa-reply' });\n  menuItems.push({ text: '...', action: 'more-options', icon: 'fa-solid fa-regular fa-ellipsis' });\n\n\n  menuItems.forEach(item => {\n    const button = document.createElement('button');\n    button.setAttribute('data-action', item.action);\n    button.className = 'aim-hover-menu-item';\n\n    if (item.icon) {\n      const icon = document.createElement('i');\n      icon.className = item.icon;\n      button.appendChild(icon);\n      button.appendChild(document.createTextNode(' ')); // Add space between icon and text\n    } else {\n      button.appendChild(document.createTextNode(item.text));\n    }\n    // set title hint with item.text  \n    button.setAttribute('title', item.text);\n    hoverMenu.appendChild(button);\n  });\n\n  return hoverMenu;\n}\n\nexport default function createChatMessageElement(message, messageTime, chatWindow, container) {\n  // Create main message container\n  const chatMessage = document.createElement('div');\n  chatMessage.className = 'aim-chat-message';\n  chatMessage.setAttribute('data-id', message.id);\n  chatMessage.setAttribute('data-from', message.from);\n  chatMessage.setAttribute('data-to', message.to);\n  chatMessage.setAttribute('data-type', message.type);\n  chatMessage.setAttribute('data-uuid', message.uuid);\n  chatMessage.setAttribute('data-chat-id', message.chatId);\n\n  // Profile picture (SVG)\n  const profilePicture = document.createElement('div');\n  profilePicture.className = 'aim-profile-picture';\n\n  if (!message.profilePicture) {\n    // check if we happen to have a profilePicture in local cache\n    // this may happen if Randolph or other admin is sending messages on behalf of a user\n    // TODO: better way to do this...\n    if (\n      this.bp.apps.buddylist.data.profileState &&\n      this.bp.apps.buddylist.data.profileState.buddylist &&\n      this.bp.apps.buddylist.data.profileState.buddylist[message.from] && \n      this.bp.apps.buddylist.data.profileState.buddylist[message.from].profile_picture) {\n      message.profilePicture = this.bp.apps.buddylist.data.profileState.buddylist[message.from].profile_picture;\n    }\n\n  }\n\n  if (message.profilePicture) {\n    // use url as profile picture src\n    const img = document.createElement('img');\n    img.src = message.profilePicture;\n    img.alt = `${message.from}'s avatar`;\n    img.className = 'aim-chat-message-profile-picture-img';\n    profilePicture.appendChild(img);\n  } else {\n    const defaultAvatar = this.defaultAvatarSvg(message.from);\n    profilePicture.innerHTML = defaultAvatar;\n  }\n\n  // console.log('profilePicture', profilePicture);\n  profilePicture.alt = `${message.from}'s avatar`;\n\n  // Message content wrapper\n  const contentWrapper = document.createElement('div');\n  contentWrapper.className = 'aim-content-wrapper';\n\n  // Message header (sender + timestamp)\n  const messageHeader = document.createElement('div');\n  messageHeader.className = 'aim-message-header';\n\n  const sender = document.createElement('span');\n  sender.className = 'aim-sender';\n  sender.textContent = message.from === 'anonymous'\n    ? `Anonymous (${message.tripcode || 'tr1pc0d3'})`\n    : message.from;\n\n  const timestamp = document.createElement('span');\n  timestamp.className = 'aim-timestamp';\n  timestamp.textContent = messageTime;\n\n  // Message meta (geoflag + badges placeholder)\n  const messageMeta = document.createElement('div');\n  messageMeta.className = 'aim-message-meta';\n\n  const geoFlag = renderGeoFlag(message);\n  const badgesContainer = document.createElement('span');\n  badgesContainer.className = 'aim-badges';\n\n  messageMeta.appendChild(geoFlag);\n  messageMeta.appendChild(badgesContainer);\n\n  messageHeader.appendChild(sender);\n  messageHeader.appendChild(messageMeta);\n  messageHeader.appendChild(timestamp);\n\n  // Reply indicator (if message is a reply)\n  let replyIndicator = null;\n  if (message.replyto) {\n    const repliedMessage = chatWindow.content.querySelector(\n      `.aim-chat-message[data-uuid=\"${message.replyto}\"]`\n    );\n    if (repliedMessage) {\n      const repliedSender = repliedMessage.querySelector('.aim-sender')?.textContent || 'Unknown';\n      const repliedText = repliedMessage.querySelector('.aim-message-content')?.innerText || '';\n\n      replyIndicator = document.createElement('div');\n      replyIndicator.className = 'aim-reply-indicator';\n      replyIndicator.innerHTML = `\n        <span class=\"aim-reply-sender\">${repliedSender}</span>\n        <span class=\"aim-reply-content\">${repliedText}</span>\n      `;\n\n      // Add click handler to scroll to the replied message\n      const replySender = replyIndicator.querySelector('.aim-reply-sender');\n      replySender.addEventListener('click', () => {\n        repliedMessage.scrollIntoView({ behavior: 'smooth', block: 'center' });\n        repliedMessage.classList.add('aim-highlight');\n        setTimeout(() => repliedMessage.classList.remove('aim-highlight'), 2000);\n      });\n    }\n  }\n\n  // Message content\n  const messageContent = document.createElement('div');\n  messageContent.className = 'aim-message-content';\n\n  const processedText = config.useMarkdown\n    ? parseMarkdownWithoutPTags(message.text)\n    : message.text;\n\n  if (config.allowHTML) {\n    messageContent.innerHTML = processedText;\n  } else {\n    messageContent.textContent = processedText;\n  }\n\n  // Hover menu\n  const hoverMenu = createHoverMenu.call(this, message)\n\n  // Assemble message\n  contentWrapper.appendChild(messageHeader);\n  if (replyIndicator) {\n    contentWrapper.appendChild(replyIndicator);\n  }\n  contentWrapper.appendChild(messageContent);\n  contentWrapper.appendChild(hoverMenu);\n\n  chatMessage.appendChild(profilePicture);\n  chatMessage.appendChild(contentWrapper);\n\n  if (container) { // card container?\n    contentWrapper.appendChild(container);\n  }\n\n  // Image load handler\n  chatMessage.querySelectorAll('img').forEach(img => {\n    img.addEventListener('load', () => {\n      // Implement scrollToBottom when ready\n    });\n  });\n\n  insertChatMessage(chatWindow, message, chatMessage);\n  return chatMessage;\n}\n\nfunction insertChatMessage(chatWindow, message, chatMessage) {\n  // console.log('insertChatMessage', chatWindow, message, chatMessage);\n  let aimMessages = chatWindow.content.querySelector('.aim-messages');\n\n  if (message.type === 'pond') {\n    // console.log('Inserting message into pond chat window', message);\n    // TODO: find the specific .aim-messages-container for the pond\n    aimMessages = chatWindow.content.querySelector(`.aim-messages-container[data-context=\"${message.to}\"] .aim-messages`);\n    // console.log('Pond messages container found:', aimMessages);\n  }\n\n  if (!aimMessages) {\n    console.error('aim-messages not found. user most likely not in the chat window');\n    return;\n  }\n  const allMessages = Array.from(aimMessages.querySelectorAll('.aim-chat-message'));\n  let inserted = false;\n\n  for (const existingMessage of allMessages) {\n    const existingId = parseInt(existingMessage.getAttribute('data-id'), 10);\n    if (message.id < existingId) {\n      aimMessages.insertBefore(chatMessage, existingMessage);\n      inserted = true;\n      break;\n    }\n  }\n\n  if (!inserted) {\n    aimMessages.appendChild(chatMessage);\n  }\n\n  return chatMessage;\n}\n","// contains list of bad words we dont't want the Desktop to render\n// these are stored as Base64 so we don't have to see them introduced into the codebase\n// if you wish to view the list simply run: \"console.log(atob(forbiddenNotes.base64))\" in console\n\nlet forbiddenNotes = {\n  \"base64\": \"WyI0cjVlIiwiNWgxdCIsIjVoaXQiLCJhNTUiLCJhbmFsIiwiYW51cyIsImFyNWUiLCJhcnJzZSIsImFyc2UiLCJhc3MiLCJhc3MtZnVja2VyIiwiYXNzZXMiLCJhc3NmdWNrZXIiLCJhc3NmdWtrYSIsImFzc2hvbGUiLCJhc3Nob2xlcyIsImFzc3dob2xlIiwiYV9zX3MiLCJiIXRjaCIsImIwMGJzIiwiYjE3Y2giLCJiMXRjaCIsImJhbGxiYWciLCJiYWxscyIsImJhbGxzYWNrIiwiYmFzdGFyZCIsImJlYXN0aWFsIiwiYmVhc3RpYWxpdHkiLCJiZWxsZW5kIiwiYmVzdGlhbCIsImJlc3RpYWxpdHkiLCJiaStjaCIsImJpYXRjaCIsImJpdGNoIiwiYml0Y2hlciIsImJpdGNoZXJzIiwiYml0Y2hlcyIsImJpdGNoaW4iLCJiaXRjaGluZyIsImJsb29keSIsImJsb3cgam9iIiwiYmxvd2pvYiIsImJsb3dqb2JzIiwiYm9pb2xhcyIsImJvbGxvY2siLCJib2xsb2siLCJib25lciIsImJvb2IiLCJib29icyIsImJvb29icyIsImJvb29vYnMiLCJib29vb29icyIsImJvb29vb29vYnMiLCJicmVhc3RzIiwiYnVjZXRhIiwiYnVnZ2VyIiwiYnVtIiwiYnVubnkgZnVja2VyIiwiYnV0dCIsImJ1dHRob2xlIiwiYnV0dG11bmNoIiwiYnV0dHBsdWciLCJjMGNrIiwiYzBja3N1Y2tlciIsImNhcnBldCBtdW5jaGVyIiwiY2F3ayIsImNoaW5rIiwiY2lwYSIsImNsMXQiLCJjbGl0IiwiY2xpdG9yaXMiLCJjbGl0cyIsImNudXQiLCJjb2NrIiwiY29jay1zdWNrZXIiLCJjb2NrZmFjZSIsImNvY2toZWFkIiwiY29ja211bmNoIiwiY29ja211bmNoZXIiLCJjb2NrcyIsImNvY2tzdWNrICIsImNvY2tzdWNrZWQgIiwiY29ja3N1Y2tlciIsImNvY2tzdWNraW5nIiwiY29ja3N1Y2tzICIsImNvY2tzdWthIiwiY29ja3N1a2thIiwiY29rIiwiY29rbXVuY2hlciIsImNva3N1Y2thIiwiY29vbiIsImNveCIsImNyYXAiLCJjdW0iLCJjdW1tZXIiLCJjdW1taW5nIiwiY3VtcyIsImN1bXNob3QiLCJjdW5pbGluZ3VzIiwiY3VuaWxsaW5ndXMiLCJjdW5uaWxpbmd1cyIsImN1bnQiLCJjdW50bGljayAiLCJjdW50bGlja2VyICIsImN1bnRsaWNraW5nICIsImN1bnRzIiwiY3lhbGlzIiwiY3liZXJmdWMiLCJjeWJlcmZ1Y2sgIiwiY3liZXJmdWNrZWQgIiwiY3liZXJmdWNrZXIiLCJjeWJlcmZ1Y2tlcnMiLCJjeWJlcmZ1Y2tpbmcgIiwiZDFjayIsImRhbW4iLCJkaWNrIiwiZGlja2hlYWQiLCJkaWxkbyIsImRpbGRvcyIsImRpbmsiLCJkaW5rcyIsImRpcnNhIiwiZGxjayIsImRvZy1mdWNrZXIiLCJkb2dnaW4iLCJkb2dnaW5nIiwiZG9ua2V5cmliYmVyIiwiZG9vc2giLCJkdWNoZSIsImR5a2UiLCJlamFjdWxhdGUiLCJlamFjdWxhdGVkIiwiZWphY3VsYXRlcyAiLCJlamFjdWxhdGluZyAiLCJlamFjdWxhdGluZ3MiLCJlamFjdWxhdGlvbiIsImVqYWt1bGF0ZSIsImYgdSBjIGsiLCJmIHUgYyBrIGUgciIsImY0bm55IiwiZmFnIiwiZmFnZ2luZyIsImZhZ2dpdHQiLCJmYWdnb3QiLCJmYWdncyIsImZhZ290IiwiZmFnb3RzIiwiZmFncyIsImZhbm55IiwiZmFubnlmbGFwcyIsImZhbm55ZnVja2VyIiwiZmFueXkiLCJmYXRhc3MiLCJmY3VrIiwiZmN1a2VyIiwiZmN1a2luZyIsImZlY2siLCJmZWNrZXIiLCJmZWxjaGluZyIsImZlbGxhdGUiLCJmZWxsYXRpbyIsImZpbmdlcmZ1Y2sgIiwiZmluZ2VyZnVja2VkICIsImZpbmdlcmZ1Y2tlciAiLCJmaW5nZXJmdWNrZXJzIiwiZmluZ2VyZnVja2luZyAiLCJmaW5nZXJmdWNrcyAiLCJmaXN0ZnVjayIsImZpc3RmdWNrZWQgIiwiZmlzdGZ1Y2tlciAiLCJmaXN0ZnVja2VycyAiLCJmaXN0ZnVja2luZyAiLCJmaXN0ZnVja2luZ3MgIiwiZmlzdGZ1Y2tzICIsImZsYW5nZSIsImZvb2siLCJmb29rZXIiLCJmdWNrIiwiZnVja2EiLCJmdWNrZWQiLCJmdWNrZXIiLCJmdWNrZXJzIiwiZnVja2hlYWQiLCJmdWNraGVhZHMiLCJmdWNraW4iLCJmdWNraW5nIiwiZnVja2luZ3MiLCJmdWNraW5nc2hpdG1vdGhlcmZ1Y2tlciIsImZ1Y2ttZSAiLCJmdWNrcyIsImZ1Y2t3aGl0IiwiZnVja3dpdCIsImZ1ZGdlIHBhY2tlciIsImZ1ZGdlcGFja2VyIiwiZnVrIiwiZnVrZXIiLCJmdWtrZXIiLCJmdWtraW4iLCJmdWtzIiwiZnVrd2hpdCIsImZ1a3dpdCIsImZ1eCIsImZ1eDByIiwiZl91X2NfayIsImdhbmdiYW5nIiwiZ2FuZ2JhbmdlZCAiLCJnYW5nYmFuZ3MgIiwiZ2F5bG9yZCIsImdheXNleCIsImdvYXRzZSIsImdvZC1kYW0iLCJnb2QtZGFtbmVkIiwiZ29kZGFtbiIsImdvZGRhbW5lZCIsImhhcmRjb3Jlc2V4ICIsImhlbGwiLCJoZXNoZSIsImhvYXIiLCJob2FyZSIsImhvZXIiLCJob21vIiwiaG9yZSIsImhvcm5pZXN0IiwiaG9ybnkiLCJob3RzZXgiLCJqYWNrLW9mZiAiLCJqYWNrb2ZmIiwiamFwIiwiamVyay1vZmYgIiwiamlzbSIsImppeiAiLCJqaXptICIsImppenoiLCJrYXdrIiwia25vYiIsImtub2JlYWQiLCJrbm9iZWQiLCJrbm9iZW5kIiwia25vYmhlYWQiLCJrbm9iam9ja3kiLCJrbm9iam9rZXkiLCJrb2NrIiwia29uZHVtIiwia29uZHVtcyIsImt1bSIsImt1bW1lciIsImt1bW1pbmciLCJrdW1zIiwia3VuaWxpbmd1cyIsImtpdW50IiwibDNpK2NoIiwibDNpdGNoIiwibGFiaWEiLCJsbWZhbyIsImx1c3QiLCJsdXN0aW5nIiwibTBmMCIsIm0wZm8iLCJtNDV0ZXJiYXRlIiwibWE1dGVyYjgiLCJtYTV0ZXJiYXRlIiwibWFzb2NoaXN0IiwibWFzdGVyLWJhdGUiLCJtYXN0ZXJiOCIsIm1hc3RlcmJhdCoiLCJtYXN0ZXJiYXQzIiwibWFzdGVyYmF0ZSIsIm1hc3RlcmJhdGlvbiIsIm1hc3RlcmJhdGlvbnMiLCJtYXN0dXJiYXRlIiwibW8tZm8iLCJtb2YwIiwibW9mbyIsIm1vdGhhZnVjayIsIm1vdGhhZnVja2EiLCJtb3RoYWZ1Y2thcyIsIm1vdGhhZnVja2F6IiwibW90aGFmdWNrZWQgIiwibW90aGFmdWNrZXIiLCJtb3RoYWZ1Y2tlcnMiLCJtb3RoYWZ1Y2tpbiIsIm1vdGhhZnVja2luZyAiLCJtb3RoYWZ1Y2tpbmdzIiwibW90aGFmdWNrcyIsIm1vdGhlciBmdWNrZXIiLCJtb3RoZXJmdWNrIiwibW90aGVyZnVja2VkIiwibW90aGVyZnVja2VyIiwibW90aGVyZnVja2VycyIsIm1vdGhlcmZ1Y2tpbiIsIm1vdGhlcmZ1Y2tpbmciLCJtb3RoZXJmdWNraW5ncyIsIm1vdGhlcmZ1Y2trYSIsIm1vdGhlcmZ1Y2tzIiwibXVmZiIsIm11dGhhIiwibXV0aGFmZWNrZXIiLCJtdXRoYWZ1Y2trZXIiLCJtdXRoZXIiLCJtdXRoZXJmdWNrZXIiLCJuMWdnYSIsIm4xZ2dlciIsIm5hemkiLCJuaWdnM3IiLCJuaWdnNGgiLCJuaWdnYSIsIm5pZ2dhaCIsIm5pZ2dhcyIsIm5pZ2dheiIsIm5pZ2dlciIsIm5pZ2dlcnMiLCJub2IiLCJub2Igam9rZXkiLCJub2JoZWFkIiwibm9iam9ja3kiLCJub2Jqb2tleSIsIm51bWJudXRzIiwibnV0c2FjayIsIm9yZ2FzaW0gIiwib3JnYXNpbXMgIiwib3JnYXNtIiwib3JnYXNtcyAiLCJwMHJuIiwicGF3biIsInBlY2tlciIsInBlbmlzIiwicGVuaXNmdWNrZXIiLCJwaG9uZXNleCIsInBodWNrIiwicGh1ayIsInBodWtlZCIsInBodWtpbmciLCJwaHVra2VkIiwicGh1a2tpbmciLCJwaHVrcyIsInBodXEiLCJwaWdmdWNrZXIiLCJwaW1waXMiLCJwaXNzIiwicGlzc2VkIiwicGlzc2VyIiwicGlzc2VycyIsInBpc3NlcyAiLCJwaXNzZmxhcHMiLCJwaXNzaW4gIiwicGlzc2luZyIsInBpc3NvZmYgIiwicG9vcCIsInBvcm4iLCJwb3JubyIsInBvcm5vZ3JhcGh5IiwicG9ybm9zIiwicHJpY2siLCJwcmlja3MgIiwicHJvbiIsInB1YmUiLCJwdXNzZSIsInB1c3NpIiwicHVzc2llcyIsInB1c3N5IiwicHVzc3lzICIsInJlY3R1bSIsInJldGFyZCIsInJpbWphdyIsInJpbW1pbmciLCJzIGhpdCIsInMuby5iLiIsInNhZGlzdCIsInNjaGxvbmciLCJzY3Jld2luZyIsInNjcm9hdCIsInNjcm90ZSIsInNjcm90dW0iLCJzZW1lbiIsInNleCIsInNoISsiLCJzaCF0Iiwic2gxdCIsInNoYWciLCJzaGFnZ2VyIiwic2hhZ2dpbiIsInNoYWdnaW5nIiwic2hlbWFsZSIsInNoaSsiLCJzaGl0Iiwic2hpdGRpY2siLCJzaGl0ZSIsInNoaXRlZCIsInNoaXRleSIsInNoaXRmdWNrIiwic2hpdGZ1bGwiLCJzaGl0aGVhZCIsInNoaXRpbmciLCJzaGl0aW5ncyIsInNoaXRzIiwic2hpdHRlZCIsInNoaXR0ZXIiLCJzaGl0dGVycyAiLCJzaGl0dGluZyIsInNoaXR0aW5ncyIsInNoaXR0eSAiLCJza2FuayIsInNsdXQiLCJzbHV0cyIsInNtZWdtYSIsInNtdXQiLCJzbmF0Y2giLCJzb24tb2YtYS1iaXRjaCIsInNwYWMiLCJzcHVuayIsInNfaF9pX3QiLCJ0MXR0MWU1IiwidDF0dGllcyIsInRlZXRzIiwidGVleiIsInRlc3RpY2FsIiwidGVzdGljbGUiLCJ0aXQiLCJ0aXRmdWNrIiwidGl0cyIsInRpdHQiLCJ0aXR0aWU1IiwidGl0dGllZnVja2VyIiwidGl0dGllcyIsInRpdHR5ZnVjayIsInRpdHR5d2FuayIsInRpdHdhbmsiLCJ0b3NzZXIiLCJ0dXJkIiwidHc0dCIsInR3YXQiLCJ0d2F0aGVhZCIsInR3YXR0eSIsInR3dW50IiwidHd1bnRlciIsInYxNGdyYSIsInYxZ3JhIiwidmFnaW5hIiwidmlhZ3JhIiwidnVsdmEiLCJ3MDBzZSIsIndhbmciLCJ3YW5rIiwid2Fua2VyIiwid2Fua3kiLCJ3aG9hciIsIndob3JlIiwid2lsbGllcyIsIndpbGx5IiwieHJhdGVkIiwieHh4Il0=\"\n};\n\nforbiddenNotes.randowFunWord = function randowFunWord() {\n  let words = [\"daffodil\", \"chrysanthemum\", \"waffles\", \"puppies\", \"senpai\", \"kohai\", \"rainbow\", \"fluffy\", \"marklar\"];\n  // TODO: use bp.random() in order to get seedable randomness\n  // this will provide consistent results across all client instances\n  var item = words[Math.floor(Math.random() * words.length)];\n  return item;\n}\n\nforbiddenNotes.containsBadWord = function (str) {\n  // Convert input to lowercase for case-insensitive matching\n  const lowerStr = str.toLowerCase();\n  // Check each forbidden word using word boundaries\n  return forbiddenNotes.decoded.some(function (fnote) {\n    // Create a regex with word boundaries for whole-word matching\n    const regex = new RegExp(`\\\\b${fnote}\\\\b`, 'i');\n    const found = regex.test(lowerStr);\n    return found;\n  });\n};\n\nforbiddenNotes.filter = function (str) {\n  forbiddenNotes.decoded.forEach(function (fnote) {\n    str = str.replace(new RegExp(\"\\\\b\" + fnote + \"\\\\b\"), forbiddenNotes.randowFunWord())\n    str = str.replace(new RegExp(\"\\\\b\" + fnote + \"\\\\b\", \"gi\"), forbiddenNotes.randowFunWord())\n  });\n  return str;\n}\n\nforbiddenNotes.decoded = JSON.parse(atob(forbiddenNotes.base64))\n\nexport default forbiddenNotes;\n","// TODO: move all this app specific code *outside* of the buddylist / renderMessage\n// use the system.addMessageProcessor() API instead\n\nimport isValidUrl from './isValidUrl.js';\nimport isValidYoutubeLink from './isValidYoutubeLink.js';\nimport isValidGithubLink from './isValidGithubLink.js';\n\nexport default function checkForLinksInMessage(message) {\n  const text = message.text || '';\n\n  // Basic URL regex — matches http(s) links\n  const urlRegex = /https?:\\/\\/(?:[^\\s()<>\\[\\]{}\"']+|\\([^\\s()]*?\\))+/gi;\n  let match = text.match(urlRegex);\n  // match = [message.text];\n\n  if (match && isValidUrl(match[0])) {\n    let contentUrl = match[0];\n    // console.log('Found URL in message:', contentUrl);\n    message.card = {\n      url: contentUrl,\n      type: 'website',\n    };\n\n    // Determine file type from extension\n    let ext = contentUrl.split('.').pop().split(/\\#|\\?/)[0]; // Strip off hash/query\n    if (ext && typeof ext === 'string') {\n      if (buddypond.supportedImageTypesExt.includes(ext.toLowerCase())) {\n        message.card.type = 'image';\n      }\n      if (buddypond.supportedAudioTypesExt.includes(ext.toLowerCase())) {\n        message.card.type = 'audio';\n      }\n      if (buddypond.supportedVideoTypesExt.includes(ext.toLowerCase())) {\n        message.card.type = 'video';\n      }\n    }\n\n    // YouTube link handling\n    if (isValidYoutubeLink(contentUrl)) {\n      const videoId = new URL(contentUrl).searchParams.get('v');\n      if (videoId) {\n        message.card.type = 'youtube';\n        message.card.thumbnail = `https://img.youtube.com/vi/${videoId}/0.jpg`;\n        message.card.context = videoId;\n      }\n    }\n\n    // GitHub link handling\n    if (isValidGithubLink(contentUrl)) {\n      message.card.type = 'github';\n      const githubRegex = /^https?:\\/\\/github\\.com\\/([^\\/]+)\\/([^\\/]+)\\/blob\\/([^\\/]+)\\/(.+)$/;\n      const match = contentUrl.match(githubRegex);\n      if (match) {\n        message.card.owner = match[1];\n        message.card.repo = match[2];\n        message.card.filename = match[4];\n      } else {\n        console.error(\"Invalid GitHub URL format.\");\n      }\n    }\n  }\n}\n","export default function isValidUrl(messageText) {\n    if (!messageText) return false;\n  \n    messageText = messageText.trim(); // Trim whitespace from both ends\n  \n    try {\n      const url = new URL(messageText);\n  \n      // Ensure the URL has http or https protocol\n      if (url.protocol === \"http:\" || url.protocol === \"https:\") {\n        // console.log('This is a valid URL:', url.href);\n        return true;\n      }\n  \n      return false; // Invalid if protocol is not http or https\n    } catch (error) {\n      return false; // If an error is thrown, it's not a valid URL\n    }\n  }","export default function checkIsValidYoutubeLink(url) {\n    const regex = /(?:youtube\\.com\\/(?:[^\\/]+\\/.+\\/|(?:v|e(?:mbed)?)\\/|.*[?&]v=)|youtu\\.be\\/)([^\"&?\\/\\s]{11})/;\n    const match = url.match(regex);\n    return match ? match[1] : null; // Return video ID or null\n}\n","export default function isValidGithubLink(url) {\n    const regex = /^https?:\\/\\/github\\.com\\/([^\\/]+)\\/([^\\/]+)\\/blob\\/([^\\/]+)\\/(.+)$/;\n    const match = url.match(regex);\n    return match ? match.slice(1) : null; \n    // Returns [owner, repo, branch, filePath] or null\n}\n","export default function setupInputEvents(windowType, contextName, chatWindow) {\n    const $input = $(\".aim-input\", chatWindow.content);\n    const $form = $(\".message_form\", chatWindow.content);\n    const $sendButton = $(\".aim-send-btn\", chatWindow.content);\n\n    $input.keydown((e) => {\n        if (e.which === 13 && e.shiftKey) {\n            const inputValue = $input.val();\n            const cursorPosition = $input[0].selectionStart;\n            const newValue = inputValue.slice(0, cursorPosition) + \"\\n\" + inputValue.slice(cursorPosition);\n            $input.val(newValue);\n            $input[0].setSelectionRange(cursorPosition + 1, cursorPosition + 1);\n            return false;\n        }\n\n        if (e.which === 13) {\n            const message = $input.val().replace(/\\n/g, \"<br>\");\n            $input.val(message);\n            $form.submit();\n            e.preventDefault();\n            return false;\n        }\n\n        let activeContext = chatWindow.currentActiveContext || contextName;\n\n        this.bp.emit(\"buddy::typing\", {\n            from: this.bp.me,\n            to: activeContext,\n            type: windowType,\n            isTyping: true,\n            ctime: Date.now(),\n        });\n    });\n\n    $input.on(\"keyup\", (e) => {\n        const inputValue = $input.val();\n        $sendButton.css(\"opacity\", inputValue.length > 0 ? 1 : 0.5);\n    });\n}\n","export default function setupAutocomplete(chatWindow) {\n    if (!this.options.autocomplete) return;\n\n    const commands = Object.keys(this.options.autocomplete).map((command) => `/${command}`);\n    $(\".aim-input\", chatWindow.content).autocomplete({\n        source: commands,\n        search: (event, ui) => {\n            const firstChar = event.target.value.charAt(0);\n            return [\"/\", \"\\\\\"].includes(firstChar);\n        },\n    });\n}","export default class ChatWindowButtonBar {\n    constructor(bp, options = {}) {\n        this.bp = bp;\n        this.options = options;\n\n        // Button objects provided via options\n        const inputButtons = options.buttons || [];\n\n        // Read stored order of button labels\n        const storedOrder = this.bp.settings?.['buttonBar.buttons'];\n\n        if (Array.isArray(storedOrder)) {\n            // Sort input buttons by stored order\n            this.buttons = this.sortButtonsByOrder(inputButtons, storedOrder);\n        } else {\n            this.buttons = inputButtons;\n        }\n\n        this.container = this.render();       // DOM\n        this.enableDragAndDrop();             // jQuery UI sorting\n        return this;\n    }\n\n    render() {\n        const buttonBar = document.createElement('div');\n        buttonBar.classList.add('button-bar');\n\n        this.buttons.forEach(button => {\n            const element = this.createButtonElement(button);\n            buttonBar.appendChild(element);\n        });\n\n        return buttonBar;\n    }\n\n    createButtonElement(button) {\n        let element;\n\n        const baseDataset = {\n            context: this.options.context || button.text,\n            type: this.options.type || 'buddy'\n        };\n\n        if (button.image) {\n            element = document.createElement('img');\n            element.src = button.image;\n            element.alt = button.text;\n            element.title = button.text;\n            element.draggable = false;\n        } else {\n            element = document.createElement('button');\n            element.innerText = button.text;\n        }\n\n        Object.entries(baseDataset).forEach(([key, value]) => {\n            element.dataset[key] = value;\n        });\n\n        element.classList.add('button-bar-button');\n        if (button.className) {\n            element.classList.add(button.className);\n        }\n\n        element.dataset.text = button.text;\n        element.onclick = button.onclick;\n\n        return element;\n    }\n\n    addButton(button) {\n        if (this.buttons.some(b => b.text === button.text)) {\n            console.warn(`Button with text \"${button.text}\" already exists.`);\n            return;\n        }\n        \n\n        this.buttons.push(button);\n        const newButtonElement = this.createButtonElement(button);\n        this.container.appendChild(newButtonElement);\n        this.refreshSortable();\n    }\n\n    removeButton(buttonText) {\n        const index = this.buttons.findIndex(button => button.text === buttonText);\n        if (index === -1) return;\n\n        this.buttons.splice(index, 1);\n\n        const children = Array.from(this.container.children);\n        for (const el of children) {\n            if ((el.innerText === buttonText || el.alt === buttonText) && el.classList.contains('button-bar-button')) {\n                this.container.removeChild(el);\n                break;\n            }\n        }\n\n        this.refreshSortable();\n        this.saveButtonOrder();\n    }\n\n    enableDragAndDrop() {\n        $(this.container).sortable({\n            items: '.button-bar-button',\n            tolerance: 'pointer',\n            stop: () => this.syncButtonOrder()\n        });\n    }\n\n    refreshSortable() {\n        $(this.container).sortable('refresh');\n    }\n\n    syncButtonOrder() {\n        const orderedTexts = Array.from(this.container.children).map(el => el.dataset.text);\n        this.buttons = orderedTexts\n            .map(text => this.buttons.find(b => b.text === text))\n            .filter(Boolean);\n\n        this.saveButtonOrder();\n    }\n\n    saveButtonOrder() {\n        const orderedTexts = this.buttons.map(b => b.text);\n        this.bp.set('buttonBar.buttons', orderedTexts);\n\n        const openWindows = this.bp.apps.ui.windowManager.findWindows({\n            app: 'buddylist',\n            type: ['buddy', 'pond']\n        });\n\n        console.log('openWindows to reorder', openWindows);\n\n        openWindows.forEach(window => {\n            if (window.buttonBar) {\n                // Reorder buttons\n                window.buttonBar.buttons = this.sortButtonsByOrder(window.buttonBar.buttons, orderedTexts);\n\n                // Re-render DOM\n                window.buttonBar.reRenderButtons();\n            }\n        });\n    }\n\n    //reRenderButtons() is only used when making a remote change to the button order from an outside source\n    // drag and drop does not use this method and instead uses syncButtonOrder\n    // we use reRenderButtons to update the button bar in all other existing open windows\n    reRenderButtons() {\n        // Clear the container\n        this.container.innerHTML = '';\n\n        // Recreate and append all buttons in current order\n        this.buttons.forEach(button => {\n            const el = this.createButtonElement(button);\n            this.container.appendChild(el);\n        });\n\n        // Re-enable drag and drop after replacing children\n        this.refreshSortable();\n    }\n\n    sortButtonsByOrder(buttons, order) {\n        const buttonMap = Object.fromEntries(buttons.map(b => [b.text, b]));\n        const ordered = order.map(text => buttonMap[text]).filter(Boolean);\n\n        // Append any new buttons not in stored order\n        const remaining = buttons.filter(b => !order.includes(b.text));\n        return [...ordered, ...remaining];\n    }\n}\n","import ChatWindowButtonBar from \"../ChatWindowButtonBar.js\";\n\n\nexport default function setupChatWindowButtons(windowType, contextName, chatWindow) {\n    if (!this.options.chatWindowButtons) return;\n\n    let buttons = this.options.chatWindowButtons.slice();\n    if (windowType === \"pond\") {\n        buttons = buttons.filter((button) => button.type !== \"buddy-only\");\n    }\n\n    if (isIOS()) {\n        buttons = buttons.filter((button) => button.env !== \"desktop-only\");\n    }\n\n    chatWindow.buttonBar = new ChatWindowButtonBar(this.bp, {\n        context: contextName,\n        type: windowType,\n        buttons,\n    });\n    $(\".aim-message-controls\", chatWindow.content).prepend(chatWindow.buttonBar.container);\n}\n\nfunction isIOS() {\n    return /iPad|iPhone|iPod/.test(navigator.userAgent) && \"ontouchend\" in document;\n}","// Scroll to the bottom of the chat window\nexport default function scrollToBottom(parent, retryDelay = 0, retryCount = 0) {\n  // console.log('scrollToBottom', parent, retryDelay, retryCount);\n  if (!parent) {\n    console.log('No parent element provided.');\n    return;\n  }\n  if (retryCount > 5) {\n    console.log('Max retry count reached. Stopping scroll attempt.');\n    return;\n  }\n  $('.aim-chat-area', parent).scrollTop(99999999)\n\n  // check if the scroll is still at 0\n  const scrollTop = $('.aim-chat-area', parent).scrollTop();\n\n  if (scrollTop === 0) {\n    // scroll to the bottom\n    retryDelay += 200;\n    retryCount++;\n    setTimeout(() => {\n      scrollToBottom(parent, retryDelay, retryCount);\n    }, retryDelay);\n  }\n}","// Populates or updates the pond room list in the chat window\n// Maintains sort order by connection_count (descending) without full re-render\n// Manages .aim-room-active class only when an activeContext is specified\nexport default function populateRoomList(hotPonds, chatWindow, activeContext = null) {\n    // console.log('populateRoomList called with hotPonds:', hotPonds, 'chatWindow:', chatWindow, 'activeContext:', activeContext);\n    const roomList = $(\".aim-room-list-items\", chatWindow.content);\n    if (!roomList.length) return;\n\n    if (!hotPonds || !Array.isArray(hotPonds)) return;\n\n    // Sort ponds by connection count (descending)\n    const sortedPonds = [...hotPonds].sort((a, b) => b.connection_count - a.connection_count);\n    // console.log('Sorted ponds:', sortedPonds);\n\n    // Track user-opened ponds\n    const userOpenedPonds = this.data.activePonds || [];\n\n    // Track existing room items by pond_id\n    const existingItems = new Map();\n    const existingPondIds = new Set();\n    roomList.find(\".aim-room-item\").each((_, item) => {\n        const pondId = $(item).data(\"pond\");\n        if (pondId) {\n            existingItems.set(pondId, $(item));\n            existingPondIds.add(pondId);\n        }\n    });\n\n    // Update or add room items\n    sortedPonds.forEach((pond) => {\n        const pondId = pond.pond_id;\n        const pondName = pondId.replace(\"pond/\", \"\");\n        const isUserOpened = userOpenedPonds.includes(pondId);\n        const isActive = pondId === activeContext;\n\n        const existingItem = existingItems.get(pondId);\n        if (existingItem) {\n            // Update existing item only if data has changed\n            const $scoreElement = existingItem.find(\".aim-room-list-item-score\");\n            if ($scoreElement.text() !== String(pond.connection_count)) {\n                console.log(`Updating connection_count for ${pondId}: ${pond.connection_count}`);\n                $scoreElement.text(pond.connection_count);\n            }\n\n            const $closeButton = existingItem.find(\".aim-room-close-btn\");\n            if (isUserOpened) {\n                if (!$closeButton.length) {\n                    console.log(`Adding close button for ${pondId}`);\n                    existingItem.append(`<button class=\"aim-room-close-btn\" data-context=\"${pondId}\">X</button>`);\n                }\n            } else if ($closeButton.length) {\n                console.log(`Removing close button for ${pondId}`);\n                $closeButton.remove();\n            }\n\n            // Update active class only if activeContext is specified\n            if (activeContext !== null) {\n                const shouldBeActive = isActive;\n                if (existingItem.hasClass(\"aim-room-active\") !== shouldBeActive) {\n                    console.log(`Updating active class for ${pondId}: ${shouldBeActive}`);\n                    existingItem.toggleClass(\"aim-room-active\", shouldBeActive);\n                }\n            }\n\n            existingPondIds.delete(pondId); // Mark as processed\n        } else {\n            // Create new room item\n            console.log(`Adding new room item for ${pondId}`);\n            const closeButton = isUserOpened\n                ? `<button class=\"aim-room-close-btn\" data-context=\"${pondId}\">X</button>`\n                : \"\";\n            const $newItem = $(`\n                <li class=\"aim-room-item aim-room-list-item${isActive && activeContext !== null ? \" aim-room-active\" : \"\"}\" data-pond=\"${pondId}\" data-context=\"${pondId}\">\n                    <span class=\"aim-room-list-item-name\">#${pondName}</span>\n                    <span class=\"aim-room-list-item-score\">${pond.connection_count}</span>\n                    ${closeButton}\n                </li>\n            `);\n            roomList.append($newItem); // Append temporarily; will reorder later\n            existingItems.set(pondId, $newItem); // Track for reordering\n        }\n\n        // Ensure messages container exists for active or opened ponds\n        if (isActive || isUserOpened) {\n            ensureMessagesContainer.call(this, pondId, chatWindow, this.bp.apps.client);\n        }\n    });\n\n    // Remove room items for ponds no longer in hotPonds\n    existingPondIds.forEach((pondId) => {\n        console.log(`Removing room item for ${pondId}`);\n        existingItems.get(pondId)?.remove();\n        existingItems.delete(pondId);\n    });\n\n    // Reorder room items to match sortedPonds\n    console.log('Reordering room items to match sortedPonds');\n    let previousItem = null;\n    sortedPonds.forEach((pond) => {\n        const $item = existingItems.get(pond.pond_id);\n        if ($item) {\n            if (previousItem) {\n                // Insert after the previous item\n                const $nextSibling = previousItem.next();\n                if (!$nextSibling.length || $nextSibling.data(\"pond\") !== pond.pond_id) {\n                    console.log(`Moving ${pond.pond_id} after ${previousItem.data(\"pond\")}`);\n                    $item.insertAfter(previousItem);\n                }\n            } else {\n                // Move to the top if it's the first item\n                const $firstItem = roomList.children().first();\n                if (!$firstItem.length || $firstItem.data(\"pond\") !== pond.pond_id) {\n                    console.log(`Moving ${pond.pond_id} to top`);\n                    $item.prependTo(roomList);\n                }\n            }\n            previousItem = $item;\n        }\n    });\n\n    // Ensure only the active room has .aim-room-active if activeContext is specified\n    if (activeContext !== null) {\n        console.log(`Ensuring only ${activeContext} has .aim-room-active`);\n        roomList.find(\".aim-room-item\").not(`[data-pond=\"${activeContext}\"]`).removeClass(\"aim-room-active\");\n        if (existingItems.get(activeContext)) {\n            existingItems.get(activeContext).addClass(\"aim-room-active\");\n        }\n    }\n}","import forbiddenNotes from \"./forbiddenNotes.js\";\nimport setupInputEvents from \"./message/setupInputEvents.js\";\nimport setupAutocomplete from \"./message/setupAutocomplete.js\";\nimport setupChatWindowButtons from \"./message/setupChatWindowButtons.js\";\nimport scrollToBottom from \"./message/scrollToBottom.js\";\n\n// this is now handled in the pond.js file\nimport populateRoomList from \"./message/populateRoomList.js\";\nimport updateRoomList from \"./message/updateRoomList.js\";\n// Updates the list of connected users for a specific pond chat\n// data.chatId specifies the pond context (e.g., \"pond/general\")\n\n// Updates the list of connected users for a specific pond chat\n// data.chatId specifies the pond context (e.g., \"pond/general\")\nfunction updatePondConnectedUsers(data) {\n    const chatId = data.chatId;\n    if (!chatId) {\n        console.log(\"No chatId provided for updating pond connected users\");\n        return;\n    }\n    console.log('updatePondConnectedUsers called with data:', data);\n    let context = chatId.replace(\"pond/\", \"\");\n\n    // Select the user list for the specific pond\n    const userList = $(`.aim-user-list[data-context=\"${context}\"][data-type=\"pond\"] .aim-user-list-items`);\n\n    // console.log('found userList:', userList.length, 'for chatId:', chatId, userList);\n    if (!userList.length) {\n        console.log(`No .aim-user-list-items found for chatId: ${chatId}`);\n        return;\n    }\n\n    console.log(\"Updating pond connected users for chatId:\", chatId, data);\n\n    // Track existing users to identify disconnected ones\n    const existingUserIds = new Set();\n    userList.find(\".aim-user-item\").each((_, item) => {\n        let userId = $(item).data(\"username\");\n        if (userId) {\n            userId = userId.toString();\n            existingUserIds.add(userId);\n        } else {\n            // console.log(\"Found invalid .aim-user-item without data-username, removing:\", item);\n            $(item).remove(); // Remove empty/invalid items\n        }\n    });\n\n    // Update or add user items\n    (data.users || []).forEach((user) => {\n        let { userId, profilePicture } = user;\n        userId = userId ? userId.toString() : null;\n        if (!userId || typeof userId !== \"string\") {\n            console.log(\"Skipping invalid user with missing or non-string userId:\", user);\n            return; // Skip invalid users\n        }\n\n        // Remark: we could also populate the this.data.activeUsers\n        // Might be better to just allow user to click name and then open spellbook, less clutter in dropdown\n        /*\n        if (message.to && !this.data.activeUsers.includes(message.to)) {\n            this.data.activeUsers.push(message.to);\n            this.bp.emit('buddy::activeUserAdded', message.to);\n        }\n        */\n\n        const userItem = $(`.aim-user-item[data-username=\"${userId}\"]`, userList);\n\n        if (userItem.length) {\n            // Update existing user only if data has changed\n            const $textElement = userItem.find(\".aim-user-item-text\");\n            if ($textElement.text() !== userId) {\n                // console.log(`Updating userId text for ${userId}`);\n                $textElement.text(userId);\n            }\n\n            const $profileContainer = userItem.find(\".aim-profile-picture\");\n            const $newProfileElement = createProfilePictureElement.call(this, userId, profilePicture, $profileContainer);\n            if ($newProfileElement) {\n                // console.log(`Updating profile picture for ${userId}`);\n                $profileContainer.empty().append($newProfileElement.html());\n            } else {\n                // console.log(`No profile picture update needed for ${userId}`);\n            }\n\n            existingUserIds.delete(userId); // Mark as processed\n        } else {\n            // Create new user item\n            // console.log(\"Adding user to aim-user-list-items:\", user);\n            const $userItem = $(\"<li>\", {\n                class: \"aim-user-item\",\n                \"data-username\": userId,\n            });\n            const $profilePicture = createProfilePictureElement.call(this, userId, profilePicture);\n            const $userText = $(\"<span>\", {\n                class: \"aim-user-item-text\",\n                text: userId,\n            });\n            //console.log('$profilePicture', $profilePicture.html())\n            //console.log('$userItem', $userItem.html())\n            $userItem.append($profilePicture, $userText);\n            userList.append($userItem);\n        }\n    });\n\n    // Remove disconnected users\n    // console.log('checking existingUserIds for removal:', existingUserIds);\n    existingUserIds.forEach((userId) => {\n        userId = userId.toString();\n        $(`.aim-user-item[data-username=\"${userId}\"]`, userList).remove();\n    });\n}\n\n// Creates a profile picture element for a user\n// Returns null if no update is needed for existing users\nfunction createProfilePictureElement(userId, profilePicture, $existingContainer = null) {\n    const $profilePicture = $(\"<div>\", { class: \"aim-profile-picture\" });\n\n    if (profilePicture) {\n        const $img = $(\"<img>\", {\n            class: \"aim-chat-message-profile-picture-img\",\n            src: profilePicture,\n            alt: `${userId}'s avatar`,\n        });\n        $img.attr('draggable', 'false');\n        $profilePicture.append($img);\n\n        // For existing users, check if update is needed\n        if ($existingContainer) {\n            const $currentImg = $existingContainer.find(\".aim-chat-message-profile-picture-img\");\n            if ($currentImg.length && $currentImg.attr(\"src\") === profilePicture) {\n                return null; // No update needed\n            }\n        }\n    } else {\n        const defaultAvatarSvg = this.defaultAvatarSvg(userId);\n        $profilePicture.html(defaultAvatarSvg);\n\n        // For existing users, check if SVG content is unchanged\n        if ($existingContainer) {\n            const currentHtml = $existingContainer.html().trim();\n            if (currentHtml === defaultAvatarSvg.trim()) {\n                return null; // No update needed\n            }\n        }\n    }\n\n    return $profilePicture;\n}\n\nexport default function openChatWindow(data) {\n    const { windowType, contextName, windowTitle } = determineWindowParameters(data);\n    if (!isValidContextName(contextName)) {\n        return;\n    }\n\n    // TODO: move these to prototype of buddylist...\n    if (!this.populateRoomList) {\n        this.populateRoomList = populateRoomList.bind(this);\n    }\n\n    if (!this.updatePondConnectedUsers) {\n        this.updatePondConnectedUsers = updatePondConnectedUsers.bind(this);\n    }\n\n    if (!this.forbiddenNotes) {\n        this.forbiddenNotes = forbiddenNotes;\n    }\n\n    if (!this.joinPond) {\n        this.joinPond = joinPond.bind(this);\n    }\n\n    const client = this.bp.apps.client;\n    const windowId = generateWindowId(windowType, contextName);\n    const existingWindow = this.bp.apps.ui.windowManager.getWindow(windowId);\n\n    if (existingWindow) {\n        handleExistingWindow(existingWindow, windowType, contextName, client, this);\n        return existingWindow;\n    }\n\n    return createNewChatWindow.call(this, {\n        windowType,\n        contextName,\n        windowTitle,\n        windowId,\n        client,\n        data,\n    });\n}\n\nfunction determineWindowParameters(data) {\n    let windowType = data.pondname ? \"pond\" : \"buddy\";\n    let contextName = data.pondname || data.name;\n    let windowTitle = windowType === \"pond\" ? \"Pond Chat\" : \"\";\n\n    if (data.context) {\n        contextName = data.context;\n    }\n\n    if (data.type) {\n        windowType = data.type;\n    }\n\n    contextName = contextName.toString();\n\n    return { windowType, contextName, windowTitle };\n}\n\nfunction isValidContextName(contextName) {\n    const pondName = contextName.replace(\"pond/\", \"\");\n    if (forbiddenNotes.containsBadWord(pondName)) {\n        console.error(\"Forbidden context name:\", contextName);\n        alert(\"Pond name not allowed, please choose a different name.\");\n        return false;\n    }\n    return true;\n}\n\nfunction generateWindowId(windowType, contextName) {\n    return windowType === \"pond\"\n        ? \"pond_message_main\"\n        : `buddy_message_-${contextName}`;\n}\n\nfunction handleExistingWindow(chatWindow, windowType, contextName, client, context) {\n    if (windowType === \"pond\") {\n        console.log(\"Opening pond window\", windowType, contextName);\n        // Use context.data.hotPonds if available, otherwise skip population\n        //const hotPonds = context.data.hotPonds || [];\n        //populateRoomList.call(context, hotPonds, chatWindow, contextName);\n        // Ensure the messages container exists and is subscribed\n        ensureMessagesContainer.call(context, contextName, chatWindow, client);\n        toggleMessagesContainer(contextName, chatWindow);\n    }\n    chatWindow.focus();\n}\n\nfunction createNewChatWindow({ windowType, contextName, windowTitle, windowId, client, data }) {\n    const windowConfig = buildWindowConfig.call(this, windowType, contextName, windowTitle, windowId, data);\n    const chatWindow = this.bp.apps.ui.windowManager.createWindow({\n        ...windowConfig,\n        onOpen: async (_window) => {\n            await initializeChatWindow.call(this, windowType, contextName, _window, client);\n        },\n        onClose: () => {\n            if (windowType === \"pond\") {\n                const roomList = $(\".aim-room-list-items\", chatWindow.content);\n                roomList.find(\".aim-room-item\").each((_, item) => {\n                    const context = $(item).data(\"context\");\n                    client.removeSubscription(\"pond\", context);\n                });\n                this.data.activePonds = [];\n                // might be better in joinPond() function\n\n            } else {\n                client.removeSubscription(windowType, contextName);\n            }\n        },\n    });\n\n    if (windowType === \"pond\") {\n        setupCloseButtonHandler.call(this, chatWindow, client);\n        $(\".no-open-ponds\", chatWindow.content).hide();\n        $('.aim-message-controls', chatWindow.content).flexShow();\n\n    }\n\n    chatWindow.loggedIn = true;\n    return chatWindow;\n}\n\nfunction buildWindowConfig(windowType, contextName, windowTitle, windowId, data) {\n    const isBuddy = windowType === \"buddy\";\n    let iconImagePath = isBuddy ? \"\" : \"desktop/assets/images/icons/icon_pond_64.png\";\n\n    if (isBuddy && this.bp.apps.buddylist.data.profileState?.buddylist?.[contextName]?.profile_picture) {\n        iconImagePath = this.bp.apps.buddylist.data.profileState.buddylist[contextName].profile_picture;\n    }\n\n    return {\n        app: \"buddylist\",\n        id: windowId,\n        title: isBuddy ? contextName : windowTitle,\n        icon: iconImagePath,\n        type: windowType,\n        context: contextName,\n        parent: this.bp.apps.ui.parent,\n        className: \"chatWindow\",\n        x: data.x || 50,\n        y: 40,\n        width: isBuddy ? 600 : 1000,\n        height: isBuddy ? 500 : 600,\n    };\n}\n\nasync function initializeChatWindow(windowType, contextName, chatWindow, client) {\n    setupChatWindow.call(this, windowType, contextName, chatWindow);\n    client.addSubscription(windowType, contextName);\n\n    if (windowType === \"buddy\") {\n        // remove the .aim-chat-area margin-top ( its the close button for tabbed ponds )\n        $(\".aim-chat-area\", chatWindow.content).css(\"margin-top\", \"0\");\n        // the top to 10\n        $(\".aim-chat-area\", chatWindow.content).css(\"top\", \"10px\");\n        clearBuddyNewMessages.call(this, contextName);\n    }\n\n    if (windowType === \"pond\") {\n        // Populate room list with hot ponds if available\n        // const hotPonds = this.data.hotPonds || [];\n        let hotPonds = this.bp.apps?.pond?.data?.hotPonds || [];\n        populateRoomList.call(this, hotPonds, chatWindow, contextName);\n        // send getConnectedUsers message to the pond\n        toggleMessagesContainer(contextName, chatWindow);\n    }\n\n    await renderMessages.call(this, contextName, chatWindow);\n    focusInputField(chatWindow);\n}\n\nfunction clearBuddyNewMessages(contextName) {\n    if (\n        this.data.profileState?.buddylist?.[contextName]?.newMessages\n    ) {\n        this.data.profileState.buddylist[contextName].newMessages = false;\n        this.client.receivedInstantMessage(contextName, (err, re) => {\n            // console.log(\"receivedInstantMessage\", err, re);\n        });\n    }\n}\n\nasync function renderMessages(contextName, chatWindow) {\n    this.data.processedMessages[contextName] = this.data.processedMessages[contextName] || [];\n    const messagesToRender = [...this.data.processedMessages[contextName]];\n    this.data.processedMessages[contextName] = [];\n\n    for (const message of messagesToRender) {\n        try {\n            await this.renderChatMessage(message, chatWindow, true);\n        } catch (err) {\n            console.error(\"Error rendering message\", message, err, chatWindow);\n        }\n    }\n}\n\nfunction focusInputField(chatWindow) {\n    function attemptFocus() {\n        const aimInput = $(\".aim-input\", chatWindow.content);\n        if (aimInput.length === 0) {\n            setTimeout(attemptFocus, 100);\n            return;\n        }\n        aimInput.focus();\n    }\n    attemptFocus();\n}\n\n\nfunction ensureMessagesContainer(contextName, chatWindow, client) {\n    const chatArea = $(\".aim-chat-area\", chatWindow.content);\n    const userListArea = $(\".aim-user-list-area\", chatWindow.content);\n    if (!chatArea.length || !userListArea.length) {\n        console.log(\"Missing chatArea or userListArea for context:\", contextName);\n        return;\n    }\n\n    // Normalize context for user list (e.g., \"pond/general\" -> \"general\")\n    const userListContext = contextName.replace(\"pond/\", \"\");\n\n    // Create message container if missing\n    let existingContainer = $(`.aim-messages-container[data-context=\"${contextName}\"]`, chatArea);\n    if (!existingContainer.length) {\n        console.log(\"Creating new messages container for context:\", contextName);\n        const newContainer = document.createElement(\"div\");\n        newContainer.className = \"aim-messages-container\";\n        newContainer.setAttribute(\"data-context\", contextName);\n        newContainer.setAttribute(\"data-type\", \"pond\");\n        newContainer.style.display = \"none\";\n        newContainer.innerHTML = `\n            <div class=\"aim-messages-header\">\n                <h2 class=\"aim-chat-title\"><span class=\"aim-chat-username\">#${userListContext}</span></h2>\n                <button class=\"aim-close-chat-btn\">Close</button>\n            </div>\n            <div class=\"aim-no-messages\">\n                Your conversation has just started. You can send a message using the form below.\n            </div>\n            <div class=\"aim-messages\"></div>\n        `;\n        chatArea.append(newContainer);\n\n        client.addSubscription(\"pond\", contextName);\n        this.data.activePonds = this.data.activePonds || [];\n        if (!this.data.activePonds.includes(contextName)) {\n            this.data.activePonds.push(contextName);\n        }\n        $(\".no-open-ponds\", chatWindow.content).hide();\n        $(\".aim-message-controls\", chatWindow.content).flexShow();\n    }\n\n    // Create user list if missing\n    let existingUserList = $(`.aim-user-list[data-context=\"${userListContext}\"][data-type=\"pond\"]`, userListArea);\n    if (!existingUserList.length) {\n        console.log(\"Creating new user list for context:\", userListContext);\n        const newUserList = document.createElement(\"div\");\n        newUserList.className = \"aim-user-list\";\n        newUserList.setAttribute(\"data-context\", userListContext);\n        newUserList.setAttribute(\"data-type\", \"pond\");\n        newUserList.style.display = \"none\";\n        newUserList.innerHTML = `\n            <div class=\"aim-user-list-header\">\n                <h3>Buddies</h3>\n            </div>\n            <ul class=\"aim-user-list-items\"></ul>\n        `;\n        userListArea.append(newUserList);\n    }\n}\n\nfunction toggleMessagesContainer(contextName, chatWindow) {\n    const chatArea = $(\".aim-chat-area\", chatWindow.content);\n    const userListArea = $(\".aim-user-list-area\", chatWindow.content);\n    if (!chatArea.length || !userListArea.length) {\n        console.log(\"Missing chatArea or userListArea for context:\", contextName);\n        return;\n    }\n\n    // Hide all message containers and user lists\n    $(\".aim-messages-container\", chatArea).hide();\n    $(\".aim-user-list\", userListArea).hide();\n\n    // Normalize context for user list (e.g., \"pond/general\" -> \"general\")\n    const userListContext = contextName.replace(\"pond/\", \"\");\n\n    chatWindow.currentActiveContext = userListContext;\n\n    // Select target elements\n    const targetContainer = $(`.aim-messages-container[data-context=\"${contextName}\"][data-type=\"pond\"]`, chatArea);\n    const targetUserList = $(`.aim-user-list[data-context=\"${userListContext}\"][data-type=\"pond\"]`, userListArea);\n\n    if (!targetContainer.length) {\n        console.log(\"Creating messages container for context:\", contextName);\n        ensureMessagesContainer.call(this, contextName, chatWindow, this.bp.apps.client);\n        // Re-select after creation\n        targetContainer = $(`.aim-messages-container[data-context=\"${contextName}\"][data-type=\"pond\"]`, chatArea);\n    }\n\n    // Show target elements\n    if (targetContainer.length) {\n        // console.log(\"Showing messages container for context:\", contextName);\n        targetContainer.show();\n    }\n    if (targetUserList.length) {\n        // console.log(\"Showing user list for context:\", userListContext);\n        targetUserList.show();\n    }\n\n    // Fallback: Show first available context if target is missing\n    if (!targetContainer.length || !targetUserList.length) {\n        const availableContainers = $(\".aim-messages-container\", chatArea);\n        if (availableContainers.length > 0) {\n            const firstContext = availableContainers.first().data(\"context\");\n            const firstUserListContext = firstContext.replace(\"pond/\", \"\");\n            // console.log(\"Falling back to first context:\", firstContext);\n\n            $(`.aim-messages-container[data-context=\"${firstContext}\"]`, chatArea).show();\n            $(`.aim-user-list[data-context=\"${firstUserListContext}\"][data-type=\"pond\"]`, userListArea).show();\n\n            $(\".aim-room-item\", chatWindow.content).removeClass(\"aim-room-active\");\n            $(`.aim-room-item[data-context=\"${firstContext}\"]`, chatWindow.content).addClass(\"aim-room-active\");\n            $(\".message_form .aim-to\", chatWindow.content).val(firstContext);\n        } else {\n            console.log(\"No available message containers or user lists\");\n        }\n    }\n\n    // find the current .button-bar\n    let buttonBar = $(\".button-bar\", chatWindow.content);\n    // we need to iterate through all the first level children of the buttonBar\n    // and update the data-context attribute to match the current contextName\n    if (buttonBar.length) {\n        buttonBar.children().each((_, child) => {\n            // console.log(`Updating button bar child context for:`, child, contextName);\n            $(child).attr(\"data-context\", contextName);\n        });\n    }\n\n    scrollToBottom(chatWindow.content);\n}\n\nfunction setupChatWindow(windowType, contextName, chatWindow) {\n    const chatWindowTemplate = this.messageTemplateString;\n    const cloned = document.createElement(\"div\");\n    cloned.innerHTML = chatWindowTemplate;\n\n    const aimMessagesContainer = $(\".aim-messages-container\", cloned)[0];\n    aimMessagesContainer.setAttribute(\"data-context\", contextName);\n    aimMessagesContainer.setAttribute(\"data-type\", windowType);\n\n\n    if (windowType === \"buddy\") {\n        $(\".aim-user-list-area\", cloned).remove();\n        $(\".aim-room-list\", cloned).remove();\n        $('.aim-messages-header', cloned).remove();\n    } else {\n\n\n        const aimUserListContainer = $(\".aim-user-list\", cloned)[0];\n        aimUserListContainer.setAttribute(\"data-context\", contextName);\n        aimUserListContainer.setAttribute(\"data-type\", windowType);\n\n        $('.aim-chat-title', cloned).text(`#${contextName.replace(\"pond/\", \"\")}`);\n\n        $('.joinPondForm', cloned).on('submit', (e) => {\n            e.preventDefault();\n            // get value from #customPondName\n            try {\n                let pondName = $('.customPondName').val();\n                joinPond.call(this, pondName);\n\n            } catch (err) {\n                console.error(\"Error joining pond:\", err);\n            }\n            return false;\n        });\n\n\n    }\n\n    chatWindow.container.classList.add(\"has-droparea\");\n    chatWindow.content.appendChild($(\".aim-window\", cloned)[0]);\n\n    setupAutocomplete.call(this, chatWindow);\n    setupChatWindowButtons.call(this, windowType, contextName, chatWindow);\n    setupMessageForm.call(this, windowType, contextName, chatWindow);\n    setupInputEvents.call(this, windowType, contextName, chatWindow);\n\n    if (windowType === \"pond\") {\n        $(\".aim-user-list-items\").on(\"click\", (e) => {\n            const username = $(e.target).closest('.aim-user-item').data(\"username\");\n\n            if (!username) {\n                console.error(\"No username found in clicked element\");\n                return;\n            }\n\n            this.openChatWindow({ name: username });\n\n\n        });\n\n        setupRoomListClickHandler.call(this, chatWindow);\n\n    }\n}\n\nfunction setupMessageForm(windowType, contextName, chatWindow) {\n    $(\".message_form .aim-to\", chatWindow.content).val(contextName);\n\n    $(\".message_form\", chatWindow.content).submit(async (e) => {\n        e.preventDefault();\n        await this.sendMessageHandler(e, chatWindow, windowType, contextName);\n    });\n}\n\nfunction setupRoomListClickHandler(chatWindow) {\n    $(\".aim-room-list-items\", chatWindow.content).on(\"click\", \".aim-room-item\", (e) => {\n        let selectedContext = $(e.target).parent().data(\"context\");\n        if (!selectedContext) {\n            console.warn(\"No context found for clicked room item target\", e.target);\n            return;\n        }\n        selectedContext = selectedContext.replace(\"pond/\", \"\");\n        //console.log(\"Selected context:\", selectedContext);\n        $(\".aim-room-item\", chatWindow.content).removeClass(\"aim-room-active\");\n        $(e.target).addClass(\"aim-room-active\");\n        ensureMessagesContainer.call(this, selectedContext, chatWindow, this.bp.apps.client);\n        $(\".message_form .aim-to\", chatWindow.content).val(selectedContext);\n        toggleMessagesContainer(selectedContext, chatWindow);\n        // TODO: Implement logic to load messages for selectedContext\n    });\n}\n\nfunction setupCloseButtonHandler(chatWindow, client) {\n    // Handle both .aim-close-chat-btn (in .aim-messages-container) and .aim-room-close-btn (in room list)\n    $(\".aim-chat-area, .aim-room-list-items\", chatWindow.content).on(\"click\", \".aim-close-chat-btn, .aim-room-close-btn\", (ev) => {\n        ev.stopPropagation();\n        const parentElement = ev.target.closest(\".aim-messages-container, .aim-room-item\");\n        if (!parentElement) return;\n\n        const context = parentElement.getAttribute(\"data-context\");\n        console.log(\"Closing pond chat for context:\", context);\n\n        // Remove subscription and container\n        client.removeSubscription(\"pond\", context);\n        $(`.aim-messages-container[data-context=\"${context}\"]`, chatWindow.content).remove();\n        $(`.aim-room-item[data-context=\"${context}\"]`, chatWindow.content).remove();\n        // remove the associated .aim-user-list\n        $(`.aim-user-list[data-context=\"${context.replace(\"pond/\", \"\")}\"][data-type=\"pond\"]`, chatWindow.content).remove();\n        // Update active ponds\n        this.data.activePonds = this.data.activePonds.filter((pond) => pond !== context);\n\n        // clear out this.data.processedMessages[contextName] = [];\n        if (this.data.processedMessages[context]) {\n            this.data.processedMessages[context] = [];\n        }\n\n        // Switch to another pond or hide all containers\n        const remainingContainers = $(\".aim-messages-container\", chatWindow.content);\n        if (remainingContainers.length > 0) {\n            const nextContext = remainingContainers.first().data(\"context\");\n            toggleMessagesContainer(nextContext, chatWindow);\n            $(\".aim-room-item\", chatWindow.content).removeClass(\"aim-room-active\");\n            $(`.aim-room-item[data-context=\"${nextContext}\"]`, chatWindow.content).addClass(\"aim-room-active\");\n            $(\".message_form .aim-to\", chatWindow.content).val(nextContext);\n        } else {\n            $(\".aim-messages-container\", chatWindow.content).hide();\n            $(\".message_form .aim-to\", chatWindow.content).val(\"\");\n        }\n\n        // find the .aim-room-list-item with data-pond matching context\n        const roomItem = $(`.aim-room-item[data-context=\"pond/${context}\"]`, chatWindow.content);\n        // find the .aim-room-list-item and remove active class\n        $(\".aim-room-list-item-name\", roomItem).removeClass(\"aim-room-active\");\n\n        // get current count of .aim-chat-area, if 2 show .no-open-ponds\n        const chatAreas = $(\".aim-messages-container\", chatWindow.content);\n        console.log(\"Current chat areas count:\", chatAreas.length);\n        if (chatAreas.length === 0) {\n            $(\".no-open-ponds\", chatWindow.content).flexShow();\n            $('.aim-message-controls', chatWindow.content).hide();\n        }\n        else {\n            $(\".no-open-ponds\", chatWindow.content).hide();\n            $('.aim-message-controls', chatWindow.content).flexShow();\n        }\n\n    });\n}\n\n\nfunction joinPond(pondName) {\n\n    if (!pondName) {\n        console.error(\"Pond name is required to join a pond.\");\n        return;\n    }\n\n    let invalidName = forbiddenNotes.containsBadWord(pondName);\n    if (invalidName) {\n        alert('Invalid pond name. Please choose a different name.');\n        return;\n    }\n\n    // currently all ponds exists in the main \"server\" context, pond_messages_main\n    let chatWindow = this.bp.apps.ui.windowManager.getWindow('pond_message_main');\n\n    if (!chatWindow) {\n        // we may want to open  bp.open('buddylist', { context: pondName, type: 'pond' }); in this case\n        console.error(\"Pond message main window not found, cannot join pond.\");\n        // TODO: might be easier to just open the window here instread of parent API doing it\n        // see: apps/pond/pond.js for example\n        /*\n        const pondMainWindow = this.bp.apps.ui.windowManager.getWindow('pond_message_main');\n        if (pondMainWindow) {\n            this.bp.apps.buddylist.joinPond(pondName);\n            pondMainWindow.focus();\n        } else {\n            this.bp.apps.buddylist.openChatWindow({ pondname: pondName });\n        }\n        */\n        return;\n    }\n    // this.openChatWindow({ pondname: pondName });\n    let selectedContext = `${pondName}`;\n    ensureMessagesContainer.call(this, selectedContext, chatWindow, this.bp.apps.client);\n    $(\".message_form .aim-to\", chatWindow.content).val(selectedContext);\n    toggleMessagesContainer(selectedContext, chatWindow);\n\n}","const defaultProfileFiles = {\n    'index.html': `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>My BuddyPond Profile</title>\n    <link rel=\"stylesheet\" href=\"./style.css\">\n</head>\n<body>\n    <h1>My Profile</h1>\n    <div class=\"profile-section\">\n        <p>Welcome to my BuddyPond profile, hosted on the BuddyPond CDN!</p>\n        <p><strong>Customize Your Profile:</strong></p>\n        <ul>\n            <li>This default profile includes <code>index.html</code>, <code>style.css</code>, and <code>profile.js</code>.</li>\n            <li>You may use any files, the only requirement is <code>index.html</code> must be located in root.</li>\n            <li>Edit or upload files in the <strong>Buddy Files</strong> app (root directory).</li>\n            <li>Add any static files (HTML, CSS, JS, images) or projects (e.g., React, Vue).</li>\n            <li>Use relative paths (e.g., <code>./style.css</code>) to link files.</li>\n        </ul>\n        <p><strong>Example:</strong> Click to change text color.</p>\n        <button id=\"toggleButton\">Toggle Text Color</button>\n        <p class=\"color-text\">This text changes color!</p>\n    </div>\n    <script src=\"./profile.js\"></script>\n</body>\n</html>`,\n    'style.css': `\nbody {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    background-color: #f4f4f9;\n    color: #333;\n    margin: 0;\n    padding: 20px;\n    line-height: 1.5;\n}\nh1 {\n    color: #007bff;\n    text-align: center;\n}\n.profile-section {\n    max-width: 600px;\n    margin: 0 auto;\n}\nul {\n    padding-left: 20px;\n    font-size: 0.9em;\n}\ncode {\n    background: #f0f0f0;\n    padding: 2px 4px;\n    border-radius: 3px;\n}\nbutton {\n    background-color: #007bff;\n    color: white;\n    padding: 8px 16px;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n    display: block;\n    margin: 10px auto;\n}\nbutton:hover {\n    background-color: #0056b3;\n}\n.color-text {\n    font-size: 1.1em;\n    text-align: center;\n    transition: color 0.3s ease;\n}\n.color-text.toggled {\n    color: #dc3545;\n}`,\n    'profile.js': `\nconst text = document.querySelectorAll('.color-text');\nconst button = document.getElementById('toggleButton');\nbutton.addEventListener('click', () => {\n    text.forEach(item => item.classList.toggle('toggled'));\n});\n`\n};\n\nexport default defaultProfileFiles;","\n// the best way to determine if user has a profile seems to be to just\n// check the CDN for index.html, style.css, and profile.js files\n// if any of them 404, we will programmatically create them here\n// generateDefaultProfile() is called on auth::qtoken ( login success )\n// so on each logic we will check if the profile exists\n// if we didn't do this, we'd have to check profile on File Explorer open or Profile open or Pad open,\n// which would result in a fragmented code and a delay in UI while we check for profile existence\n\nimport defaultProfileFiles from './defaultProfileFiles.js';\n\nexport default async function generateDefaultProfile(qtoken) {\n    const basePath = \"https://files.buddypond.com/\" + qtoken.me;\n\n    // TODO: move to portfolio / faucet\n    // await requestDefaultCoinAllocations.call(this, qtoken);\n\n\n    for (const [fileName, fileContent] of Object.entries(defaultProfileFiles)) {\n        try {\n            const response = await fetch(`${basePath}/${fileName}`);\n            if (!response.ok) throw new Error('File not found, needs creation');\n\n            // check if not 200 response\n            // if not, throw error\n            if (response.status !== 200) throw new Error('File not found, needs creation');\n\n            // check if new location is four-ohh-four, if so, throw error\n            if (response.url === 'https://buddypond.com/four-ohh-four') {\n                throw new Error('File not found, needs creation');\n            }\n\n        } catch (error) {\n            console.log(`Creating ${fileName}: ${error.message}`);\n            const blob = new Blob([fileContent], { type: getFileType(fileName) });\n            const file = new File([blob], fileName, {\n                type: blob.type,\n                lastModified: new Date()\n            });\n            file.filePath = `${fileName}`; // maybe\n\n            try {\n                await this.bp.apps.client.api.uploadFile(file);\n                console.log(`${fileName} uploaded successfully.`);\n            } catch (uploadError) {\n                console.error(`Error uploading ${fileName}: ${uploadError.message}`);\n            }\n        }\n    }\n}\n\nfunction getFileType(fileName) {\n    if (fileName.endsWith('.html')) return 'text/html';\n    if (fileName.endsWith('.css')) return 'text/css';\n    if (fileName.endsWith('.js')) return 'application/javascript';\n    return 'text/plain';\n}\n\n\nasync function requestDefaultCoinAllocations(qtoken) {\n    // before generating the default profile files ( for home page)\n    // we need to establish the users initial MEGA ( Megabytes ) asset allocation in their portfolio\n    // since the user's initial state will have no record, we can simply attempt to add\n    // backend will allow initial allocation of 10 MEGA to all users\n\n    //\n    // Request default MEGA allocation\n    //\n    try {\n        await this.bp.load('portfolio');\n\n\n        await this.bp.apps.portfolio.resource.apiRequest('POST', 'portfolio/' + qtoken.me + '/MEGA', {\n            symbol: 'MEGA',\n            owner: qtoken.me,\n            amount: 10,\n            available: 10,\n            price: 0.1,\n            cost: 0\n        });\n\n    } catch (error) {\n        console.log('Error creating MEGA asset for user', error);\n    }\n\n    //\n    // Request default GBP allocation\n    //\n    try {\n        await this.bp.load('portfolio'); // should be cached at this stage\n        await this.bp.apps.portfolio.resource.apiRequest('POST',  'portfolio/' + qtoken.me + '/GBP', {\n            symbol: 'GBP',\n            owner: qtoken.me,\n            amount: 10000,\n            available: 10000,\n            price: 0.001,\n            cost: 0\n        });\n    } catch (error) {\n        console.log('Error creating GBP asset for user', error);\n    }\n}","import scrollToBottom from \"./scrollToBottom.js\";\n\n// TODO: add logic for \"reply-message\" action\n//       reply-message action should open a small \"replying to\" box above the closest .aim-message-sender element\n//       The \"Replying to {BuddyName}\" box should contain the message text and a small \"cancel\" button at the right / end of the box\n//       We can assume that data-from will be the same as the sender of the message we are replying to\n\nexport default function bindMessageContextMenu() {\n\n\n\n  bindProfilePictureClick.call(this);\n\n  // Single event delegation for context menu, hover menu, and edit hint actions\n  document.addEventListener('click', (event) => {\n    const target = event.target;\n    let action = target.getAttribute('data-action');\n\n    // Handle context menu item click\n    if (target.classList.contains('aim-context-menu-item') && action) {\n      handleContextMenuItemClick.call(this, action, target);\n      return;\n    }\n\n    // Handle hover menu item click\n\n    // TODO: there must be a better way to do this\n    // Remark: The issue is that we wish to cover the click action for the parent item and all its potential children\n    let isHoverMenuAction = $(target).hasClass('aim-hover-menu-item') || $(target).parents().hasClass('aim-hover-menu-item');\n    action = target.getAttribute('data-action') || target.parentNode.getAttribute('data-action');\n\n    if (isHoverMenuAction && action) {\n      handleContextMenuItemClick.call(this, action, target);\n      return;\n    }\n\n    // Handle edit hint action click (escape/enter)\n    if (target.classList.contains('aim-edit-hint-action') && action) {\n      handleEditHintAction.call(this, action, target);\n      return;\n    }\n\n    // Handle reply cancel button click\n    if (target.classList.contains('aim-reply-cancel') && action === 'cancel-reply') {\n      // get the closest reply box\n      const replyBox = target.closest('.aim-reply-box');\n      cancelReply.call(this, replyBox);\n      return;\n    }\n\n    // Close existing context menu and reset hover menu\n    closeMenus.call(this);\n  });\n}\n\n// Handle context menu or hover menu item click\nfunction handleContextMenuItemClick(action, target) {\n  performAction.call(this, action, target);\n  if (action !== 'more-options') {\n    closeMenus.call(this);\n  }\n}\n\n// Handle edit hint action (escape/enter)\nfunction handleEditHintAction(action, target) {\n  const messageContent = target.closest('.aim-editable-container')?.querySelector('.aim-message-content');\n  if (!messageContent) {\n    console.error('No message content found for edit hint action');\n    return;\n  }\n\n  const messageUUID = messageContent.closest('.aim-chat-message')?.getAttribute('data-uuid');\n  const originalMessage = document.querySelector(`.aim-chat-message[data-uuid=\"${messageUUID}\"]`);\n  if (!originalMessage) {\n    console.error('No original message found');\n    return;\n  }\n\n  const messageData = {\n    uuid: messageUUID,\n    chatId: originalMessage.getAttribute('data-chat-id'),\n    text: originalMessage.getAttribute('data-original-text') || messageContent.innerText\n  };\n\n  if (action === 'cancel-edit') {\n    cancelEdit.call(this, messageContent, messageData.text);\n  } else if (action === 'save-edit') {\n    saveEdit.call(this, messageContent, messageData);\n  }\n\n}\n\n// Close active context and hover menus\nfunction closeMenus() {\n  if (this.activeMessageContextMenu) {\n    this.activeMessageContextMenu.remove();\n    this.activeMessageContextMenu = null;\n  }\n  if (this.activeMessageHoverMenu) {\n    this.activeMessageHoverMenu = null; // Rely on CSS for hiding hover menu\n  }\n  if (this.activeReplyBox) {\n    return;\n    this.activeReplyBox.remove();\n    this.activeReplyBox = null;\n    this.bp.replyMode = false;\n  }\n}\n\n// Perform the specified action\nfunction performAction(action, target) {\n  const closestTarget = target.closest('.aim-context-menu') || target.closest('.aim-chat-message');\n  if (!closestTarget) {\n    console.error('No closest target found');\n    return;\n  }\n  // console.log('closestTarget', closestTarget);\n  const messageUUID = closestTarget.getAttribute('data-uuid');\n  const messageChatId = closestTarget.getAttribute('data-chat-id');\n  const messageFrom = closestTarget.getAttribute('data-from');\n  const messageData = {\n    uuid: messageUUID,\n    chatId: messageChatId,\n    from: messageFrom,\n  };\n\n  const originalMessage = document.querySelector(`.aim-chat-message[data-uuid=\"${messageUUID}\"]`);\n  if (!originalMessage) {\n    console.error('No original message found');\n    return;\n  }\n\n  messageData.text = originalMessage.querySelector('.aim-message-content').innerText;\n\n  if (!messageData.uuid || !messageData.chatId) {\n    console.error('No message data found');\n    return;\n  }\n\n  switch (action) {\n    case 'add-reaction':\n      console.log('Add reaction clicked');\n      break;\n    case 'edit-message':\n      editMessage.call(this, messageData);\n      break;\n    case 'reply-message':\n      replyMessage.call(this, messageData, originalMessage);\n      break;\n    case 'more-options':\n      event.preventDefault();\n      const closestMessage = target.closest('.aim-chat-message');\n      console.log('closestMessage', closestMessage);\n      if (closestMessage) {\n        this.createMessageContextMenu(target, closestMessage);\n      }\n\n      break;\n    case 'quote-message':\n      console.log('Quote message clicked');\n      break;\n    case 'say-message':\n      console.log('Say message clicked');\n      console.log('sayMessage', messageData);\n      this.bp.emit('say::message', messageData);\n      break;\n    case 'report-message':\n      console.log('Report message clicked');\n      break;\n    case 'copy-message':\n      console.log('Copy message clicked');\n      break;\n    case 'delete-message':\n      deleteMessage.call(this, messageData);\n      break;\n    case 'cast-spell':\n      this.bp.open('spellbook', { context: messageData.from, output: 'buddy'});\n      break;\n    default:\n      console.error(`Unknown action: ${action}`);\n  }\n}\n\n// Delete a message\nfunction deleteMessage(messageData) {\n  console.log('Deleting message', messageData);\n  buddypond.removeInstantMessage(messageData);\n}\n\n// Edit a message\nfunction editMessage(messageData) {\n  const messageContent = document.querySelector(\n    `.aim-chat-message[data-uuid=\"${messageData.uuid}\"] .aim-message-content`\n  );\n  if (!messageContent) {\n    console.error('No message content found');\n    return;\n  }\n\n  this.bp.ignoreUIControlKeys = true;\n  const originalText = messageData.text;\n\n  // Wrap message content in an editable container\n  const editableContainer = document.createElement('div');\n  editableContainer.className = 'aim-editable-container';\n  messageContent.parentNode.insertBefore(editableContainer, messageContent);\n  editableContainer.appendChild(messageContent);\n\n  // Store original text for restoration\n  messageContent.closest('.aim-chat-message').setAttribute('data-original-text', originalText);\n\n  // Make content editable\n  messageContent.setAttribute('contenteditable', 'true');\n  messageContent.setAttribute('data-editing', 'true');\n  messageContent.focus();\n\n  // Add UX hint message\n  const editHint = document.createElement('div');\n  editHint.className = 'aim-edit-hint';\n  editHint.innerHTML = `\n    <span class=\"aim-edit-hint-action\" data-action=\"cancel-edit\">escape</span> to cancel • \n    <span class=\"aim-edit-hint-action\" data-action=\"save-edit\">enter</span> to save\n  `;\n  editableContainer.appendChild(editHint);\n\n  // find the closest chatWindow\n  const chatWindow = messageContent.closest('.chatWindow');\n\n  scrollToBottom(chatWindow);\n\n  // Named event handler for keydown\n  const handleKeydown = (event) => {\n    if (event.key === 'Escape') {\n      cancelEdit.call(this, messageContent, originalText);\n      cleanupListeners();\n      event.preventDefault();\n      event.stopPropagation();\n    } else if (event.key === 'Enter') {\n      saveEdit.call(this, messageContent, messageData);\n      cleanupListeners();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  };\n\n  // Named event handler for blur\n  const handleBlur = (ev) => {\n    // ensure the target was not \".aim-edit-hint-action\"\n    console.log('handleBlur', ev.relatedTarget, ev.target.classList);\n    if (ev.relatedTarget && !ev.relatedTarget.classList.contains('aim-edit-hint-action')) {\n      cancelEdit.call(this, messageContent, originalText);\n      cleanupListeners();\n    }\n  };\n\n  // Cleanup function for event listeners\n  const cleanupListeners = () => {\n    messageContent.removeEventListener('keydown', handleKeydown);\n    messageContent.removeEventListener('blur', handleBlur);\n    this.bp.ignoreUIControlKeys = false;\n  };\n\n  // Attach event listeners\n  messageContent.addEventListener('keydown', handleKeydown);\n  messageContent.addEventListener('blur', handleBlur);\n\n  console.log('Editing message', messageData);\n}\n\n// Cancel editing and restore original text\nfunction cancelEdit(messageContent, originalText, restoreText = true) {\n  const editableContainer = messageContent.closest('.aim-editable-container');\n  if (editableContainer) {\n    // Move messageContent back to its original parent\n    editableContainer.parentNode.insertBefore(messageContent, editableContainer);\n    editableContainer.remove();\n  }\n\n  messageContent.setAttribute('contenteditable', 'false');\n  messageContent.removeAttribute('data-editing');\n  if (restoreText) {\n    messageContent.innerText = originalText;\n  }\n  messageContent.blur();\n\n  const messageElement = messageContent.closest('.aim-chat-message');\n  if (messageElement) {\n    messageElement.removeAttribute('data-original-text');\n  }\n\n  console.log('Edit cancelled');\n  this.bp.ignoreUIControlKeys = false;\n}\n\n// Save edited message\nasync function saveEdit(messageContent, messageData) {\n  const editableContainer = messageContent.closest('.aim-editable-container');\n  if (editableContainer) {\n    console.log('Editable container found', editableContainer);\n    // Move messageContent back to its original parent\n    // throws error:  Failed to execute 'insertBefore' on 'Node': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?\n    // is the blur event already removing this?\n    //editableContainer.parentNode.insertBefore(messageContent, editableContainer);\n    //editableContainer.remove();\n  }\n\n  const newMessageText = messageContent.innerText;\n  messageContent.setAttribute('contenteditable', 'false');\n  messageContent.removeAttribute('data-editing');\n  messageContent.blur();\n\n  const messageElement = messageContent.closest('.aim-chat-message');\n  if (messageElement) {\n    messageElement.removeAttribute('data-original-text');\n  }\n\n  console.log('Edit saved', newMessageText);\n\n  await buddypond.editInstantMessage({\n    from: messageData.from,\n    chatId: messageData.chatId,\n    uuid: messageData.uuid,\n    text: newMessageText,\n  });\n\n  // close the edit hint\n  cancelEdit.call(this, messageContent, null, false);\n}\n\n// Reply to a message\nfunction replyMessage(messageData, originalMessage) {\n  // Close any existing reply box\n  if (this.activeReplyBox) {\n    this.activeReplyBox.remove();\n    this.activeReplyBox = null;\n  }\n\n\n  this.bp.ignoreUIControlKeys = true;\n  this.bp.replyData = messageData; // Store reply data for message submission\n\n  // Create reply box\n  const replyBox = document.createElement('div');\n  replyBox.className = 'aim-reply-box';\n  replyBox.innerHTML = `\n    <span class=\"aim-reply-header\">Replying to ${messageData.from}</span>\n    <button class=\"aim-reply-cancel\" data-action=\"cancel-reply\">Cancel</button>\n  `;\n  //   <span class=\"aim-reply-text\">${messageData.text}</span>\n\n\n  // Insert reply box above .aim-message-sender\n  console.log(\"originalMessage\", originalMessage)\n  const messageSender = $(originalMessage).parent().parent().parent().parent().find('.aim-message-sender')[0];\n  console.log('REEE messageSender', messageSender);\n  if (!messageSender) {\n    console.error('No message sender found');\n    return;\n  }\n  messageSender.parentNode.insertBefore(replyBox, messageSender);\n\n  // Store active reply box\n  this.activeReplyBox = replyBox;\n  // this.activeReplyUUID = messageData.uuid;\n  // find the closet input named \"message_replyto\"\n  const replyInput = replyBox.closest('.chatWindow').querySelector('input[name=\"message_replyto\"]');\n  const messageTextInput = replyBox.closest('.chatWindow').querySelector('textarea[name=\"message_text\"]');\n  // set the value of the input to the messageData.uuid\n  // set the focus to the replyInput\n  if (replyInput) {\n    replyInput.value = messageData.uuid;\n  } else {\n    console.error('No reply input found');\n  }\n  if (messageTextInput) {\n    messageTextInput.focus();\n  } else {\n    console.error('No message text input found');\n  }\n\n  // Find the closest chatWindow and scroll to bottom\n  const chatWindow = originalMessage.closest('.chatWindow');\n  if (chatWindow) {\n    scrollToBottom(chatWindow);\n  }\n\n  const handleKeydown = (event) => {\n    if (event.key === 'Escape') {\n      //cancelEdit(messageContent, originalText);\n      cancelReply.call(this, replyBox);\n      cleanupListeners();\n      event.preventDefault();\n      event.stopPropagation();\n    } else if (event.key === 'Enter') {\n      // saveEdit.call(this, messageContent, messageData);\n      cleanupListeners();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  };\n\n  // Cleanup function for event listeners\n  const cleanupListeners = () => {\n    messageTextInput.removeEventListener('keydown', handleKeydown);\n    // messageTextInput.removeEventListener('blur', handleBlur);\n    this.bp.ignoreUIControlKeys = false;\n  };\n\n  messageTextInput.addEventListener('keydown', handleKeydown);\n\n  console.log('Reply mode activated', messageData);\n\n}\n\n// Cancel reply mode\nfunction cancelReply(replyBox) {\n  console.log('Cancel reply', replyBox);\n  console.log('aimReplyBox', replyBox);\n  if (replyBox) {\n\n    // clear out the .aim-replyto input value\n    const replyInput = replyBox.closest('.chatWindow').querySelector('input[name=\"message_replyto\"]');\n    if (replyInput) {\n      replyInput.value = '';\n    } else {\n      console.error('No reply input found');\n    }\n\n    replyBox.remove();\n    this.activeReplyBox = null;\n    this.bp.ignoreUIControlKeys = false;\n    this.bp.replyData = null;\n  }\n\n  console.log('Reply cancelled');\n}\n\nfunction bindProfilePictureClick() {\n\n  document.addEventListener('click', (event) => {\n    let target = event.target;\n    // if target is svg and parent has class aim-profile-picture\n    // console.log(' bindProfilePictureClick target', target, target.tagName);\n    if ($(target).parents().hasClass('aim-profile-picture')) {\n      //if (target.classList.contains('.aim-avatar')) {\n      const chatMessageElement = target.closest('.aim-chat-message')\n      if (!chatMessageElement) {\n        // console.error('No chat message element found');\n        return;\n      }\n      let buddyname = chatMessageElement.getAttribute('data-from');\n      console.log('Profile picture clicked', buddyname);\n\n      if (buddyname === this.bp.me) {\n        // opens profile edit page\n        this.bp.open('profile', { context: 'edit' });\n      } else {\n        // opens profile page\n        // this.bp.emit('profile::view', buddyname);\n        this.bp.open('user-profile', { context: buddyname });\n\n      }\n\n    }\n  });\n\n}","import createWebSocketClient from './createWebSocketClient.js';\n\nexport default class Client {\n  constructor(bp, options = {}) {\n    this.bp = bp;\n    this.config = {\n      host: \"\",\n      api: \"\",\n    };\n\n    this.api = buddypond;\n\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 999999; // Set to a high number for unlimited attempts\n    this.maxBackoffDelay = 10000; // 10 seconds\n    this.isIntentionallyClosed = false; // Flag to track intentional closure\n\n    return this;\n  }\n}\n\nClient.prototype.connect = async function connectBuddyListWs() {\n  console.log(\"Connecting to BuddyList WebSocket...\");\n  this.wsClient = await this.createWebSocketClient();\n  console.log(\"Connected to BuddyList WebSocket!\");\n  // TODO: needs to return / await the connection event\n  // TODO: should emit buddylist::connected event ( not auth::qtokenid event )\n  this.bp.emit('buddylist::connected', this.wsClient);\n}\n\nClient.prototype.disconnect = async function disconnectBuddyListWs() {\n  console.log(\"Attempting disconnecting from BuddyList WebSocket...\");\n  if (this.wsClient) {\n    this.wsClient.closeConnection();\n    this.wsClient = null;\n    console.log(\"Disconnected from BuddyList WebSocket\");\n  } else {\n    console.log(\"No active WebSocket connection to disconnect\");\n  }\n}\n\nClient.prototype.addBuddy = async function addBuddy(buddyname, cb) {\n  console.log(\"NEW Calling addBuddy\", this, buddyname);\n\n  apiRequest('/buddylist/' + this.bp.me + '/add-buddy', 'POST', {\n    buddyname: buddyname\n  }, function (err, data) {\n    cb(err, data);\n  })\n}\n\nClient.prototype.receivedInstantMessage = async function receivedInstantMessage(buddyName, cb) {\n  this.wsClient.send(JSON.stringify({\n    action: \"receivedInstantMessage\",\n    buddyname: buddyName,\n  }));\n  cb(null);\n}\n\nClient.prototype.setStatus = async function setStatus(buddyName, update, cb = function noop () {}) {\n  // use wsClient to send the status update\n  // console.log('calling setStatus', buddyName, update);\n  this.wsClient.send(JSON.stringify({\n    action: \"setStatus\",\n    buddyname: buddyName,\n    status: update.status,\n    profilePicture: update.profilePicture\n  }));\n  cb(null);\n};\n\nClient.prototype.createWebSocketClient = createWebSocketClient;\n\nfunction apiRequest(uri, method, data, cb) {\n  let url;\n\n  url = buddypond.endpoint + uri;\n\n  // console.log(\"making apiRequest\", url, method, data);\n\n  let headers = {\n    \"Accept\": \"application/json\",\n    \"Content-Type\": \"application/json; charset=utf-8\",\n    \"X-Me\": buddypond.me, // ✅ Include X-Me header for user identification\n  };\n\n  if (buddypond.qtokenid) {\n    headers[\"Authorization\"] = `Bearer ${buddypond.qtokenid}`; // ✅ Use Authorization header\n  }\n\n  let body = method === \"POST\" ? JSON.stringify(data) : undefined;\n\n  // Prepare fetch options\n  const options = {\n    method: method,\n    headers: headers,\n    body: body,\n    // credentials: \"include\",  // ✅ Allow CORS with cookies/auth headers\n  };\n\n  // Handling fetch timeout manually\n  const controller = new AbortController();\n  const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 sec timeout\n\n  buddypond.incrementPackets(\"packetsSent\");\n  let perf = { start: new Date() };\n  // console.log(\"apiRequest\", url, options);\n  fetch(url, { ...options, signal: controller.signal })\n    .then(response => {\n      clearTimeout(timeoutId);\n      if (!response.ok) {\n        // Parse JSON for non-2xx responses\n        return response.json().then(errorData => {\n          // Create a custom error with status and JSON data\n          const error = new Error(`HTTP ${response.status}: ${response.statusText}`);\n          error.status = response.status;\n          error.data = errorData; // Attach JSON payload\n          throw error;\n        });\n      }\n      return response.json();\n    })\n    .then(data => {\n      buddypond.incrementPackets(\"packetsReceived\");\n      perf.end = new Date();\n      buddypond.addPerfTime(perf);\n      cb(null, data);\n    })\n    .catch(error => {\n      let msg = \"Fetch connection error. Retrying shortly.\";\n      if (error.name === \"AbortError\") {\n        msg = \"Fetch request timeout\";\n      } else if (error.message.includes(\"Payload Too Large\")) {\n        msg = \"File upload was too large. Try a smaller file.\";\n      } else if (error.status === 400 && error.data) {\n        // Use the JSON payload from the 400 error\n        msg = error.data.error || error.data.message || \"Invalid input. Please try again.\";\n      } else {\n        msg = error.message;\n      }\n      console.error(\"❌ API Request Failed:\", error);\n      cb(new Error(msg), error.data || null);\n    });\n}","// TODO: decouple Buddylist class from Message Class\n// TODO: formalize Message class\n\nimport processBuddylist from \"./lib/processProfile.js\";\nimport renderOrUpdateBuddyInBuddyList from \"./lib/renderOrUpdateBuddyInBuddyList.js\";\nimport createChatMessageElement from \"./lib/message/createChatMessageElement.js\";\nimport renderChatMessage from \"./lib/message/renderChatMessage.js\";\nimport renderBuddyRequests from \"./lib/renderBuddyRequests.js\";\nimport buddylistUIEvents from \"./lib/buddylistUIEvents.js\";\nimport openChatWindow from \"./lib/openChatWindow.js\";\nimport generateDefaultProfile from \"./lib/generateDefaultProfile.js\";\nimport requestDefaultCoinAllocations from \"./lib/requestDefaultCoinAllocations.js\";\nimport defaultChatWindowButtons from \"./lib/defaultChatWindowButtons.js\";\nimport sortBuddyList from \"./lib/sortBuddyList.js\";\n// buddylist context menu\nimport showContextMenu from \"./lib/showContextMenu.js\";\n// chat message context menu\nimport bindMessageContextMenu from \"./lib/message/bindMessageContextMenu.js\";\nimport createMessageContextMenu from \"./lib/message/createMessageContextMenu.js\";\nimport loadUserApps from \"./lib/loadUserApps.js\";\n\nimport sendMessageHandler from \"./lib/message/sendMessageHandler.js\";\nimport showCard from \"./lib/message/showCard.js\";\nimport scrollToBottom from \"./lib/message/scrollToBottom.js\";\n\nimport defaultAvatarSvg from \"./lib/buddy/defaultAvatarSvg.js\";\n\n\n\n// new ws api\nimport Client from './lib/ws/Client.js';\n\n// TODO: why does client care about making UUID at all?\n// this is the responsibility of the server\n// TODO: remove uuid(), is most likely used for local render of message before server confirms ( which is removed atm )\nfunction uuid() {\n    return new Date().getTime();\n}\n\nexport default class BuddyList {\n    constructor(bp, options = {}) {\n        this.bp = bp;\n        this.data = {\n            processedMessages: {},\n            profileState: {\n                me: null,\n                status: null, // are these used?\n                profilePicture: null, // are these used?\n                updates: {}\n            },\n            avatarCache: new Map()\n        };\n\n        this.defaultPond = 'Buddy';\n        this.subscribedBuddies = [];\n        this.subscribedPonds = [];\n        this.options = options;\n        this.showedHelp = false;\n\n        // alias global logout to the buddylist logout\n        // buddylist logout will handle both buddylist and message logout\n        this.bp.logout = this.logout.bind(this);\n\n        // pull in the default button\n        this.options.chatWindowButtons = this.options.chatWindowButtons || defaultChatWindowButtons(this.bp);\n\n        // add any active buttons that have been added in this session\n        // add the this.bp.apps.desktop.enabledChatWindowButtons array to this.options.chatWindowButtons\n\n        let enabledChatWindowButtons = this.bp.apps.desktop.enabledChatWindowButtons;\n        // iterate through each button and fetch the appList data.chatButton data ( hydrate the button )\n        if (enabledChatWindowButtons && Array.isArray(enabledChatWindowButtons)) {\n            enabledChatWindowButtons.forEach(buttonMeta => {\n                let app = this.bp.apps.desktop.appList[buttonMeta.name];\n                if (app && app.chatButton) {\n                    this.options.chatWindowButtons.push(app.chatButton);\n                }\n            });\n        }\n\n        this.opened = false;\n        this.showingIsTyping = this.showingIsTyping || {};\n\n        this.activeMessageContextMenu = null;\n\n        this.faucetAttempts = 0;\n\n    }\n\n    async init() {\n        // Add event when user closes browser window or navigates away\n        window.addEventListener('beforeunload', (event) => {\n            // Show warning message\n            //event.preventDefault();\n            //event.returnValue = \"Are you sure you want to leave? Your status will be set to offline.\";\n            // Attempt to set status to offline (you may need a sync alternative)\n            // if page has quickly refreshed, client might be defined yet or connected\n            if (this.client) {\n                this.client.setStatus(this.bp.me, {\n                    status: 'offline'\n                }, function (err, re) {\n                    console.log('buddypond.setStatus', err, re);\n                });\n\n            }\n            //return event.returnValue;\n        });\n        // this.bp.load('ramblor');\n\n        await this.bp.appendScript('/v5/apps/based/buddylist/vendor/marked.min.js');\n\n        // TODO: we can load this lazier\n        this.bp.vendor.dicebear = await this.bp.importModule('/v5/apps/based/buddylist/vendor/dicebear.core.js', {}, false);\n        this.bp.vendor.dicebearAvatars = await this.bp.importModule('/v5/apps/based/buddylist/vendor/dicebear.identicon.js', {}, false);\n        //console.log('LOADED dicebear', this.dicebear);\n        //console.log('LOADED dicebearAvatars', this.dicebearAvatars);\n\n        this.bindMessageContextMenu();\n\n        // TODO: probably should remove this event and just use handleAuthSuccess handler?\n        /*\n        this.bp.on('auth::qtoken', 'connect-to-websocket-server', (qtoken) => {\n            //this.qtokenid = qtoken.qtokenid;\n            //this.api.qtokenid = this.qtokenid;\n            //this.api.me = qtoken.me;\n            //this.me = qtoken.me;\n            //this.bp.me = this.me;\n            //this.bp.qtokenid = this.qtokenid;\n            //this.client = new this.Client(bp);\n            //this.client.connect();\n        });\n        */\n\n    }\n\n    async open(config = { type: 'buddylist-profile' }) {\n        // buddylist supports (2) window types for bp.open('buddylist, { type: 'buddylist-profile' })\n        // 'buddylist-profile' - the default buddylist window\n        // 'buddylist-chat' - a chat window\n        // console.log('BuddyList open config', config)\n\n        if (typeof config.type !== 'string') {\n            config.type = 'buddylist-profile';\n        }\n\n        if (config.type === 'buddylist-profile') {\n\n            // TODO: have the ability to close and re-open the buddylist gracefully\n\n            if (this.opened) {\n                // console.log('BuddyList already opened, focusing existing window');\n                this.buddyListWindow.open();\n                this.bp.apps.ui.windowManager.focusWindow(this.buddyListWindow);\n                this.buddyListWindow.restore();\n                $('.loginForm input[name=\"username\"]').focus();\n                return 'buddylist already open';\n            }\n\n            this.opened = true;\n\n            const htmlStr = await this.bp.fetchHTMLFragment('/v5/apps/based/buddylist/buddylist.html');\n            this.messageTemplateString = await this.bp.fetchHTMLFragment('/v5/apps/based/buddylist/message.html');\n            this.bp.appendCSS('/v5/apps/based/buddylist/buddylist.css');\n            this.bp.appendCSS('/v5/apps/based/buddylist/messages.css');\n\n            // this.bp.apps.themes.applyTheme(this.bp.settings.active_theme);\n\n            // await this.bp.importModule('https://cdn.jsdelivr.net/npm/uuid@11.0.3/+esm', {}, false)\n\n            // loads affirmations messages via the affirmations app\n            let affirmations = await this.bp.importModule('affirmations');\n\n            const buddyListWindow = this.createBuddyListWindow();\n            buddyListWindow.content.appendChild(this.createHTMLContent(htmlStr));\n            this.buddyListWindow = buddyListWindow;\n            this.registerEventHandlers();\n            this.handleAuthentication();\n            this.buddylistUIEvents();\n            return 'hello buddyList';\n        }\n\n        // Remark: is this code still used? can we remove? handled by openChatWindow\n        // called from elsewhere?\n        if (config.type === 'pond') {\n            console.log('BuddyList open config.type is pond', config);\n            // the type of window is a chat window\n            // we *don't* need to re-render the buddylist-profile \n            this.openChatWindow(config);\n        }\n\n        if (config.type === 'chat') {\n            // the type of window is a chat window\n            // we *don't* need to re-render the buddylist-profile \n            this.openChatWindow(config);\n        }\n\n    }\n\n    createBuddyListWindow() {\n\n        // calculate right side of screen\n        let x = window.innerWidth - 250;\n\n        let buddyListWindow = this.bp.apps.ui.windowManager.createWindow({\n            app: 'buddylist',\n            type: 'buddylist-profile',\n            title: 'Buddy List',\n            icon: '/desktop/assets/images/icons/icon_profile_64.png',\n            id: 'buddyListWindow',\n            parent: this.bp.apps.ui.parent,\n            width: 250,\n            height: 500,\n            x: x,\n            y: 75,\n            onOpen: () => {\n\n                // Remark: We seeing a race condition where the input field is not focusable\n                // Most likely due to element being hidden / shown\n                // We hooked into window focus events and everything appeared OK in regards to conflicting focus() calls\n                // The issue is most likely due to the element being hidden\n                // This still doesn't work as intended since the element might actually be hidden\n                // TODO: find a better way to handle this\n                function focusOnInput() {\n                    const $loginInput = $('.loginForm input[name=\"username\"]');\n                    console.log('focusOnInput: Found elements:', $loginInput.length, $loginInput);\n\n                    // If the element doesn’t exist, retry after a delay\n                    if ($loginInput.length === 0) {\n                        console.log('Input not found, retrying in 100ms');\n                        setTimeout(focusOnInput, 100);\n                        return;\n                    }\n\n                    // Check if the element is focusable\n                    const input = $loginInput[0]; // Get the raw DOM element\n                    const isFocusable = input.offsetParent !== null && // Visible in the DOM\n                        !input.disabled && // Not disabled\n                        input.tabIndex !== -1 && // Focusable via tab\n                        getComputedStyle(input).visibility !== 'hidden' && // Not hidden\n                        getComputedStyle(input).display !== 'none'; // Not display: none\n\n                    if (!isFocusable) {\n                        console.log('Input is not focusable yet, retrying in 100ms', {\n                            isVisible: input.offsetParent !== null,\n                            isEnabled: !input.disabled,\n                            tabIndex: input.tabIndex,\n                            visibility: getComputedStyle(input).visibility,\n                            display: getComputedStyle(input).display\n                        });\n                        setTimeout(focusOnInput, 100);\n                        return;\n                    }\n\n                    // Attempt to focus and verify\n                    $loginInput.focus();\n                    setTimeout(() => {\n                        if (document.activeElement === input) {\n                            console.log('Focus successful on:', input);\n                        } else {\n                            console.warn('Focus failed, active element is:', document.activeElement);\n                            // Optionally retry\n                            setTimeout(focusOnInput, 100);\n                        }\n                    }, 0); // Check focus in the next tick\n                }\n                // focusOnInput();\n                // if we call this in console after load, it works\n                $('.loginForm input[name=\"username\"]').focus();\n\n            },\n            onClose: () => {\n                this.opened = false;\n                // disconnect from websocket server\n                if (this.client) {\n                    this.client.disconnect();\n                    this.client = null;\n                }\n            }\n        });\n\n        return buddyListWindow;\n\n    }\n\n    registerEventHandlers() {\n        // console.log('BuddyList registerEventHandlers');\n        this.bp.on('auth::qtoken', 'handle-auth-success', qtoken => this.handleAuthSuccess(qtoken));\n\n        // On auth success, load user specific apps ( TODO: should pull from DB )\n        this.bp.on('auth::qtoken', 'load-user-apps', qtoken => this.loadUserApps());\n\n        // Generate default profile files ( TODO: don't run this each time, keep track on profile state if users generated default profile )\n        this.bp.on('auth::qtoken', 'generate-default-profile-files', qtoken => {\n            // give the app a moment to load messages and open windows before generating default profile\n            // TODO: we could do this server-side instead\n            setTimeout(() => {\n                try {\n                    // alert('Generating default profile files');\n                    this.generateDefaultProfile(qtoken)\n\n                } catch (err) {\n                    console.error('generate-default-profile-files', err);\n                }\n            }, 6000);\n\n        });\n\n        this.bp.on('buddylist-websocket::connected', 'update-buddylist-connected', ws => {\n            // sets buddylist status to online\n            $('.onlineStatusSelect').val('online');\n            $('.loggedOut').flexHide();\n            $('.loggedIn').flexShow();\n\n            this.bp.apps.buddylist.client.wsClient.send(JSON.stringify({\n                action: 'getCoinBalance',\n                buddyname: this.bp.me,\n                qtokenid: this.bp.qtokenid,\n            }));\n\n            //$('.loggedIn').addClass('show');\n        });\n\n        // Remark: This has been removed in favor of letting windows manage their own state\n        // If the buddylist emits newMessages: true for a buddy, the window will open automatically calling getMessages\n        //this.bp.on('client::websocketConnected', 'get-latest-messages', ws => this.getLatestMessages());\n\n        this.bp.on('profile::buddylist', 'process-buddylist', ev => this.processBuddylist(ev.data));\n\n        this.bp.on('profile::buddy::in', 'render-or-update-buddy-in-buddylist', data => this.renderOrUpdateBuddyInBuddyList(data));\n        this.bp.on('profile::buddy::out', 'remove-buddy-from-buddylist', data => {\n            console.log('profile::buddy::out', data);\n            const buddyName = data.name;\n            let buddyListItem = $(`li[data-buddy=\"${buddyName}\"]`, '.buddylist');\n            console.log('buddyListItem', buddyListItem);\n            buddyListItem.remove();\n        });\n\n        this.bp.on('profile::fullBuddyList', 'render-or-update-buddy-in-buddylist', data => {\n            let buddylist = data.buddylist || {};\n            console.log('profile::buddy::full_profile', data);\n            for (let b in buddylist) {\n                let buddy = {\n                    name: b,\n                    profile: buddylist[b]\n                }\n                this.data.profileState = this.data.profileState || {};\n                this.data.profileState.buddylist = this.data.profileState.buddylist || {};\n\n                this.data.profileState.buddylist[b] = buddy.profile;\n                // console.log('renderOrUpdateBuddyInBuddyList', buddy);\n                this.renderOrUpdateBuddyInBuddyList(buddy);\n            }\n\n            if (buddylist[this.bp.me]) {\n                // for now...needs to change shape of server response to include root fields?\n                if (buddylist[this.bp.me].profile_picture) {\n                    // console.log('setting profilePicture', buddylist[this.bp.me].profile_picture);\n                    this.data.profileState.profilePicture = buddylist[this.bp.me].profile_picture;\n                }\n                if (buddylist[this.bp.me].status) {\n                    // console.log('setting status', buddylist[this.bp.me].status);\n                    this.data.profileState.status = buddylist[this.bp.me].status;\n                }\n            }\n\n            if (data.email) {\n                this.data.profileState.email = data.email;\n                // update the email input field\n                $('.buddy_email').val(data.email);\n            }\n\n            if (typeof data.emailVerified === 'boolean') {\n                this.data.profileState.emailVerified = data.emailVerified;\n                // update the email verified checkbox\n                // $('.buddy_email_verified').prop('checked', data.emailVerified);\n                if (data.emailVerified) {\n                    $('.buddy_email_verified_text').html('Email Verified');\n                } else {\n                    $('.buddy_email_verified_text').html('Email Not Verified');\n                }\n            }\n\n            // iterate through all buddies and call renderOrUpdateBuddyInBuddylist\n\n        });\n\n\n\n\n        // Remark: removing buddy-in sound because Marak account is friends without everyone is is constantly triggering the sound\n        // We'll have to be smarter about when to play sounds and limit the amount of BUDDY-IN a single buddy can trigger\n        // total amount of buddy-in sounds per time window ( in case of 100s of buddies, etc )\n        // this.bp.on('profile::buddy::in', 'play-buddy-in-sound', data => bp.play('desktop/assets/audio/BUDDY-IN.wav'));\n\n        // Remark: buddy-out sound disabled until new client connection logic with backend is fully tested \n        //         ( was triggering too many sounds too often )\n        //this.bp.on('profile::buddy::out', 'play-buddy-out-sound', data => bp.play('desktop/assets/audio/BUDDY-OUT.wav'));\n        this.bp.on('buddy::message::processed', 'play-im-sound', data => {\n            if (data.noAlert) {\n                // don't play sound if noAlert is set by server\n                return;\n            }\n            // only play sounds for recent messages\n            let messageTime = new Date(data.ctime);\n            let now = new Date().getTime();\n            //console.log(\"messageTime\", messageTime);\n            //console.log(\"now\", new Date());\n            if (now - messageTime.getTime() < 5000) {\n                bp.play('desktop/assets/audio/IM.wav');\n            }\n        });\n\n        this.bp.on('profile::buddy::newmessage', 'open-chat-window', data => {\n            // open the new chat window only if not already open\n            let windowId = `buddy_message_-` + data.name;\n            let win = this.bp.apps.ui.windowManager.getWindow(windowId);\n            if (!win) {\n                this.openChatWindow(data)\n            }\n        });\n\n        this.bp.on('profile::buddy::newmessage', 'mark-messages-as-read', data => this.buddyReadNewMessages(data));\n\n        this.bp.on('profile::buddy::calling', 'start-call', data => {\n            // legacy BP API\n            // console.log(\"profile::buddy::calling\", data);\n            desktop.app.videochat.startCall(false, data.name, function (err, re) {\n                console.log('startCall callback', err, re);\n            });\n\n        });\n\n        // buddylist should not respond to auth::logout \n        // this.bp.on('auth::logout', 'logout', () => this.logout());\n\n        this.bp.on('profile::status', 'update-profile-status', status => {\n            if (status === 'signout') {\n                this.logout()\n            }\n            this.client.setStatus(this.bp.me, { status }, function (err, re) {\n                if (err) {\n                    console.error('error setting status', err);\n                }\n                // console.log('setStatus', err, re);\n            });\n            /*\n            buddypond.setStatus(this.bp.me, { status }, function(err, re){\n                // console.log('errrrr', err, re);\n            });\n            */\n\n        });\n\n        this.bp.on('buddy::messages', 'render-chat-message', data => this.handleChatMessages(data));\n        this.bp.on('buddy::sendMessage', 'send-buddy-message-to-server', data => this.sendMessageToServer(data));\n        // this.bp.on('pond::sendMessage', 'send-pond-message-to-server', data => this.sendPondMessageToServer(data));\n\n        //this.bp.on('buddy::sendMessage', 'process-buddymessage-bs', data => this.bp.apps.buddyscript.parseCommand(data.text));\n        //this.bp.on('pond::sendMessage', 'process-pondmessage-bs', data => this.bp.apps.buddyscript.parseCommand(data.text));\n\n        // remote isTyping event from server\n        // TODO: move to separate file\n        this.bp.on(\"buddy::isTyping\", \"show-is-typing-message\", message => {\n            // console.log('show-is-typing-message', message);\n            // TODO: move to separate file\n            // TODO: move this to a separate file / function\n            // Handling typing message display\n            if (message.isTyping === true) {\n                // check to see if message.from is the same as the current user\n                // if so, ignore the message\n                if (message.from === this.bp.me) {\n                    return;\n                }\n\n                // check the ctime of the message\n                // console.log(\"isTyping message\", message);\n                let messageTime = new Date(message.ctime);\n                // console.log(\"messageTime\", messageTime.getTime());\n                let now = new Date().getTime();\n                let windowId;\n                if (message.type === 'buddy') {\n                    if (message.to === this.bp.me) {\n                        windowId = `buddy_message_-${message.from}`;\n                    } else {\n                        windowId = `buddy_message_-${message.to}`;\n                    }\n                }\n\n                if (message.type === 'pond') {\n                    // windowId = `pond_message_-${message.to}`;\n                    windowId = 'pond_message_main';\n                }\n\n                let chatWindow = this.bp.apps.ui.windowManager.getWindow(windowId);\n                // don't process isTyping messages over 3 seconds old\n                if (now - messageTime.getTime() > 3000) {\n                    // console.log(\"isTyping message too old\", message);\n                    // return;\n                }\n\n                // console.log('typing message', message);\n\n                let typingIndicatorId = `typing-${message.from}`;\n                let typingMessage = `${message.from} is typing...`;\n\n                if (message.type === 'pond') {\n                    // we need to determine if the current open pond aim-messages-container matches the message.to\n                    if (chatWindow.currentActiveContext !== message.to) {\n                        console.log('pond chat window is not active for this pond', message.to);\n                        return;\n                    }\n                }\n\n\n                // Check if the typing indicator for this user already exists\n                let typingIndicator = $(`.aim-typing span[data-user=\"${message.from}\"]`, chatWindow.content);\n                // console.log('typingIndicator', typingIndicator);\n                // console.log('typingMessage', typingMessage);\n                if (typingIndicator.length === 0) {\n                    // If it does not exist, create a new span and append it to the .aim-typing area\n                    typingIndicator = $('<span></span>')\n                        .attr('data-user', message.from)\n                        .text(typingMessage)\n                        .appendTo($('.aim-typing', chatWindow.content));\n                } else {\n                    // If it exists, just update the text\n                    typingIndicator.text(typingMessage);\n                }\n\n                // Clear any existing timeout for this user\n                // console.log(\"CLEARING OLD TIMER\")\n                if (this.showingIsTyping[typingIndicatorId]) {\n                    clearTimeout(this.showingIsTyping[typingIndicatorId]);\n                }\n\n                // console.log(\"CREATING NEW TIMER\")\n                // Set a new timeout to remove the typing message after very short pause\n                // since there already is a delay from the server\n                this.showingIsTyping[typingIndicatorId] = setTimeout(() => {\n                    typingIndicator.remove();\n                }, 500);\n                return;\n            }\n        })\n\n        // local typing event TOOD: better name\n        // when buddy is typing send a message to the ws server\n        this.bp.on('buddy::typing', 'send-typing-message-to-server', data => {\n            // we don't want to spam typing messages, so we will only send a message every 2 seconds\n            this.lastTypingMessage = this.lastTypingMessage || 0;\n            if (new Date().getTime() - this.lastTypingMessage < 2000) {\n                // return;\n            }\n            this.lastTypingMessage = new Date().getTime();\n            // console.log('buddy::typing', data);\n\n            let chatId = '';\n\n            if (data.type === 'buddy') {\n                let buddyNames = [data.from, data.to].sort();\n                chatId = 'buddy/' + buddyNames.join('/');\n            }\n\n            if (data.type === 'pond') {\n                chatId = 'pond/' + data.to;\n            }\n\n            bp.apps.client.sendWsMessage(chatId, {\n                action: 'send',\n                chatId: chatId,\n                buddyname: buddypond.me,\n                qtokenid: buddypond.qtokenid,\n                message: {\n                    ...data,\n                    chatId,\n                    isTyping: true\n                }\n            });\n            /*\n            if (data.type === 'pond') {\n                this.sendPondMessageToServer(data, false);\n            } else {\n                this.sendMessageToServer(data, false);\n            }\n            */\n            // this.bp.apps.client.sendMessage({ id: uuid(), method: 'sendMessage', data: data });\n\n\n        });\n\n        // TODO: this handler could instead bind to bp.apps.system.messages\n        // a System allows for sending and receiving messages to a sequence of handlers\n        /*\n        */\n        // the buddylist registers with the \"messages\" system\n        // in order to receive messages from other systems\n        /*\n        // this will get or create a system called \"messages\"\n        // the send and recieve handlers should get ordered in the order they are registered\n        // unless the order is specified, which should put the system in the correct order by number values and then undefined last\n        bp.apps.system.registerSystem('messages', {\n            registrant: 'buddylist',\n            send: {\n                // since send is missing name and handler, it will be ignored\n            },\n            receive: {\n                name: 'buddylist-processes-messages',\n                order: 2, // we can stack multiple systems in order\n                handler: (message) => {\n                    console.log('buddylist-processes-messages', message);\n                }\n            }\n        });\n        // this event can be anywhere, doesn't have to be in the buddylist\n        // prob should be though :-D\n        // by sending the events to the messages system, they will \n        // go through the processing chain ( if any exists for that system )\n        // and then we recieved via the receive handler\n        this.bp.on(\n            'buddy::messages',\n            'send-messages-to-messages-system',\n            data => this.bp.apps.systems.messages.send({\n                name: 'buddylist-processes-messages',\n                data: data\n        }));\n       // example of another app which filters messages\n\n        bp.apps.system.registerSystem('messages', {\n            registrant: 'shorten-text',\n            send: {\n                // since send is missing name and handler, it will be ignored\n            },\n            receive: {\n                name: 'shorten-text',\n                order: 1, // we can stack multiple systems in order\n                handler: (message) => {\n                    console.log('shorten text', message);\n                    return message.text.substr(0, 1);\n                }\n            }\n        });\n        */\n        this.bp.on('buddylist-websocket::reward', 'update-local-coin-balance', data => {\n            // TODO: move this into rewards app\n            //$('#menu-bar-coin-balance').text(data.message.newBalance);\n            if (!data.success) {\n                console.log(data.message);\n                return;\n            }\n            rollToNumber($('#menu-bar-coin-balance'), data.message.newBalance)\n\n            // TODO: better condition to check if portfolio app is loaded and ready\n            if (this.bp.apps.portfolio && this.bp.apps.portfolio.portfolioWindow && this.bp.apps.portfolio.portfolioWindow.content && this.bp.apps.portfolio.portfolioData) {\n\n                this.bp.apps.portfolio.updateCoinRow(data.message.symbol, {\n                    symbol: data.message.symbol,\n                    amount: data.message.newBalance,\n                    available: data.message.newBalance,\n                    price: 0.001,\n                    cost: 0.001 * data.message.newBalance\n                });\n\n                let coinSendSelector = $('#coin-send-name');\n                let coinSendBalance = $('#current-balance');\n\n                // if coinSendSelector value is \"GBP\"\n                if (coinSendSelector.val() === 'GBP') {\n                    // set the coin balance to the new balance\n                    // window.rollToNumber(coinSendBalance, data.message.newBalance)\n                    const formattedValue = data.message.newBalance.toLocaleString('en-US');\n\n                    coinSendBalance.text(formattedValue);\n                }\n            }\n        });\n\n        this.bp.on('buddylist-websocket::coinBalance', 'update-local-coin-balance', async (data) => {\n            console.log('buddylist-websocket::coinBalance', data);\n            if (typeof data.message.balance === 'number') {\n                rollToNumber($('#menu-bar-coin-balance'), data.message.balance)\n            } else {\n                this.faucetAttempts++;\n                // should work on 1, adds safe guard in case service is down\n                // we don't want to spam the faucet service or getCoinBalance\n                if (this.faucetAttempts < 3) {\n                    // request initial coin balance, null indicates no portfolio entry for GBP\n                    // if no portfolio entry, request the default coin allocations\n                    await this.requestDefaultCoinAllocations();\n                    // make another request to get the coin balance\n                    this.bp.apps.buddylist.client.wsClient.send(JSON.stringify({\n                        action: 'getCoinBalance',\n                        buddyname: this.bp.me,\n                        qtokenid: this.bp.qtokenid,\n                    }));\n                } else {\n                    console.warn('BuddyList: Too many faucet attempts, not requesting balance again this session');\n                }\n\n            }\n\n        })\n    }\n\n    createHTMLContent(htmlStr) {\n        const html = document.createElement('div');\n        html.innerHTML = htmlStr;\n        $('.loginForm input[name=\"username\"]').focus();\n        return html;\n    }\n\n    getLatestMessages() {\n        // This can also be called when closing a chat window to let the server\n        // know we are no longer interested in messages from that buddy or pond\n        const data = {\n            buddyname: this.subscribedBuddies.join(','),\n            pondname: this.subscribedPonds.join(','),\n            me: this.bp.me\n        };\n        this.bp.apps.client.sendMessage({ id: uuid(), method: 'getMessages', data: data });\n    }\n\n    buddyReadNewMessages(data) {\n        this.bp.log(\"BuddyReadNewMessages\", data);\n        const buddyName = data.name;\n    }\n\n    async handleChatMessages(data) {\n        // console.log('handleChatMessages', data);\n        let windowsToUpdate = new Set();\n        for (const message of data.result.messages) {\n            try {\n                // check to see if we have newMessages in local profile for message.from\n                // if so, send buddypond.receiveInstantMessage(message.from)\n                if (message.from && this.data.profileState && this.data.profileState.buddylist && this.data.profileState.buddylist[message.from] && this.data.profileState.buddylist[message.from].newMessages) {\n                    // console.log(\"SENDING READ NEWMESSAGES ALERT\");\n                    this.data.profileState.buddylist[message.from].newMessages = false;\n                    this.client.receivedInstantMessage(message.from, function (err, re) {\n                        console.log('receivedInstantMessage', err, re);\n                    });\n                }\n                // console.log('handleChatMessages message', message);\n                // return the chatWindow which the message was rendered in\n                let chatWindow = await this.renderChatMessage(message);\n                windowsToUpdate.add(chatWindow);\n\n            } catch (err) {\n                console.log('error rendering chat message', message, err)\n            }\n        }\n        for (const chatWindow of windowsToUpdate) {\n            if (chatWindow && chatWindow.content) {\n                this.scrollToBottom(chatWindow.content);\n            }\n        }\n\n        // show help card if local storage does not have the card shown\n        // TODO: remove false\n        // if (true || !this.bp.settings['viewed-help-card']) {\n        if (!this.showedHelp) {\n            let chatWindow = windowsToUpdate.values().next().value;\n            this.showCard({\n                chatWindow,\n                cardName: 'help'\n            });\n            // console.log('showing help card', chatWindow);\n            this.showedHelp = true;\n        }\n\n        /*\n        if (!localStorage.getItem('buddylist-help-card-shown')) {\n            localStorage.setItem('buddylist-help-card-shown', true);\n        }\n        */\n\n    }\n\n    sendMessageToServer(data, emitLocal = false) {\n        this.bp.log('buddy::sendMessage', data);\n        data.uuid = uuid();\n\n        if (data.text === '') {\n            console.log('will not sendMessageToServer: no text');\n            return;\n        }\n\n        // so confusing client.sendMessage....maybe should be sendWorkerMessage...dunno\n        if (data.type === 'pond') {\n            console.log('sendMessageToServer', data);\n            buddypond.pondSendMessage(data.to, data.text, data, function (err, result) {\n                console.log('pondSendMessage', err, result)\n                console.log(err, result)\n            })\n\n        }\n        if (data.type === 'buddy') {\n            console.log('sendMessageToServer', data);\n            buddypond.sendMessage(data.to, data.text, data, function (err, result) {\n                console.log('pondSendMessage', err, result)\n                console.log(err, result)\n            });\n        }\n        /*\n        this.bp.apps.client.sendMessage({ id: data.uuid, method: 'sendMessage', data: data });\n        data.name = data.to;\n        if (emitLocal) {\n            data.ctime = new Date().getTime();\n            if (this.data.profileState) {\n                data.location = this.data.profileState.location || 'outer space';\n            }\n            this.renderChatMessage(data);\n        }\n        */\n    }\n\n    /*\n    sendPondMessageToServer(data, emitLocal = false) {\n        data.type = 'pond';\n        this.bp.log('pond::sendMessage', data);\n        data.uuid = uuid();\n        data.pondname = data.to;\n        // console.log('sendPondMessageToServer', data);\n        this.bp.apps.client.sendMessage({ id: data.uuid, method: 'sendMessage', data: data });\n        if (emitLocal) {\n            data.ctime = new Date().getTime();\n            if (this.data.profileState) {\n                data.location = this.data.profileState.location || 'outer space';\n            }\n            this.renderChatMessage(data);\n        }\n    }\n    */\n\n    // called on open to verify token ( if exists )\n    // signup / login logic is in buddylistUIEvents.js\n    handleAuthentication() {\n        const api = this.bp.apps.client.api;\n        const localToken = localStorage.getItem('qtokenid');\n        const me = localStorage.getItem('me');\n        if (!localToken) return;\n        // console.log('localToken', localToken, me);\n        api.verifyToken(me, localToken, (err, data) => {\n            if (err) {\n                console.error('Failed to verify token:', err);\n                $('.password').show();\n                $('.loginForm .error').text('Failed to authenticate buddy');\n                return;\n            }\n            console.log('verified token', data);\n            if (data.success) {\n                // A pre-existing token was found and verified, emit the auth event\n                this.bp.emit('auth::qtoken', { qtokenid: localToken, me: me, hasPassword: data.user.hasPassword });\n                $('.loggedIn').flexShow();\n                $('.loggedOut').flexHide();\n                if (!data.user.hasPassword) {\n                    this.bp.open('pincode');\n                }\n\n            } else {\n                $('.loginForm .error').text('Failed to authenticate buddy');\n                $('.password').show();\n                console.error('Failed to authenticate buddy:');\n            }\n        });\n\n    }\n\n    // TODO: this event should only set the qtokenid and local settings?\n    // it could open the chat window?\n    // maybe also could connect to the websocket server for buddylist?\n    // opening the default window initializes the messages client\n    async handleAuthSuccess(qtoken) {\n        // console.log('handleAuthSuccess', qtoken);\n        if (this.client) {\n            console.error('buddylist websocket client already exists and has not been closed. This should not happen');\n            return;\n        }\n\n        this.bp.me = qtoken.me;\n        this.bp.qtokenid = qtoken.qtokenid;\n        this.data.profileState = this.data.profileState || {};\n        this.data.profileState.me = this.bp.me;\n\n        $('#me_title').html('Welcome ' + this.bp.me);\n\n        // TODO: connect-to-websocket-server should happen here\n        // plays welcome message\n        this.bp.play('desktop/assets/audio/WELCOME.mp3', { tryHard: Infinity });\n\n\n        // this will eventually trigger the buddylist::connected event\n        this.client = new this.Client(bp);\n        let connected = await this.client.connect();\n\n        if (!qtoken.hasPassword) {\n            // if the user does not have a password, open the pincode window\n            this.bp.open('pincode');\n        }\n\n        // wait until buddylist is connected and then opens default chat window if defined\n        if (this.defaultPond) {\n            setTimeout(() => {\n                let chatWindow = this.openChatWindow({ pondname: this.defaultPond });\n                // loads the hotpond client that populates room lists\n                bp.load('pond');\n\n\n            }, 100);\n        }\n\n    }\n}\n\nBuddyList.prototype.renderOrUpdateBuddyInBuddyList = renderOrUpdateBuddyInBuddyList;\nBuddyList.prototype.createChatMessageElement = createChatMessageElement;\nBuddyList.prototype.renderChatMessage = renderChatMessage;\nBuddyList.prototype.renderBuddyRequests = renderBuddyRequests;\nBuddyList.prototype.processBuddylist = processBuddylist;\nBuddyList.prototype.buddylistUIEvents = buddylistUIEvents;\nBuddyList.prototype.openChatWindow = openChatWindow;\nBuddyList.prototype.generateDefaultProfile = generateDefaultProfile;\nBuddyList.prototype.requestDefaultCoinAllocations = requestDefaultCoinAllocations;\nBuddyList.prototype.sortBuddyList = sortBuddyList;\nBuddyList.prototype.showContextMenu = showContextMenu;\n\nBuddyList.prototype.createMessageContextMenu = createMessageContextMenu;\nBuddyList.prototype.bindMessageContextMenu = bindMessageContextMenu;\nBuddyList.prototype.loadUserApps = loadUserApps;\nBuddyList.prototype.sendMessageHandler = sendMessageHandler;\nBuddyList.prototype.showCard = showCard;\nBuddyList.prototype.scrollToBottom = scrollToBottom;\n\nBuddyList.prototype.defaultAvatarSvg = defaultAvatarSvg;\n\n\n// new API\nBuddyList.prototype.Client = Client;\n\n\nBuddyList.prototype.logout = function () {\n    // set status to online\n\n    $('.loginButton').prop('disabled', false);\n    $('.loginButton').removeClass('disabled');\n    $('#menu-bar-coin-balance').text('0');\n\n    this.client.setStatus(this.bp.me, {\n        status: 'offline'\n    }, (err, re) => {\n        console.log('buddypond.setStatus', err, re);\n        // close any open chat windows\n        $('.chatWindow').remove(); // maybe, they could stay open as well\n        // disconnect the client\n        // this.bp.apps.client.logout();\n        $('.password').val('');\n        $('.loggedIn').flexHide();\n        $('.loggedOut').flexShow();\n\n        this.data.profileState = null;\n        this.bp.play('desktop/assets/audio/GOODBYE.wav');\n        // TODO can we now remove bp.apps.client.logout()?\n        this.bp.apps.client.logout();\n        this.client.disconnect();\n        this.client = null;\n        // clear out the local .data scope\n        // TODO: only declare this once ( code is repeated in constructor )\n        this.data = {\n            processedMessages: {},\n            profileState: {\n            },\n            activeUsersInContext: {},\n            activeUsers: [],\n            activePonds: [],\n            avatarCache: new Map()\n        };\n        // empty the buddylist\n        $('.buddylist').empty();\n\n        // hide any .dialog\n        $('.dialog').remove();\n\n    });\n}\n\nfunction rollToNumber($el, value) {\n  // Format number with commas\n  const formattedValue = value.toLocaleString('en-US');\n  const digits = formattedValue.split('');\n\n  // Clear and rebuild digits\n  $el.empty();\n\n  digits.forEach((d, index) => {\n    // Handle comma separately\n    if (d === ',') {\n      $el.append('<span class=\"odometer-comma\">,</span>');\n      return;\n    }\n\n    const digitContainer = $('<div class=\"odometer-digit\"></div>');\n    const inner = $('<div class=\"odometer-digit-inner\"></div>');\n\n    for (let i = 0; i <= 9; i++) {\n      inner.append(`<span>${i}</span>`);\n    }\n\n    digitContainer.append(inner);\n    $el.append(digitContainer);\n\n    // Delay added to force DOM layout flush, staggered for each digit\n    setTimeout(() => {\n      inner.css({\n        'transition': 'transform 0.5s ease-in-out', // Smooth transition\n        'transform': `translateY(-${d * 1}em)`\n      });\n    }, 50 + index * 100); // Base delay + staggered delay per digit\n  });\n}","// Remark: createWebSocketClient is a prototype method of Client, as Client.createWebSocketClient()\nexport default function createWebSocketClient() {\n  // Track reconnect state\n\n  console.log(`Creating WebSocket client for buddylist`);\n  return new Promise((resolve, reject) => {\n    const wsClient = new WebSocket(\n      `${buddypond.buddylistWsEndpoint}?me=${buddypond.me}&qtokenid=${buddypond.qtokenid}`\n    );\n\n    // Handle open event\n    const handleOpen = () => {\n      console.log('WebSocket connection opened to buddylist');\n      this.reconnectAttempts = 0; // Reset reconnect attempts\n\n      this.wsClient = wsClient; // Store the WebSocket instance\n\n      wsClient.send(\n        JSON.stringify({\n          action: 'getProfile',\n          buddyname: buddypond.me,\n          qtokenid: buddypond.qtokenid,\n        })\n      );\n      // Emit connected event\n      bp.emit('buddylist-websocket::connected');\n\n      /*\n      this.updateStatusInterval = setInterval(() => {\n        let status = 'online'; // Default status\n        try {\n          status = bp.apps.buddylist.data.profileState.status;\n        } catch (error) {\n          console.log('Error retrieving profile state status for updateStatusInterval:', error);\n        }\n        // console.log('Sending status update to buddylist:', status);\n        this.bp.emit('profile::status', status);\n      }, 1000 * 60 * 5); // Refresh status every 5 minutes\n      */  \n      /*\n      this.pingInterval = setInterval(() => {\n        if (wsClient.readyState === WebSocket.OPEN) {\n          wsClient.send(JSON.stringify({ action: 'ping' }));\n        }\n      }, 10000);\n      */\n      resolve(wsClient); // Resolve with the WebSocket instance\n    };\n\n    // Handle message event\n    // TODO: move to a separate function\n    const handleMessage = (event) => {\n      try {\n        const parseData = JSON.parse(event.data);\n        // console.log('Got back from server:', parseData);\n        switch (parseData.action) {\n          case 'buddy_added':\n            // console.log('buddy_added WebSocket message received:', parseData);\n            bp.emit('profile::buddy::in', {\n              name: parseData.buddyname,\n              profile: parseData.profile || { ctime: new Date().getTime(), dtime: 0 },\n            });\n            break;\n\n          case 'getRemoteProfiles':\n            console.log('getRemoteProfiles message received:', parseData);\n            if (parseData.profile && parseData.profile.buddylist) {\n              bp.emit('profile::fullBuddyList', parseData.profile);\n            } else {\n              console.error('getProfile message received but no buddylist:', parseData);\n            }\n\n            break;\n          case 'getProfile':\n            // console.log('getProfile message received:', parseData);\n\n            if (parseData.profile && parseData.profile.buddylist) {\n              bp.emit('profile::fullBuddyList', parseData.profile);\n            } else {\n              console.error('getProfile message received but no buddylist:', parseData);\n            }\n            // TODO: after getting profile, create a new call that wil fetch all buddies DO's to get\n            // most updated state ( a reverse of setStatus() call )\n            // this will ensure we always get the most recent updates for all buddies in case our DO\n            // wasn't updated or missed an update or setStatus() truncation limit for users not recently active\n            // send a message now to getRemoteProfiles\n            console.log('Requesting remote profile backfill for all buddies');\n            // After getting the initial profile ( single DO state, quick load ),\n            // we can request remote profiles for all buddies\n            // This will fetch all buddies DO's and get their most recent state\n            // This is useful for getting the most recent updates for all buddies in case our DO\n            // wasn't updated or missed an update or setStatus() truncation limit for users not recently active\n            wsClient.send(\n              JSON.stringify({\n                action: 'getRemoteProfiles',\n                buddyname: buddypond.me,\n                qtokenid: buddypond.qtokenid,\n              })\n            );\n            break;\n          case 'ping':\n            // console.log('pong message received:', parseData);\n            break;\n          case 'buddy_removed':\n            // alert('buddy_removed WebSocket message received:', parseData);\n            console.log('buddy_removed WebSocket message received:', parseData);\n            this.bp.emit('profile::buddy::out', { name: parseData.buddyname });\n            break;\n          case 'rewards:response':\n            // console.log('rewards:response message received:', parseData);\n            if (parseData.success) {\n              bp.emit('buddylist-websocket::reward', {\n                success: true,\n                message: parseData.message,\n                reward: parseData.reward,\n              });\n\n            } else {\n              bp.emit('buddylist-websocket::reward', {\n                success: false,\n                message: parseData.message,\n              });\n            }\n            break;\n          case 'getCoinBalance':\n            // console.log('getCoinBalance message received:', parseData);\n            if (parseData.success) {\n              bp.emit('buddylist-websocket::coinBalance', parseData);\n            } else {\n              bp.emit('buddylist-websocket::coinBalance', parseData);\n            }\n            break;\n          default:\n            console.log('Last message:', event.data);\n            console.warn('Unknown action received:', parseData);\n            break;\n        }\n      } catch (error) {\n        console.log('Last message:', event.data);\n        console.error('Error parsing WebSocket message:', error);\n        bp.emit('buddylist-websocket::error', { error: 'Message parsing failed' });\n      }\n    };\n\n    // Handle close event\n    const handleClose = (event) => {\n      console.log('WebSocket connection closed to', 'buddylist', 'Code:', event.code, 'Reason:', event.reason);\n\n      // clearInterval(this.pingInterval);\n      clearInterval(this.updateStatusInterval);\n\n      bp.emit('buddylist-websocket::disconnected', { code: event.code, reason: event.reason });\n\n      // Reconnect only if not intentionally closed\n      if (!this.isIntentionallyClosed && this.reconnectAttempts < this.maxReconnectAttempts) {\n        const delay = Math.min(\n          200 * Math.pow(2, this.reconnectAttempts) * (1 + 0.1 * Math.random()), // Exponential backoff with jitter\n          this.maxBackoffDelay\n        );\n        console.log(`Scheduling reconnect attempt ${this.reconnectAttempts + 1} for buddylist in ${delay}ms`);\n        setTimeout(async () => {\n          this.reconnectAttempts++;\n          bp.emit('buddylist-websocket::reconnecting', { attempt: this.reconnectAttempts });\n          try {\n            const newWsClient = await this.createWebSocketClient(); // Attempt to reconnect\n            // Update event listeners to the new WebSocket instance\n            Object.assign(wsClient, newWsClient);\n            this.wsClient = newWsClient;\n          } catch (error) {\n            console.error('Reconnect failed:', error);\n          }\n        }, delay);\n      } else if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n        console.error(`Max reconnect attempts (${this.maxReconnectAttempts}) reached for buddylist. Giving up.`);\n        bp.emit('buddylist-websocket::reconnect_failed');\n      }\n    };\n\n    // Handle error event\n    const handleError = (event) => {\n      console.error('WebSocket error buddylist', event);\n      bp.emit('buddylist-websocket::error', { error: 'WebSocket error' });\n      // Reject the promise if connection hasn't opened yet\n      if (wsClient.readyState !== WebSocket.OPEN) {\n        reject(new Error('WebSocket connection failed'));\n      }\n      // Close to trigger reconnect logic in handleClose\n      wsClient.close(1000, 'Error occurred');\n    };\n\n    // Add event listeners\n    wsClient.addEventListener('open', handleOpen.bind(this));\n    wsClient.addEventListener('message', handleMessage.bind(this));\n    wsClient.addEventListener('close', handleClose.bind(this));\n    wsClient.addEventListener('error', handleError.bind(this));\n\n    // Method to intentionally close the WebSocket\n    wsClient.closeConnection = () => {\n      this.isIntentionallyClosed = true;\n      console.log(`Intentionally closing WebSocket for buddylist`);\n      wsClient.close(1000, 'Normal closure');\n      // Remove event listeners to prevent memory leaks\n      wsClient.removeEventListener('open', handleOpen);\n      wsClient.removeEventListener('message', handleMessage);\n      wsClient.removeEventListener('close', handleClose);\n      wsClient.removeEventListener('error', handleError);\n      bp.emit('buddylist-websocket::closed');\n    };\n  });\n}","export default function defaultChatWindowButtons(bp) {\n\n    return [\n\n        {\n            text: 'Image Search',\n            image: 'desktop/assets/images/icons/icon_image-search_64.png',\n            onclick: async (ev) => {\n                let context = ev.target.dataset.context;\n                let type = ev.target.dataset.type;\n                // Open the image search window\n                bp.open('image-search', {\n                    output: type || 'buddy',\n                    context: context,\n                    provider: 'giphy-stickers'\n                });\n                return false;\n            }\n        },\n\n        {\n            text: 'BuddySound',\n            image: 'desktop/assets/images/icons/icon_soundrecorder_64.png',\n            onclick: (ev) => {\n                console.log('BuddySound button clicked', ev);\n                let context = ev.target.dataset.context;\n                let type = ev.target.dataset.type;\n                bp.open('soundrecorder', { type: type || 'buddy', output: type || 'buddy', context: context });\n\n            }\n        },\n        /* TOOD: add gifstudio back ( with better UX and features )\n        {\n            text: 'BuddyGif',\n            image: 'desktop/assets/images/icons/icon_gifstudio_64.png',\n            onclick: (ev) => {\n                let context = ev.target.dataset.context;\n                let type = ev.target.dataset.type;\n                JQDX.openWindow('gifstudio', { type: type || 'buddy', context: context, output: type || 'buddy' });\n            }\n        },\n        */\n        {\n            text: 'BuddyPaint',\n            image: 'desktop/assets/images/icons/icon_paint_64.png',\n            onclick: (ev) => {\n                let context = ev.target.dataset.context;\n                let type = ev.target.dataset.type;\n                bp.open('paint', { type: type || 'buddy', output: type || 'buddy', context: context });\n            }\n        },\n        {\n            text: 'BuddySnap',\n            image: 'desktop/assets/images/icons/svg/1f4f7.svg',\n            onclick: (ev) => {\n                let context = ev.target.dataset.context;\n                let type = ev.target.dataset.type;\n                // desktop.ui.openWindow('mirror', { type: type || 'buddy', context: context, output: type || 'buddy' });\n                bp.open('camera', { type: type || 'buddy', output: type || 'buddy', context: context });\n            }\n        },\n        {\n            text: 'BuddyEmoji',\n            image: 'desktop/assets/images/icons/svg/1f600.svg',\n            className: 'emojiPicker',\n            onclick: async (ev) => {\n                // EmojiPicker lazy load is a special case\n                // All other BuddyPond deps / lazy imports with await bp.load() are fine to work as expected\n                // We usually don't need to check existence of the app before loading it\n                // For EmojiPicker we need to recall the original click event with same parameters\n                // This could be resolved by using a new EmojiPicker library or patching the current one\n                if (!bp.apps['emoji-picker']) { // this is not a normal practice for user in await bp.load()\n                    await bp.load('emoji-picker');\n                    // Create a new MouseEvent with the original event's coordinates\n                    const newEvent = new MouseEvent('click', {\n                        bubbles: true,\n                        cancelable: true,\n                        clientX: ev.clientX, // Preserve original x coordinate\n                        clientY: ev.clientY, // Preserve original y coordinate\n                        // Include other relevant properties if needed\n                        button: ev.button,\n                        target: ev.target\n                    });\n                    // Dispatch the new event on the original target\n                    ev.target.dispatchEvent(newEvent);\n                    return;\n                }\n                // now that the emoji-picker is loaded, we can open it as normal\n\n                // focus on the .emojiPicker input\n                $('.emojiPicker').focus();\n\n                // we need to add class activeTextArea to the active textarea\n                // so we can append the emoji to the correct textarea\n                // remove the activeTextArea from all other textareas\n                $('.activeTextArea').removeClass('activeTextArea');\n\n                let messageControls = $(ev.target).closest('.aim-message-controls');\n                // find the closest textarea to the ev.target\n                $('.aim-input', messageControls).addClass('activeTextArea');\n\n            }\n        },\n        {\n            text: 'BuddyCall',\n            type: 'buddy-only',\n            image: 'desktop/assets/images/icons/icon_phone_64.png',\n            onclick: (ev) => {\n                let context = ev.target.dataset.context;\n                let type = ev.target.dataset.type;\n                // desktop.ui.openWindow('mirror', { type: type || 'buddy', context: context, output: type || 'buddy' });\n                bp.open('videochat', { type: type || 'buddy', output: type || 'buddy', context: context, isHost: true });\n\n                // should send message to buddy that will open the videocall window on receiving end\n                let message = {\n                    from: bp.me,\n                    to: context,\n                    text: 'Let\\'s have a video call',\n                    type: 'buddy',\n                    card: {\n                        type: 'videochat'\n                    }\n                }\n\n\n                console.log('BuddyCall message', message);\n                // send message to buddy\n                buddypond.sendCardMessage(message, function (err, response) {\n                    if (err) {\n                        console.error('Error sending message', err);\n                    } else {\n                        console.log('Message sent', response);\n                    }\n                });\n\n\n            }\n        },\n        // spellbook\n        {\n            text: 'Spellbook',\n            image: 'desktop/assets/images/icons/icon_spellbook_64.png',\n            onclick: (ev) => {\n                ev.preventDefault();\n                ev.stopPropagation();\n\n                let context = ev.target.dataset.context;\n                let type = ev.target.dataset.type;\n                // desktop.ui.openWindow('spellbook', { type: type || 'buddy', context: context, output: type || 'buddy' });\n                bp.open('spellbook', { type: type || 'buddy', output: type || 'buddy', context: context });\n            }\n        },\n        // buddycoins\n        {\n            text: 'BuddyCoins',\n            image: 'desktop/assets/images/icons/icon_coin_64.png',\n            onclick: (ev) => {\n                let context = ev.target.dataset.context;\n                let type = ev.target.dataset.type;\n                // desktop.ui.openWindow('coin', { type: type || 'buddy', context: context, output: type || 'buddy' });\n                bp.open('portfolio', { type: type || 'buddy', output: context, context: '#portfolio-transfer' });\n            }\n        },\n        /* // TODO: add Dictate with improved UX */\n        {\n            text: 'Dictate',\n            env: 'desktop-only',\n            image: 'desktop/assets/images/icons/icon_dictate_64.png',\n            onclick: async (ev) => {\n                let context = ev.target.dataset.context;\n                let type = ev.target.dataset.type;\n                let targetEl = $('.aim-input', $(ev.target).parent().parent());\n                await bp.open('dictate', { type: type || 'buddy', output: type || 'buddy', context: context, targetEl: targetEl });\n            }\n        },\n        {\n            text: 'BuddyHelp',\n            image: 'desktop/assets/images/icons/icon_help_64.png',\n            align: 'right',\n            onclick: (ev) => {\n                let context = ev.target.dataset.context;\n                let type = ev.target.dataset.type;\n                // TODO: better way to get the windowId\n                // TODO: instead just use context on the button, like how all the other buttons work\n                let windowIdPrefix = type === 'pond' ? 'pond_message_-' : 'buddy_message_-';\n                let windowId = windowIdPrefix + context;\n                if (type === 'pond') {\n                    windowId = 'pond_message_main';\n                }\n                // console.log('opening chat window ', windowId)\n                let chatWindow = bp.apps.ui.windowManager.getWindow(windowId);\n                console.log('chatWindow', chatWindow);\n                // bp.apps.buddylist.showCard({ chatWindow, cardName: 'help' });\n\n                let aimInput = chatWindow.content.querySelector('.aim-input');\n                let sendButton = chatWindow.content.querySelector('.aim-send-btn');\n                if (aimInput) {\n                    aimInput.value = '/help';\n                    aimInput.dispatchEvent(new Event('input', { bubbles: true })); // Trigger input event\n                }\n                if (sendButton) {\n                    sendButton.click(); // Simulate button click\n                }\n\n\n\n\n            }\n        }\n    ]\n}","export default function renderGeoFlag(message) {\n    if (message.location === 'outer space' || !message.location) {\n      // Set Antarctica to the default flag when the location is 'outer space'\n      message.location = 'AQ';\n    }\n  \n    if (!message.location || message.location === 'outer space') {\n      return document.createElement('span');  // Return an empty span if no flag should be displayed\n    }\n  \n    // Create an image element for the flag\n    let img = document.createElement('img');\n    img.className = 'geoFlag';\n    img.src = `desktop/assets/geo-flags/flags/4x3/${message.location.toLowerCase()}.svg`;\n    return img;\n  }\n  ","// Function to remove outer <p> tags\nexport default function parseMarkdownWithoutPTags(markdown) {\n  if (!markdown) return ''; // empty text\n  \n    // Supported colors and styles\n    const supportedColors = ['red', 'blue', 'green', 'yellow', 'purple', 'orange', 'black', 'white', 'gray', 'cyan', 'magenta', 'pink'];\n    const supportedStyles = ['bold', 'italic', 'underline', 'strike', 'blink', 'reverse', 'hidden', 'dim', 'rainbow'];\n    \n    // Custom renderer for links to add target=\"_blank\"\n    const linkExtension = {\n      name: 'link',\n      level: 'inline',\n      renderer(token) {\n        // Ensure href is properly encoded\n        const href = token.href.replace(/\"/g, '&quot;');\n        // Add target=\"_blank\" and rel=\"noopener\" for security\n        return `<a href=\"${href}\" target=\"_blank\" rel=\"noopener\">${this.parser.parseInline(token.tokens)}</a>`;\n      }\n    };\n\n\n    const styleExtension = {\n      name: 'style',\n      level: 'inline',\n    \n      tokenizer(src) {\n        const match = /^((?:\\w+\\.)*\\w+)\\(\\s*([\\s\\S]+?)\\s*\\)/.exec(src);\n        if (match) {\n          const raw = match[0];\n          const modifiers = match[1].split('.');\n          const text = match[2];\n    \n          const isValid = modifiers.every(mod => supportedColors.includes(mod) || supportedStyles.includes(mod));\n          if (!isValid) return;\n    \n          return {\n            type: 'style',\n            raw,\n            modifiers,\n            text,\n            tokens: this.lexer.inlineTokens(text)\n          };\n        }\n      },\n    \n      renderer(token) {\n        let content = this.parser.parseInline(token.tokens);\n    \n        // Apply modifiers in reverse order to maintain proper nesting\n        token.modifiers.reverse().forEach(mod => {\n          if (supportedColors.includes(mod)) {\n            content = `<span style=\"color: ${mod};\">${content}</span>`;\n          } else if (mod === 'bold') {\n            content = `<strong>${content}</strong>`;\n          } else if (mod === 'italic') {\n            content = `<em>${content}</em>`;\n          } else if (mod === 'underline') {\n            content = `<u>${content}</u>`;\n          } else if (mod === 'strike') {\n            content = `<s>${content}</s>`;\n          } else if (mod === 'blink') {\n            // Using CSS animation instead of deprecated <blink> tag\n            content = `<span style=\"animation: blink 1s step-start infinite;\">${content}</span>`;\n          } else if (mod === 'reverse') {\n            content = content.split('').reverse().join('');\n          } else if (mod === 'hidden') {\n            content = `<span style=\"visibility: hidden;\" onmouseover=\"this.style.visibility='visible'\" onmouseout=\"this.style.visibility='hidden'\">${content}</span>`;\n          } else if (mod === 'dim') {\n            content = `<span style=\"opacity: 0.5;\">${content}</span>`;\n          } else if (mod === 'rainbow') {\n            content = content\n              .split('')\n              .map((char, i) => `<span style=\"color: hsl(${(i * 360) / content.length}, 100%, 50%);\">${char}</span>`)\n              .join('');\n          }\n        });\n    \n        return content;\n      },\n    \n      walkTokens(token) {\n        if (token.type === 'style') {\n          console.log(`Detected style token: ${token.modifiers.join('.')}`);\n        }\n      }\n    };\n    \n    marked.use({ extensions: [styleExtension, linkExtension] });\n    \n    let html;\n    try {\n      html = marked.parse(markdown);\n    } catch (error) {\n      html = markdown;\n    }\n  \n    return html.replace(/^<p>(.*?)<\\/p>\\s*$/s, '$1');\n    // Explanation:\n    // ^<p>       → Matches the opening <p> at the start\n    // (.*?)      → Captures the content inside (non-greedy)\n    // <\\/p>\\s*$  → Matches the closing </p> with optional trailing whitespace\n    // $1         → Returns only the captured content\n  }","import forbiddenNotes from '../forbiddenNotes.js';\nimport checkForLinksInMessage from './checkForLinksInMessage.js';\n\nexport default async function renderChatMessage(message, _chatWindow) {\n    // console.log('renderChatMessage', message, _chatWindow);\n    // console.log('renderChatMessage', message, _chatWindow);\n    let context = 'default';\n\n    // profanity filter, could also be done in the backend\n    if (message.text && message.text.length > 0) {\n      message.text = forbiddenNotes.filter(message.text);\n    }\n\n    // TODO: needs to check for links inside the message, not just entire links\n    checkForLinksInMessage(message);\n\n    // if there is a #pondname in the message, add a pond card type\n    if (message.text && message.text.length > 0) {\n        let pondNames = findAllHashPondNames(message.text);\n        if (pondNames.length > 0) {\n            message.card = {\n                type: 'pond',\n                pondNames: pondNames\n            }\n        }\n    }\n\n    // Determine the window ID based on the message context\n    let windowId = `buddy_message_-${message.to}`;\n\n    // dynamically create the windowId based on the message details\n    if (message.type === 'buddy') {\n        if (message.to === this.bp.me) {\n            /*\n            // we need to check if message.from is not part of the buddy type chatId, could be a bot talking in the buddy chat\n            // this differs from pond chats, as its a third party in a two person chat\n            // the whole approach here is a bit awkward, but is required if we wish for bots to join buddy chat conversations\n            // check if message.from is not part of the chatId\n            let participants = message.chatId.split('/');\n            // remove the first item from the array\n            participants.shift();\n            // check if message.from is not inside the participants array\n            if (!participants.includes(message.from)) {\n              // this means a third party is sending a message in a buddy chat ( a bot most likely )\n              // we need to set the windowId to be the non-me participant\n              let notMe = participants.find(participant => participant !== this.bp.me);\n              // console.log('Setting windowId for non-me participant', notMe);\n              windowId = `buddy_message_-${notMe}`;\n              context = notMe;\n            } else {\n              // regular buddy conversation with (2) participants\n              windowId = `buddy_message_-${message.from}`;\n              context = message.from;\n            }\n            */\n            windowId = `buddy_message_-${message.from}`;\n            context = message.from;\n\n\n        } else {\n            windowId = `buddy_message_-${message.to}`;\n            context = message.to;\n        }\n    }\n\n    if (message.type === 'pond') {\n        context = message.to;\n        // windowId = `pond_message_-${message.to}`;\n        windowId = \"pond_message_main\";\n    }\n    // console.log('windowIdwindowId', windowId)\n    // TODO: scope on processedMessages needs to be keyed by type in addition to context\n    this.data.processedMessages[context] = this.data.processedMessages[context] || [];\n\n    // Stores all active users across all chat windows\n    this.data.activeUsers = this.data.activeUsers || [];\n\n    // Stores all buddies that are currently active in the context of the chat window\n    this.data.activeUsersInContext = this.data.activeUsersInContext || {};\n    this.data.activeUsersInContext[context] = this.data.activeUsersInContext[context] || [];\n\n    this.data.activePonds = this.data.activePonds || [];\n    if (message.type === 'pond') {\n        // If message.to is not in the activePonds, add it\n        if (message.to && !this.data.activePonds.includes(message.to)) {\n            this.data.activePonds.push(message.to);\n            this.bp.emit('pond::activePondAdded', message.to);\n        }\n    }\n\n    if (message.type === 'buddy') {\n        // If message.to is not in the activeUsers, add it\n        if (message.to && !this.data.activeUsers.includes(message.to)) {\n            this.data.activeUsers.push(message.to);\n            this.bp.emit('buddy::activeUserAdded', message.to);\n        }\n        // If message.to is not in the activeUsersInContext, add it\n        if (message.to && !this.data.activeUsersInContext[context].includes(message.to)) {\n            this.data.activeUsersInContext[context].push(message.to);\n        }\n    }\n\n    // If message.from is not in the activeUsers, add it\n    if (message.from && !this.data.activeUsers.includes(message.from)) {\n        this.data.activeUsers.push(message.from);\n        this.bp.emit('buddy::activeUserAdded', message.from);\n    }\n\n\n    // If message.from is not in the activeUsersInContext, add it\n    if (message.from && !this.data.activeUsersInContext[context].includes(message.from)) {\n        this.data.activeUsersInContext[context].push(message.from);\n    }\n\n    // Remark: Removing and editing messages do not currently require a windowId since they currently\n    // do not have a from / to property\n    // We may want to change this in the future to allow for more granular control directly in the chatWindow instance\n    if (message.removed) {\n        console.log(\"ATTEMPTING TO REMOVE MESSAGE\", message);\n        // find the chatMessage by uuid\n        let removedMessageEl = $(`.aim-chat-message[data-uuid=\"${message.removed}\"]`); // could be document as well?\n        if (removedMessageEl.length > 0) {\n            // remove the removed message\n            removedMessageEl.remove();\n        }\n        return;\n    }\n\n    if (message.edited) {\n        console.log(\"ATTEMPTING TO EDIT MESSAGE\", message);\n        // find the chatMessage by uuid\n        let editedMessageEl = $(`.aim-chat-message[data-uuid=\"${message.edited}\"]`); // could be document as well?\n\n        if (!editedMessageEl.length > 0) {\n            console.error('No original message found');\n            return;\n        }\n\n        // get the aim-message-content and set the text to the new message\n        let editedMessageContent = editedMessageEl.find('.aim-message-content');\n        if (editedMessageContent.length > 0) {\n            // remove the edited message\n            editedMessageContent.html(message.text);\n        }\n        return;\n    }\n\n    // console.log('current windows', this.bp.windows);\n    // console.log('renderChatMessage windowId', windowId, message);\n    let chatWindow = this.bp.apps.ui.windowManager.getWindow(windowId);\n\n    if (_chatWindow) {\n        chatWindow = _chatWindow;\n    }\n\n    if (!chatWindow || !chatWindow.content) {\n        console.log('chat window not ready, trying again soon', windowId, message);\n        console.log(message);\n        return;\n    }\n\n    // Check if message already exists in the DOM\n    if (document.querySelector(`.chatMessage[data-uuid=\"${message.uuid}\"]`)) {\n        return; // Message is already rendered\n    }\n\n    // check to see if this command is less than 10 seconds old\n    // TODO: split local and remote commands\n    // TODO: should probably go through card codepath\n    // this means we create the bs-card on the client\n    // we should only run local commands on the client\n    let now = new Date().getTime();\n    let messageTime = new Date(message.ctime).getTime();\n    // needs to determine if this command should be run locally or remotely\n    // for now, only run locally\n    // check to see  if message.from is bp.me\n\n    // remove .aim-no-messages el from chat window if it exists\n    $('.aim-no-messages', chatWindow.content).remove();\n    // console.log('checking this.data.processedMessages[context]', this.data.processedMessages[context]);\n    // Check if message has been processed to avoid duplication\n    for (let i = 0; i < this.data.processedMessages[context].length; i++) {\n        if (this.data.processedMessages[context][i].uuid === message.uuid) {\n            // console.log('Message already processed, skipping rendering', message);\n            // if the message has already been processed by UUID, then it's a duplicate and we should not render it\n            return chatWindow;\n            // we have a special case here we wish to re-render the client message\n            // this indicates the server filtered parts of the message and it should be removed and re-rendered\n            if (this.data.processedMessages[context][i].from === this.bp.me && this.data.processedMessages[context][i].text !== message.text) {\n                // find the chatMessage by uuid\n                let filteredMessageEl = $(`.chatMessage[data-uuid=\"${message.uuid}\"]`, chatWindow.content);\n                if (filteredMessageEl.length > 0) {\n                    // remove the filtered message\n                    filteredMessageEl.remove();\n                    //this.bp.emit('buddy::message::gotfiltered', message);\n                }\n            } else {\n                // else there is no special filtering case from server\n                // and the messaged is a duplicate, return and do not render\n                return;\n            }\n        }\n    }\n\n    // Manage size of processedMessages to prevent memory leaks\n    if (this.data.processedMessages[context].length > 5000) {\n        this.data.processedMessages[context].shift();\n    }\n\n    // Add the processed message UUID to prevent reprocessing\n    this.data.processedMessages[context].push(message);\n\n    // check if this is an Agent message which gets processed first\n    if (message.type === 'agent') {\n\n        // Legacy BP API\n        if (desktop && desktop.app && desktop.app.spellbook && desktop.app.spellbook[message.text]) {\n            desktop.app.spellbook[message.text]();\n            return;\n        } else {\n            console.log('unknown agent message', message);\n        }\n    }\n\n    // TODO: allow buddylist to register message processors\n    // Is most likely best handled using SystemsManager from ECS code\n    // this way all app can register an update method\n    // we can give each app an onMessage method and have the ECS S delegate the message to the app\n    // bp.apps.buddylist.addMessageProcessor('buddyscript', function (message) {});\n    // bp.apps.buddylist.addMessageProcessor('card', function (message) {});\n    // etc\n    // this way we don't have to pollute the buddylist with all the message processing logic\n    // TODO: Migrate TTS app to v5 API\n\n    if (this.bp.apps.say && message.text && message.text.startsWith('/say')) {\n        // this is a /say message\n        this.bp.apps.say.processMessages(message);\n    }\n\n    // check if mobile, is so shorten the time\n    // legacy API\n    if (this.bp.isMobile()) {\n        messageTime = DateFormat.format.date(messageTime, 'hh:mm:ss a');\n\n    } else {\n        messageTime = DateFormat.format.date(messageTime, 'E MMMM dd, hh:mm:ss a');\n    }\n\n    // Format message time\n    messageTime = messageTime.toString();\n\n    // Check to see if message is type card\n\n    let container;\n    if (message.card && this.bp && this.bp.apps && this.bp.apps.card) {\n        //console.log('message is', message);\n        //console.log('message is card', message.card);\n\n        let cardData = message.card;\n        // console.log(\"USING CARD\", cardData, message);\n        // make sure card has props\n        if (Object.keys(cardData).length > 0) {\n            cardData.message = message; // TODO probably should clone for CardManager, etc\n            // default JSON rendering will now fail by default due to nested messages cards with arbitrary props ( no .data scope either ), .context might be good...\n            let cardManager = this.bp.apps.card.cardManager;\n            // console.log('cardManager.loadCard', cardData);\n            const _card = await cardManager.loadCard(cardData.type, cardData, chatWindow);\n            container = document.createElement('div');\n            container.classList.add('cardContainer');\n            let d = await _card.render(container);\n        }\n\n    }\n\n    let bp = this.bp;\n\n    this.createChatMessageElement(message, messageTime, chatWindow, container);\n\n    // console.log('parseChatMessage result', result);\n\n\n    // emit the freshly processed message for any post processing events ( such as playing a sound )\n    if (message.type === 'pond') {\n        this.bp.emit('pond::message::processed', message);\n    } else {\n        this.bp.emit('buddy::message::processed', message);\n    }\n\n    return chatWindow;\n\n}\n\n// TODO: add via addMessageProcessor() on `marked` and `pond` apps\n\nfunction findAllHashPondNames(text) {\n    // Decode HTML entities more comprehensively\n    const decodedText = decodeEntities(text);\n    // Regex: # followed by at least one letter/digit, then optional letters/digits/underscores/hyphens\n    // Requires space or start of string before #, supports Unicode\n    const hashPondNameRegex = /(^|\\s)#([a-zA-Z0-9\\p{L}][a-zA-Z0-9\\p{L}_-]*)/gu;\n    return Array.from(decodedText.matchAll(hashPondNameRegex), m => m[2]);\n}\n\nfunction decodeEntities(text) {\n    const entities = {\n        '&amp;': '&',\n        '&quot;': '\"',\n        '&lt;': '<',\n        '&gt;': '>',\n        '&apos;': \"'\",\n        '&nbsp;': ' ',\n        // Add more as needed\n    };\n    return text.replace(/&[a-zA-Z0-9#]+;/g, match => entities[match] || match);\n}","export default function renderBuddyRequests (buddyrequests) {\n    //console.log(\"renderBuddyRequests\", buddyrequests);\n\n    $('.you_have_no_buddies').hide();\n    let api = this.bp.apps.client.api;\n\n    if (buddyrequests) {\n  \n      $('.pendingIncomingBuddyRequests').html('');\n      $('.pendingOutgoingBuddyRequests').html('');\n      $('.loading').remove();\n  \n      for (let buddy in buddyrequests) {\n        let buddyrequest = buddyrequests[buddy];\n        buddyrequest = JSON.parse(buddyrequest);\n        if (buddyrequest.to === this.bp.me) {\n          $('.pendingIncomingBuddyRequests').append('<li>' + buddyrequest.from + ' - <a href=\"#\" class=\"approveBuddyRequest pointer\" data-buddyname=\"' + buddyrequest.from +'\">Approve</a> / <a href=\"#\" class=\"denyBuddyRequest pointer\" data-buddyname=\"' + buddyrequest.from +'\">Remove</a> </li>');\n        } else {\n          $('.pendingOutgoingBuddyRequests').append('<li>' + buddyrequest.to + ' - <a href=\"#\" class=\"denyBuddyRequest pointer\" data-buddyname=\"' + buddyrequest.to +'\">Remove</a></li>');\n        }\n      }\n  \n      $('.apiResult').val(JSON.stringify(buddyrequests, true, 2));\n  \n      // desktop.app.buddylist.pendingIncomingBuddyRequests = desktop.app.buddylist.pendingIncomingBuddyRequests || 0;\n      this.data.pendingIncomingBuddyRequests = this.data.pendingIncomingBuddyRequests || 0;\n\n      let totalIncomingBuddyRequests = $('.pendingIncomingBuddyRequests li').length;\n  \n      if (totalIncomingBuddyRequests > this.data.pendingIncomingBuddyRequests) {\n        this.data.pendingIncomingBuddyRequests = totalIncomingBuddyRequests;\n  \n        // Remark: short delay is used here to provide nice login experience if Buddy has requests\n        //         allows WELCOME sound to play\n        //         A better solution here is to here priority option for playing sound with queue\n        setTimeout(function () {\n          // this.bp.apps.play('YOUVEGOTMAIL.wav'); // TODO add 'play' app\n        }, 2222);\n      }\n  \n      if (totalIncomingBuddyRequests === 0) {\n        $('.pendingIncomingBuddyRequestsHolder').hide();\n      } else {\n        $('.pendingIncomingBuddyRequestsHolder').show();\n      }\n  \n      if ($('.pendingOutgoingBuddyRequests li').length == 0) {\n        $('.pendingOutgoingBuddyRequestsHolder').hide();\n      } else {\n        $('.pendingOutgoingBuddyRequestsHolder').show();\n      }\n  \n      // TODO: remove links in real-time from client for approve / deny ( no lags or double clicks )\n      //  '.pendingIncomingBuddyRequests'\n      $('.denyBuddyRequest').on('click', function () {\n        $(this).parent().hide();\n        api.denyBuddy($(this).attr('data-buddyname'), function (err, data) {\n          $('.apiResult').val(JSON.stringify(data, true, 2));\n        });\n        return false;\n      });\n  \n      $('.approveBuddyRequest', '.pendingIncomingBuddyRequests').on('click', function () {\n        $(this).parent().hide();\n        let buddyName = $(this).attr('data-buddyname');\n        api.approveBuddy(buddyName, function (err, data) {\n          $('.apiResult').val(JSON.stringify(data, true, 2));\n        });\n        return false;\n      });\n    }\n  \n  }","\n\nexport default async function processProfile(profileState) {\n  // console.log('processBuddylist', profileState);\n\n  // if the client hasn't seen the buddylist yet, we start from empty state\n  if (!this.data.buddylist) {\n    this.data.buddylist = {};\n  }\n  if (!this.data.buddyrequests) {\n    this.data.buddyrequests = {};\n  }\n\n  //console.log('processProfile', profileState);\n  //console.log('this.data.profileState', this.data.profileState);\n  if (this.data.profileState &&\n    (\n      Number(profileState.powerlevel) > Number(this.data.profileState.powerlevel)\n    )\n  ) {\n\n    // Assuming there's a container with ID 'powerLevelContainer' in your HTML\n    const powerLevel = bp.apps.powerlevel.popup;\n\n    // Example of increasing to level 4\n    powerLevel.show(profileState.powerlevel, {\n      duration: 7777\n    });\n  }\n\n  // merge the profile state, don't overwrite\n  this.data.profileState = { ...profileState };\n  // profileState is a JSON document representing entire user profile\n  // console.log('profileState', profileState);\n  if (profileState.system) {\n    $('.totalConnectedCount').html(profileState.system.totalIsConnected);\n    $('.totalOnlineCount').html(profileState.system.totalIsOnline);\n  }\n\n  // metadata about ponds users is joined or ponds of interest ( such as viewing popular ponds list )\n  if (profileState.ponds && profileState.ponds.ponds) {\n    profileState.ponds.ponds.forEach(function (pond) {\n      // check to see if we have an open window with data-app=\"buddylist\" data-type=\"pond\" and data-context=\"${pondName}\"\n      let win = $('#pond_message_-' + pond.name);\n      // update the window-title-text with the number of connected users\n      if (win) {\n        $('.window-title-text', win).html(pond.name + ' Pond (' + pond.connected + ')');\n      }\n    });\n  }\n\n  // we will process the profileState as if it was a differential state update\n  let buddylist = profileState.buddylist;\n  let profileNeedsUpdate = _processBuddylistData(this, buddylist);\n\n  let buddyrequests = profileState.buddyrequests;\n  _processBuddyRequestsData(this, buddyrequests);\n\n  // once we have completed processing all the buddylist profile data\n  // we will want to send back the updated document to awk that we have processed the profile\n  // and set newMessages flags to false\n  let api = this.bp.apps.client.api;\n  // console.log('getBuddyProfile', api, profileState);\n  profileState.updates = profileState.updates || {};\n\n}\n\nfunction _processBuddyRequestsData(buddylist, buddyrequests) {\n  if (buddyrequests) {\n    buddylist.renderBuddyRequests(buddyrequests);\n  }\n}\n\nfunction _processBuddylistData(buddylist, buddylistData) {\n\n  let profileNeedsUpdate = false;\n  if (buddylist) {\n    for (let b in buddylistData) {\n      let buddy = buddylistData[b];\n      let buddyName = b.replace('buddies/', '');\n      // check to see if the buddy is already in the local buddylist\n      // if not, render the buddy in the buddylist\n      /*\n      if (!buddylist.data.buddylist[b]) {\n        if (buddy.isConnected) {\n          buddylist.bp.emit('profile::buddy::in', {\n            name: buddyName,\n            buddydata: buddy\n          });\n        }\n        buddylist.data.buddylist[b] = buddy;\n      } else {\n        // check to see if buddy was connected and is no longer\n        if (!buddy.isConnected && buddylist.data.buddylist[b].isConnected) {\n          buddylist.bp.emit('profile::buddy::out', {\n            name: buddyName,\n            buddydata: buddy,\n            wasOnline: false\n          });\n        }\n      }*/\n\n\n      buddylist.renderOrUpdateBuddyInBuddyList({\n        name: buddyName,\n        buddydata: buddy,\n        wasOnline: false\n      });\n\n      // check if this buddy has sent newMessages\n      // if so, open a new window\n      // the process of opening a new chat window will connect websocket ( if not already connected )\n      // then messages will flow through the websocket\n      if (buddy.newMessages) {\n        buddylist.bp.emit('profile::buddy::newmessage', {\n          name: buddyName\n        });\n        // console.log('updaitng local profile state', buddylist.data.profileState, buddyName)\n        buddylist.data.profileState.buddylist['buddies/' + buddyName] = {\n          newMessages: false\n        };\n        profileNeedsUpdate = true;\n      }\n\n\n      if (buddy.isCalling) {\n        buddylist.bp.emit('profile::buddy::calling', {\n          name: buddyName\n        });\n      }\n\n    }\n  }\n  return profileNeedsUpdate;\n}","export default function buddylistUIEvents() {\n  let api = this.bp.apps.client.api;\n  let affirmations = this.bp.apps.affirmations.affirmations;\n\n  // bind events\n  $('.loginForm').submit((e) => {\n    e.preventDefault();\n\n    // disable the login button\n    $('.loginButton').prop('disabled', true);\n    $('.loginButton').addClass('disabled');\n\n    let username = $('.loginForm input[name=\"username\"]').val();\n    let password = $('.loginForm input[name=\"password\"]').val();\n    if (!password) {\n      password = username;\n    }\n\n    api.authBuddy(username, password, function (err, result) {\n      console.log('authBuddy', err, result);\n      if (err) {\n        if (result && result.error) {\n          $('.loginStatus').html(result.error);\n          if (result.error === 'Incorrect password.') {\n            $('.resetPasswordLink').show();\n          }\n        } else {\n          if (err.message === 'Failed to fetch') {\n            $('.loginStatus').text('Failed to connect to Buddy Pond');\n          } else {\n            $('.loginStatus').html(err.message || 'Failed to authenticate buddy');\n          }\n        }\n        $('.loginButton').prop('disabled', false);\n        $('.loginButton').removeClass('disabled');\n\n        $('.password').show();\n        console.error('Failed to authenticate buddy:', err);\n\n        return;\n      }\n      if (result.success) {\n        // attempt to connect for events after getting auth token\n        //console.log('connecting with valid qtokenid', api.qtokenid);\n        result.me = username;\n        // The user has logged in password or signed up successfully, emit the auth event\n        bp.emit('auth::qtoken', result);\n        // $('.loggedIn').flexShow();\n        $('.loginForm .error').text('');\n\n      } else {\n        // re-enable the login button\n        $('.loginButton').prop('disabled', false);\n        $('.loginButton').removeClass('disabled');\n        if (username === password) {\n          $('.password').show();\n          $('.password').focus();\n          return;\n        }\n        $('.loginForm .error').text('Failed to authenticate buddy');\n        $('.password').show();\n        console.error('Failed to authenticate buddy:');\n      }\n    });\n    return false;\n  });\n\n  $('.onlineStatusSelect').change((e) => {\n    let status = $(e.target).val();\n    // console.log('status', status);\n    bp.emit('profile::status', status);\n  });\n\n  $('.forgot-password').on('click', (ev) => {\n    $('.loginForm').flexHide();\n    $('.forgot-password-modal').flexShow();\n    $('.tos-checkbox').flexHide();\n    $('.loginStatus').html('');\n    $('.resetPasswordLink').flexHide();\n  });\n\n  $('.closeForgotPassword').on('click', (ev) => {\n    $('.forgot-password-modal').flexHide();\n    $('.loginForm').flexShow();\n    $('.tos-checkbox').flexShow();\n    $('.resetPasswordLink').flexShow();\n  });\n\n  $('.resetPasswordButton').on('click', (ev) => {\n    ev.preventDefault();\n    let email = $('.resetPasswordEmail').val();\n    if (!email) {\n      $('.resetPasswordEmail').addClass('error');\n      return;\n    }\n    $('.resetPasswordEmail').removeClass('error');\n    $('.loginStatus').html('Sending password reset email...');\n    $('.resetPasswordForm').flexHide();\n    $('.resetPasswordMessage').flexHide();\n    api.sendPasswordResetEmail(email, (err, data) => {\n      // console.log('sendPasswordResetEmail', err, data);\n      if (err || !data.success) {\n        $('.loginStatus').html('Failed to send password reset email.');\n        console.error(err || data);\n        return;\n      }\n      $('.loginStatus').removeClass('error').addClass('success').html(data.message);\n    });\n  });\n\n  $('.buddylist').click((e) => {\n    // check if element has a data-buddy attribute\n    if (!$(e.target).closest('.buddy-message-sender').data('buddy')) {\n      return\n    }\n    let buddyname = $(e.target).closest('.buddy-message-sender').data('buddy');\n    // console.log('message-buddy', buddyname);\n    this.openChatWindow({ name: buddyname });\n  });\n\n  // Send a buddy request form\n  $('.sendBuddyRequest').on('click', (ev) => {\n    ev.preventDefault();\n    let buddyName = $('.buddy_request_name').val();\n    if (!buddyName) {\n      $('.buddy_request_name').addClass('error');\n      return;\n    }\n\n    $('.you_have_no_buddies').html('Buddy Request Sent!');\n    $('.buddy_request_name').removeClass('error');\n    $('.buddy_request_name').val('');\n    // $('.pendingOutgoingBuddyRequests').append('<li>' + buddyName + '</li>');\n    this.bp.log('buddypond.addBuddy ->', buddyName);\n\n    this.client.addBuddy(buddyName, (err, data) => {\n      console.log('buddypond.addBuddy <-', err, data);\n      if (data.error) {\n        $('.you_have_no_buddies').html(data.error);\n        console.error(data);\n        return;\n      }\n      if (!data.success) {\n        $('.you_have_no_buddies').html(data.message)\n        console.error(data);\n        return;\n      }\n      this.bp.log('buddypond.addBuddy <-', data);\n    });\n\n  });\n\n  // Initially disable the login button\n  $('.loginButton').prop('disabled', true);\n  $('.loginButton').addClass('disabled');\n\n  // Toggle the login button based on the checkbox status\n  $('#tosAgree').change(function () {\n    if ($(this).is(':checked')) {\n      $('.loginButton').prop('disabled', false);\n      $('.loginButton').removeClass('disabled');\n    } else {\n      $('.loginButton').prop('disabled', true);\n      $('.loginButton').addClass('disabled');\n    }\n  });\n\n  /*\n  // TODO: create context meny for buddy-message-sender\n  $(document).on('click', (e) => {\n    // delegate based on if e.target is a .buddy-message-sender\n    // if so, open profile for that buddy\n    //alert(e.target.classList)\n    if ($(e.target).hasClass('buddy-message-sender')) {\n      alert('buddy-message-sender');\n      let buddyName = $(e.target).text();\n      if (this.bp.admin) {\n        // roles are handled server-side, this is a simple UI route for the implied role access\n        // loading admin-profile from another user won't return admin data\n        this.bp.open('admin-profile', { context: buddyName });\n      } else {\n        // this.bp.open('user-profile', { context: buddyName });\n      }\n    }\n  });\n  */\n\n  // Append a custom context menu to the body (hidden initially)\n  // $('body').append('<div id=\"customContextMenu\" class=\"removeMessage\" style=\"display: none; position: absolute; z-index: 1000; background: white; border: 1px solid #ccc; padding: 10px;\">Remove Message</div>');\n\n  // Right-click event on elements with class .buddy-message-sender\n  /*\n  $(document).on('contextmenu', function (e) {\n\n    if (!$(e.target).hasClass('buddy-message-sender')) {\n      return true;\n    }\n\n    e.preventDefault(); // Prevent default context menu\n    let chatMessage = $(e.target).closest('.chatMessage'); // Get the chat message element\n    console.log('using chatMessage', chatMessage.html());\n    if (api.me !== 'Marak') { // could also allow users to remove their own messages\n       // set the removeMessage to disabled class\n      $('#customContextMenu').addClass('disabled');\n    }\n\n    let from = chatMessage.attr('data-from');\n    let to = chatMessage.attr('data-to');\n    let uuid = chatMessage.attr('data-uuid');\n    let type = chatMessage.attr('data-type');\n\n    console.log('type', type, 'from', from, 'uuid', uuid);\n\n    // Position the custom context menu at the mouse coordinates\n    $('#customContextMenu').css({\n      top: e.pageY + 'px',\n      left: e.pageX + 'px',\n      display: 'block'\n    });\n\n    $('#customContextMenu').off('click').on('click', async () => {\n      // Replace 'openProfile' with your actual function to open the profile\n      //openProfile(buddyName);\n\n      let context = to;\n\n      await api.removeMessage({type, from, to, uuid});\n      // $(this).hide(); // Hide the context menu after click\n    });\n  });\n  */\n\n  // Hide context menu when clicking anywhere else on the document\n  /*\n  $(document).on('click', function (e) {\n    if (!$(e.target).hasClass('buddy-message-sender')) {\n      $('#customContextMenu').hide();\n    }\n  });\n  */\n\n  // Invite a buddy link ( opens twitter with a random message )\n  $('.inviteBuddy').on('click', () => {\n    let randomInviteMessages = [\n      `Find me as \"${this.bp.me}\" on https://buddypond.com and let's start a conversation that could last a lifetime.`,\n      `I've taken my conversations to the cloud! Reach me at \"${this.bp.me}\" on https://buddypond.com where the future of messaging unfolds.`,\n      `Wave goodbye to the old and hello to the old! I'm waiting at \"${this.bp.me}\" on https://buddypond.com. Let's catch up!`,\n      `Missing chat sessions? They're back and better than ever at \"${this.bp.me}\" on https://buddypond.com. Join me and let's reconnect!`,\n      `Taking conversations to the next level. Find me at \"${this.bp.me}\" on https://buddypond.com and let's dive into new topics together!`,\n      `Remember the ease of old-school messaging? Experience it again with a twist! I'm \"${this.bp.me}\" at https://buddypond.com. Chat soon?`,\n      `I'm charting new territories in the world of digital communication. Join me as \"${this.bp.me}\" on https://buddypond.com and let's explore together!`,\n      `Just like the good old days but better! Find me on \"${this.bp.me}\" at https://buddypond.com and let's keep the conversations flowing.`,\n    ];\n    let inviteMessage = randomInviteMessages[Math.floor(Math.random() * randomInviteMessages.length)];\n    window.open(`https://twitter.com/intent/tweet?url=${inviteMessage}`);\n    return false;\n  });\n\n  function updatePositiveAffirmation() {\n    let key = affirmations[Math.floor(Math.random() * affirmations.length)];\n    $('.positiveAffirmation').html(key);\n  }\n\n  // update the positive affirmation on an interval\n  setInterval(function () {\n    $('.positiveAffirmation').fadeOut({\n      duration: 4444,\n      complete: function () {\n        updatePositiveAffirmation();\n        $('.positiveAffirmation').fadeIn({\n          duration: 4444,\n          complete: function () { }\n        });\n      }\n    });\n  }, 199800); // 3 minutes, 33 seconds\n\n  updatePositiveAffirmation();\n\n  $('.positiveAffirmation').on('click', function () {\n    updatePositiveAffirmation();\n  });\n\n\n}","\n// Remark: Server will only allocate if there is no pre-existing portion of coins\n// Remark: Server maintains a mutex lock to ensure only one request per user at a time ( spamming prevention )\nexport default async function requestDefaultCoinAllocations() {\n\n  let qtokenid = buddypond.qtokenid;\n  let me = this.bp.me;\n\n  // TODO: set a five second alarm here so messages aren't immediately sent on login\n  console.log(`requestDefaultCoinAllocations ${me} ${qtokenid}`);\n\n  let res;\n  try {\n    let faucetUrl = `${buddypond.randolphEndpoint}/randolph/faucet`;\n    console.log('faucetUrl', faucetUrl);\n    res = await fetch(faucetUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${qtokenid}`,\n        'x-me': me\n      }\n    });\n    console.log('requestDefaultCoinAllocations', res.status, res.statusText);\n    let json = await res.json();\n    console.log('requestDefaultCoinAllocations', json);\n  } catch (err) {\n    throw err;\n  }\n\n}","export default function sortBuddyList() {\n\n  let buddyList = document.querySelector('.buddylist');\n  if (!buddyList) {\n    console.log('Buddy list not found, unable to sort');\n    return;\n  }\n\n  let buddyItems = Array.from(document.querySelectorAll('.buddylist li')); // TODO: more specific selector?\n\n  buddyItems.sort((a, b) => {\n    // Sort by status (online 🟢 first)\n    let aStatus = a.querySelector('.buddy-status').textContent.includes('🟢') ? 0 : 1;\n    let bStatus = b.querySelector('.buddy-status').textContent.includes('🟢') ? 0 : 1;\n\n    if (aStatus !== bStatus) {\n      return aStatus - bStatus; // Online first\n    }\n\n    // If both are online, sort alphabetically by name\n    if (aStatus === 0 && bStatus === 0) {\n      return a.dataset.buddy.localeCompare(b.dataset.buddy);\n    }\n\n    // If both are offline, sort by utime (most recent first), then by name\n    let aUtime = parseInt(a.dataset.utime || 0);\n    let bUtime = parseInt(b.dataset.utime || 0);\n    if (aUtime !== bUtime) {\n      return bUtime - aUtime; // Higher utime (more recent) first\n    }\n\n    return a.dataset.buddy.localeCompare(b.dataset.buddy);\n  });\n\n\n  buddyList.innerHTML = '';\n  buddyItems.forEach(item => buddyList.appendChild(item));\n}","\nexport default function showContextMenu(x, y, buddyName) {\n    const $menu = $('<div>', {\n      id: 'customContextMenu',\n      css: {\n        position: 'absolute',\n        top: y,\n        left: x,\n        zIndex: 99999,\n        display: 'block',\n        background: 'white',\n        border: '1px solid #ccc',\n        padding: '10px',\n        cursor: 'pointer'\n      }\n    }).append($('<ul>').append(\n      $('<li>').text('View Profile').on('click', () => openProfile(buddyName))\n    ));\n  \n    function openProfile(buddyName) {\n      console.log('Opening profile for ' + buddyName);\n      if (bp.admin) {\n        bp.open('admin-profile', { context: buddyName });\n      } else {\n        bp.open('user-profile', { context: buddyName });\n      }\n    }\n  \n    $('#customContextMenu').remove();\n    $('body').append($menu);\n  \n    $(document).one('click', function () {\n      $('#customContextMenu').remove();\n    });\n  }\n  ","// Context menu creation\nexport default function createMessageContextMenu(target, closestMessage) {\n\n  // Remove existing context menu if any\n  if (this.activeMessageContextMenu) {\n    this.activeMessageContextMenu.remove();\n    this.activeMessageContextMenu = null;\n  }\n\n  if (this.activeMessageHoverMenu) {\n    // set display: none on the hover menu\n    // TODO: needs to swap classes instead of setting styles\n    // this.activeMessageHoverMenu.style.display = 'none';\n    this.activeMessageHoverMenu = null;\n  }\n\n  // TODO: the closest .aim-hover-menu to target should have it's hover CSS logic removed\n  // aim-hover-menu:hover sets display: flex, without its display: none\n  // we need this bypassed while the context menu is open\n  const hoverMenu = target.closest('.aim-hover-menu');\n  /*\n  console.log('hoverMenu', hoverMenu);\n  if (hoverMenu) {\n    // hoverMenu.style.display = 'flex';\n  }\n  */\n\n  const contextMenu = document.createElement('div');\n  contextMenu.className = 'aim-context-menu';\n\n  const messageFrom = closestMessage.getAttribute('data-from');\n\n\n  const menuItems = [\n    { text: 'Reply', action: 'reply-message' },\n    // { text: 'Quote', action: 'quote-message' },\n    { text: 'Say Message', action: 'say-message' },\n    // { text: 'Report Message', action: 'report-message' },\n    // { text: 'Copy Message', action: 'copy-message' },\n  ];\n\n  if (messageFrom === this.bp.me || this.bp.me === 'Marak') { // TODO: admin rbac\n    menuItems.push(\n      { text: 'Edit Message', action: 'edit-message' },\n      { text: 'Delete Message', action: 'delete-message' }\n    );\n  }\n\n  menuItems.push({\n    text: 'Cast Spell',\n    action: 'cast-spell',\n  });\n\n  menuItems.forEach(item => {\n    const menuItem = document.createElement('div');\n    menuItem.className = 'aim-context-menu-item';\n    menuItem.textContent = item.text;\n    menuItem.setAttribute('data-action', item.action);\n    contextMenu.appendChild(menuItem);\n  });\n\n  // Position the context menu\n  document.body.appendChild(contextMenu);\n  const rect = target.getBoundingClientRect();\n  contextMenu.style.left = `${rect.left - 150}px`;\n  contextMenu.style.top = `${rect.bottom + window.scrollY - 20}px`;\n\n  // set data-attr to the closest message data-chat-id and data-uuid\n  const chatId = closestMessage.getAttribute('data-chat-id');\n  const uuid = closestMessage.getAttribute('data-uuid');\n  contextMenu.setAttribute('data-chat-id', chatId);\n  contextMenu.setAttribute('data-uuid', uuid);\n  contextMenu.setAttribute('data-from', messageFrom);\n\n  this.activeMessageContextMenu = contextMenu;\n  this.activeMessageHoverMenu = hoverMenu;\n  return contextMenu;\n}\n","export default function loadUserApps() {\n    // TODO: load from saved profile\n    if (this.bp.me === 'Marak') { // TODO: admin rbac checks\n        // install Admin if not already installed\n        let installedApps = this.bp.settings.apps_installed || {};\n        console.log('installedApps', installedApps);\n        if (!installedApps['admin']) {\n            this.bp.apps.desktop.addApp('admin');\n        }\n        window.arrangeDesktop();\n    }\n}","export default async function sendMessageHandler(e, chatWindow, windowType, contextName) {\n  console.log('sendMessageHandler called', e, chatWindow, windowType, contextName);\n  const message = $('.aim-input', chatWindow.content).val();\n\n  const _data = {\n    to: $('.aim-to', chatWindow.content).val(),\n    replyto: $('.aim-replyto', chatWindow.content).val(),\n    type: windowType,\n    from: this.bp.me,\n    message,\n    ctime: Date.now(),\n    text: message,\n    files: [],\n  };\n\n  console.log('sendMessageHandler _data', _data);\n\n  // TODO: move file upload code to separate function\n  // Get file previews\n  const filePreviews = $('.file-preview', chatWindow.content);\n  const files = [];\n\n  if ((!message || message.length === 0) && filePreviews.length === 0) {\n    console.log('No message to send');\n    return;\n  }\n\n  // Collect all files first\n  filePreviews.each((_, filePreview) => {\n    $('.file-content', filePreview).each((_, fileContent) => {\n      const file = this.bp.apps['file-viewer'].getFile(fileContent);\n      if (file) {\n        files.push({\n          file,\n          element: fileContent\n        });\n      }\n    });\n  });\n\n  // Create status indicators for each file\n  files.forEach(({ file, element }) => {\n    const statusDiv = $('<div>', {\n      class: 'upload-status',\n      css: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        background: 'rgba(0, 0, 0, 0.7)',\n        color: 'white',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        zIndex: 1000\n      }\n    }).text('Waiting...');\n\n    $(element).css('position', 'relative').append(statusDiv);\n  });\n\n  // Process files sequentially\n  try {\n    for (const { file, element } of files) {\n      const statusDiv = $(element).find('.upload-status');\n      statusDiv.text('Uploading...');\n\n      try {\n        console.log('is there a filepath?', file.filePath);\n        console.log('this is the file', file);\n        file.filePath = file.filePath || file.name;\n\n        // we are going to perform some basic file organization and routing here\n        // when the user uploads files via the chat window, we are going to store them\n        // in the user's directory on the CDN\n        // to help out the user, will perform mime type / file ext detection here in order to upload\n        // the file to the appropriate directory such as images, audio, videos, etc\n        let supportedImageTypesExt = ['jpeg', 'png', 'gif', 'webp', 'svg']; // same as server ( for now )\n        let supportedAudioTypesExt = ['mp3', 'wav', 'ogg', 'flac', 'aac', 'm4a'];\n        let supportedVideoTypesExt = ['mp4', 'webm', 'ogg', 'avi', 'mov', 'mkv'];\n\n        // check to see if the file.name has an extension included in the supportedImageTypesExt array\n        let fileExt = file.name.split('.').pop().toLowerCase();\n        if (supportedImageTypesExt.includes(fileExt)) {\n          file.filePath = 'images/' + file.filePath;\n        }\n        if (supportedAudioTypesExt.includes(fileExt)) {\n          file.filePath = 'audio/' + file.filePath;\n        }\n        if (supportedVideoTypesExt.includes(fileExt)) {\n          file.filePath = 'videos/' + file.filePath;\n        }\n\n        // make file.filePath url encoded\n        file.filePath = encodeURIComponent(file.filePath);\n\n        console.log('assigning file path', file.filePath);\n        let fileUrl = await this.bp.apps.client.api.uploadFile(file, (progress) => {\n          statusDiv.text('Uploading: ' + progress + '%');\n        });\n\n        // now that we have the url, just send a regular message with the url\n        // the card type should automatically be detected by the server\n        // the the body of the message will be the url with extension of image, video, etc\n        let message = {\n          to: _data.to,\n          from: _data.from,\n          type: _data.type,\n          replyto: _data.replyto,\n          text: fileUrl\n        };\n        // TODO: replyto\n        console.log(\"sending multimedia message\", message);\n        this.bp.emit('buddy::sendMessage', message);\n\n        // Fade out and remove the uploaded file preview\n        await $(element).fadeOut(300);\n        $(element).remove();\n\n      } catch (error) {\n        console.error('Error uploading file:', error);\n        statusDiv.text('Failed: ' + error.message)\n          .css('background', 'rgba(255, 0, 0, 0.7)');\n\n        // Keep failed uploads visible for 2 seconds then fade out\n        await new Promise(resolve => setTimeout(resolve, 8000));\n        await $(element).fadeOut(300);\n        $(element).remove();\n      }\n    }\n  } catch (error) {\n    console.error('Error in file upload process:', error);\n  }\n\n  // Remove empty file preview containers\n  filePreviews.each((_, container) => {\n    if ($(container).children().length === 0) {\n      $(container).remove();\n    }\n  });\n\n  $('.file-preview', chatWindow.content).remove();\n\n  // Send the regular message\n  if (windowType === 'pond') {\n    _data.type = 'pond';\n  } else {\n    _data.type = 'buddy';\n  }\n\n  // TODO: move these commands to defaultCommands in buddyscript\n  if (_data.text.startsWith('/gif')) {\n    // split text to parts on space\n    let params = _data.text.split(' ').slice(1);\n    await bp.load('image-search');\n\n    if (params.length === 0) {\n      await bp.open('image-search', { query: params[0], provider: 'giphy' });\n      // clear the input\n      $('.aim-input', chatWindow.content).val('');\n      return;\n    }\n\n    let result = await bp.apps['image-search'].fetchImages(params[0], 6, 'giphy');\n    // pick a random image from the result\n    if (result.error) {\n      console.error('Image search error:', result.error);\n      // show an error message in the chat window\n      await this.showCard({ chatWindow, cardName: 'error', context: { message: result.error } });\n\n      // $('.aim-input', chatWindow.content).val('Error fetching images: ' + result.error);\n      console.error('Error fetching images:', result.error);\n      return;\n    }\n    if (result.length === 0) {\n      console.error('No images found for query:', params[0]);\n      return;\n    }\n    let randomImage = result[Math.floor(Math.random() * result.length)];\n    console.log('Random image selected:', randomImage);\n    // _data.text = randomImage; // set the text to the image URL\n    _data.card = {\n      type: 'image',\n      url: randomImage\n    };\n  }\n\n  // TODO: merge back params to query string, just pop the first one off\n  if (_data.text.startsWith('/image')) {\n    // split text to parts on space\n    let params = _data.text.split(' ').slice(1);\n    console.log('/image params', params);\n    if (params.length === 0) {\n      // if only one parameter is provided, open the image search app\n      await bp.open('image-search', { query: params[0], provider: 'pexels' });\n      // clear the input\n      $('.aim-input', chatWindow.content).val('');\n      return;\n    }\n\n    await bp.load('image-search');\n    console.log('pppp', params)\n    let result = await bp.apps['image-search'].fetchImages(params[0], 6, 'pexels');\n    // pick a random image from the result\n    if (result.error) {\n      console.error('Image search error:', result.error);\n      // show an error message in the chat window\n      await this.showCard({ chatWindow, cardName: 'error', context: { message: result.error } });\n\n      // $('.aim-input', chatWindow.content).val('Error fetching images: ' + result.error);\n      console.error('Error fetching images:', result.error);\n      return;\n    }\n    if (result.length === 0) {\n      console.error('No images found for query:', params[0]);\n      return;\n    }\n    let randomImage = result[Math.floor(Math.random() * result.length)];\n    console.log('Random image selected:', randomImage);\n    // _data.text = randomImage; // set the text to the image URL\n    _data.card = {\n      type: 'image',\n      url: randomImage\n    };\n  }\n\n  // if this is a buddyscript command, but not a /say command\n  // say has a special meaning in the context of the chat window\n  // as it should be sent as regular text message ( should be a card later, click to repeat )\n  // TODO: needs to rebuild bs system to support local transform commands\n  if (_data.text.startsWith('/')\n    && !_data.text.startsWith('/say')\n    && !_data.text.startsWith('/roll')\n    && !_data.text.startsWith('/gif')\n    && !_data.text.startsWith('/image')\n  ) {\n    // TODO: process the card locall here\n    /*\n    _data.card = {\n     type: 'bs'\n   };\n   */\n    // runs local BS script command\n    // alert('bs card')\n\n    let bs = this.bp.apps.buddyscript.parseCommand(_data.text);\n    console.log('got back buddyscript command', bs);\n    if (bs.pipe) {\n      //if (now - messageTime < 10000) {\n      // pipeable / immediate run commands should only persist for 10 seconds\n      bs.pipe({\n      chatWindow,\n      contextName: _data.to,\n      windowType\n    });\n      // clear the input\n      $('.aim-input', chatWindow.content).val('');\n      return false;\n\n      // }\n    }\n\n    console.log(' ', bs);\n    if (bs.type === 'show-card') {\n      // show the bs card\n      // console.log('showing bs card', message, bs);\n      let cardData = bs.data;\n      this.showCard({\n        chatWindow,\n        cardName: 'bs',\n        context: {\n          ...bs,\n          context: message.to,\n          type: windowType\n        }\n      });\n    }\n    $('.aim-input', chatWindow.content).val('');\n\n    return false;\n  }\n\n  console.log(`Sending message to ${_data.to} from ${_data.from} of type ${_data.type}:`, _data.text);\n  console.log(_data.text.startsWith('\\\\'));\n  if (_data.text.startsWith('\\\\')) {\n   \n    // let bs = this.bp.apps.buddyscript.parseCommand(_data.text);\n    // console.log('backwards command', bs);\n    _data.card = {\n      type: 'bs',\n      command: _data.text.replace('\\\\', '/').trim(),\n      //commandData: bs\n    };\n\n  }\n\n\n  // TODO: check if this is a valid BS command\n  // if so, we need to construct a card to show the command\n\n  // TODO: add support for sending /bs commands with \\ instead of /\n  /*\n  if (_data.text.startsWith('\\\\')) {\n    // the command is a /foo style command\n    // extract the command from the text\n    let command = _data.text.split(' ')[0].replace('\\\\', '');\n    alert(command)\n    _data.text = 'Sent app using `\\\\' + command + '` command'; // TODO: better UX message\n    _data.card = {\n      type: 'app', // coould also be a \"bs\" card, might need distinction between app and bs commands\n      context: command\n    };\n  }\n  */\n\n  console.log('emitting message', _data);\n  this.bp.emit('buddy::sendMessage', _data);\n\n  // Clear input\n  $('.aim-input', chatWindow.content).val('');\n\n  // Hide the aim-reply-box\n  $('.aim-reply-box', chatWindow.content).remove();\n\n  // clear the replyTo input value\n  $('.aim-replyto', chatWindow.content).val('');\n  /*\n  const replyBox = target.closest('.aim-reply-box');\n  if (replyBox) {\n    replyBox.remove();\n    this.activeReplyBox = null;\n    this.bp.replyMode = false;\n    this.bp.replyData = null;\n  }\n  */\n\n  let $sendButton = $('.aim-send-btn', chatWindow.content);\n  $sendButton.css('opacity', 0.5);\n\n\n}","export default async function showCard({chatWindow, cardName, context = {}}) {\n\n  // render the help card and do not send the message\n    let cardManager = this.bp.apps.card.cardManager;\n    // console.log('cardManager.loadCard', cardData);\n    const _card = await cardManager.loadCard(cardName, context, chatWindow);\n    let container = document.createElement('div');\n    container.classList.add('cardContainer');\n    let d = await _card.render(container, chatWindow);\n    if (!chatWindow) {\n      console.error('chatWindow not found. user most likely not in the chat window');\n      return;\n    }\n\n    let aimMessagesContainer = chatWindow.content.querySelector(`.aim-messages-container`);\n\n    // find the correct aim-messages-container ( if pond / or buddy i guess )\n    // find the .aim-messages-container inside the chatWindow.content with data-context attribute\n    if (context.type === 'pond') {\n      // console.log('Inserting message into pond chat window', message);\n      aimMessagesContainer = chatWindow.content.querySelector(`.aim-messages-container[data-context=\"${context.context}\"]`);\n    }\n\n    const aimMessages = aimMessagesContainer.querySelector('.aim-messages');\n    if (!aimMessages) {\n      console.error('aim-messages not found. user most likely not in the chat window');\n      return;\n    }\n\n    // append container to the aim-messages at the end\n    aimMessages.appendChild(container);\n\n    // empty the aim-input\n    $('.aim-input', chatWindow.content).val('');\n\n    // scroll to the bottom of the chat window\n    // aimMessages.scrollTop = aimMessages.scrollHeight;\n    container.scrollIntoView({\n      behavior: 'instant'\n    });\n\n    return d;\n  }\n","export default function defaultAvatarSvg(username) {\n  // Check if avatar is already cached\n  if (this.data.avatarCache.has(username)) {\n    return this.data.avatarCache.get(username);\n  }\n\n  // Create an identicon avatar using DiceBear\n  const avatar = this.bp.vendor.dicebear.createAvatar(this.bp.vendor.dicebearAvatars, {\n    seed: username, // Username as seed for consistent avatar\n    size: 40, // Avatar size in pixels\n    backgroundColor: [\"#f0f0f0\"], // Optional: Customize background\n  });\n\n  // Convert avatar to SVG string\n  const svg = avatar.toString();\n\n  // Store in cache\n  this.data.avatarCache.set(username, svg);\n\n  return svg;\n}"],"names":["attachContextMenu","buddyElement","$","on","e","preventDefault","buddyName","target","closest","dataset","buddy","this","showContextMenu","pageX","pageY","createHoverMenu","message","hoverMenu","document","createElement","className","menuItems","from","bp","me","push","text","action","icon","forEach","item","button","setAttribute","appendChild","createTextNode","forbiddenNotes","base64","checkForLinksInMessage","match","messageText","trim","url","URL","protocol","error","isValidUrl","contentUrl","card","type","ext","split","pop","buddypond","supportedImageTypesExt","includes","toLowerCase","supportedAudioTypesExt","supportedVideoTypesExt","isValidYoutubeLink","videoId","searchParams","get","thumbnail","context","slice","isValidGithubLink","githubRegex","owner","repo","filename","console","setupInputEvents","windowType","contextName","chatWindow","$input","content","$form","$sendButton","keydown","which","shiftKey","inputValue","val","cursorPosition","selectionStart","newValue","setSelectionRange","replace","submit","activeContext","currentActiveContext","emit","to","isTyping","ctime","Date","now","css","length","setupAutocomplete","options","autocomplete","commands","Object","keys","map","command","source","search","event","ui","firstChar","value","charAt","randowFunWord","words","Math","floor","random","containsBadWord","str","lowerStr","decoded","some","fnote","RegExp","test","filter","JSON","parse","atob","ChatWindowButtonBar","constructor","inputButtons","buttons","storedOrder","settings","Array","isArray","sortButtonsByOrder","container","render","enableDragAndDrop","buttonBar","classList","add","element","createButtonElement","baseDataset","image","src","alt","title","draggable","innerText","entries","key","onclick","addButton","b","warn","newButtonElement","refreshSortable","removeButton","buttonText","index","findIndex","splice","children","el","contains","removeChild","saveButtonOrder","sortable","items","tolerance","stop","syncButtonOrder","orderedTexts","find","Boolean","set","openWindows","apps","windowManager","findWindows","app","log","window","reRenderButtons","innerHTML","order","buttonMap","fromEntries","setupChatWindowButtons","chatWindowButtons","navigator","userAgent","env","prepend","scrollToBottom","parent","retryDelay","retryCount","scrollTop","setTimeout","populateRoomList","hotPonds","roomList","sortedPonds","sort","a","connection_count","userOpenedPonds","data","activePonds","existingItems","Map","existingPondIds","Set","each","_","pondId","pond","pond_id","pondName","isUserOpened","isActive","existingItem","$scoreElement","String","$closeButton","append","remove","shouldBeActive","hasClass","toggleClass","delete","closeButton","$newItem","ensureMessagesContainer","call","client","previousItem","$item","$nextSibling","next","insertAfter","$firstItem","first","prependTo","not","removeClass","addClass","updatePondConnectedUsers","chatId","userList","existingUserIds","userId","toString","users","user","profilePicture","userItem","$textElement","$profileContainer","$newProfileElement","createProfilePictureElement","empty","html","$userItem","class","$profilePicture","$userText","$existingContainer","$img","attr","$currentImg","defaultAvatarSvg","createNewChatWindow","windowTitle","windowId","windowConfig","buildWindowConfig","createWindow","onOpen","async","_window","initializeChatWindow","onClose","removeSubscription","setupCloseButtonHandler","hide","flexShow","loggedIn","isBuddy","iconImagePath","buddylist","profileState","profile_picture","id","x","y","width","height","setupChatWindow","addSubscription","clearBuddyNewMessages","toggleMessagesContainer","renderMessages","attemptFocus","aimInput","focus","focusInputField","newMessages","receivedInstantMessage","err","re","processedMessages","messagesToRender","renderChatMessage","chatArea","userListArea","userListContext","newContainer","style","display","newUserList","targetContainer","targetUserList","show","availableContainers","firstContext","firstUserListContext","child","chatWindowTemplate","messageTemplateString","cloned","aimMessagesContainer","aimUserListContainer","joinPond","setupMessageForm","username","openChatWindow","name","setupRoomListClickHandler","sendMessageHandler","selectedContext","ev","stopPropagation","parentElement","getAttribute","remainingContainers","nextContext","roomItem","chatAreas","alert","getWindow","defaultProfileFiles","getFileType","fileName","endsWith","handleContextMenuItemClick","performAction","closeMenus","handleEditHintAction","messageContent","querySelector","messageUUID","originalMessage","messageData","uuid","cancelEdit","saveEdit","activeMessageContextMenu","activeMessageHoverMenu","activeReplyBox","closestTarget","editMessage","replyMessage","closestMessage","createMessageContextMenu","deleteMessage","open","output","removeInstantMessage","ignoreUIControlKeys","originalText","editableContainer","parentNode","insertBefore","editHint","handleKeydown","cleanupListeners","handleBlur","relatedTarget","removeEventListener","addEventListener","restoreText","removeAttribute","blur","messageElement","newMessageText","editInstantMessage","replyData","replyBox","messageSender","replyInput","messageTextInput","cancelReply","bindProfilePictureClick","parents","chatMessageElement","buddyname","Client","config","host","api","reconnectAttempts","maxReconnectAttempts","maxBackoffDelay","isIntentionallyClosed","getTime","prototype","connect","wsClient","createWebSocketClient","disconnect","closeConnection","addBuddy","cb","uri","method","endpoint","headers","Accept","qtokenid","body","stringify","controller","AbortController","timeoutId","abort","incrementPackets","perf","start","fetch","signal","then","response","clearTimeout","ok","json","errorData","Error","status","statusText","end","addPerfTime","catch","msg","apiRequest","send","setStatus","update","Promise","resolve","reject","WebSocket","buddylistWsEndpoint","handleOpen","handleMessage","parseData","profile","dtime","success","reward","handleClose","code","reason","clearInterval","updateStatusInterval","delay","min","pow","attempt","newWsClient","assign","handleError","readyState","OPEN","close","bind","BuddyList","updates","avatarCache","defaultPond","subscribedBuddies","subscribedPonds","showedHelp","logout","provider","load","newEvent","MouseEvent","bubbles","cancelable","clientX","clientY","dispatchEvent","messageControls","isHost","sendCardMessage","targetEl","align","sendButton","Event","click","defaultChatWindowButtons","enabledChatWindowButtons","desktop","buttonMeta","appList","chatButton","opened","showingIsTyping","faucetAttempts","init","appendScript","vendor","dicebear","importModule","dicebearAvatars","bindMessageContextMenu","buddyListWindow","focusWindow","restore","htmlStr","fetchHTMLFragment","appendCSS","createBuddyListWindow","createHTMLContent","registerEventHandlers","handleAuthentication","buddylistUIEvents","innerWidth","qtoken","handleAuthSuccess","loadUserApps","generateDefaultProfile","ws","flexHide","processBuddylist","renderOrUpdateBuddyInBuddyList","buddyListItem","email","emailVerified","noAlert","messageTime","play","buddyReadNewMessages","videochat","startCall","handleChatMessages","sendMessageToServer","typingIndicatorId","typingMessage","typingIndicator","appendTo","lastTypingMessage","join","sendWsMessage","rollToNumber","newBalance","portfolio","portfolioWindow","portfolioData","updateCoinRow","symbol","amount","available","price","cost","coinSendSelector","coinSendBalance","formattedValue","toLocaleString","balance","requestDefaultCoinAllocations","getLatestMessages","pondname","sendMessage","windowsToUpdate","result","messages","values","showCard","cardName","emitLocal","pondSendMessage","localToken","localStorage","getItem","verifyToken","hasPassword","tryHard","Infinity","$el","digits","d","digitContainer","inner","i","transition","transform","buddydata","buddyTimeouts","buddyListItems","querySelectorAll","existingBuddy","wasConnected","textContent","hasOwnProperty","isConnected","diff","utime","buddyListItemEl","connectedStatusIcon","isCalling","lastSeen","lastSeenDate","lastSeenString","year","month","day","hour","minute","second","hour12","firstChild","formattedDate","DateFormat","format","date","sortBuddyList","createChatMessageElement","chatMessage","img","defaultAvatar","contentWrapper","messageHeader","sender","tripcode","timestamp","messageMeta","geoFlag","location","renderGeoFlag","badgesContainer","replyIndicator","replyto","repliedMessage","repliedSender","repliedText","scrollIntoView","behavior","block","processedText","markdown","supportedColors","supportedStyles","linkExtension","level","renderer","token","href","parser","parseInline","tokens","styleExtension","tokenizer","exec","raw","modifiers","every","mod","lexer","inlineTokens","reverse","char","walkTokens","marked","use","extensions","parseMarkdownWithoutPTags","aimMessages","allMessages","inserted","existingMessage","existingId","parseInt","insertChatMessage","_chatWindow","pondNames","decodedText","entities","decodeEntities","hashPondNameRegex","matchAll","m","findAllHashPondNames","activeUsers","activeUsersInContext","removed","removedMessageEl","edited","editedMessageEl","editedMessageContent","shift","spellbook","say","startsWith","processMessages","isMobile","cardData","cardManager","_card","loadCard","renderBuddyRequests","buddyrequests","buddyrequest","pendingIncomingBuddyRequests","totalIncomingBuddyRequests","denyBuddy","approveBuddy","Number","powerlevel","popup","duration","system","totalIsConnected","totalIsOnline","ponds","win","connected","buddylistData","profileNeedsUpdate","wasOnline","_processBuddylistData","_processBuddyRequestsData","affirmations","updatePositiveAffirmation","prop","password","authBuddy","change","sendPasswordResetEmail","is","randomInviteMessages","inviteMessage","setInterval","fadeOut","complete","fadeIn","determineWindowParameters","isValidContextName","generateWindowId","existingWindow","handleExistingWindow","basePath","fileContent","blob","Blob","file","File","lastModified","filePath","uploadFile","uploadError","res","faucetUrl","randolphEndpoint","Authorization","buddyList","buddyItems","aStatus","bStatus","localeCompare","aUtime","bUtime","$menu","position","top","left","zIndex","background","border","padding","cursor","admin","openProfile","one","contextMenu","messageFrom","menuItem","rect","getBoundingClientRect","bottom","scrollY","isHoverMenuAction","installedApps","apps_installed","addApp","arrangeDesktop","_data","files","filePreviews","filePreview","getFile","statusDiv","right","color","alignItems","justifyContent","fileExt","encodeURIComponent","fileUrl","progress","params","query","fetchImages","randomImage","bs","buddyscript","parseCommand","pipe","has","svg","createAvatar","seed","size","backgroundColor"],"mappings":"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"}