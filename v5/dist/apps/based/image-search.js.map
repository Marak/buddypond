{"version":3,"file":"image-search.js","sources":["../../../apps/based/image-search/image-search.js"],"sourcesContent":["/* image-search.js - Marak Squires 2025 - BuddyPond */\nexport default class ImageSearch {\n    constructor(bp, config = {}) {\n        this.bp = bp;\n        this.context = null;\n        this.output = null;\n    }\n\n    async init() {\n\n        this.html = await this.bp.load('/v5/apps/based/image-search/image-search.html');\n        await this.bp.appendCSS('/v5/apps/based/image-search/image-search.css');\n        this.bp.searchImages = async (query, numResults = 6) => {\n            return await this.fetchImages(query, numResults);\n        };\n        this.bp.searchImage = async (query) => {\n            let imgs = await this.fetchImages(query, 10);\n            return imgs[Math.floor(Math.random() * imgs.length)];\n        };\n    }\n\n    async open(options = {}) {\n        if (options.context) {\n            this.context = options.context;\n        }\n        if (options.output) {\n            this.output = options.output;\n        }\n        // console.log(\"Opening image search window with options:\", options);\n        if (!this.imageSearchWindow) {\n\n            this.imageSearchWindow = this.bp.apps.ui.windowManager.createWindow({\n                id: 'image-search',\n                title: 'Search Images',\n                icon: 'desktop/assets/images/icons/icon_image-search_64.png',\n                x: 250,\n                y: 75,\n                width: 460,\n                height: 500,\n                minWidth: 400,\n                minHeight: 300,\n                parent: $('#desktop')[0],\n                content: this.html,\n                resizable: true,\n                minimizable: true,\n                maximizable: true,\n                closable: true,\n                focusable: true,\n                maximized: false,\n                minimized: false,\n                onClose: () => {\n                    this.imageSearchWindow = null; // Clear reference on close\n                }\n            });\n\n            // âœ… Bind search form events\n            const $form = $('#image-search-form');\n            const $input = $('#image-search-input');\n            const $results = $('#image-search-results');\n\n            $form.on('submit', async (e) => {\n                e.preventDefault();\n                const query = $input.val().trim();\n                if (!query) return;\n                $results.empty(); // Clear previous results\n                console.log(\"Searching for images with query:\", query);\n\n                // Fetch images from the API\n                const images = await this.fetchImages(query, 12, $('#image-search-provider').val());\n\n                if (images.error) {\n                    $('#image-search-error').html(`<p>${images.error}</p>`);\n                    $('#image-search-error').show();\n                    console.error(\"Image search error:\", images.error);\n                    return;\n                }\n\n                if (images.length === 0) {\n                    $('#image-search-error').html('<p>No images found.</p>');\n                    $('#image-search-error').show();\n\n                    return;\n                }\n                $('#image-search-error').hide();\n                $('#image-search-error').html('');\n\n                // $('.pexels-logo', this.imageSearchWindow.content).hide();\n                \n                images.forEach((url) => {\n                    const $img = $(`<img src=\"${url}\" style=\"width: 100%; cursor: pointer; border-radius: 4px;\" />`);\n                    $img.on('click', () => {\n                        if (this.selectedImages.has(url)) {\n                            this.selectedImages.delete(url);\n                            // $img.css('border', 'none');\n                        } else {\n                            //$img.css('border', '3px solid #0f0');\n                            this.selectedImages.add(url);\n                            sendImageToChat.call(this);\n\n\n                        }\n                    });\n                    $results.append($img);\n                });\n\n            });\n\n            this.selectedImages = new Set(); // inside constructor or open()\n\n            async function sendImageToChat() {\n\n                let windowIdPrefix = this.output === 'pond' ? 'pond_message_-' : 'buddy_message_-';\n\n                let windowId = windowIdPrefix + this.context;\n                // console.log('opening chat window ', windowId)\n\n                if (this.output === 'pond') {\n                    windowId = 'pond_message_main';\n                }\n\n                let chatWindow = this.bp.apps.ui.windowManager.getWindow(windowId);\n\n                if (!chatWindow) {\n                    console.error(`No chat window found with ID: ${windowId}`);\n                    return;\n                }\n                console.log(`context: ${this.context}, type: ${this.type}`);\n                console.log('chatWindow', chatWindow);\n                const files = [];\n\n                for (let url of this.selectedImages) {\n                    const response = await fetch(url);\n                    const blob = await response.blob();\n                    let filename = url.split('/').pop().split('?')[0]; // crude filename\n                    // create new file name as timestamp + original filename\n                    filename = `${Date.now()}_${filename}`;\n                    const file = new File([blob], filename, { type: blob.type });\n                    files.push(file);\n                    // remove the image from the selectedImages set\n                    this.selectedImages.delete(url);\n                }\n\n                if (files.length === 0) return;\n\n                // Simulate a drop event to reuse the drop handler\n                const dt = new DataTransfer();\n                files.forEach(file => dt.items.add(file));\n\n                this.bp.apps.droparea.dropTarget = chatWindow.container; // set the drop target to the active window\n                const event = new DragEvent('drop', {\n                    dataTransfer: dt,\n                    bubbles: true,\n                    cancelable: true,\n                    // target: activeWindow // not working?\n                });\n\n                chatWindow.container.dispatchEvent(event);\n                // focus the active chat window\n                if (chatWindow) {\n\n                    let id = $(chatWindow).attr('id');\n                    this.bp.apps.ui.windowManager.focusWindow(id);\n\n\n                    //  activeWindow.focus();\n                } else {\n                    console.warn(\"No active chat window found to send images to.\");\n                }\n\n            }\n        }\n\n        if (options.provider) {\n            $('#image-search-provider', this.imageSearchWindow.content).val(options.provider);\n\n            if (options.provider === 'pexels') {\n                $('.pexels-logo', this.imageSearchWindow.content).flexShow();\n                $('.giphy-logo', this.imageSearchWindow.content).hide();\n\n            } else {\n                $('.pexels-logo', this.imageSearchWindow.content).hide();\n                $('.giphy-logo', this.imageSearchWindow.content).flexShow();\n            }\n        }\n\n        // focus the input field\n        $('#image-search-input', this.imageSearchWindow.content).focus();\n\n        $('#image-search-provider', this.imageSearchWindow.content).on('change', (e) => {\n            // toggle the logos\n            const provider = e.target.value;\n            if (provider === 'pexels') {\n                $('.pexels-logo', this.imageSearchWindow.content).show();\n                $('.giphy-logo', this.imageSearchWindow.content).hide();\n            } else {\n                $('.pexels-logo', this.imageSearchWindow.content).hide();\n                $('.giphy-logo', this.imageSearchWindow.content).show();\n            }\n\n            // if search bar is not empty, re-fetch images\n            const query = $('#image-search-input', this.imageSearchWindow.content).val().trim();\n            if (query) {\n                $('#image-search-form', this.imageSearchWindow.content).trigger('submit');\n            }\n        });\n        return this.imageSearchWindow;\n    }\n\n    async fetchImages(query, numResults = 12, provider = 'pexels') {\n        try {\n            const _provider = provider || $('#image-search-provider').val() || 'google';\n            const url = `${buddypond.imageSearchEndpoint}/image-search?q=${encodeURIComponent(query)}&num=${numResults}&provider=${_provider}`;\n            const response = await fetch(url, {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${this.bp.qtokenid}`, // Use your actual token\n                    'X-Me': this.bp.me // Use your actual user identifier\n                }\n            });\n            if (!response.ok) {\n                throw new Error(`Image search failed: ${response.status} ${response.statusText}`);\n            }\n            const data = await response.json();\n            return data;\n        } catch (err) {\n            console.warn(\"ImageSearch error:\", err);\n            return [];\n        }\n    }\n\n}\n"],"names":["ImageSearch","constructor","bp","config","this","context","output","init","html","load","appendCSS","searchImages","async","query","numResults","fetchImages","searchImage","imgs","Math","floor","random","length","open","options","imageSearchWindow","apps","ui","windowManager","createWindow","id","title","icon","x","y","width","height","minWidth","minHeight","parent","$","content","resizable","minimizable","maximizable","closable","focusable","maximized","minimized","onClose","$form","$input","$results","sendImageToChat","windowId","chatWindow","getWindow","console","error","log","type","files","url","selectedImages","response","fetch","blob","filename","split","pop","Date","now","file","File","push","delete","dt","DataTransfer","forEach","items","add","droparea","dropTarget","container","event","DragEvent","dataTransfer","bubbles","cancelable","dispatchEvent","attr","focusWindow","warn","on","e","preventDefault","val","trim","empty","images","show","hide","$img","has","call","append","Set","provider","flexShow","focus","target","value","trigger","_provider","buddypond","imageSearchEndpoint","encodeURIComponent","headers","Authorization","qtokenid","me","ok","Error","status","statusText","json","err"],"mappings":"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"}