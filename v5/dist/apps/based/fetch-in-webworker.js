class e{constructor(e="workerFetchWithProgress.js"){this.worker=new Worker(e),this.requests={},this.worker.onmessage=e=>{const{type:s,id:r,progress:t,data:o,error:i}=e.data,c=this.requests[r];if(c)switch(s){case"progress":c.onProgress&&c.onProgress(t);break;case"completed":c.resolve&&c.resolve(e.data),delete this.requests[r];break;case"error":c.reject&&c.reject(i),delete this.requests[r]}}}fetch(e,s={},r){const t=Math.random().toString(36).substr(2,9);return this.requests[t]={onProgress:r,id:t},new Promise(((r,o)=>{this.requests[t].resolve=r,this.requests[t].reject=o,this.worker.postMessage({url:e,options:s,id:t})}))}}class s{constructor(e){return this.bp=e,this}async init(){}async fetchWithProgress(s,r={},t){return(new e).fetch(s,r,t)}}export{s as default};
//# sourceMappingURL=fetch-in-webworker.js.map
