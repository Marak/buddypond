class e{constructor(e,t={}){this.bp=e}init(){this.bp.parseHTML=this.parseHTML.bind(this)}defineCustomElements(){Array.from(document.querySelectorAll("*")).filter((e=>e.tagName.toLowerCase().startsWith("bp-"))).forEach((e=>{const t=e.tagName.toLowerCase();if(!customElements.get(t)){class e extends HTMLElement{constructor(){super()}}customElements.define(t,e)}}))}parseCustomDomElements(){console.log("Parsing custom Buddypond DOM elements...");Array.from(document.querySelectorAll("*")).filter((e=>e.tagName.toLowerCase().startsWith("bp-"))).forEach((async e=>{const t=e.tagName.toLowerCase().replace("bp-",""),s=e.getAttribute("context"),o=e.getAttribute("type"),a=e.hasAttribute("open");t&&(await bp.load(t),bp.apps[t]&&bp.apps[t].render,bp.apps[t]&&a&&bp.apps[t].open&&bp.open(t,{context:s,type:o}))})),console.log("All Buddypond apps initialized.")}displayOriginalHTML(){const e=document.createElement("pre");e.textContent=document.body.innerHTML,document.body.appendChild(e)}parseHTML(e=document){this.defineCustomElements(),this.parseCustomDomElements(),this.displayOriginalHTML&&this.displayOriginalHTML()}}export{e as default};
//# sourceMappingURL=markup.js.map
