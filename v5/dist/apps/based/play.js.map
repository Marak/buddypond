{"version":3,"file":"play.js","sources":["../../../apps/based/play/play.js"],"sourcesContent":["// Buddy Pond - Play.js - Marak Squires 2024\nexport default class Play {\n    // Map to track playing files and avoid concurrent plays\n    static playing = new Map();\n\n    constructor(bp, options = {}) {\n        this.bp = bp;\n        this.settings = { ...options };\n    }\n\n    async init () {\n        this.bp.play = this.play.bind(this);\n    }\n\n    async play(mediaPath, {\n        tryHard = 0,\n        repeat = false,\n        duration = 999999, onEnd = () => {}, onError = () => {} } = {}) {\n        if (this.bp.settings.audio_enabled === false) {\n            return;\n        }\n    \n        // Check if media is already playing and if retries are not allowed\n        if (Play.playing.get(mediaPath) && !tryHard) {\n            // console.log(`Warning: Already playing ${mediaPath}. Will not play the same media file concurrently.`);\n            return;\n        }\n    \n        // Mark the media as playing\n        Play.playing.set(mediaPath, true);\n    \n        const media = new Audio(mediaPath);\n        let stopTimeout;\n        let forceStop = false;\n    \n        const cleanup = () => {\n            clearTimeout(stopTimeout);\n            media.pause();\n            media.currentTime = 0;\n            media.loop = false;\n            forceStop = true;\n            Play.playing.delete(mediaPath);\n        };\n    \n        const stopAtDuration = () => {\n            stopTimeout = setTimeout(() => {\n                cleanup();\n                onEnd();\n            }, duration);\n        };\n    \n        media.addEventListener('ended', () => {\n            if (!repeat || forceStop) {\n                cleanup();\n                onEnd();\n            }\n            // If repeating, do nothing â€” allow media.loop to handle replay\n        });\n    \n        media.addEventListener('error', (err) => {\n            cleanup();\n            onError(err);\n        });\n    \n        try {\n            // Handle repeat logic\n            if (repeat) {\n                media.loop = true;\n            }\n    \n            await media.play();\n            stopAtDuration();\n        } catch (error) {\n            cleanup();\n            onError(error);\n        }\n    }\n    \n    \n}\n"],"names":["Play","static","Map","constructor","bp","options","this","settings","init","play","bind","mediaPath","tryHard","repeat","duration","onEnd","onError","audio_enabled","playing","get","set","media","Audio","stopTimeout","forceStop","cleanup","clearTimeout","pause","currentTime","loop","delete","addEventListener","err","setTimeout","error"],"mappings":"AACe,MAAMA,EAEjBC,eAAiB,IAAIC,IAErB,WAAAC,CAAYC,EAAIC,EAAU,IACtBC,KAAKF,GAAKA,EACVE,KAAKC,SAAW,IAAKF,EAC7B,CAEI,UAAMG,GACFF,KAAKF,GAAGK,KAAOH,KAAKG,KAAKC,KAAKJ,KACtC,CAEI,UAAMG,CAAKE,GAAWC,QAClBA,EAAU,EAACC,OACXA,GAAS,EAAKC,SACdA,EAAW,OAAMC,MAAEA,EAAQ,OAAQC,QAAEA,EAAU,QAAa,IAC5D,IAAuC,IAAnCV,KAAKF,GAAGG,SAASU,cACjB,OAIJ,GAAIjB,EAAKkB,QAAQC,IAAIR,KAAeC,EAEhC,OAIJZ,EAAKkB,QAAQE,IAAIT,GAAW,GAE5B,MAAMU,EAAQ,IAAIC,MAAMX,GACxB,IAAIY,EACAC,GAAY,EAEhB,MAAMC,EAAU,KACZC,aAAaH,GACbF,EAAMM,QACNN,EAAMO,YAAc,EACpBP,EAAMQ,MAAO,EACbL,GAAY,EACZxB,EAAKkB,QAAQY,OAAOnB,IAUxBU,EAAMU,iBAAiB,SAAS,KACvBlB,IAAUW,IACXC,IACAV,QAKRM,EAAMU,iBAAiB,SAAUC,IAC7BP,IACAT,EAAQgB,MAGZ,IAEQnB,IACAQ,EAAMQ,MAAO,SAGXR,EAAMZ,OAzBZc,EAAcU,YAAW,KACrBR,IACAV,MACDD,EAwBN,CAAC,MAAOoB,GACLT,IACAT,EAAQkB,EACpB,CACA"}