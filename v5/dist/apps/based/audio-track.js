function e(e){const t=document.createElement("div");t.className="audio-track";const i=document.createElement("p");i.textContent=e.metadata.fileName||"No file loaded",t.appendChild(i);const s=document.createElement("button");return s.textContent="Play",s.addEventListener("click",(()=>{console.log("playPauseButton clicked",e.isPlaying()),e.isPlaying()?(e.pause(),s.textContent="Play"):(e.play(),s.textContent="Pause")})),t.appendChild(s),t}class t{constructor(e="workerFetchWithProgress.js"){this.worker=new Worker(e),this.requests={},this.worker.onmessage=e=>{const{type:t,id:i,progress:s,data:o,error:r}=e.data,a=this.requests[i];if(a)switch(t){case"progress":a.onProgress&&a.onProgress(s);break;case"completed":a.resolve&&a.resolve(e.data),delete this.requests[i];break;case"error":a.reject&&a.reject(r),delete this.requests[i]}}}fetch(e,t={},i){const s=Math.random().toString(36).substr(2,9);return this.requests[s]={onProgress:i,id:s},new Promise(((i,o)=>{this.requests[s].resolve=i,this.requests[s].reject=o,this.worker.postMessage({url:e,options:t,id:s})}))}}class i{constructor(e){return this.bp=e,this}async init(){}async fetchWithProgress(e,i={},s){return(new t).fetch(e,i,s)}}class s{constructor(e){this.bp=e,this.fetchInWebWorker=new i}async loadAudioData(e,t={},i=()=>{}){const s=await this.fetchInWebWorker.fetchWithProgress(e,{},i);return{arrayBuffer:s.arrayBufferResponse,blob:s.blobResponse}}}class o{constructor(t={}){return this.id=t.id||`track-${Math.random().toString(36).substr(2,9)}`,this.metadata=t||{},this.metadata.cuePoints=this.metadata.cuePoints||[],this.provider=t.provider||null,this.source=null,this.audioNodes=new Map,this.element=null,this.renderers=new Map,this.currentRenderer="default",this.isLoaded=!1,this.isRendered=!1,function(e){e.prototype.load=async function(e={}){if(this.options?.noFile)return this;e.url&&(this.metadata.url=e.url);try{this.provider||(this.provider=new s(this.bp)),console.log("Loading audio track:",this.metadata.url,this);const{arrayBuffer:t,blob:i}=await this.provider.loadAudioData(this.metadata.url,e,(e=>this.loadingProgress(e)));return await this._processAudioData(t,i),await this._setupMediaSource(i)}catch(e){throw console.error(`Failed to load track: ${this.metadata.url}`,e),e}},e.prototype._setupMediaSource=async function(e){return new Promise((async(t,i)=>{const s=/iPad|iPhone|iPod/.test(navigator.userAgent)&&!window.MSStream;if(s)this.audioElement.src=URL.createObjectURL(e),this.audioElement.addEventListener("canplaythrough",(()=>{this.metadata.duration=this.audioElement.duration,o()})),this.audioElement.addEventListener("error",r);else{const t=new MediaSource;this.audioElement.src=URL.createObjectURL(t),t.addEventListener("sourceopen",(async()=>{try{const i=t.addSourceBuffer("audio/mpeg"),s=await e.arrayBuffer();this.metadata.duration=this.audioBuffer.duration,i.addEventListener("updateend",o),i.addEventListener("error",r),i.appendBuffer(s)}catch(e){console.error("Error with MediaSource or SourceBuffer:",e),r(e)}}))}const o=()=>{this.isLoaded||(this.isLoaded=!0,console.log("Track loaded:",this.metadata.url),t(this))},r=e=>{console.error("Audio element error:",e),i(`Failed to load track: ${this.metadata.url}`)};(s||this.url&&this.url.endsWith(".wav"))&&this.audioElement.load()}))},e.prototype._initializeAudioElements=function(){this.audioElement=new Audio,this.audioElement.crossOrigin="anonymous",this.audioElement.preservesPitch=!0},e.prototype._processAudioData=async function(e,t){this.audioData=e,this.blob=t,console.log("Audio data received:",this.audioData),this.audioBuffer=await this.audioContext.decodeAudioData(e),this.metadata.fileSize=this.audioBuffer.length,function(e){const t=[];for(let i=0;i<e.numberOfChannels;i++)t.push(e.getChannelData(i))}(this.audioBuffer)},e.prototype._decodeAudioWithFFmpeg=async function(e){let t=new FFmpeg;return await t.load(),console.log("✅ FFmpeg WASM loaded successfully"),new Promise((async(i,s)=>{try{console.log("⏳ Decoding audio with FFmpeg...");const s="input.mp3",o="output.raw";await t.writeFile(s,await fetchFile(e)),await t.exec(["-i",s,"-f","f32le","-acodec","pcm_f32le","-ar","44100","-ac","2",o]);const r=await t.readFile(o),a=44100,n=2,d=r.length/(4*n),u=(new AudioContext).createBuffer(n,d,a),h=new Float32Array(r.buffer);for(let e=0;e<n;e++){const t=new Float32Array(d);for(let i=0;i<d;i++)t[i]=h[i*n+e];u.copyToChannel(t,e)}console.log("✅ Audio decoded successfully"),i(u)}catch(e){console.log(e),s(new Error(`❌ FFmpeg decoding failed: ${e.message}`))}}))},e.prototype.loadingProgress=function(e){this.emit("audio-track::loading::progress",e)},e.prototype.loadingComplete=function(e){this.emit("audio-track::loading::complete",e)}}(o),this.eventListeners={},this.fx={},this._initializeAudioElements(),this.audioContext=new(window.AudioContext||window.webkitAudioContext),this.masterBus=this.audioContext.createGain(),this.distributionNode=this.audioContext.createGain(),this.source=this.audioContext.createMediaElementSource(this.audioElement),this.source.disconnect(),this.source.connect(this.masterBus),this.masterBus.connect(this.distributionNode),this.distributionNode.connect(this.audioContext.destination),this.distributionNode.gain.value=1,this.analyzers=new Map,this.setRenderer("default",e),this}async unload(){console.log("Unloading track:",this),this.metadata={},this.waveform&&this.waveform.destroy(),this.isLoaded&&(this.audioNodes.clear(),this.source&&this.source.disconnect(),this.audioElement&&(this.audioElement.pause(),this.audioElement.src=""),this.audioContext&&this.audioContext.close(),this.audioContext=null,this.audioBuffer=null,this.isLoaded=!1,console.log("track should be fully unloaded now going to rebind with empty data",this),this.databind())}async remove(){await this.unload(),await this.unrender()}setRenderer(e,t){this.renderers.set(e,t),this.currentRenderer=e}databind(){const e=this.renderers.get(this.currentRenderer);if(!e)throw new Error(`No renderer found for name: ${this.currentRenderer}`);const t=e.databind;if(!t)throw new Error(`No databind function found for renderer: ${this.currentRenderer}`);return t(this)}render(){if(this.isRendered)return this.element;const e=this.renderers.get(this.currentRenderer),t=e.render;if(e.databind,console.log("using renderer:",this.currentRenderer,e),!e)throw new Error(`No renderer found for name: ${this.currentRenderer}`);return this.element=t(this),this.isRendered=!0,this.element}unrender(){this.isRendered&&this.element&&(this.element.remove(),this.element=null,this.isRendered=!1)}setData(e){this.metadata={...this.metadata,...e},this.isRendered&&this._updateRenderedData(e)}switchLayout(e){if(!this.renderers.has(e))throw new Error(`No renderer found for name: ${e}`);return this.unrender(),this.currentRenderer=e,this.render()}addNode(e,t){if(console.log("Adding node:",e,t,this),!this.isLoaded||!this.source)throw new Error("Cannot add node: track not loaded");this.audioNodes.has(e)&&this.removeNode(e),this.audioNodes.set(e,t),this._reconnectAudioGraph()}removeNode(e){if(!this.audioNodes.has(e))return;this.audioNodes.get(e).disconnect(),this.audioNodes.delete(e),this._reconnectAudioGraph()}addAnalyzer(e,t){this.analyzers.has(e)&&this.removeAnalyzer(e),this.analyzers.set(e,t),this.distributionNode.connect(t)}removeAnalyzer(e){this.analyzers.has(e)&&(this.distributionNode.disconnect(this.analyzers.get(e)),this.analyzers.delete(e))}async _initializeAudio(){}async _loadAudioFile(e){}_reconnectAudioGraph(){let e=this.masterBus;this.audioNodes.forEach((t=>{e.disconnect(),e.connect(t),e=t})),e.disconnect(),e.connect(this.distributionNode),this.distributionNode.connect(this.audioContext.destination)}_updateRenderedData(e){console.log("Updating rendered data:",e)}pause(){this.audioElement.paused||this.audioElement.pause()}play(){this.audioElement.paused&&(console.log("Playing audio track"),this.audioElement.play())}playPause(){this.audioElement.paused?this.play():this.pause()}setTime(e){this.audioElement.currentTime=e}cueTo(e){let t=(this.metadata.cuePoints[e-1]??0).time;console.log("CUE TO TIME",t),this.setTime(t)}setCuePoint(e,t){let i={time:t,name:`Cue ${e}`,type:"cue"};this.metadata.cuePoints[e-1]=i}isPlaying(){return!this.audioElement.paused}emit(e,t){this.eventListeners[e]&&this.eventListeners[e].forEach((e=>e(t)))}on(e,t){this.eventListeners[e]||(this.eventListeners[e]=[]),this.eventListeners[e].push(t)}toggleMute(){this.audioElement.muted=!this.audioElement.muted}toggleKeyLock(){this.audioElement.preservesPitch=!this.audioElement.preservesPitch}mute(){this.audioElement.muted=!0,this.transport.volumeSliderIcon&&(this.transport.volumeSliderIcon.classList.remove("headphones-active"),this.transport.volumeSliderIcon.classList.add("headphones-inactive"))}unmute(){this.audioElement.muted=!1,this.transport.volumeSliderIcon&&(this.transport.volumeSliderIcon.classList.remove("headphones-inactive"),this.transport.volumeSliderIcon.classList.add("headphones-active"))}setVolume(e){this.audioElement.volume=e}getTitle(){let e=this.metadata,t=e.title||e.fileName;return console.log("attempting to get track title",e,t),t?(e.title?(t=e.title,e.artist&&(t=`${e.artist} - ${e.title}`)):e.artist&&(t=e.artist),t=t.replace("_(mp3.pm)",""),t=t.replace(".mp3",""),t=t.split("_").join(" "),console.log("GOT TRACK TITLE",t),t):"loading track..."}}o.prototype.getAudioBuffer=async function(){this.audioBuffer=await this.audioContext.decodeAudioData(audioData)},o.prototype.setBPM=function(e){e=Number(e),console.log("AAAA track.setBPM",this.id,e);let t=this.waveform;if(this){this.currentBPM=e;let i=e/(this.bpm||120);i=Math.round(100*i)/100,t.setPlaybackRate(i),this.audioElement.playbackRate=i,this.detailedContainer.querySelector(".current-bpm"),e.toFixed(2),this.detailedContainer.querySelector(".bpm-percentage")}};class r{constructor(e){this.bp=e,this.AudioTrack=o,this.tracks=[]}async init(){console.log("AudioTrack init")}open(e){console.log("AudioTrack open",e)}createAudioTrack(e){let t=new this.AudioTrack(e);return this.tracks.push(t),t}}export{r as default};
//# sourceMappingURL=audio-track.js.map
