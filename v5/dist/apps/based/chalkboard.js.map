{"version":3,"file":"chalkboard.js","sources":["../../../apps/based/chalkboard/chalkboard.js"],"sourcesContent":["export default class Chalkboard {\n    constructor(bp, options = {}) {\n        this.bp = bp;\n        this.options = options;\n        return this;\n    }\n\n    async init() {\n        return 'loaded Chalkbord';\n    }\n\n    async open(options = {}) {\n        this.output = options.output;\n        this.context = options.context;\n        if (!this.chalkWindow) {\n            this.chalkWindow = this.bp.window(this.window(options));\n\n            // creates a new BroadcastChannel for the desktop\n            this.bc = new BroadcastChannel(\"buddypond-desktop\");\n            // Listen for messages on the desktop channel\n            this.bc.onmessage = async (event) => {\n                // console.log('BroadcastChannel message received:', event.data);\n                let app = event.data.app;\n\n                // console.log(`received message from app: ${app}`);\n\n                if (event.data.app === 'chalkboard' && event.data.action === 'save') {\n                    // console.log('BroadcastChannel save action received', event.data);\n\n                    let dataURL = event.data.image; // Remark: this was sent over a broadcast channel\n                    // console.log('Data URL received:', dataURL);\n                    let fileName = event.data.fileName || 'untitled.png';\n                    let filePath = `paints/${fileName}`;\n\n                    function srcToFile(src, fileName, mimeType) {\n                        return (fetch(src)\n                            .then(function (res) { return res.arrayBuffer(); })\n                            .then(function (buf) { return new File([buf], fileName, { type: mimeType }); })\n                        );\n                    }\n\n                    srcToFile(dataURL, fileName, 'image/png').then(async (file) => {\n\n                        // Create File from Blob\n                        //const file = new File([blob], fileName, { type: blob.type });\n                        file.filePath = filePath;\n                        console.log('File created:', file, file instanceof File);\n\n                        // Test image display\n                        const testImage = document.createElement('img');\n\n                        // if we have no context or output, save the file locally\n                        if (!this.context || !this.output) {\n                            console.warn('No context or output specified, saving file locally.');\n                            // Save the file locally\n                            let link = document.createElement('a');\n                            link.href = URL.createObjectURL(file);\n                            link.download = fileName;\n                            document.body.appendChild(link);\n                            link.click();\n                            document.body.removeChild(link);\n                            return;\n                        }\n\n                        let onProgress = (progress) => {\n                            console.log(`Upload progress: ${progress}%`);\n                        };\n\n                        // âœ… Upload via buddypond API\n                        try {\n                            let resultingUrl = await buddypond.uploadFile(file, onProgress);\n                            console.log('Upload successful:', resultingUrl);\n                            let message = {\n                                to: this.context,\n                                from: bp.me,\n                                type: this.output,\n                                text: resultingUrl\n                            };\n                            console.log(\"sending multimedia message\", message);\n                            bp.emit('buddy::sendMessage', message);\n                            // now take this image and send it to the chat window as url message\n                        } catch (err) {\n                            console.error('Upload failed:', err);\n                        }\n                    });\n\n                }\n            };\n\n        }\n        return this.chalkWindow;\n    }\n\n    window(options = {}) {\n        return {\n            id: 'chalkboard',\n            title: 'Chalkboard',\n            icon: 'desktop/assets/images/icons/icon_chalkboard_64.png',\n            x: 250,\n            y: 75,\n            width: 600, // Increased width for two-column layout\n            height: 400,\n            minWidth: 400,\n            minHeight: 300,\n            parent: $('#desktop')[0],\n            iframeContent: '/v5/apps/based/chalkboard/vendor/chalkboard.html',\n            resizable: true,\n            minimizable: true,\n            maximizable: true,\n            closable: true,\n            focusable: true,\n            maximized: false,\n            minimized: false,\n            onClose: () => {\n                // this.bp.apps.ui.windowManager.destroyWindow('motd');\n                this.chalkWindow = null; // Clear the reference to the window\n                this.bc.close(); // Close the BroadcastChannel\n            }\n        }\n    }\n}"],"names":["Chalkboard","constructor","bp","options","this","init","open","output","context","chalkWindow","window","bc","BroadcastChannel","onmessage","async","event","data","app","action","dataURL","image","fileName","filePath","srcToFile","src","mimeType","fetch","then","res","arrayBuffer","buf","File","type","file","console","log","document","createElement","warn","link","href","URL","createObjectURL","download","body","appendChild","click","removeChild","onProgress","progress","resultingUrl","buddypond","uploadFile","message","to","from","me","text","emit","err","error","id","title","icon","x","y","width","height","minWidth","minHeight","parent","$","iframeContent","resizable","minimizable","maximizable","closable","focusable","maximized","minimized","onClose","close"],"mappings":"AAAe,MAAMA,EACjB,WAAAC,CAAYC,EAAIC,EAAU,IAGtB,OAFAC,KAAKF,GAAKA,EACVE,KAAKD,QAAUA,EACRC,IACf,CAEI,UAAMC,GACF,MAAO,kBACf,CAEI,UAAMC,CAAKH,EAAU,IA+EjB,OA9EAC,KAAKG,OAASJ,EAAQI,OACtBH,KAAKI,QAAUL,EAAQK,QAClBJ,KAAKK,cACNL,KAAKK,YAAcL,KAAKF,GAAGQ,OAAON,KAAKM,OAAOP,IAG9CC,KAAKO,GAAK,IAAIC,iBAAiB,qBAE/BR,KAAKO,GAAGE,UAAYC,MAAOC,IAMvB,GAJUA,EAAMC,KAAKC,IAIE,eAAnBF,EAAMC,KAAKC,KAA8C,SAAtBF,EAAMC,KAAKE,OAAmB,CAGjE,IAAIC,EAAUJ,EAAMC,KAAKI,MAErBC,EAAWN,EAAMC,KAAKK,UAAY,eAClCC,EAAW,UAAUD,IAEzB,SAASE,EAAUC,EAAKH,EAAUI,GAC9B,OAAQC,MAAMF,GACTG,MAAK,SAAUC,GAAO,OAAOA,EAAIC,aAAgB,IACjDF,MAAK,SAAUG,GAAO,OAAO,IAAIC,KAAK,CAACD,GAAMT,EAAU,CAAEW,KAAMP,GAAc,GAE1G,CAEoBF,EAAUJ,EAASE,EAAU,aAAaM,MAAKb,MAAOmB,IAWlD,GAPAA,EAAKX,SAAWA,EAChBY,QAAQC,IAAI,gBAAiBF,EAAMA,aAAgBF,MAGjCK,SAASC,cAAc,QAGpCjC,KAAKI,UAAYJ,KAAKG,OAAQ,CAC/B2B,QAAQI,KAAK,wDAEb,IAAIC,EAAOH,SAASC,cAAc,KAMlC,OALAE,EAAKC,KAAOC,IAAIC,gBAAgBT,GAChCM,EAAKI,SAAWtB,EAChBe,SAASQ,KAAKC,YAAYN,GAC1BA,EAAKO,aACLV,SAASQ,KAAKG,YAAYR,EAEtD,CAEwB,IAAIS,EAAcC,IACdf,QAAQC,IAAI,oBAAoBc,OAIpC,IACI,IAAIC,QAAqBC,UAAUC,WAAWnB,EAAMe,GACpDd,QAAQC,IAAI,qBAAsBe,GAClC,IAAIG,EAAU,CACVC,GAAIlD,KAAKI,QACT+C,KAAMrD,GAAGsD,GACTxB,KAAM5B,KAAKG,OACXkD,KAAMP,GAEVhB,QAAQC,IAAI,6BAA8BkB,GAC1CnD,GAAGwD,KAAK,qBAAsBL,EAEjC,CAAC,MAAOM,GACLzB,QAAQ0B,MAAM,iBAAkBD,EAC5D,IAGA,IAIevD,KAAKK,WACpB,CAEI,MAAAC,CAAOP,EAAU,IACb,MAAO,CACH0D,GAAI,aACJC,MAAO,aACPC,KAAM,qDACNC,EAAG,IACHC,EAAG,GACHC,MAAO,IACPC,OAAQ,IACRC,SAAU,IACVC,UAAW,IACXC,OAAQC,EAAE,YAAY,GACtBC,cAAe,mDACfC,WAAW,EACXC,aAAa,EACbC,aAAa,EACbC,UAAU,EACVC,WAAW,EACXC,WAAW,EACXC,WAAW,EACXC,QAAS,KAEL5E,KAAKK,YAAc,KACnBL,KAAKO,GAAGsE,SAGxB"}