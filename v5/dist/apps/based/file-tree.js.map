{"version":3,"file":"file-tree.js","sources":["../../../apps/based/file-tree/file-tree.js"],"sourcesContent":["// FileTree.js\nexport default class FileTree {\n    constructor(bp, options = {}) {\n        this.bp = bp;\n    }\n\n    async init () {\n        await this.bp.appendCSS('/v5/apps/based/file-tree/file-tree.css');\n\n    }\n\n    create(container, options) {\n\n        this.options = {\n            onFileSelect: options.onFileSelect || ((file) => console.log('File selected:', file)),\n            onFolderToggle: options.onFolderToggle || ((folder, isExpanded) => console.log('Folder toggled:', folder, isExpanded)),\n            indent: options.indent || 20,\n        };    \n        \n\n        this.container = typeof container === 'string' ? document.querySelector(container) : container;\n     \n        \n        // Initialize root container\n        this.treeRoot = document.createElement('div');\n        this.treeRoot.className = 'bp-filetree-container';\n        this.container.appendChild(this.treeRoot);\n\n        // Bind methods\n        this.handleClick = this.handleClick.bind(this);\n        this.renderItem = this.renderItem.bind(this);\n        \n        // Add event listener\n        this.treeRoot.addEventListener('click', this.handleClick);\n        return this;\n\n    }\n\n    handleClick(event) {\n        $('.bp-file-explorer-drag-upload').hide();\n\n        const target = event.target.closest('.bp-filetree-item');\n        if (!target) return;\n\n        const isFolder = target.dataset.type === 'folder';\n        const path = target.dataset.path;\n\n        if (isFolder) {\n            const isExpanded = target.classList.toggle('bp-filetree-expanded');\n            const childContainer = target.nextElementSibling;\n            childContainer.style.display = isExpanded ? 'block' : 'none';\n            this.options.onFolderToggle(path, isExpanded);\n        } else {\n            this.options.onFileSelect(path, target);\n        }\n\n    }\n\n    getFileIcon(filename) {\n        // Basic file type detection based on extension\n        const ext = filename.split('.').pop().toLowerCase();\n        const iconMap = {\n            js: '📄',\n            json: '📋',\n            html: '🌐',\n            css: '🎨',\n            png: '🖼️',\n            jpg: '🖼️',\n            pdf: '📑',\n            default: '📄'\n        };\n        return iconMap[ext] || iconMap.default;\n    }\n\n    renderItem(item, level = 0) {\n        const itemContainer = document.createElement('div');\n        itemContainer.className = 'bp-filetree-item-container';\n        \n        const itemElement = document.createElement('div');\n        itemElement.className = 'bp-filetree-item';\n        itemElement.dataset.path = item.path;\n        itemElement.dataset.type = item.type;\n        itemElement.style.paddingLeft = `${level * this.options.indent}px`;\n\n        // Create icon element\n        const icon = document.createElement('span');\n        icon.className = 'bp-filetree-icon';\n        icon.textContent = item.type === 'folder' ? '📁' : this.getFileIcon(item.name);\n        \n        // Create name element\n        const name = document.createElement('span');\n        name.className = 'bp-filetree-name';\n        name.textContent = item.name;\n\n        itemElement.appendChild(icon);\n        itemElement.appendChild(name);\n        itemContainer.appendChild(itemElement);\n\n        if (item.type === 'folder' && Array.isArray(item.children)) {\n            const childContainer = document.createElement('div');\n            childContainer.className = 'bp-filetree-children';\n            childContainer.style.display = 'none';\n            \n            item.children.forEach(child => {\n                childContainer.appendChild(this.renderItem(child, level + 1));\n            });\n            \n            itemContainer.appendChild(childContainer);\n        }\n\n        return itemContainer;\n    }\n\n    toggleFolder(path) {\n        const folder = this.treeRoot.querySelector(`.bp-filetree-item[data-path=\"${path}\"]`);\n        if (!folder) return;\n        \n        const isExpanded = folder.classList.toggle('bp-filetree-expanded');\n        const childContainer = folder.nextElementSibling;\n        childContainer.style.display = isExpanded ? 'block' : 'none';\n        this.options.onFolderToggle(path, isExpanded);\n    }\n\n    render(files) {\n        // Clear existing content\n        this.treeRoot.innerHTML = '';\n        \n        // Render each root item\n        files.forEach(file => {\n            this.treeRoot.appendChild(this.renderItem(file));\n        });\n    }\n\n    destroy() {\n        this.treeRoot.removeEventListener('click', this.handleClick);\n        this.container.removeChild(this.treeRoot);\n    }\n}"],"names":["FileTree","constructor","bp","options","this","init","appendCSS","create","container","onFileSelect","file","console","log","onFolderToggle","folder","isExpanded","indent","document","querySelector","treeRoot","createElement","className","appendChild","handleClick","bind","renderItem","addEventListener","event","$","hide","target","closest","isFolder","dataset","type","path","classList","toggle","nextElementSibling","style","display","getFileIcon","filename","iconMap","js","json","html","css","png","jpg","pdf","default","split","pop","toLowerCase","item","level","itemContainer","itemElement","paddingLeft","icon","textContent","name","Array","isArray","children","childContainer","forEach","child","toggleFolder","render","files","innerHTML","destroy","removeEventListener","removeChild"],"mappings":"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"}