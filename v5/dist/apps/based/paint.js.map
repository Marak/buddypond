{"version":3,"file":"paint.js","sources":["../../../apps/based/paint/paint.js","../../../apps/based/paint/lib/send.js"],"sourcesContent":["import send from './lib/send.js';\n\nexport default class Paint {\n    constructor(bp, options = {}) {\n        this.bp = bp;\n        this.output = null;\n        this.icon = '/desktop/assets/images/icons/icon_paint_64.png';\n        return this;\n    }\n\n    async init() {\n        this.bp.log('Hello from Paint');\n\n        let html = this.bp.load('/v5/apps/based/paint/paint.html');\n        this.html = await html;\n        return 'loaded Paint';\n    }\n\n    async open(params = {}) {\n        let that = this;\n        if (!this.paintWindow) {\n            this.paintWindow = this.bp.apps.ui.windowManager.createWindow({\n                id: 'paint',\n                title: 'Paint',\n                x: 50,\n                y: 100,\n                width: 750,\n                height: 520,\n                minWidth: 200,\n                minHeight: 200,\n                parent: $('#desktop')[0],\n                icon: this.icon,\n                content: this.html,\n                resizable: true,\n                minimizable: true,\n                maximizable: true,\n                closable: true,\n                focusable: true,\n                maximized: false,\n                minimized: false,\n                onClose: () => {\n                    this.paintWindow = null;\n                }\n            });\n\n\n            console.log(\"checkings embed params\", params);\n            if (params.src) {\n                // send the base64 source as part of the frame\n                $('#paintIframe', this.paintWindow.content).attr('src', '/v5/apps/based/paint/vendor/index.html#load:' + encodeURI(params.src));\n            } else {\n                $('#paintIframe', this.paintWindow.content).attr('src', '/v5/apps/based/paint/vendor/index.html');\n            }\n\n\n            $('.sendPaint', this.paintWindow.content).on('click', function () {\n                if ($(this).hasClass('updateGif')) {\n                    that.send({\n                        action: 'insert'\n                    });\n                } else {\n                    that.send({\n                        action: 'replace'\n                    });\n                }\n            });\n    \n            $('.sendGifStudio', this.paintWindow.container).on('click', function () {\n                let action = $(this).data('action');\n                that.send({ action: action });\n            });\n    \n\n\n            // clear out localstorage images on window open\n            // this will clear out all images on browser refresh\n            // Remark: It's best to do this for now since we dont want to cache to grow\n            //         We can later add photo manager for localstorage images\n            let keys = Object.keys(localStorage);\n            keys.forEach(function (k) {\n                if (k.search('image#') !== -1) {\n                    localStorage.removeItem(k);\n                }\n            });\n\n            if (params.output) {\n                that.output = params.output;\n            } else {\n                that.output = 'localhost';\n            }\n\n            if (params.context) {\n                that.context = params.context;\n            } else {\n                that.context = 'file-system';\n            }\n\n            $('.paintOutputTarget').html(that.output + '/' + that.context);\n\n            if ((that.output && that.output !== 'localhost')) {\n                $('.sendPaintHolder .sendPaint').html('SEND PAINT');\n                $('.sendPaintHolder').show();\n            } else {\n                $('.sendPaintHolder').hide();\n            }\n            if (that.output === 'gifstudio') {\n                /*\n                $('.sendPaint').hide();\n                $('.sendGifStudio').show();\n                //$('.insertGif').html('Insert at frame: ' + desktop.app.gifstudio.currentFrameIndex);\n                //$('.updateGif').html('Update frame: ' + desktop.app.gifstudio.currentFrameIndex)\n                if (desktop.app.gifstudio.currentFrameIndex === Infinity) {\n                    //$('.insertGif').html('Add frame');\n                    $('.updateGif', '#window_paint').hide();\n                } else {\n                    //$('.insertGif').html('Insert at frame: ' + desktop.app.gifstudio.currentFrameIndex);\n                    //$('.updateGif').html('Update frame: ' + desktop.app.gifstudio.currentFrameIndex)\n                    $('.updateGif', '#window_paint').show();\n                }\n\n                if (desktop.app.gifstudio.insertMode === 'replace') {\n                    $('.insertGif', '#window_paint').hide();\n                    $('.updateGif', '#window_paint').show();\n                } else {\n                    $('.insertGif', '#window_paint').show();\n                    $('.updateGif', '#window_paint').hide();\n                }\n                */\n\n            } else {\n                $('.sendPaint', this.paintWindow.content).show();\n                $('.sendGifStudio', this.paintWindow.content).hide();\n            }\n\n            let eventMethod = window.addEventListener ? 'addEventListener' : 'attachEvent';\n            let eventer = window[eventMethod];\n            let messageEvent = eventMethod == 'attachEvent' ? 'onmessage' : 'message';\n\n            // Remark: Frame message passing for paint currently only being used to support top left menu File->Exit command\n            // Listen to message from child window\n            eventer(messageEvent, function (e) {\n                let key = e.message ? 'message' : 'data';\n                let data = e[key];\n                console.log(\"got event from paint\", data);\n                if (data === 'app_paint_needs_close') {\n                    JQDX.closeWindow('#window_paint');\n                }\n            }, false);\n\n         \n            // return true;\n\n        }\n\n\n        return this.paintWindow;\n\n\n\n    }\n}\n\nPaint.prototype.send = send;","export default function send(params) {\n    let that = this;\n    $('.sendPaint').attr('disabled', true);\n\n    params = params || {\n        action: 'insert'\n    };\n\n    let keys = Object.keys(localStorage);\n    let firstImg = null;\n    let firstKey = null;\n    keys.forEach(function (k) {\n        if (k.search('image#') !== -1) {\n            firstImg = localStorage.getItem(k);\n            firstKey = k;\n        }\n    });\n\n    if (!firstKey) {\n        console.log('FAILED TO FIND IMAGE IN LOCALSTORAGE. SOMEONE PLEASE FIX JSPAINT INTEGRATION');\n        $('.touchPaint').show();\n        return;\n    } else {\n        $('.touchPaint').hide();\n    }\n\n    let output = this.output;\n    let context = this.context;\n\n    setTimeout(function () {\n        // send the paint to `gifstudio` as a frame ( either existing or new )\n        if (output === 'gifstudio') {\n            /*\n            // TODO: should not be undefined here\n            if (typeof desktop.app.gifstudio.currentFrameIndex === 'undefined') {\n                desktop.app.gifstudio.currentFrameIndex = 0;\n            }\n            if (params.action === 'insert') {\n                desktop.app.gifstudio.currentFrameIndex++;\n            }\n            desktop.app.gifstudio.loadGifFrame(firstImg, desktop.app.gifstudio.currentFrameIndex, params.action);\n            JQDX.closeWindow('#window_paint');\n            // open the window we just outputted to\n            // Remark: Assume gifstudio has already been loaded since we made it here\n            // TODO: we should be able to call gifstudio.openWindow without it reloading entire gif\n            // desktop.ui.openWindow('gifstudio');\n            $('#window_gifstudio').show();\n            $('.sendPaint').attr('disabled', false);\n            return;\n            */\n        }\n\n        // send the paint to pond or buddy chat windows as a Snap\n        if (output === 'pond' || output === 'buddy') {\n            // TODO: switch sending location here based on context, type, and metadata like gif frameIndex\n            bp.apps.client.api.sendSnaps(output, context, 'I sent a Paint', firstImg, 100, 'paint', function (err, uploadedUrl) {\n                if (err) {\n                    alert('Issue sending Paint. Please try again or contact support.');\n                    desktop.log(err);\n                    $('.sendPaint').attr('disabled', false);\n                    return;\n                }\n                keys.forEach(function (k) {\n                    if (k.search('image#') !== -1) {\n                        localStorage.removeItem(k);\n                        console.log('clearing key', firstKey);\n                    }\n                });\n                // JQDX.closeWindow('#window_paint');\n                // alert('close paint window');\n                that.paintWindow.close();\n                // open the window we just outputted to\n\n                // at this point with the new v5 API its expected that the client send a new messages\n                // broadcasting the file upload to the CDN\n\n                // now that we have the url, just send a regular message with the url\n                // the card type should automatically be detected by the server\n                // the the body of the message will be the url with extension of image, video, etc\n\n                // Remark: It might be safer to send an actual card here...\n                // The current approach requires we parse the image url on the client\n                // We could be brittle if the url has spaces or other characters that break the message format\n\n                // context is buddyname or pondname\n                // output is buddy or pond\n\n                let message = {\n                    to: context,\n                    from: bp.me,\n                    type: output,\n                    text: uploadedUrl\n                };\n                console.log(\"sending multimedia message\", message);\n                bp.emit('buddy::sendMessage', message);\n\n                /*\n                JQDX.openWindow(output, {\n                  context: context\n                });\n                */\n                // TODO: show the window using new API?\n                $('.sendPaint').attr('disabled', false);\n            });\n        }\n    }, 333);\n\n\n}"],"names":["Paint","constructor","bp","options","this","output","icon","init","log","html","load","open","params","that","paintWindow","apps","ui","windowManager","createWindow","id","title","x","y","width","height","minWidth","minHeight","parent","$","content","resizable","minimizable","maximizable","closable","focusable","maximized","minimized","onClose","console","src","attr","encodeURI","on","hasClass","send","action","container","data","Object","keys","localStorage","forEach","k","search","removeItem","context","show","hide","eventMethod","window","addEventListener","eventer","e","message","JQDX","closeWindow","prototype","firstImg","firstKey","getItem","setTimeout","client","api","sendSnaps","err","uploadedUrl","alert","desktop","close","to","from","me","type","text","emit"],"mappings":"AAEe,MAAMA,EACjB,WAAAC,CAAYC,EAAIC,EAAU,IAItB,OAHAC,KAAKF,GAAKA,EACVE,KAAKC,OAAS,KACdD,KAAKE,KAAO,iDACLF,IACf,CAEI,UAAMG,GACFH,KAAKF,GAAGM,IAAI,oBAEZ,IAAIC,EAAOL,KAAKF,GAAGQ,KAAK,mCAExB,OADAN,KAAKK,WAAaA,EACX,cACf,CAEI,UAAME,CAAKC,EAAS,IAChB,IAAIC,EAAOT,KACX,IAAKA,KAAKU,YAAa,CACnBV,KAAKU,YAAcV,KAAKF,GAAGa,KAAKC,GAAGC,cAAcC,aAAa,CAC1DC,GAAI,QACJC,MAAO,QACPC,EAAG,GACHC,EAAG,IACHC,MAAO,IACPC,OAAQ,IACRC,SAAU,IACVC,UAAW,IACXC,OAAQC,EAAE,YAAY,GACtBtB,KAAMF,KAAKE,KACXuB,QAASzB,KAAKK,KACdqB,WAAW,EACXC,aAAa,EACbC,aAAa,EACbC,UAAU,EACVC,WAAW,EACXC,WAAW,EACXC,WAAW,EACXC,QAAS,KACLjC,KAAKU,YAAc,QAK3BwB,QAAQ9B,IAAI,yBAA0BI,GAClCA,EAAO2B,IAEPX,EAAE,eAAgBxB,KAAKU,YAAYe,SAASW,KAAK,MAAO,+CAAiDC,UAAU7B,EAAO2B,MAE1HX,EAAE,eAAgBxB,KAAKU,YAAYe,SAASW,KAAK,MAAO,0CAI5DZ,EAAE,aAAcxB,KAAKU,YAAYe,SAASa,GAAG,SAAS,WAC9Cd,EAAExB,MAAMuC,SAAS,aACjB9B,EAAK+B,KAAK,CACNC,OAAQ,WAGZhC,EAAK+B,KAAK,CACNC,OAAQ,WAGhC,IAEYjB,EAAE,iBAAkBxB,KAAKU,YAAYgC,WAAWJ,GAAG,SAAS,WACxD,IAAIG,EAASjB,EAAExB,MAAM2C,KAAK,UAC1BlC,EAAK+B,KAAK,CAAEC,OAAQA,GACpC,IAQuBG,OAAOC,KAAKC,cAClBC,SAAQ,SAAUC,IACQ,IAAvBA,EAAEC,OAAO,WACTH,aAAaI,WAAWF,EAE5C,IAEgBxC,EAAOP,OACPQ,EAAKR,OAASO,EAAOP,OAErBQ,EAAKR,OAAS,YAGdO,EAAO2C,QACP1C,EAAK0C,QAAU3C,EAAO2C,QAEtB1C,EAAK0C,QAAU,cAGnB3B,EAAE,sBAAsBnB,KAAKI,EAAKR,OAAS,IAAMQ,EAAK0C,SAEjD1C,EAAKR,QAA0B,cAAhBQ,EAAKR,QACrBuB,EAAE,+BAA+BnB,KAAK,cACtCmB,EAAE,oBAAoB4B,QAEtB5B,EAAE,oBAAoB6B,OAEN,cAAhB5C,EAAKR,SAyBLuB,EAAE,aAAcxB,KAAKU,YAAYe,SAAS2B,OAC1C5B,EAAE,iBAAkBxB,KAAKU,YAAYe,SAAS4B,QAGlD,IAAIC,EAAcC,OAAOC,iBAAmB,mBAAqB,eAMjEC,EALcF,OAAOD,IACa,eAAfA,EAA+B,YAAc,WAI1C,SAAUI,GAC5B,IACIf,EAAOe,EADDA,EAAEC,QAAU,UAAY,QAElCzB,QAAQ9B,IAAI,uBAAwBuC,GACvB,0BAATA,GACAiB,KAAKC,YAAY,gBAExB,IAAE,EAKf,CAGQ,OAAO7D,KAAKU,WAIpB,EAGAd,EAAMkE,UAAUtB,KClKD,SAAchC,GACzB,IAAIC,EAAOT,KACXwB,EAAE,cAAcY,KAAK,YAAY,GAMjC,IAAIS,EAAOD,OAAOC,KAAKC,cACnBiB,EAAW,KACXC,EAAW,KAQf,GAPAnB,EAAKE,SAAQ,SAAUC,IACQ,IAAvBA,EAAEC,OAAO,YACTc,EAAWjB,aAAamB,QAAQjB,GAChCgB,EAAWhB,EAEvB,KAESgB,EAGD,OAFA9B,QAAQ9B,IAAI,qFACZoB,EAAE,eAAe4B,OAGjB5B,EAAE,eAAe6B,OAGrB,IAAIpD,EAASD,KAAKC,OACdkD,EAAUnD,KAAKmD,QAEnBe,YAAW,WAwBQ,SAAXjE,GAAgC,UAAXA,GAErBH,GAAGa,KAAKwD,OAAOC,IAAIC,UAAUpE,EAAQkD,EAAS,iBAAkBY,EAAU,IAAK,SAAS,SAAUO,EAAKC,GACnG,GAAID,EAIA,OAHAE,MAAM,6DACNC,QAAQrE,IAAIkE,QACZ9C,EAAE,cAAcY,KAAK,YAAY,GAGrCS,EAAKE,SAAQ,SAAUC,IACQ,IAAvBA,EAAEC,OAAO,YACTH,aAAaI,WAAWF,GACxBd,QAAQ9B,IAAI,eAAgB4D,GAEpD,IAGgBvD,EAAKC,YAAYgE,QAiBjB,IAAIf,EAAU,CACVgB,GAAIxB,EACJyB,KAAM9E,GAAG+E,GACTC,KAAM7E,EACN8E,KAAMR,GAEVrC,QAAQ9B,IAAI,6BAA8BuD,GAC1C7D,GAAGkF,KAAK,qBAAsBrB,GAQ9BnC,EAAE,cAAcY,KAAK,YAAY,EACjD,GAEK,GAAE,IAGP"}