class e{constructor(e,t={}){return this.bp=e,this.webrtc=null,this.localStream=null,this.remoteStream=null,this.callInProgress=!1,this.pollSignal=!1,this.devices={videoinput:{},audioinput:{},audiooutput:{}},this.alldevices={},this.currentBuddy=null,this.websocket=null,this.isHost=!1,this.remoteBuddy=null,this.acceptedCall=!1,this.videoEnabled=!0,this.audioEnabled=!0,this.signalQueue=[],this}async init(){await this.bp.load("/v5/apps/based/videochat/videochat.css"),this.html=await this.bp.load("/v5/apps/based/videochat/videochat.html"),await this.bp.load("/desktop/assets/js/simplepeer.min.js"),this.bindEvents()}bindEvents(){const e=$(document);e.on("mousedown",".startVideoCall",(e=>{"anonymous"!==this.bp.me?($("#videochat-buddyname").val(),$("#videochat-isHost").is(":checked"),this.startCall(this.isHost,this.remoteBuddy)):alert("You must create an account. Anonymous cannot make video calls")})),e.on("mousedown",".endVideoCall",(e=>{const t=$(e.target).closest(".buddy_message").data("context");this.endCall(t)})),e.on("change",".selectCamera",(e=>{const t=$(e.target).val();this.replaceStream(t,"video")})),e.on("change",".selectAudio",(e=>{const t=$(e.target).val();this.replaceStream(t,"audio")})),e.on("mousedown",".toggleVideo",(()=>{this.toggleVideo()})),e.on("mousedown",".toggleAudio",(()=>{this.toggleAudio()}))}toggleVideo(){if(!this.localStream)return;this.videoEnabled=!this.videoEnabled,this.localStream.getVideoTracks().forEach((e=>{e.enabled=this.videoEnabled}));const e=$(".toggleVideo",this.videocallWindow.content);e.text(this.videoEnabled?"Turn Video Off":"Turn Video On"),e.toggleClass("muted",!this.videoEnabled)}toggleAudio(){if(!this.localStream)return;this.audioEnabled=!this.audioEnabled,this.localStream.getAudioTracks().forEach((e=>{e.enabled=this.audioEnabled}));const e=$(".toggleAudio",this.videocallWindow.content);e.text(this.audioEnabled?"Mute Audio":"Unmute Audio"),e.toggleClass("muted",!this.audioEnabled)}async open(e={}){console.log("Opening Video Call Window",e);let t=e.context||null;return void 0!==e.isHost&&(this.isHost=e.isHost),this.videocallWindow||(this.videocallWindow=this.bp.apps.ui.windowManager.createWindow({id:"videochat-window",title:"Video Chat",x:50,y:100,width:800,height:480,minWidth:200,minHeight:200,parent:$("#desktop")[0],icon:"/desktop/assets/images/icons/icon_interdimensionalcable_64.png",content:this.html,resizable:!0,minimizable:!0,maximizable:!0,closable:!0,focusable:!0,maximized:!1,minimized:!1,onClose:()=>this.close()})),this.videocallWindow.focus(),this.remoteBuddy=t,e.acceptedCall&&(this.acceptedCall=!0),await this.addLocalCamera(),await this.initWebSocket(t),this.videocallWindow}async close(){console.log("closing app",this),await this.endCall(this.currentBuddy),this.localStream&&(this.localStream.getTracks().forEach((e=>e.stop())),this.localStream=null),this.videocallWindow&&(this.videocallWindow=null),this.websocket&&(this.websocket.close(),this.websocket=null)}async startCall(e,t){console.log("Starting call with",t,"isHost:",e),navigator.mediaDevices?this.callInProgress?console.warn("Call already in progress"):(this.callInProgress=!0,this.currentBuddy=t,$(".endVideoCall").css("opacity","1"),$(".startVideoCall").css("opacity","0.4"),$(".buddyName",this.videocallWindow.content).html(t),$(".webrtcStatus",this.videocallWindow.content).html("Sending WebRTC Handshake Request..."),await this.initPeer(e,t)):alert("navigator.mediaDevices is undefined. Are you having HTTPS/SSL issues?")}async endCall(e){this.pollSignal=!1,this.signalQueue=[],this.callTimer&&(clearInterval(this.callTimer),this.callTimer=null),$(".startVideoCall").css("opacity","1"),$(".endVideoCall").css("opacity","0.4"),$(".webrtcStatus",this.videocallWindow.content).html(`Click Start Call to connect to ${e}`),this.remoteStream&&this.remoteStream.getTracks().forEach((e=>e.stop())),this.webrtc&&(this.webrtc.destroy(),this.webrtc=null),this.callInProgress=!1,this.currentBuddy=null}async initWebSocket(e){let t=`wss://videochat.buddypond.com/ws?me=${encodeURIComponent(this.bp.me)}&buddyname=${encodeURIComponent(e)}&qtokenid=${encodeURIComponent(this.bp.qtokenid)}`;console.log("Connecting to WebSocket:",t),this.websocket=new WebSocket(t),this.currentBuddy=e,this.websocket.onmessage=async t=>{try{console.log("WebSocket message received:",t.data);const o=JSON.parse(t.data);if("connected"===o.status)return console.log("WebSocket connection opened:",{me:o.me,buddyname:o.buddyname}),void(this.isHost?$(".webrtcStatus",this.videocallWindow.content).html(`Waiting for ${e} to connect...`):$(".webrtcStatus",this.videocallWindow.content).html(`Click Start Call to accept call from ${e}`));if("buddyready"===o.type)return console.log(`Buddy ${e} is ready for pairing`),$(".webrtcStatus",this.videocallWindow.content).html(`${e} is ready! Starting call...`),$(".startVideoCall").css("opacity","1"),$(".startVideoCall").removeClass("disabled"),void((this.isHost||this.acceptedCall)&&await this.startCall(this.isHost,this.remoteBuddy));if("buddydisconnected"===o.type)return console.log(`Buddy ${e} disconnected`),$(".webrtcStatus",this.videocallWindow.content).html(`${e} disconnected`),void this.endCall(e);if(o.error)return console.error("WebSocket server error:",o.error,"code:",o.code),$(".webrtcStatus",this.videocallWindow.content).html("Connection failed"),void this.endCall(e);o&&this.webrtc&&(console.log(`Received signal for ${e}: ${o.type}`),this.webrtc.signal(o),this.signalQueue.length>0&&o.type===this.signalQueue[0].signal.type&&(this.signalQueue.shift(),0===this.callTimersignalQueue.length&&clearInterval(retryInterval)))}catch(e){console.error("Error parsing WebSocket message:",e)}},this.websocket.onerror=t=>{console.error("WebSocket error:",t),$(".webrtcStatus",this.videocallWindow.content).html("WebSocket connection failed"),this.endCall(e)},this.websocket.onclose=t=>{console.log("WebSocket closed with code:",t.code,"reason:",t.reason),$(".webrtcStatus",this.videocallWindow.content).html("WebSocket connection closed"),this.endCall(e)};try{await new Promise(((e,t)=>{this.websocket.onopen=()=>{console.log("WebSocket connection opened"),e()},this.websocket.onerror=e=>{t(new Error("WebSocket connection failed"))}}))}catch(e){throw console.error("Failed to open WebSocket:",e),e}}async initPeer(e,t){console.log("Initializing WebRTC peer connection",e,t),$(".webrtcStatus",this.videocallWindow.content).html("Initiating Peer Connection..."),this.webrtc=new SimplePeer({initiator:e,config:{iceServers:[{urls:"stun:stun.l.google.com:19302"}]}});let o=null;let i=Date.now();const s=()=>{if(Date.now()-i>6e4)return console.log(`Stopped retrying for ${t}: max retries or timeout reached`),$(".webrtcStatus",this.videocallWindow.content).html("Failed to connect: Buddy not available"),void this.endCall(t);if(0===this.signalQueue.length||this.websocket.readyState!==WebSocket.OPEN)return;const e=this.signalQueue[0];console.log(`Retrying signal to ${t} (attempt 1/9999)`),$(".webrtcStatus",this.videocallWindow.content).html(`Waiting for ${t} to accept the call...`),this.websocket.send(JSON.stringify(e))};this.webrtc.on("stream",(e=>{console.log(`${t} Camera Connected`);document.querySelector("#chatVideoBuddy").srcObject=e,this.remoteStream=e})),this.webrtc.on("signal",(e=>{console.log("Got signal",e);const i={buddyname:t,signal:e};this.signalQueue.push(i),this.websocket.readyState===WebSocket.OPEN&&(console.log(`Sending signal to ${t}:`,i),this.websocket.send(JSON.stringify(i))),o||(o=setInterval((()=>{s()}),Math.min(1e3*Math.pow(2,0),8e3)))})),this.webrtc.on("error",(e=>{console.error("WebRTC error:",e),o&&clearInterval(o),this.restartPeerConnection()})),this.webrtc.on("close",(()=>{console.log(`WebRTC connection with ${t} closed`),clearInterval(o),this.endCall(t)})),this.webrtc.on("connect",(async()=>{console.log("WebRTC peer connection established"),$(".webrtcStatus",this.videocallWindow.content).html("WebRTC peer connection established!"),clearInterval(o),this.signalQueue.length=0,this.localStream&&this.webrtc&&(this.localStream.getVideoTracks().forEach((e=>{e.enabled=this.videoEnabled})),this.localStream.getAudioTracks().forEach((e=>{e.enabled=this.audioEnabled})),this.webrtc.addStream(this.localStream)),this.startCallTimer()})),this.webrtc.on("iceConnectionStateChange",(()=>{const e=this.webrtc._pc.iceConnectionState;console.log(`ICE connection state: ${e}`),$(".webrtcStatus",this.videocallWindow.content).html(`ICE state: ${e}`),"disconnected"!==e&&"failed"!==e||this.restartPeerConnection()})),$(".webrtcStatus",this.videocallWindow.content).html(`Waiting for ${t} to connect...`)}startCallTimer(){let e=0;this.callTimer=setInterval((()=>{e++;const t=Math.floor(e/60),o=e%60;this.videocallWindow.setTitle(`Video Chat - (${t}:${o.toString().padStart(2,"0")})`)}),1e3)}restartPeerConnection(){this.callInProgress&&(console.log("Restarting WebRTC connection..."),this.webrtc&&(this.webrtc.destroy(),this.webrtc=null),setTimeout((()=>{this.initPeer(this.isHost,this.currentBuddy)}),1e3))}}e.prototype.addLocalCamera=async function(){try{if(!this.localStream){console.log("Requesting local camera and microphone access");const e=await navigator.mediaDevices.getUserMedia({video:!0,audio:!0});try{await this.enumerateDevices()}catch(e){return console.error("Error enumerating devices:",e),void $(".webrtcStatus",this.videocallWindow.content).html("Failed to access camera and microphone. Please check your browser settings.")}console.log("Local camera and microphone access granted"),this.localStream=e;const t=document.querySelector("#chatVideoMe");t.srcObject=e,t.muted=!0}this.localStream.getVideoTracks().forEach((e=>{e.enabled=this.videoEnabled})),this.localStream.getAudioTracks().forEach((e=>{e.enabled=this.audioEnabled})),this.webrtc&&!this.webrtc._streams?.includes(this.localStream)&&this.webrtc.addStream(this.localStream)}catch(e){console.error("Error accessing local camera:",e);let t="Failed to access camera and microphone.";"NotAllowedError"===e.name?t="Camera and microphone access was denied. Please allow access in your browser settings.":"NotFoundError"===e.name&&(t="No camera or microphone found. Please ensure devices are connected."),$(".webrtcStatus",this.videocallWindow.content).html(t)}},e.prototype.enumerateDevices=async function(e){try{const t=await navigator.mediaDevices.enumerateDevices();console.log("Devices:",t),$(".selectCamera",e).html(""),$(".selectAudio",e).html(""),t.forEach((t=>{this.alldevices[t.label]=t,this.devices[t.kind]=this.devices[t.kind]||{},this.devices[t.kind][t.label]=t,"videoinput"===t.kind&&$(".selectCamera",e).append(`<option value="${t.label}">${t.label}</option>`),"audioinput"===t.kind&&$(".selectAudio",e).append(`<option value="${t.label}">${t.label}</option>`)})),console.log("videochat completed enumerateDevices",t)}catch(e){throw console.error("Error enumerating devices:",e),e}},e.prototype.replaceStream=async function(e,t){const o=this.alldevices[e];if(o)try{const e="video"===t?{video:{deviceId:o.deviceId},audio:!1}:{audio:{deviceId:o.deviceId},video:!1},i=await navigator.mediaDevices.getUserMedia(e),s=i.getTracks()[0];this.localStream.getTracks().forEach((e=>{e.kind===t&&(this.webrtc.replaceTrack(e,s,this.localStream),e.stop())}));document.querySelector("#chatVideoMe").srcObject=i,$(".select"+("video"===t?"Camera":"Audio"),this.videocallWindow).val(s.label)}catch(e){console.error(`Error replacing ${t} stream:`,e)}};export{e as default};
//# sourceMappingURL=videochat.js.map
