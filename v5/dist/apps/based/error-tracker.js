class e{constructor(e,r={}){if(this.bp=e,!r.apiEndpoint)throw new Error("API endpoint is required");this.apiEndpoint=r.apiEndpoint,this.isReportingDisabled=!1,this.init()}init(){this.bp.reportError=e=>{this.isReportingDisabled||this.sendError({type:"error",message:e.message,stack:e.stack||"No stack trace"})},window.onerror=(e,r,s,i,o)=>{if(this.isReportingDisabled)return;if(o?.isFromErrorTracker)return;const t=e.includes("Maximum call stack size exceeded")||o?.message.includes("Maximum call stack size exceeded");this.sendError({type:"error",message:e,source:r,lineno:s,colno:i,stack:o?.stack||"No stack trace"}),t&&(console.warn("Stack overflow detected; disabling error reporting."),this.isReportingDisabled=!0)},window.onunhandledrejection=e=>{if(this.isReportingDisabled)return;if(e.reason?.isFromErrorTracker)return;const r=e.reason?.message.includes("Maximum call stack size exceeded");this.sendError({type:"promise_rejection",message:e.reason?.message||"Unhandled Promise Rejection",stack:e.reason?.stack||"No stack trace"}),r&&(console.warn("Stack overflow detected; disabling error reporting."),this.isReportingDisabled=!0)}}async sendError(e){if(!this.isReportingDisabled){console.log("sendError",e);try{await fetch(this.apiEndpoint+"/error",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})}catch(e){e.isFromErrorTracker=!0,console.warn("Failed to send error:",e)}}}}export{e as default};
//# sourceMappingURL=error-tracker.js.map
