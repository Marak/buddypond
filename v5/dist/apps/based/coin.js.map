{"version":3,"file":"coin.js","sources":["../../../apps/based/resource/lib/MemoryProvider.js","../../../apps/based/resource/lib/RestProvider.js","../../../apps/based/resource/lib/IndexedDbProvider.js","../../../apps/based/resource/lib/Resource.js","../../../apps/based/coin/lib/updateCoinList.js","../../../apps/based/coin/lib/Coin.js","../../../apps/based/coin/lib/mintCoin.js","../../../apps/based/coin/lib/sendCoin.js","../../../apps/based/coin/coin.js","../../../apps/based/coin/lib/eventBind.js","../../../apps/based/coin/lib/render.js","../../../apps/based/coin/lib/createInitialCoins.js"],"sourcesContent":["const memoryStore = {}; // In-memory database\n\nexport default class MemoryProvider {\n    constructor(resourceName) {\n        this.resourceName = resourceName;\n        memoryStore[this.resourceName] = {}; // Change from array to object\n        this.memoryStore = memoryStore;\n    }\n\n    create(owner, data, schema) {\n        // Check for required fields\n        Object.keys(schema).forEach((key) => {\n            if (schema[key].required && (data[key] === undefined || data[key] === null)) {\n                throw new Error(`${key} is required`);\n            }\n\n            if (schema[key].unique) {\n                const entries = Object.values(memoryStore[this.resourceName]);\n                if (entries.some(entry => entry[key] === data[key])) {\n                    throw new Error(`${key} must be unique`);\n                }\n            }\n\n            if (schema[key].type && typeof data[key] !== schema[key].type) {\n                throw new Error(`${key} must be of type ${schema[key].type} value is ${data[key]}`);\n            }\n\n        });\n\n        const newId = generateUniqueId();\n        const newEntry = { id: newId, owner };\n\n        Object.keys(schema).forEach((key) => {\n            newEntry[key] = data[key] || null;\n        });\n\n        memoryStore[this.resourceName][newId] = newEntry;\n        return newEntry;\n    }\n\n    get(owner, id) {\n        const entry = memoryStore[this.resourceName][id];\n        return entry && entry.owner === owner ? entry : null;\n    }\n\n    update(owner, id, data, schema) {\n        const entry = memoryStore[this.resourceName][id];\n        if (!entry || entry.owner !== owner) {\n            throw new Error(`${this.resourceName} not found or unauthorized`);\n        }\n\n        // Check for required fields\n        Object.keys(schema).forEach((key) => {\n            if (schema[key].required && (data[key] === undefined || data[key] === null)) {\n                throw new Error(`${key} is required`);\n            }\n            /*\n            if (schema[key].unique && data[key] !== undefined) {\n                const entries = Object.values(memoryStore[this.resourceName]);\n                if (entries.some(e => e.id !== id && e[key] === data[key])) {\n                    throw new Error(`${key} must be unique`);\n                }\n            }\n                */\n        });\n\n        Object.keys(schema).forEach((key) => {\n            if (data[key] !== undefined) {\n                entry[key] = data[key];\n            }\n        });\n\n        return entry;\n    }\n\n    remove(owner, id) {\n        const entry = memoryStore[this.resourceName][id];\n        if (!entry || entry.owner !== owner) {\n            throw new Error(`${this.resourceName} not found or unauthorized`);\n        }\n\n        delete memoryStore[this.resourceName][id];\n        return { success: true };\n    }\n\n    search(owner, query) {\n        // example query: { name: 'John', age: 30 }\n        return Object.values(memoryStore[this.resourceName]).filter(item => item.owner === owner && Object.keys(query).every(key => item[key] === query[key]));\n    }\n\n    list(owner) {\n        return Object.values(memoryStore[this.resourceName]).filter(item => item.owner === owner);\n    }\n\n    all() {\n        return Object.values(memoryStore[this.resourceName]);\n    }\n}\n\n// ðŸš€ Helper Function: Generate a Unique ID\nfunction generateUniqueId() {\n    return Math.random().toString(36).substring(2, 10);\n}\n","export default class RestProvider {\n    constructor(resourceName, options = {}) {\n        // console.log('RestProvider', resourceName, options);\n        this.resourceName = resourceName;\n        this.apiEndpoint = options.apiEndpoint;\n        if (options.bp) {\n            this.bp = options.bp;\n        }\n    }\n\n    async apiRequest(method, path, body = null, urlparams = null) {\n        // console.log('apiRequest', method, path, body, urlparams);\n        const options = { method, headers: { 'Content-Type': 'application/json' } };\n        if (body) options.body = JSON.stringify(body);\n\n        if (this.bp.qtokenid) {\n            options.headers[\"Authorization\"] = `Bearer ${this.bp.qtokenid}`; // âœ… Use Authorization header\n        }\n\n        options.headers['X-Me'] = this.bp.me; // Add X-Me header\n\n        let url = `${this.apiEndpoint}/${path}`;\n        // append urlparams to url\n        if (urlparams) {\n            const params = new URLSearchParams(urlparams);\n            url += `?${params.toString()}`;\n        }\n        // console.log('apiRequest', method, url, options);\n\n        const response = await fetch(url, options);\n        if (!response.ok) {\n            console.log('API request failed:', response);\n            // try to get json from json\n            try {\n                let json = await response.json();\n                console.log('API request failed:', json);\n                throw new Error(`${json.error}`);\n                return json;\n            } catch (err) {\n                console.log('error', err);\n                throw new Error(err);\n            }\n            throw new Error(`API request failed: ${json.error}`);\n        }\n        return response.json();\n    }\n\n    async create(id, data) {\n        console.log('calling create', `${this.resourceName}`, data);\n        return this.apiRequest('POST', `${this.resourceName}`, data);\n    }\n\n    async get(owner, id) {\n        return this.apiRequest('GET', `${this.resourceName}/${owner}/${id}`);\n    }\n\n    async update(id, data) {\n        console.log(`calling update ${this.resourceName}/${id}`, data);\n        return this.apiRequest('PUT', `${this.resourceName}/${id}`, data);\n    }\n\n    async remove(id) {\n        return this.apiRequest('DELETE', `${this.resourceName}/${id}`);\n    }\n\n    async list() {\n        console.log('calling list', `${this.resourceName}`);\n        return this.apiRequest('GET', `${this.resourceName}`);\n    }\n\n    async all() {\n        return this.apiRequest('GET', this.resourceName);\n    }\n\n    async search(owner, query, urlparams = {}) {\n        return this.apiRequest('POST', `${this.resourceName}/search`, query, urlparams);\n    }\n\n}\n","export default class IndexedDbProvider {\n    constructor(resourceName) {\n        this.resourceName = resourceName;\n        this.dbName = \"BuddyPondResourceDB\";\n        this.version = 1;\n        this.db = null;\n        this.init();\n    }\n\n    async init() {\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(this.dbName, this.version);\n\n            request.onupgradeneeded = (event) => {\n                let db = event.target.result;\n                if (!db.objectStoreNames.contains(this.resourceName)) {\n                    db.createObjectStore(this.resourceName, { keyPath: \"id\" });\n                }\n            };\n\n            request.onsuccess = (event) => {\n                this.db = event.target.result;\n                resolve();\n            };\n\n            request.onerror = (event) => {\n                reject(`IndexedDB Error: ${event.target.errorCode}`);\n            };\n        });\n    }\n\n    async _withStore(mode, callback) {\n        if (!this.db) {\n            await this.init();\n        }\n        return new Promise((resolve, reject) => {\n            const tx = this.db.transaction(this.resourceName, mode);\n            const store = tx.objectStore(this.resourceName);\n            const request = callback(store);\n\n            request.onsuccess = () => resolve(request.result);\n            request.onerror = () => reject(request.error);\n        });\n    }\n\n    async create(owner, data, schema) {\n        const newId = generateUniqueId();\n        const newEntry = { id: newId, owner };\n\n        Object.keys(schema).forEach((key) => {\n            newEntry[key] = data[key] || null;\n        });\n\n        await this._withStore(\"readwrite\", (store) => store.add(newEntry));\n        return newEntry;\n    }\n\n    async get(owner, id) {\n        const entry = await this._withStore(\"readonly\", (store) => store.get(id));\n        return entry && entry.owner === owner ? entry : null;\n    }\n\n    async update(owner, id, data, schema) {\n        const entry = await this.get(owner, id);\n        if (!entry) {\n            throw new Error(`${this.resourceName} not found or unauthorized`);\n        }\n\n        Object.keys(schema).forEach((key) => {\n            if (data[key] !== undefined) {\n                entry[key] = data[key];\n            }\n        });\n\n        await this._withStore(\"readwrite\", (store) => store.put(entry));\n        return entry;\n    }\n\n    async remove(owner, id) {\n        const entry = await this.get(owner, id);\n        if (!entry) {\n            throw new Error(`${this.resourceName} not found or unauthorized`);\n        }\n\n        await this._withStore(\"readwrite\", (store) => store.delete(id));\n        return { success: true };\n    }\n\n    async list(owner) {\n        return new Promise((resolve, reject) => {\n            this._withStore(\"readonly\", (store) => {\n                const request = store.getAll();\n                request.onsuccess = () => {\n                    resolve(request.result.filter(item => item.owner === owner));\n                };\n                request.onerror = () => reject(request.error);\n            });\n        });\n    }\n\n    async all() {\n        return new Promise((resolve, reject) => {\n            this._withStore(\"readonly\", (store) => {\n                const request = store.getAll();\n                request.onsuccess = () => resolve(request.result);\n                request.onerror = () => reject(request.error);\n            });\n        });\n    }\n}\n\n// ðŸš€ Helper Function: Generate a Unique ID\nfunction generateUniqueId() {\n    return Math.random().toString(36).substring(2, 10);\n}\n","import MemoryProvider from './MemoryProvider.js';\nimport RestProvider from './RestProvider.js';\nimport IndexedDBProvider from './IndexedDbProvider.js';\n\nconst schemaRegistry = {};\n\nexport default class Resource {\n    constructor(name, options) {\n        this.name = name;\n        this.schema = options.schema || {};\n        this.providerType = options.provider || 'memory';\n\n        if (Object.keys(this.schema).length === 0) {\n            throw new Error(`Schema definition is required for resource: ${name}`);\n        }\n        \n        // console.log('Initializing provider with options:', options);\n        schemaRegistry[this.name] = this.schema; // Register the resource schema\n\n        this.provider = this._createProvider(this.providerType, options);\n        this.provider.bp = options.bp;\n    }\n\n    _createProvider(providerType, options) {\n        switch (providerType) {\n            case 'rest':\n                return new RestProvider(this.name, options);\n            case 'indexeddb':\n                return new IndexedDBProvider(this.name, options);\n            case 'memory':\n            default:\n                return new MemoryProvider(this.name);\n        }\n    }\n\n    create(owner, data) {\n        return this.provider.create(owner, data, this.schema);\n    }\n\n    get(owner, id) {\n        return this.provider.get(owner, id);\n    }\n\n    update(owner, id, data) {\n        return this.provider.update(owner, id, data, this.schema);\n    }\n\n    remove(owner, id) {\n        return this.provider.remove(owner, id);\n    }\n\n    list(owner) {\n        return this.provider.list(owner);\n    }\n\n    search(owner, query, urlparams) {\n        return this.provider.search(owner, query, urlparams);\n    }\n    \n    all() {\n        return this.provider.all();\n    }\n\n    \n\n    async apiRequest(method, path, body = null) {\n        return this.provider.apiRequest(method, path, body);\n    }\n\n}\n","export default async function updateCoinList(coinWindow) {\n    let result = await this.resource.list(); // TODO: .search()\n    let coins = result.results;\n    console.log('All Coins:', coins);\n\n    // Update user-owned coins\n    updateUserCoins.call(this, coinWindow, coins);\n\n    // Update all minted coins\n    updateAllCoins.call(this, coinWindow, coins);\n\n    // update the coin <select> values\n    let coinSelector = $('.coin-names');\n    coinSelector.html(''); // Clear existing entries\n    coins.forEach(coin => {\n        // console.log('appending coin', coin);\n        if (coin.symbol === this.context) {\n            coinSelector.append(`<option value=\"${coin.symbol}\" selected>${coin.name}</option>`);\n            return;\n        }\n        coinSelector.append(`<option value=\"${coin.symbol}\">${coin.name}</option>`);\n    });\n    $('.loading-coins', coinWindow.content).hide();\n\n}\n\nfunction updateUserCoins(coinWindow, coins) {\n\n    let myCoins = coins.filter(coin => coin.owner === this.bp.me);\n    if (myCoins.length === 0) {\n        $('.user-coin-table', coinWindow.content).hide();\n        $('.no-coins', coinWindow.content).show();\n        return;\n    }\n    $('.user-coin-table', coinWindow.content).show();\n    $('.no-coins', coinWindow.content).hide();\n    let userCoinList = $('.user-coin-list', coinWindow.content);\n    userCoinList.html(''); // Clear existing entries\n\n    myCoins.forEach(coin => {\n        let row = createCoinRow.call(this, coin, false, true, coinWindow);\n        userCoinList.append(row); // Use jQuery .append()\n\n    });\n}\n\nfunction updateAllCoins(coinWindow, coins) {\n    let allCoinList = $('.all-coin-list', coinWindow.content);\n    allCoinList.html(''); // Clear existing entries\n    coins.forEach(coin => {\n        if (coin.status !== 'listed') {\n            return;\n        }\n        let row = createCoinRow.call(this, coin, true, false, coinWindow);\n        allCoinList.append(row); // Use jQuery .append()\n    });\n\n}\n\n// Utility function to create a row and handle clicks\nfunction createCoinRow(coin, includeOwner = false, includeAdmin = false, coinWindow) {\n    const formattedSupply = coin.supply.toLocaleString('en-US');\n    let listVerb = coin.status === 'listed' ? 'Delist' : 'List';\n    let row = $(`\n        <tr>\n            <td>${coin.symbol}</td>\n            <td>${coin.name}</td>\n            <td>${formattedSupply}</td>\n            ${includeOwner ? `<td>${coin.owner}</td>` : ''}\n            ${includeAdmin ? `<td>\n                <button class=\"listDelistCoin\" title=\"${listVerb} your coin on the BuddyCoin Market\">${listVerb} Coin</button>\n                <button class=\"removeCoin\">Destroy</button>\n            </td>` : ''}\n        </tr>\n    `);\n\n    if (coin.status === 'listed') {\n        // disable the removeCoin button\n        row.find('.removeCoin').prop('disabled', true);\n        row.find('.removeCoin').addClass('disabled');\n    }\n\n    row.on('click', async (ev) => {\n\n        // check if target has class .listDelistCoin\n        if ($(ev.target).hasClass('listDelistCoin')) {\n            /*\n            let confirmList = prompt(`Are you sure you want to list this coin? Type \"${coin.symbol}\" to confirm.`);\n            if (confirmList !== coin.symbol) {\n                return;\n            }\n            */\n\n            // toggle the status based on the current value\n            // if value === \"List Coin\", set status to \"private\"\n            // if value === \"Delist Coin\", set status to \"listed\"\n\n            if (coin.status === 'listed') {\n                let updatedResponse = await this.resource.update(coin.id, { status: 'private' });\n                console.log(\"set private updatedResponse\", updatedResponse);\n                // update the coin list\n                updateCoinList.call(this, coinWindow);\n                return false;\n            }\n\n            if (coin.status === 'private') {\n                let updatedResponse = await this.resource.update(coin.id, { status: 'listed' });\n                console.log(\"set listed updatedResponse\", updatedResponse);\n                // update the coin list\n                updateCoinList.call(this, coinWindow);\n                return false;\n            }\n\n            return false;\n\n        }\n\n        // check if target has class .removeCoin\n        if ($(ev.target).hasClass('removeCoin')) {\n            /*\n            let confirmDelete = prompt(`Are you sure you want to delete this coin? Type \"${coin.symbol}\" to confirm.`);\n            if (confirmDelete !== coin.symbol) {\n                return;\n            }\n            */\n            await this.resource.remove(coin.symbol);\n            // update the coin list\n            updateCoinList.call(this, coinWindow);\n            return false;\n        }\n\n        if (coin.symbol === 'BUX') {\n            // return this.bp.open('buddybux', { context: 'buy' });\n        }\n\n        if (coin.status !== 'listed') {\n            // do not open orderbook for unlisted coins\n            return;\n        }\n\n\n        // this.bp.open('orderbook', { context: coin.symbol + '/BUX' });\n    });\n\n    return row;\n}\n","// TODO: move this code to a controller with provider pattern\n// TODO: for now the provider will be hard-coded to D1 on Cloudflare\n// TODO: move this code to the server-side\n\nimport mintCoin from './mintCoin.js';\nimport sendCoin from './sendCoin.js';\nexport default class Coin {\n    constructor(config = {}) {\n        this.name = config.name || 'Good Buddy Points';\n        this.symbol = config.symbol || 'GBP';\n        this.owner = config.owner || 'Randolph';\n        this.supply = config.supply || Infinity;\n        this.resource = config.resource;\n        this.me = config.me;\n        this.stubBalances = {\n            'Bob': {\n                'GBP': 0\n            }\n        };\n        \n        this.apiClientStub = {\n            'balanceOf': (coin, owner) => {\n                console.log('API Call: balanceOf', coin, owner, this.stubBalances[owner][coin]);\n                console.log('stubBalances', this.stubBalances);\n                return this.stubBalances[owner][coin];\n            },\n            'mint': (coin, amount, options = {}) => {\n                if (!this.stubBalances[options.owner]) {\n                    this.stubBalances[options.owner] = {};\n                }\n                console.log('check to see if the minted amount is greater than the supply', this.supply, amount);\n                // check to see if the minted amount is greater than the supply\n                if (this.supply < amount) {\n                    throw new Error(\"Cannot mint more than the supply.\");\n                }\n\n                this.stubBalances[options.owner][coin] = (this.stubBalances[options.owner][coin] || 0) + amount;\n                console.log('API Call: mint', coin, amount, options);\n            },\n            'burn': (coin, amount, from, options = {}) => {\n                if (this.stubBalances[from][coin] < amount) {\n                    throw new Error(\"Not enough balance to burn.\");\n                }\n                this.stubBalances[from][coin] -= amount;\n                console.log('API Call: burn', coin, amount, from, options);\n            },\n            'send': (coin, amount, to, from, options = {}) => {\n                console.log('apiClientStub.send', coin, amount, to, options, this.stubBalances[from][coin]);\n                if (this.stubBalances[from][coin] < amount) {\n                    throw new Error(\"Not enough balance.\");\n                }\n                this.stubBalances[from][coin] -= amount;\n                this.stubBalances[to] = this.stubBalances[to] || {};\n                this.stubBalances[to][coin] = (this.stubBalances[to][coin] || 0) + amount;\n                console.log('API Call: send', coin, amount, to, options);\n            },\n            'receive': (coin, amount, from, options = {}) => {\n                this.stubBalances[from] = this.stubBalances[from] || {};\n                this.stubBalances[from][coin] = (this.stubBalances[from][coin] || 0) + amount;\n                console.log('API Call: receive', coin, amount, from, options);\n            },\n            'setSupply': (coin, supply, ownerId) => {\n                console.log('API Call: setSupply', coin, supply, ownerId);\n            },\n            'getSupply': (coin) => {\n                console.log('API Call: getSupply', coin, this.supply);\n                return this.supply;\n            }\n        };\n    }\n\n    getSupply() {\n        return this.apiClientStub.getSupply(this.symbol);\n    }\n\n    setSupply(supply, ownerId) {\n        if (ownerId !== this.owner) {\n            throw new Error(\"Only the owner can set the supply.\");\n        }\n        this.supply = supply;\n        this.apiClientStub.setSupply(this.symbol, supply, ownerId);\n    }\n\n    send(amount, to, from) {\n        return this.apiClientStub.send(this.symbol, amount, to, from, { owner: this.owner });\n    }\n\n    receive(amount, to, from) {\n        return this.apiClientStub.receive(this.symbol, amount, to, from, { owner: this.owner });\n    }\n\n    mint(amount) {\n        return this.apiClientStub.mint(this.symbol, amount, { owner: this.owner });\n    }\n\n    burn(amount, from) {\n        return this.apiClientStub.burn(this.symbol, amount, from, { owner: this.owner });\n    }\n\n    balanceOf(owner) {\n        return this.apiClientStub.balanceOf(this.symbol, owner);\n    }\n\n}\n\nCoin.prototype.mintCoin = mintCoin;\nCoin.prototype.sendCoin = sendCoin;","export default async function mintCoin (parent, coin) {\n    console.log('mintCoin', coin)\n       // Mint the new coin\n       try {\n        let res = await this.resource.create(coin.symbol, {\n            name: coin.name,\n            symbol: coin.symbol,\n            owner: coin.owner,\n            supply: coin.supply,\n            price: coin.price\n        });\n        console.log('mintCoin response', res)\n        $('.coin-error').text('');\n        $('.coin-success').text('Coin minted successfully ' + JSON.stringify(res));\n        return res;\n    } catch (err) {\n        // display error in UI\n        console.error('Error minting coin:', err);\n        $('.coin-error').text(err.message);\n    }\n\n   \n}","export default async function sendCoin(parent, userTransaction) {\n    console.log('sendCoin', userTransaction)\n    // alert('sendCoin')\n    // Send the coin to a buddy\n\n    try {\n        let res = await this.resource.apiRequest('POST', `portfolio/${userTransaction.from}/transfer`, userTransaction);\n        console.log('transfering coins', userTransaction, res)\n        $('.coin-error').text('');\n\n        // trigger change event on the coin name dropdown to update the balance\n        $('#coin-send-name').trigger('change');\n        $('.coin-send-message').html(`Sent ${userTransaction.amount} ${userTransaction.symbol} to ${userTransaction.to}!`);\n        return res;\n    } catch (err) {\n        // display error in UI\n        console.error('Error sending coin:', err);\n        $('.coin-error').text(err.message);\n    }\n\n    $('.coin-send-message').text('Sent coin to buddy!');\n\n\n}","/* Coin.js - Marak Squires 2025 - BuddyPond */\nimport Resource from '../resource/lib/Resource.js';\nimport eventBind from './lib/eventBind.js';\nimport updateCoinList from './lib/updateCoinList.js';\nimport render from './lib/render.js';\nimport CoinClass from './lib/Coin.js';\n//import PortfolioClass from '../portfolio/lib/Portfolio.js';\nimport createInitialCoins from './lib/createInitialCoins.js';\nimport RestProvider from '../resource/lib/RestProvider.js';\n\n\nexport default class Coin {\n\n    constructor(bp, options = {}) {\n        this.bp = bp;\n        return this;\n    }\n\n    async init() {\n        this.html = await this.bp.load('/v5/apps/based/coin/coin.html');\n        this.css = await this.bp.load('/v5/apps/based/coin/coin.css');\n\n        this.coinWindows = [];\n        // create a new resource to manage coin operations to provider ( restful server in this case )\n        this.resource = new Resource(\"coin\", {\n            provider: 'rest',\n            apiEndpoint: this.bp.config.coinEndpoint || '/',\n            schema: {\n                name: { type: \"string\", required: true },\n                symbol: { type: \"string\", unique: true, required: true },\n                owner: { type: \"string\", required: true },\n                supply : { type: \"number\", required: true },\n            },\n            bp: this.bp\n        });\n\n        this.coin = new CoinClass({ resource: this.resource, me: this.bp.me });\n        // this.portfolio = new PortfolioClass({ resource: this.resource, me: this.bp.me });\n        this.portfolio = new RestProvider('portfolio', {\n            apiEndpoint: buddypond.portfolioEndpoint || '/',\n            bp: this.bp\n        });\n\n    }\n\n    async render () {\n        return this.html;\n    }\n\n    async open (options = {}) {\n        let context = options.context;\n        if (context === 'default') {\n            context = 'GBP';\n        }\n        let type = options.type || '';\n        this.context = context;\n        this.type = type;\n\n        let coinWindowId = 'coin';/* + context;*/\n\n        if (!this.coinWindows[coinWindowId]) {\n            let coinWindow = this.coinWindows[coinWindowId] = this.bp.apps.ui.windowManager.createWindow({\n                id: coinWindowId,\n                title: 'Buddy Coins',\n                icon: 'desktop/assets/images/icons/icon_coin_64.png',\n                x: 250,\n                y: 75,\n                width: 800,\n                height: 600,\n                minWidth: 200,\n                minHeight: 200,\n                type: 'coin',\n                parent: $('#desktop')[0],\n                className: 'coin-window-content',\n                // content: this.html,\n                resizable: true,\n                minimizable: true,\n                maximizable: true,\n                closable: true,\n                focusable: true,\n                maximized: false,\n                minimized: false,\n                onClose: () => {\n                    this.coinWindows[coinWindowId] = null;\n                }\n            });\n            await this.render(coinWindow);\n            this.eventBind(coinWindow);\n\n            if (type) {\n                this.tabs.navigateToTab('#coin-' + type);\n            }\n\n            if (this.bp.me !== 'Marak') {\n                // disables the mint-coin button unless Admin ( for now )\n                // only enforced client-side, coming soon\n                $('#mint-coin').attr('disabled', 'disabled');\n                $('#mint-coin').addClass('disabled');\n                $('#mint-coin').attr('title', \"You do not have permission to Mint new coins!\");\n            }\n        } else {\n            // focus the window\n            this.coinWindows[coinWindowId].focus();\n        }\n    }  \n    \n}\n\nCoin.prototype.eventBind = eventBind;\nCoin.prototype.updateCoinList = updateCoinList;\nCoin.prototype.render = render;\nCoin.prototype.createInitialCoins = createInitialCoins;\n","\nexport default function eventBind(coinWindow) {\n    console.log('this.coinWindow.content', coinWindow.content);\n\n    this.tabs = new this.bp.apps.ui.Tabs('.tabs-container', coinWindow.content);\n\n    this.tabs.onTab(async (tabId) => {\n        $('.coin-error').text('');\n\n        console.log('tabId', tabId);\n        if (tabId === '#coin-leaderboard') {\n\n            await fetchLeaderboard.call(this);\n\n        }\n\n    });\n\n     $('#coin-leaderboard-symbol', coinWindow.content).change(async () => {\n        // fetch the top coins for the selected symbol\n        $('.loading-leaderboard', coinWindow.content).show();\n        await fetchLeaderboard.call(this);\n    });\n\n\n\n    async function fetchLeaderboard() {\n        // fetch the /top coins from portfolio\n        // console.log('Fetching top coins', this.portfolio);\n        let symbol = $('#coin-leaderboard-symbol', coinWindow.content).val();\n        let res = await this.portfolio.apiRequest('POST', `portfolio/top`, { symbol: symbol });\n        // console.log('top coins', res);\n        let leadersList = $('.leaderboard-list', coinWindow.content);\n        // iterate over the results and append them to the leadersList table body\n        leadersList.empty();\n        res.results.forEach((coin, i) => {\n            // console.log('coin', coin, i);\n            let value = coin.total_amount * coin.price;\n            // format value as dollars with 2 decimal places\n            //value = `$${value.toFixed(2)}`;\n            // use currency formatting for value with commas\n            value = value.toLocaleString('en-US', { style: 'currency', currency: 'USD' });\n\n            // format amount as number with commas\n            coin.total_amount = coin.total_amount.toLocaleString('en-US', {\n                minimumFractionDigits: 0,\n                maximumFractionDigits: 0\n            });\n            leadersList.append(`\n                    <tr>\n                        <td>${i + 1}</td>\n                        <td>${coin.owner}</td>\n                        <td>${coin.symbol}</td>\n                        <td>${coin.total_amount}</td>\n                        <td>${value}</td>\n                    </tr>\n                `);\n        });\n        $('.loading-leaderboard', coinWindow.content).hide();\n    }\n\n\n    $('.mint-coin', coinWindow.content).click(async () => {\n        // Retrieve values from the form\n        let coinName = document.querySelector('#coin-name').value.trim();\n        let coinSymbol = document.querySelector('#coin-symbol').value.trim();\n        let coinSupply = parseInt(document.querySelector('#coin-supply').value, 10);\n        let coinPrice = parseFloat(document.querySelector('#coin-price').value);\n        if (!coinName || !coinSymbol || isNaN(coinSupply) || coinSupply <= 0) {\n            alert('Please enter valid coin details.');\n            return;\n        }\n\n        this.coin.mintCoin(coinWindow.content, {\n            name: coinName,\n            owner: this.bp.me,\n            symbol: coinSymbol,\n            supply: coinSupply,\n            price: coinPrice\n        })\n\n    });\n\n    $('.send-coin', coinWindow.content).click(async () => {\n        // alert('send-coin clicked');\n        let sendTo = $('#coin-send-to').val();\n        let symbol = $('#coin-send-name').val();\n        let amount = $('#coin-send-amount').val();\n\n        this.portfolio.transfer(coinWindow.content, {\n            from: this.bp.me,\n            to: sendTo,\n            symbol: symbol,\n            amount: amount\n        });\n    });\n\n    $('#coin-send-name', coinWindow.content).change(async () => {\n        // fetch users balance and display it\n        let currentCoin = $('#coin-send-name').val();\n        let coinBalance = $('#coin-balance', coinWindow.content);\n\n        await this.bp.load('portfolio'); // will get cached / be cached\n\n        // get the portfolio's assets\n        const assets = await this.bp.apps.portfolio.resource.search(this.bp.me, {\n            owner: this.bp.me\n        });\n        console.log('assetsassetsassets', currentCoin, assets.results);\n        let coinBalances = assets.results;\n\n        // update the $('.coin-names') select element\n        // first clear all options\n        $('#coin-send-name', coinWindow.content).empty();\n        coinBalances.forEach(asset => {\n            console.log(`asset.symbol: ${asset.symbol} === currentCoin: ${currentCoin}`, asset);\n            $('#coin-send-name', coinWindow.content).append(`<option value=\"${asset.symbol}\">${asset.symbol}</option>`);\n            if (asset.symbol === currentCoin) {\n                coinBalance.text(asset.amount);\n                // select the current coin\n                $('#coin-send-name', coinWindow.content).val(asset.symbol);\n            }\n        });\n\n\n    });\n\n    $('#coin-send-name', coinWindow.content).change();\n\n}","export default async function render(coinWindow) {\n\n    // console.log('coinWindow', coinWindow, 'this', this.html);\n    $(coinWindow.content).html(this.html);\n\n    await this.updateCoinList(coinWindow);\n\n    /*\n    if (this.bp.me === 'Marak') {\n        // initial seed coins, will only work the first time\n        // additional calls will fail due to unique constraint on symbol\n        try {\n            await this.createInitialCoins.call(this);\n        } catch (err) {\n            console.error(err);\n            $('.coin-error').text(err.message);\n        }\n    }\n    */\n\n    // attempt to pre-select the #coin-name drop down value based on symbol\n    let coinSelector = $('#coin-send-name', coinWindow.content);\n    coinSelector.val(this.context);\n\n}\n","export default async function createInitialCoins() {\n    try {\n        await this.resource.create('BUX', {\n            name: 'BuddyBux',\n            symbol: 'BUX',\n            supply: 10000000,\n            status: 'listed',\n            //price: prices['BUX'],\n            //cost: 1000 * prices['BUX'],\n            owner: 'Marak'\n        });\n    } catch (err) {\n        console.error(err);\n        $('.coin-error').text(err.message);\n    }\n\n    try {\n        await this.resource.create('MEGA', {\n            name: 'Megabytes',\n            symbol: 'MEGA',\n            supply: 1000000000,\n            status: 'listed',\n            price: 0.01,\n            //cost: '0', // everyone gets 10 for free\n            owner: 'Marak'\n        });\n    } catch (err) {\n        console.error(err);\n        $('.coin-error').text(err.message);\n    }\n\n\n    try {\n        await this.resource.create('GBP', {\n            name: 'Good Buddy Points',\n            symbol: 'GBP',\n            supply: 10000000000,\n            status: 'listed',\n            price: 0.001,\n            owner: 'Marak'\n        });\n    } catch (err) {\n        console.error(err);\n        $('.coin-error').text(err.message);\n    }\n\n}"],"names":["memoryStore","MemoryProvider","constructor","resourceName","this","create","owner","data","schema","Object","keys","forEach","key","required","undefined","Error","unique","values","some","entry","type","newId","Math","random","toString","substring","newEntry","id","get","update","remove","success","search","query","filter","item","every","list","all","RestProvider","options","apiEndpoint","bp","apiRequest","method","path","body","urlparams","headers","JSON","stringify","qtokenid","me","url","URLSearchParams","response","fetch","ok","console","log","json","error","err","IndexedDbProvider","dbName","version","db","init","Promise","resolve","reject","request","indexedDB","open","onupgradeneeded","event","target","result","objectStoreNames","contains","createObjectStore","keyPath","onsuccess","onerror","errorCode","_withStore","mode","callback","store","transaction","objectStore","add","put","delete","getAll","schemaRegistry","Resource","name","providerType","provider","length","_createProvider","IndexedDBProvider","async","updateCoinList","coinWindow","coins","resource","results","updateUserCoins","call","updateAllCoins","coinSelector","$","html","coin","symbol","context","append","content","hide","myCoins","show","userCoinList","row","createCoinRow","allCoinList","status","includeOwner","includeAdmin","formattedSupply","supply","toLocaleString","listVerb","find","prop","addClass","on","ev","hasClass","updatedResponse","Coin$1","config","Infinity","stubBalances","Bob","GBP","apiClientStub","balanceOf","mint","amount","burn","from","send","to","receive","setSupply","ownerId","getSupply","Coin","prototype","mintCoin","parent","res","price","text","message","sendCoin","userTransaction","trigger","load","css","coinWindows","coinEndpoint","CoinClass","portfolio","buddypond","portfolioEndpoint","render","coinWindowId","focus","apps","ui","windowManager","createWindow","title","icon","x","y","width","height","minWidth","minHeight","className","resizable","minimizable","maximizable","closable","focusable","maximized","minimized","onClose","eventBind","tabs","navigateToTab","attr","fetchLeaderboard","val","leadersList","empty","i","value","total_amount","style","currency","minimumFractionDigits","maximumFractionDigits","Tabs","onTab","tabId","change","click","coinName","document","querySelector","trim","coinSymbol","coinSupply","parseInt","coinPrice","parseFloat","isNaN","alert","sendTo","transfer","currentCoin","coinBalance","assets","coinBalances","asset","createInitialCoins"],"mappings":"AAAA,MAAMA,EAAc,CAAA,EAEL,MAAMC,EACjB,WAAAC,CAAYC,GACRC,KAAKD,aAAeA,EACpBH,EAAYI,KAAKD,cAAgB,GACjCC,KAAKJ,YAAcA,CAC3B,CAEI,MAAAK,CAAOC,EAAOC,EAAMC,GAEhBC,OAAOC,KAAKF,GAAQG,SAASC,IACzB,GAAIJ,EAAOI,GAAKC,gBAA2BC,IAAdP,EAAKK,IAAoC,OAAdL,EAAKK,IACzD,MAAM,IAAIG,MAAM,GAAGH,iBAGvB,GAAIJ,EAAOI,GAAKI,OAAQ,CAEpB,GADgBP,OAAOQ,OAAOjB,EAAYI,KAAKD,eACnCe,MAAKC,GAASA,EAAMP,KAASL,EAAKK,KAC1C,MAAM,IAAIG,MAAM,GAAGH,mBAEvC,CAEY,GAAIJ,EAAOI,GAAKQ,aAAeb,EAAKK,KAASJ,EAAOI,GAAKQ,KACrD,MAAM,IAAIL,MAAM,GAAGH,qBAAuBJ,EAAOI,GAAKQ,iBAAiBb,EAAKK,SAKpF,MAAMS,EAwEHC,KAAKC,SAASC,SAAS,IAAIC,UAAU,EAAG,IAvErCC,EAAW,CAAEC,GAAIN,EAAOf,SAO9B,OALAG,OAAOC,KAAKF,GAAQG,SAASC,IACzBc,EAASd,GAAOL,EAAKK,IAAQ,QAGjCZ,EAAYI,KAAKD,cAAckB,GAASK,EACjCA,CACf,CAEI,GAAAE,CAAItB,EAAOqB,GACP,MAAMR,EAAQnB,EAAYI,KAAKD,cAAcwB,GAC7C,OAAOR,GAASA,EAAMb,QAAUA,EAAQa,EAAQ,IACxD,CAEI,MAAAU,CAAOvB,EAAOqB,EAAIpB,EAAMC,GACpB,MAAMW,EAAQnB,EAAYI,KAAKD,cAAcwB,GAC7C,IAAKR,GAASA,EAAMb,QAAUA,EAC1B,MAAM,IAAIS,MAAM,GAAGX,KAAKD,0CAwB5B,OApBAM,OAAOC,KAAKF,GAAQG,SAASC,IACzB,GAAIJ,EAAOI,GAAKC,gBAA2BC,IAAdP,EAAKK,IAAoC,OAAdL,EAAKK,IACzD,MAAM,IAAIG,MAAM,GAAGH,oBAY3BH,OAAOC,KAAKF,GAAQG,SAASC,SACPE,IAAdP,EAAKK,KACLO,EAAMP,GAAOL,EAAKK,OAInBO,CACf,CAEI,MAAAW,CAAOxB,EAAOqB,GACV,MAAMR,EAAQnB,EAAYI,KAAKD,cAAcwB,GAC7C,IAAKR,GAASA,EAAMb,QAAUA,EAC1B,MAAM,IAAIS,MAAM,GAAGX,KAAKD,0CAI5B,cADOH,EAAYI,KAAKD,cAAcwB,GAC/B,CAAEI,SAAS,EAC1B,CAEI,MAAAC,CAAO1B,EAAO2B,GAEV,OAAOxB,OAAOQ,OAAOjB,EAAYI,KAAKD,eAAe+B,QAAOC,GAAQA,EAAK7B,QAAUA,GAASG,OAAOC,KAAKuB,GAAOG,OAAMxB,GAAOuB,EAAKvB,KAASqB,EAAMrB,MACxJ,CAEI,IAAAyB,CAAK/B,GACD,OAAOG,OAAOQ,OAAOjB,EAAYI,KAAKD,eAAe+B,QAAOC,GAAQA,EAAK7B,QAAUA,GAC3F,CAEI,GAAAgC,GACI,OAAO7B,OAAOQ,OAAOjB,EAAYI,KAAKD,cAC9C,EChGe,MAAMoC,EACjB,WAAArC,CAAYC,EAAcqC,EAAU,IAEhCpC,KAAKD,aAAeA,EACpBC,KAAKqC,YAAcD,EAAQC,YACvBD,EAAQE,KACRtC,KAAKsC,GAAKF,EAAQE,GAE9B,CAEI,gBAAMC,CAAWC,EAAQC,EAAMC,EAAO,KAAMC,EAAY,MAEpD,MAAMP,EAAU,CAAEI,SAAQI,QAAS,CAAE,eAAgB,qBACjDF,IAAMN,EAAQM,KAAOG,KAAKC,UAAUJ,IAEpC1C,KAAKsC,GAAGS,WACRX,EAAQQ,QAAuB,cAAI,UAAU5C,KAAKsC,GAAGS,YAGzDX,EAAQQ,QAAQ,QAAU5C,KAAKsC,GAAGU,GAElC,IAAIC,EAAM,GAAGjD,KAAKqC,eAAeI,IAEjC,GAAIE,EAAW,CAEXM,GAAO,IADQ,IAAIC,gBAAgBP,GACjBvB,YAC9B,CAGQ,MAAM+B,QAAiBC,MAAMH,EAAKb,GAClC,IAAKe,EAASE,GAAI,CACdC,QAAQC,IAAI,sBAAuBJ,GAEnC,IACI,IAAIK,QAAaL,EAASK,OAE1B,MADAF,QAAQC,IAAI,sBAAuBC,GAC7B,IAAI7C,MAAM,GAAG6C,EAAKC,QAE3B,CAAC,MAAOC,GAEL,MADAJ,QAAQC,IAAI,QAASG,GACf,IAAI/C,MAAM+C,EAChC,CACY,MAAM,IAAI/C,MAAM,uBAAuB6C,KAAKC,QACxD,CACQ,OAAON,EAASK,MACxB,CAEI,YAAMvD,CAAOsB,EAAIpB,GAEb,OADAmD,QAAQC,IAAI,iBAAkB,GAAGvD,KAAKD,eAAgBI,GAC/CH,KAAKuC,WAAW,OAAQ,GAAGvC,KAAKD,eAAgBI,EAC/D,CAEI,SAAMqB,CAAItB,EAAOqB,GACb,OAAOvB,KAAKuC,WAAW,MAAO,GAAGvC,KAAKD,gBAAgBG,KAASqB,IACvE,CAEI,YAAME,CAAOF,EAAIpB,GAEb,OADAmD,QAAQC,IAAI,kBAAkBvD,KAAKD,gBAAgBwB,IAAMpB,GAClDH,KAAKuC,WAAW,MAAO,GAAGvC,KAAKD,gBAAgBwB,IAAMpB,EACpE,CAEI,YAAMuB,CAAOH,GACT,OAAOvB,KAAKuC,WAAW,SAAU,GAAGvC,KAAKD,gBAAgBwB,IACjE,CAEI,UAAMU,GAEF,OADAqB,QAAQC,IAAI,eAAgB,GAAGvD,KAAKD,gBAC7BC,KAAKuC,WAAW,MAAO,GAAGvC,KAAKD,eAC9C,CAEI,SAAMmC,GACF,OAAOlC,KAAKuC,WAAW,MAAOvC,KAAKD,aAC3C,CAEI,YAAM6B,CAAO1B,EAAO2B,EAAOc,EAAY,CAAA,GACnC,OAAO3C,KAAKuC,WAAW,OAAQ,GAAGvC,KAAKD,sBAAuB8B,EAAOc,EAC7E,EC5Ee,MAAMgB,EACjB,WAAA7D,CAAYC,GACRC,KAAKD,aAAeA,EACpBC,KAAK4D,OAAS,sBACd5D,KAAK6D,QAAU,EACf7D,KAAK8D,GAAK,KACV9D,KAAK+D,MACb,CAEI,UAAMA,GACF,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACzB,MAAMC,EAAUC,UAAUC,KAAKrE,KAAK4D,OAAQ5D,KAAK6D,SAEjDM,EAAQG,gBAAmBC,IACvB,IAAIT,EAAKS,EAAMC,OAAOC,OACjBX,EAAGY,iBAAiBC,SAAS3E,KAAKD,eACnC+D,EAAGc,kBAAkB5E,KAAKD,aAAc,CAAE8E,QAAS,QAI3DV,EAAQW,UAAaP,IACjBvE,KAAK8D,GAAKS,EAAMC,OAAOC,OACvBR,KAGJE,EAAQY,QAAWR,IACfL,EAAO,oBAAoBK,EAAMC,OAAOQ,gBAGxD,CAEI,gBAAMC,CAAWC,EAAMC,GAInB,OAHKnF,KAAK8D,UACA9D,KAAK+D,OAER,IAAIC,SAAQ,CAACC,EAASC,KACzB,MACMkB,EADKpF,KAAK8D,GAAGuB,YAAYrF,KAAKD,aAAcmF,GACjCI,YAAYtF,KAAKD,cAC5BoE,EAAUgB,EAASC,GAEzBjB,EAAQW,UAAY,IAAMb,EAAQE,EAAQM,QAC1CN,EAAQY,QAAU,IAAMb,EAAOC,EAAQV,SAEnD,CAEI,YAAMxD,CAAOC,EAAOC,EAAMC,GACtB,MACMkB,EAAW,CAAEC,GAkEhBL,KAAKC,SAASC,SAAS,IAAIC,UAAU,EAAG,IAlEbnB,SAO9B,OALAG,OAAOC,KAAKF,GAAQG,SAASC,IACzBc,EAASd,GAAOL,EAAKK,IAAQ,cAG3BR,KAAKiF,WAAW,aAAcG,GAAUA,EAAMG,IAAIjE,KACjDA,CACf,CAEI,SAAME,CAAItB,EAAOqB,GACb,MAAMR,QAAcf,KAAKiF,WAAW,YAAaG,GAAUA,EAAM5D,IAAID,KACrE,OAAOR,GAASA,EAAMb,QAAUA,EAAQa,EAAQ,IACxD,CAEI,YAAMU,CAAOvB,EAAOqB,EAAIpB,EAAMC,GAC1B,MAAMW,QAAcf,KAAKwB,IAAItB,EAAOqB,GACpC,IAAKR,EACD,MAAM,IAAIJ,MAAM,GAAGX,KAAKD,0CAU5B,OAPAM,OAAOC,KAAKF,GAAQG,SAASC,SACPE,IAAdP,EAAKK,KACLO,EAAMP,GAAOL,EAAKK,aAIpBR,KAAKiF,WAAW,aAAcG,GAAUA,EAAMI,IAAIzE,KACjDA,CACf,CAEI,YAAMW,CAAOxB,EAAOqB,GAEhB,UADoBvB,KAAKwB,IAAItB,EAAOqB,GAEhC,MAAM,IAAIZ,MAAM,GAAGX,KAAKD,0CAI5B,aADMC,KAAKiF,WAAW,aAAcG,GAAUA,EAAMK,OAAOlE,KACpD,CAAEI,SAAS,EAC1B,CAEI,UAAMM,CAAK/B,GACP,OAAO,IAAI8D,SAAQ,CAACC,EAASC,KACzBlE,KAAKiF,WAAW,YAAaG,IACzB,MAAMjB,EAAUiB,EAAMM,SACtBvB,EAAQW,UAAY,KAChBb,EAAQE,EAAQM,OAAO3C,QAAOC,GAAQA,EAAK7B,QAAUA,MAEzDiE,EAAQY,QAAU,IAAMb,EAAOC,EAAQV,YAGvD,CAEI,SAAMvB,GACF,OAAO,IAAI8B,SAAQ,CAACC,EAASC,KACzBlE,KAAKiF,WAAW,YAAaG,IACzB,MAAMjB,EAAUiB,EAAMM,SACtBvB,EAAQW,UAAY,IAAMb,EAAQE,EAAQM,QAC1CN,EAAQY,QAAU,IAAMb,EAAOC,EAAQV,YAGvD,ECxGA,MAAMkC,EAAiB,CAAE,EAEV,MAAMC,EACjB,WAAA9F,CAAY+F,EAAMzD,GAKd,GAJApC,KAAK6F,KAAOA,EACZ7F,KAAKI,OAASgC,EAAQhC,QAAU,CAAE,EAClCJ,KAAK8F,aAAe1D,EAAQ2D,UAAY,SAEA,IAApC1F,OAAOC,KAAKN,KAAKI,QAAQ4F,OACzB,MAAM,IAAIrF,MAAM,+CAA+CkF,KAInEF,EAAe3F,KAAK6F,MAAQ7F,KAAKI,OAEjCJ,KAAK+F,SAAW/F,KAAKiG,gBAAgBjG,KAAK8F,aAAc1D,GACxDpC,KAAK+F,SAASzD,GAAKF,EAAQE,EACnC,CAEI,eAAA2D,CAAgBH,EAAc1D,GAC1B,OAAQ0D,GACJ,IAAK,OACD,OAAO,IAAI3D,EAAanC,KAAK6F,KAAMzD,GACvC,IAAK,YACD,OAAO,IAAI8D,EAAkBlG,KAAK6F,KAAMzD,GAE5C,QACI,OAAO,IAAIvC,EAAeG,KAAK6F,MAE/C,CAEI,MAAA5F,CAAOC,EAAOC,GACV,OAAOH,KAAK+F,SAAS9F,OAAOC,EAAOC,EAAMH,KAAKI,OACtD,CAEI,GAAAoB,CAAItB,EAAOqB,GACP,OAAOvB,KAAK+F,SAASvE,IAAItB,EAAOqB,EACxC,CAEI,MAAAE,CAAOvB,EAAOqB,EAAIpB,GACd,OAAOH,KAAK+F,SAAStE,OAAOvB,EAAOqB,EAAIpB,EAAMH,KAAKI,OAC1D,CAEI,MAAAsB,CAAOxB,EAAOqB,GACV,OAAOvB,KAAK+F,SAASrE,OAAOxB,EAAOqB,EAC3C,CAEI,IAAAU,CAAK/B,GACD,OAAOF,KAAK+F,SAAS9D,KAAK/B,EAClC,CAEI,MAAA0B,CAAO1B,EAAO2B,EAAOc,GACjB,OAAO3C,KAAK+F,SAASnE,OAAO1B,EAAO2B,EAAOc,EAClD,CAEI,GAAAT,GACI,OAAOlC,KAAK+F,SAAS7D,KAC7B,CAII,gBAAMK,CAAWC,EAAQC,EAAMC,EAAO,MAClC,OAAO1C,KAAK+F,SAASxD,WAAWC,EAAQC,EAAMC,EACtD,ECnEeyD,eAAeC,EAAeC,GACzC,IACIC,SADetG,KAAKuG,SAAStE,QACduE,QACnBlD,QAAQC,IAAI,aAAc+C,GAG1BG,EAAgBC,KAAK1G,KAAMqG,EAAYC,GAGvCK,EAAeD,KAAK1G,KAAMqG,EAAYC,GAGtC,IAAIM,EAAeC,EAAE,eACrBD,EAAaE,KAAK,IAClBR,EAAM/F,SAAQwG,IAENA,EAAKC,SAAWhH,KAAKiH,QAIzBL,EAAaM,OAAO,kBAAkBH,EAAKC,WAAWD,EAAKlB,iBAHvDe,EAAaM,OAAO,kBAAkBH,EAAKC,oBAAoBD,EAAKlB,oBAK5EgB,EAAE,iBAAkBR,EAAWc,SAASC,MAE5C,CAEA,SAASX,EAAgBJ,EAAYC,GAEjC,IAAIe,EAAUf,EAAMxE,QAAOiF,GAAQA,EAAK7G,QAAUF,KAAKsC,GAAGU,KAC1D,GAAuB,IAAnBqE,EAAQrB,OAGR,OAFAa,EAAE,mBAAoBR,EAAWc,SAASC,YAC1CP,EAAE,YAAaR,EAAWc,SAASG,OAGvCT,EAAE,mBAAoBR,EAAWc,SAASG,OAC1CT,EAAE,YAAaR,EAAWc,SAASC,OACnC,IAAIG,EAAeV,EAAE,kBAAmBR,EAAWc,SACnDI,EAAaT,KAAK,IAElBO,EAAQ9G,SAAQwG,IACZ,IAAIS,EAAMC,EAAcf,KAAK1G,KAAM+G,GAAM,GAAO,EAAMV,GACtDkB,EAAaL,OAAOM,KAG5B,CAEA,SAASb,EAAeN,EAAYC,GAChC,IAAIoB,EAAcb,EAAE,iBAAkBR,EAAWc,SACjDO,EAAYZ,KAAK,IACjBR,EAAM/F,SAAQwG,IACV,GAAoB,WAAhBA,EAAKY,OACL,OAEJ,IAAIH,EAAMC,EAAcf,KAAK1G,KAAM+G,GAAM,GAAM,EAAOV,GACtDqB,EAAYR,OAAOM,KAG3B,CAGA,SAASC,EAAcV,EAAMa,GAAe,EAAOC,GAAe,EAAOxB,GACrE,MAAMyB,EAAkBf,EAAKgB,OAAOC,eAAe,SACnD,IAAIC,EAA2B,WAAhBlB,EAAKY,OAAsB,SAAW,OACjDH,EAAMX,EAAE,mCAEEE,EAAKC,gCACLD,EAAKlB,8BACLiC,uBACJF,EAAe,OAAOb,EAAK7G,aAAe,mBAC1C2H,EAAe,+DAC2BI,wCAA+CA,kGAElF,2BAwEjB,MApEoB,WAAhBlB,EAAKY,SAELH,EAAIU,KAAK,eAAeC,KAAK,YAAY,GACzCX,EAAIU,KAAK,eAAeE,SAAS,aAGrCZ,EAAIa,GAAG,SAASlC,MAAOmC,IAGnB,GAAIzB,EAAEyB,EAAG9D,QAAQ+D,SAAS,kBAAmB,CAYzC,GAAoB,WAAhBxB,EAAKY,OAAqB,CAC1B,IAAIa,QAAwBxI,KAAKuG,SAAS9E,OAAOsF,EAAKxF,GAAI,CAAEoG,OAAQ,YAIpE,OAHArE,QAAQC,IAAI,8BAA+BiF,GAE3CpC,EAAeM,KAAK1G,KAAMqG,IACnB,CACvB,CAEY,GAAoB,YAAhBU,EAAKY,OAAsB,CAC3B,IAAIa,QAAwBxI,KAAKuG,SAAS9E,OAAOsF,EAAKxF,GAAI,CAAEoG,OAAQ,WAIpE,OAHArE,QAAQC,IAAI,6BAA8BiF,GAE1CpC,EAAeM,KAAK1G,KAAMqG,IACnB,CACvB,CAEY,OAAO,CAEnB,CAGQ,GAAIQ,EAAEyB,EAAG9D,QAAQ+D,SAAS,cAUtB,aAHMvI,KAAKuG,SAAS7E,OAAOqF,EAAKC,QAEhCZ,EAAeM,KAAK1G,KAAMqG,IACnB,EAGPU,EAAKC,OAILD,EAAKY,UASNH,CACX,CC3Ie,IAAAiB,EAAA,MACX,WAAA3I,CAAY4I,EAAS,IACjB1I,KAAK6F,KAAO6C,EAAO7C,MAAQ,oBAC3B7F,KAAKgH,OAAS0B,EAAO1B,QAAU,MAC/BhH,KAAKE,MAAQwI,EAAOxI,OAAS,WAC7BF,KAAK+H,OAASW,EAAOX,QAAUY,IAC/B3I,KAAKuG,SAAWmC,EAAOnC,SACvBvG,KAAKgD,GAAK0F,EAAO1F,GACjBhD,KAAK4I,aAAe,CAChBC,IAAO,CACHC,IAAO,IAIf9I,KAAK+I,cAAgB,CACjBC,UAAa,CAACjC,EAAM7G,KAChBoD,QAAQC,IAAI,sBAAuBwD,EAAM7G,EAAOF,KAAK4I,aAAa1I,GAAO6G,IACzEzD,QAAQC,IAAI,eAAgBvD,KAAK4I,cAC1B5I,KAAK4I,aAAa1I,GAAO6G,IAEpCkC,KAAQ,CAAClC,EAAMmC,EAAQ9G,EAAU,CAAA,KAM7B,GALKpC,KAAK4I,aAAaxG,EAAQlC,SAC3BF,KAAK4I,aAAaxG,EAAQlC,OAAS,CAAE,GAEzCoD,QAAQC,IAAI,+DAAgEvD,KAAK+H,OAAQmB,GAErFlJ,KAAK+H,OAASmB,EACd,MAAM,IAAIvI,MAAM,qCAGpBX,KAAK4I,aAAaxG,EAAQlC,OAAO6G,IAAS/G,KAAK4I,aAAaxG,EAAQlC,OAAO6G,IAAS,GAAKmC,EACzF5F,QAAQC,IAAI,iBAAkBwD,EAAMmC,EAAQ9G,IAEhD+G,KAAQ,CAACpC,EAAMmC,EAAQE,EAAMhH,EAAU,CAAA,KACnC,GAAIpC,KAAK4I,aAAaQ,GAAMrC,GAAQmC,EAChC,MAAM,IAAIvI,MAAM,+BAEpBX,KAAK4I,aAAaQ,GAAMrC,IAASmC,EACjC5F,QAAQC,IAAI,iBAAkBwD,EAAMmC,EAAQE,EAAMhH,IAEtDiH,KAAQ,CAACtC,EAAMmC,EAAQI,EAAIF,EAAMhH,EAAU,MAEvC,GADAkB,QAAQC,IAAI,qBAAsBwD,EAAMmC,EAAQI,EAAIlH,EAASpC,KAAK4I,aAAaQ,GAAMrC,IACjF/G,KAAK4I,aAAaQ,GAAMrC,GAAQmC,EAChC,MAAM,IAAIvI,MAAM,uBAEpBX,KAAK4I,aAAaQ,GAAMrC,IAASmC,EACjClJ,KAAK4I,aAAaU,GAAMtJ,KAAK4I,aAAaU,IAAO,CAAE,EACnDtJ,KAAK4I,aAAaU,GAAIvC,IAAS/G,KAAK4I,aAAaU,GAAIvC,IAAS,GAAKmC,EACnE5F,QAAQC,IAAI,iBAAkBwD,EAAMmC,EAAQI,EAAIlH,IAEpDmH,QAAW,CAACxC,EAAMmC,EAAQE,EAAMhH,EAAU,CAAA,KACtCpC,KAAK4I,aAAaQ,GAAQpJ,KAAK4I,aAAaQ,IAAS,CAAE,EACvDpJ,KAAK4I,aAAaQ,GAAMrC,IAAS/G,KAAK4I,aAAaQ,GAAMrC,IAAS,GAAKmC,EACvE5F,QAAQC,IAAI,oBAAqBwD,EAAMmC,EAAQE,EAAMhH,IAEzDoH,UAAa,CAACzC,EAAMgB,EAAQ0B,KACxBnG,QAAQC,IAAI,sBAAuBwD,EAAMgB,EAAQ0B,IAErDC,UAAc3C,IACVzD,QAAQC,IAAI,sBAAuBwD,EAAM/G,KAAK+H,QACvC/H,KAAK+H,QAG5B,CAEI,SAAA2B,GACI,OAAO1J,KAAK+I,cAAcW,UAAU1J,KAAKgH,OACjD,CAEI,SAAAwC,CAAUzB,EAAQ0B,GACd,GAAIA,IAAYzJ,KAAKE,MACjB,MAAM,IAAIS,MAAM,sCAEpBX,KAAK+H,OAASA,EACd/H,KAAK+I,cAAcS,UAAUxJ,KAAKgH,OAAQe,EAAQ0B,EAC1D,CAEI,IAAAJ,CAAKH,EAAQI,EAAIF,GACb,OAAOpJ,KAAK+I,cAAcM,KAAKrJ,KAAKgH,OAAQkC,EAAQI,EAAIF,EAAM,CAAElJ,MAAOF,KAAKE,OACpF,CAEI,OAAAqJ,CAAQL,EAAQI,EAAIF,GAChB,OAAOpJ,KAAK+I,cAAcQ,QAAQvJ,KAAKgH,OAAQkC,EAAQI,EAAIF,EAAM,CAAElJ,MAAOF,KAAKE,OACvF,CAEI,IAAA+I,CAAKC,GACD,OAAOlJ,KAAK+I,cAAcE,KAAKjJ,KAAKgH,OAAQkC,EAAQ,CAAEhJ,MAAOF,KAAKE,OAC1E,CAEI,IAAAiJ,CAAKD,EAAQE,GACT,OAAOpJ,KAAK+I,cAAcI,KAAKnJ,KAAKgH,OAAQkC,EAAQE,EAAM,CAAElJ,MAAOF,KAAKE,OAChF,CAEI,SAAA8I,CAAU9I,GACN,OAAOF,KAAK+I,cAAcC,UAAUhJ,KAAKgH,OAAQ9G,EACzD,GAIAyJ,EAAKC,UAAUC,SCzGA1D,eAAyB2D,EAAQ/C,GAC5CzD,QAAQC,IAAI,WAAYwD,GAErB,IACC,IAAIgD,QAAY/J,KAAKuG,SAAStG,OAAO8G,EAAKC,OAAQ,CAC9CnB,KAAMkB,EAAKlB,KACXmB,OAAQD,EAAKC,OACb9G,MAAO6G,EAAK7G,MACZ6H,OAAQhB,EAAKgB,OACbiC,MAAOjD,EAAKiD,QAKhB,OAHA1G,QAAQC,IAAI,oBAAqBwG,GACjClD,EAAE,eAAeoD,KAAK,IACtBpD,EAAE,iBAAiBoD,KAAK,4BAA8BpH,KAAKC,UAAUiH,IAC9DA,CACV,CAAC,MAAOrG,GAELJ,QAAQG,MAAM,sBAAuBC,GACrCmD,EAAE,eAAeoD,KAAKvG,EAAIwG,QAClC,CAGA,EDoFAP,EAAKC,UAAUO,SE1GAhE,eAAwB2D,EAAQM,GAC3C9G,QAAQC,IAAI,WAAY6G,GAIxB,IACI,IAAIL,QAAY/J,KAAKuG,SAAShE,WAAW,OAAQ,aAAa6H,EAAgBhB,gBAAiBgB,GAO/F,OANA9G,QAAQC,IAAI,oBAAqB6G,EAAiBL,GAClDlD,EAAE,eAAeoD,KAAK,IAGtBpD,EAAE,mBAAmBwD,QAAQ,UAC7BxD,EAAE,sBAAsBC,KAAK,QAAQsD,EAAgBlB,UAAUkB,EAAgBpD,aAAaoD,EAAgBd,OACrGS,CACV,CAAC,MAAOrG,GAELJ,QAAQG,MAAM,sBAAuBC,GACrCmD,EAAE,eAAeoD,KAAKvG,EAAIwG,QAClC,CAEIrD,EAAE,sBAAsBoD,KAAK,sBAGjC,ECZe,MAAMN,EAEjB,WAAA7J,CAAYwC,EAAIF,EAAU,IAEtB,OADApC,KAAKsC,GAAKA,EACHtC,IACf,CAEI,UAAM+D,GACF/D,KAAK8G,WAAa9G,KAAKsC,GAAGgI,KAAK,iCAC/BtK,KAAKuK,UAAYvK,KAAKsC,GAAGgI,KAAK,gCAE9BtK,KAAKwK,YAAc,GAEnBxK,KAAKuG,SAAW,IAAIX,EAAS,OAAQ,CACjCG,SAAU,OACV1D,YAAarC,KAAKsC,GAAGoG,OAAO+B,cAAgB,IAC5CrK,OAAQ,CACJyF,KAAM,CAAE7E,KAAM,SAAUP,UAAU,GAClCuG,OAAQ,CAAEhG,KAAM,SAAUJ,QAAQ,EAAMH,UAAU,GAClDP,MAAO,CAAEc,KAAM,SAAUP,UAAU,GACnCsH,OAAS,CAAE/G,KAAM,SAAUP,UAAU,IAEzC6B,GAAItC,KAAKsC,KAGbtC,KAAK+G,KAAO,IAAI2D,EAAU,CAAEnE,SAAUvG,KAAKuG,SAAUvD,GAAIhD,KAAKsC,GAAGU,KAEjEhD,KAAK2K,UAAY,IAAIxI,EAAa,YAAa,CAC3CE,YAAauI,UAAUC,mBAAqB,IAC5CvI,GAAItC,KAAKsC,IAGrB,CAEI,YAAMwI,GACF,OAAO9K,KAAK8G,IACpB,CAEI,UAAMzC,CAAMjC,EAAU,IAClB,IAAI6E,EAAU7E,EAAQ6E,QACN,YAAZA,IACAA,EAAU,OAEd,IAAIjG,EAAOoB,EAAQpB,MAAQ,GAC3BhB,KAAKiH,QAAUA,EACfjH,KAAKgB,KAAOA,EAEZ,IAAI+J,EAAe,OAEnB,GAAK/K,KAAKwK,YAAYO,GA0ClB/K,KAAKwK,YAAYO,GAAcC,YA1CE,CACjC,IAAI3E,EAAarG,KAAKwK,YAAYO,GAAgB/K,KAAKsC,GAAG2I,KAAKC,GAAGC,cAAcC,aAAa,CACzF7J,GAAIwJ,EACJM,MAAO,cACPC,KAAM,+CACNC,EAAG,IACHC,EAAG,GACHC,MAAO,IACPC,OAAQ,IACRC,SAAU,IACVC,UAAW,IACX5K,KAAM,OACN8I,OAAQjD,EAAE,YAAY,GACtBgF,UAAW,sBAEXC,WAAW,EACXC,aAAa,EACbC,aAAa,EACbC,UAAU,EACVC,WAAW,EACXC,WAAW,EACXC,WAAW,EACXC,QAAS,KACLrM,KAAKwK,YAAYO,GAAgB,cAGnC/K,KAAK8K,OAAOzE,GAClBrG,KAAKsM,UAAUjG,GAEXrF,GACAhB,KAAKuM,KAAKC,cAAc,SAAWxL,GAGpB,UAAfhB,KAAKsC,GAAGU,KAGR6D,EAAE,cAAc4F,KAAK,WAAY,YACjC5F,EAAE,cAAcuB,SAAS,YACzBvB,EAAE,cAAc4F,KAAK,QAAS,iDAE9C,CAIK,EAIL9C,EAAKC,UAAU0C,UC3GA,SAAmBjG,GAyB9BF,eAAeuG,IAGX,IAAI1F,EAASH,EAAE,2BAA4BR,EAAWc,SAASwF,MAC3D5C,QAAY/J,KAAK2K,UAAUpI,WAAW,OAAQ,gBAAiB,CAAEyE,OAAQA,IAEzE4F,EAAc/F,EAAE,oBAAqBR,EAAWc,SAEpDyF,EAAYC,QACZ9C,EAAIvD,QAAQjG,SAAQ,CAACwG,EAAM+F,KAEvB,IAAIC,EAAQhG,EAAKiG,aAAejG,EAAKiD,MAIrC+C,EAAQA,EAAM/E,eAAe,QAAS,CAAEiF,MAAO,WAAYC,SAAU,QAGrEnG,EAAKiG,aAAejG,EAAKiG,aAAahF,eAAe,QAAS,CAC1DmF,sBAAuB,EACvBC,sBAAuB,IAE3BR,EAAY1F,OAAO,2DAED4F,EAAI,uCACJ/F,EAAK7G,2CACL6G,EAAKC,4CACLD,EAAKiG,kDACLD,0DAItBlG,EAAE,uBAAwBR,EAAWc,SAASC,MACtD,CAzDI9D,QAAQC,IAAI,0BAA2B8C,EAAWc,SAElDnH,KAAKuM,KAAO,IAAIvM,KAAKsC,GAAG2I,KAAKC,GAAGmC,KAAK,kBAAmBhH,EAAWc,SAEnEnH,KAAKuM,KAAKe,OAAMnH,MAAOoH,IACnB1G,EAAE,eAAeoD,KAAK,IAEtB3G,QAAQC,IAAI,QAASgK,GACP,sBAAVA,SAEMb,EAAiBhG,KAAK1G,SAMnC6G,EAAE,2BAA4BR,EAAWc,SAASqG,QAAOrH,UAEtDU,EAAE,uBAAwBR,EAAWc,SAASG,aACxCoF,EAAiBhG,KAAK1G,SAyChC6G,EAAE,aAAcR,EAAWc,SAASsG,OAAMtH,UAEtC,IAAIuH,EAAWC,SAASC,cAAc,cAAcb,MAAMc,OACtDC,EAAaH,SAASC,cAAc,gBAAgBb,MAAMc,OAC1DE,EAAaC,SAASL,SAASC,cAAc,gBAAgBb,MAAO,IACpEkB,EAAYC,WAAWP,SAASC,cAAc,eAAeb,QAC5DW,IAAaI,GAAcK,MAAMJ,IAAeA,GAAc,EAC/DK,MAAM,oCAIVpO,KAAK+G,KAAK8C,SAASxD,EAAWc,QAAS,CACnCtB,KAAM6H,EACNxN,MAAOF,KAAKsC,GAAGU,GACfgE,OAAQ8G,EACR/F,OAAQgG,EACR/D,MAAOiE,OAKfpH,EAAE,aAAcR,EAAWc,SAASsG,OAAMtH,UAEtC,IAAIkI,EAASxH,EAAE,iBAAiB8F,MAC5B3F,EAASH,EAAE,mBAAmB8F,MAC9BzD,EAASrC,EAAE,qBAAqB8F,MAEpC3M,KAAK2K,UAAU2D,SAASjI,EAAWc,QAAS,CACxCiC,KAAMpJ,KAAKsC,GAAGU,GACdsG,GAAI+E,EACJrH,OAAQA,EACRkC,OAAQA,OAIhBrC,EAAE,kBAAmBR,EAAWc,SAASqG,QAAOrH,UAE5C,IAAIoI,EAAc1H,EAAE,mBAAmB8F,MACnC6B,EAAc3H,EAAE,gBAAiBR,EAAWc,eAE1CnH,KAAKsC,GAAGgI,KAAK,aAGnB,MAAMmE,QAAezO,KAAKsC,GAAG2I,KAAKN,UAAUpE,SAAS3E,OAAO5B,KAAKsC,GAAGU,GAAI,CACpE9C,MAAOF,KAAKsC,GAAGU,KAEnBM,QAAQC,IAAI,qBAAsBgL,EAAaE,EAAOjI,SACtD,IAAIkI,EAAeD,EAAOjI,QAI1BK,EAAE,kBAAmBR,EAAWc,SAAS0F,QACzC6B,EAAanO,SAAQoO,IACjBrL,QAAQC,IAAI,iBAAiBoL,EAAM3H,2BAA2BuH,IAAeI,GAC7E9H,EAAE,kBAAmBR,EAAWc,SAASD,OAAO,kBAAkByH,EAAM3H,WAAW2H,EAAM3H,mBACrF2H,EAAM3H,SAAWuH,IACjBC,EAAYvE,KAAK0E,EAAMzF,QAEvBrC,EAAE,kBAAmBR,EAAWc,SAASwF,IAAIgC,EAAM3H,eAO/DH,EAAE,kBAAmBR,EAAWc,SAASqG,QAE7C,EDpBA7D,EAAKC,UAAUxD,eAAiBA,EAChCuD,EAAKC,UAAUkB,OE9GA3E,eAAsBE,GAGjCQ,EAAER,EAAWc,SAASL,KAAK9G,KAAK8G,YAE1B9G,KAAKoG,eAAeC,GAgBPQ,EAAE,kBAAmBR,EAAWc,SACtCwF,IAAI3M,KAAKiH,QAE1B,EFuFA0C,EAAKC,UAAUgF,mBG/GAzI,iBACX,UACUnG,KAAKuG,SAAStG,OAAO,MAAO,CAC9B4F,KAAM,WACNmB,OAAQ,MACRe,OAAQ,IACRJ,OAAQ,SAGRzH,MAAO,SAEd,CAAC,MAAOwD,GACLJ,QAAQG,MAAMC,GACdmD,EAAE,eAAeoD,KAAKvG,EAAIwG,QAClC,CAEI,UACUlK,KAAKuG,SAAStG,OAAO,OAAQ,CAC/B4F,KAAM,YACNmB,OAAQ,OACRe,OAAQ,IACRJ,OAAQ,SACRqC,MAAO,IAEP9J,MAAO,SAEd,CAAC,MAAOwD,GACLJ,QAAQG,MAAMC,GACdmD,EAAE,eAAeoD,KAAKvG,EAAIwG,QAClC,CAGI,UACUlK,KAAKuG,SAAStG,OAAO,MAAO,CAC9B4F,KAAM,oBACNmB,OAAQ,MACRe,OAAQ,KACRJ,OAAQ,SACRqC,MAAO,KACP9J,MAAO,SAEd,CAAC,MAAOwD,GACLJ,QAAQG,MAAMC,GACdmD,EAAE,eAAeoD,KAAKvG,EAAIwG,QAClC,CAEA"}