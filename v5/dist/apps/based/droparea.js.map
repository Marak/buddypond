{"version":3,"file":"droparea.js","sources":["../../../apps/based/droparea/droparea.js"],"sourcesContent":["export default class DropArea {\n    constructor(bp, options = {}) {\n        this.bp = bp;\n        this.options = options;\n        this.dropTarget = null; // Initialize with null to ensure proper targeting\n        this.dropInfoBar = this.createDropInfoBar(); // Create the UI element for displaying drop information\n    }\n\n    // Create a UI bar at the top of the document\n    createDropInfoBar() {\n        const bar = document.createElement('div');\n        bar.style.position = 'fixed';\n        bar.style.top = '0';\n        bar.style.left = '0';\n        bar.style.width = '100%';\n        bar.style.height = '120px';\n        bar.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n        bar.style.color = 'white';\n        bar.style.display = 'none'; // Start hidden\n        bar.style.alignItems = 'center';\n        bar.style.justifyContent = 'center';\n        bar.style.zIndex = '1000';\n        bar.style.padding = '10px';\n        document.body.appendChild(bar);\n        return bar;\n    }\n\n    // Called from parent bp app\n    async init() {\n        this.bp.log('Hello from DropArea');\n        this.setupListeners();\n        return 'DropArea loaded';\n    }\n\n    setupListeners() {\n        document.addEventListener('dragover', this.handleDragOver.bind(this), false);\n        document.addEventListener('dragleave', this.handleDragLeave.bind(this), false);\n        document.addEventListener('drop', this.handleDrop.bind(this), false);\n        document.addEventListener('dragend', this.handleDragEnd.bind(this), false);\n        document.addEventListener('mouseleave', this.handleDragLeave.bind(this), false);\n    }\n\n    handleDragOver(event) {\n        event.preventDefault(); // Prevent default behavior (prevent file from being opened)\n        this.dropInfoBar.style.display = 'flex'; // Show the info bar\n        let targetElement = event.target;\n        // Traverse up the DOM\n        while (targetElement && !targetElement.classList.contains('has-droparea')) {\n            if (targetElement === document.body) {\n                targetElement = null;\n                break;\n            }\n            targetElement = targetElement.parentNode;\n        }\n\n        // Update the visual state and drop information\n        if (targetElement !== this.dropTarget) {\n            if (this.dropTarget) {\n                this.dropTarget.style.border = ''; // Remove border from old drop target\n            }\n            if (targetElement) {\n                targetElement.style.border = '2px dashed #f0f'; // Apply border to new drop target\n                this.updateDropInfoBar(event, targetElement);\n            }\n            this.dropTarget = targetElement; // Update current drop target\n        } else if (targetElement) {\n            this.updateDropInfoBar(event, targetElement);\n        }\n    }\n\n    updateDropInfoBar(event, targetElement) {\n        const files = Array.from(event.dataTransfer.files).map(f => f.name).join(', ');\n        // console.log(\"Files during drag:\", event.dataTransfer.files);\n\n        // Gather data attributes from the target element\n        let targetData = {\n            id: targetElement.id || 'None',\n            app: targetElement.dataset.app || 'None',\n            type: targetElement.dataset.type || 'None',\n            context: targetElement.dataset.context || 'None'\n        };\n        // console.log('Target Data:', targetData);\n\n        // Build a string to display optional data attributes\n        let dataAttributes = `\n            <strong>ID:</strong> ${targetData.id}<br>\n            <strong>App:</strong> ${targetData.app}<br>\n            <strong>Type:</strong> ${targetData.type}<br>\n            <strong>Context:</strong> ${targetData.context}`;\n\n        // Update the innerHTML of the dropInfoBar to include targetData\n        this.dropInfoBar.innerHTML = `\n            <strong>Target:</strong> ${targetElement.className || 'None'}<br>\n            <strong>Files:</strong> ${files || 'None'}<br>\n            ${dataAttributes}`;\n    }\n\n    async handleDrop(event) {\n        console.log('DropArea: handleDrop called', event);\n        // ignore drag events for .taskbar-container class\n        if (event.target.classList.contains('taskbar-item') || event.target.classList.contains('taskbar-container')) {\n            console.log('DropArea: handleDrop ignored for taskbar-item');\n            return;\n        }\n        event.preventDefault();\n        if (this.dropTarget && event.target === this.dropTarget) {\n            this.triggerDropAreaHandler(event);\n        }\n        console.log('Files dropped:', event.target, event.dataTransfer.files);\n        // TODO: this should be on the EE for buddylist\n        // check to see if the target.id was \"mainOverlay\"\n        if (!this.dropTarget || this.dropTarget.id === 'mainOverlay') {\n            // open the file viewer\n            await this.bp.open('file-viewer');\n        } else {\n            let targetId = this.dropTarget.id;\n            let targetElement = $(this.dropTarget);\n            let targetApp = targetElement.data('app');\n            let targetType = targetElement.data('type');\n            let targetContext = targetElement.data('context');\n            // check to see if targetApp is loaded ( should be )\n            // and if target app has a droparea handler\n            let app = this.bp.apps[targetApp];\n            if (!app) {\n                console.error('target app not found:', targetApp);\n                return;\n            }\n\n            if (app.handleDrop) {\n                console.log('target app has droparea handler:', targetApp, 'using it...');\n                app.handleDrop(event);\n            }\n\n            // TODO: invert control, have the buddylist handle the drop event\n            if (targetApp === 'buddylist') {\n\n                let aimMessageControls = $('.aim-message-controls', this.dropTarget);\n                let aimSendButton = $('.aim-send-btn', aimMessageControls);\n                // set opacity to 1\n                aimSendButton.css('opacity', '1');\n\n                // insert a div above the .aim-input div\n                // this should be a preview of the file\n                let preview = document.createElement('div');\n                preview.innerHTML = 'File Preview';\n                preview.classList.add('file-preview');\n                //preview.style.border = '1px solid #f0f';\n                //preview.style.padding = '10px';\n                //preview.style.margin = '10px';\n                //preview.style.backgroundColor = '#f0f';\n                preview.style.color = '#fff';\n                preview.style.fontWeight = 'bold';\n                preview.style.textAlign = 'center';\n\n                // add cancel / remove x button in top right\n                let closeButton = document.createElement('button');\n                closeButton.innerHTML = 'X';\n                closeButton.style.position = 'absolute';\n                closeButton.style.top = '25px';\n                closeButton.style.right = '22px';\n                closeButton.style.backgroundColor = '#f00';\n                closeButton.style.color = '#fff';\n                closeButton.style.border = 'none';\n                closeButton.style.padding = '5px';\n                closeButton.style.cursor = 'pointer';\n                // opacity: 0.5;\n                closeButton.style.opacity = '0.9';\n                // closeButton.style.borderRadius = '50%';\n                closeButton.style.fontSize = '1.5em';\n                closeButton.style.zIndex = '1000';\n                closeButton.onclick = () => {\n                    preview.remove();\n                    aimSendButton.css('opacity', '0.5');\n                };\n\n                preview.appendChild(closeButton);\n\n                for (let i = 0; i < event.dataTransfer.files.length; i++) {\n                    let file = event.dataTransfer.files[i];\n\n                    let fileType = file.type;\n                    console.log(\"check file type\", fileType);\n                    const fileCategory = buddypond.getFileCategory(fileType);\n                    if (fileCategory === 'binary') {\n                        // not supported yet\n                        console.error('uploading binary files not supported yet...');\n\n                    } else {\n                        let fileViewerPreview = this.bp.apps['file-viewer'].displaySingleFile(file, preview);\n                        aimMessageControls.prepend(preview);\n                    }\n                }\n\n\n            }\n\n            //alert('Dropped on ' + targetId);\n        }\n\n        this.bp.emit('ui::droparea::drop', event.dataTransfer.files);\n        this.clearDropTarget();\n    }\n\n    handleDragLeave(event) {\n        if (event.target === document.documentElement || event.target === document.body) {\n            this.clearDropTarget();\n        }\n    }\n\n    handleDragEnd(event) {\n        this.clearDropTarget();\n    }\n\n    clearDropTarget() {\n        if (this.dropTarget) {\n            this.dropTarget.style.border = '';\n            this.dropTarget = null;\n        }\n        this.dropInfoBar.style.display = 'none'; // Hide the info bar\n    }\n\n    triggerDropAreaHandler(event) {\n        console.log('Files dropped:', event.dataTransfer.files);\n        // Implement custom handling logic here\n    }\n}\n"],"names":["DropArea","constructor","bp","options","this","dropTarget","dropInfoBar","createDropInfoBar","bar","document","createElement","style","position","top","left","width","height","backgroundColor","color","display","alignItems","justifyContent","zIndex","padding","body","appendChild","init","log","setupListeners","addEventListener","handleDragOver","bind","handleDragLeave","handleDrop","handleDragEnd","event","preventDefault","targetElement","target","classList","contains","parentNode","border","updateDropInfoBar","files","Array","from","dataTransfer","map","f","name","join","dataAttributes","id","dataset","app","type","context","innerHTML","className","console","triggerDropAreaHandler","$","targetApp","data","apps","error","aimMessageControls","aimSendButton","css","preview","add","fontWeight","textAlign","closeButton","right","cursor","opacity","fontSize","onclick","remove","i","length","file","fileType","buddypond","getFileCategory","displaySingleFile","prepend","open","emit","clearDropTarget","documentElement"],"mappings":"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"}