{"version":3,"file":"fetch-in-webworker.js","sources":["../../../apps/based/fetch-in-webworker/WebWorkerFetchWithProgress.js","../../../apps/based/fetch-in-webworker/fetch-in-webworker.js"],"sourcesContent":["export default class WebworkerFetchWithProgress {\n    constructor(workerScript = 'workerFetchWithProgress.js') {\n        this.worker = new Worker(workerScript);\n        this.requests = {};\n\n        this.worker.onmessage = (event) => {\n            const { type, id, progress, data, error } = event.data;\n            const request = this.requests[id];\n            if (!request) return; // onProgress never happens since request is not defined until fetch is called?\n            switch (type) {\n                case 'progress':\n                    if (request.onProgress) {\n                        request.onProgress(progress); // Call progress callback\n                    }\n                    break;\n                case 'completed':\n                    if (request.resolve) {\n                        request.resolve(event.data); // Resolve the promise\n                    }\n                    delete this.requests[id]; // Clean up\n                    break;\n                case 'error':\n                    if (request.reject) {\n                        request.reject(error); // Reject the promise\n                    }\n                    delete this.requests[id]; // Clean up\n                    break;\n            }\n        };\n    }\n\n    fetch(url, options = {}, onProgress) {\n        const id = Math.random().toString(36).substr(2, 9); // Generate unique ID\n        this.requests[id] = { onProgress, id };\n        return new Promise((resolve, reject) => {\n            this.requests[id].resolve = resolve;\n            this.requests[id].reject = reject;\n            this.worker.postMessage({ url, options, id }); // Start the fetch process\n        });\n    }\n}","import WebworkerFetchWithProgress from \"./WebWorkerFetchWithProgress.js\";\n\nexport default class FetchInWebWorker {\n    constructor(bp) {\n        this.bp = bp;\n\n        return this;\n\n    }\n\n    async init() {\n    }\n\n    async fetchWithProgress(url, options = {}, onProgress) {\n        const fetcher = new WebworkerFetchWithProgress();\n        return fetcher.fetch(url, options, onProgress);\n    }\n}"],"names":["WebworkerFetchWithProgress","constructor","workerScript","this","worker","Worker","requests","onmessage","event","type","id","progress","data","error","request","onProgress","resolve","reject","fetch","url","options","Math","random","toString","substr","Promise","postMessage","FetchInWebWorker","bp","init","fetchWithProgress"],"mappings":"AAAe,MAAMA,EACjB,WAAAC,CAAYC,EAAe,8BACvBC,KAAKC,OAAS,IAAIC,OAAOH,GACzBC,KAAKG,SAAW,CAAE,EAElBH,KAAKC,OAAOG,UAAaC,IACrB,MAAMC,KAAEA,EAAIC,GAAEA,EAAEC,SAAEA,EAAQC,KAAEA,EAAIC,MAAEA,GAAUL,EAAMI,KAC5CE,EAAUX,KAAKG,SAASI,GAC9B,GAAKI,EACL,OAAQL,GACJ,IAAK,WACGK,EAAQC,YACRD,EAAQC,WAAWJ,GAEvB,MACJ,IAAK,YACGG,EAAQE,SACRF,EAAQE,QAAQR,EAAMI,aAEnBT,KAAKG,SAASI,GACrB,MACJ,IAAK,QACGI,EAAQG,QACRH,EAAQG,OAAOJ,UAEZV,KAAKG,SAASI,IAIzC,CAEI,KAAAQ,CAAMC,EAAKC,EAAU,CAAA,EAAIL,GACrB,MAAML,EAAKW,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAG,GAEhD,OADArB,KAAKG,SAASI,GAAM,CAAEK,aAAYL,MAC3B,IAAIe,SAAQ,CAACT,EAASC,KACzBd,KAAKG,SAASI,GAAIM,QAAUA,EAC5Bb,KAAKG,SAASI,GAAIO,OAASA,EAC3Bd,KAAKC,OAAOsB,YAAY,CAAEP,MAAKC,UAASV,SAEpD,ECrCe,MAAMiB,EACjB,WAAA1B,CAAY2B,GAGR,OAFAzB,KAAKyB,GAAKA,EAEHzB,IAEf,CAEI,UAAM0B,GACV,CAEI,uBAAMC,CAAkBX,EAAKC,EAAU,CAAA,EAAIL,GAEvC,OADgB,IAAIf,GACLkB,MAAMC,EAAKC,EAASL,EAC3C"}