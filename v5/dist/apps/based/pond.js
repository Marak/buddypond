class t{constructor({pondId:t,endpoint:n,bp:o}){this.pondId=t,this.endpoint=buddypond.pondsWsEndpoint,this.bp=o,this.ws=null,this.reconnectAttempts=0,this.maxReconnectAttempts=5,this.maxBackoffDelay=1e4,this.isIntentionallyClosed=!1}async connect(){const t=`${this.endpoint}?me=${buddypond.me}&qtokenid=${buddypond.qtokenid}`;return console.log("üîå Connecting to HotPonds..."),new Promise(((n,o)=>{const e=new WebSocket(t),s=()=>{console.log("‚úÖ WebSocket connected to HotPond"),this.reconnectAttempts=0,this.ws=e,this.bp?.emit("hotpond::connected",{pondId:this.pondId}),n(this)},i=t=>{let n;try{n=JSON.parse(t.data)}catch(n){return console.error("‚ùå Failed to parse message:",t.data),void this.bp?.emit("hotpond::error",{error:"Invalid JSON",raw:t.data})}if(console.log("üì¨ Message received from HotPond:",n),"activePonds"===n.action)this.bp?.emit("hotpond::activePonds",n.ponds)},d=t=>{if(console.warn(`‚ö†Ô∏è WebSocket closed [${t.code}]: ${t.reason}`),this.bp?.emit("hotpond::disconnected",{pondId:this.pondId,code:t.code,reason:t.reason}),!this.isIntentionallyClosed&&this.reconnectAttempts<this.maxReconnectAttempts){const t=Math.min(200*Math.pow(2,this.reconnectAttempts)*(1+.1*Math.random()),this.maxBackoffDelay);console.log(`‚è≥ Reconnecting in ${Math.floor(t)}ms...`),setTimeout((()=>{this.reconnectAttempts++,this.connect().catch((()=>{})),this.bp?.emit("hotpond::reconnecting",{attempt:this.reconnectAttempts})}),t)}else this.reconnectAttempts>=this.maxReconnectAttempts&&(console.error("‚ùå Max reconnect attempts reached. Giving up."),this.bp?.emit("hotpond::reconnect_failed",{pondId:this.pondId}))},c=t=>{console.error("‚ùå WebSocket error:",t),this.bp?.emit("hotpond::error",{error:"WebSocket error",event:t}),e.close(1e3,"Error occurred"),o(new Error("WebSocket connection failed"))};e.addEventListener("open",s),e.addEventListener("message",i),e.addEventListener("close",d),e.addEventListener("error",c),this._teardown=()=>{e.removeEventListener("open",s),e.removeEventListener("message",i),e.removeEventListener("close",d),e.removeEventListener("error",c)}}))}disconnect(){this.ws&&(this.isIntentionallyClosed=!0,this._teardown?.(),this.ws.close(1e3,"Normal closure"),this.bp?.emit("hotpond::closed",{pondId:this.pondId}),this.ws=null)}send(t){if(this.ws&&this.ws.readyState===WebSocket.OPEN){const n="string"==typeof t?t:JSON.stringify(t);this.ws.send(n)}else console.warn("‚ö†Ô∏è Tried to send message but WebSocket is not open")}listActivePonds(){this.ws&&this.ws.readyState===WebSocket.OPEN?this.send({action:"listActivePonds"}):console.warn("‚ö†Ô∏è Tried to list active ponds but WebSocket is not open")}clearAllPonds(){this.ws&&this.ws.readyState===WebSocket.OPEN?this.send({action:"clearAllPonds"}):console.warn("‚ö†Ô∏è Tried to clear all ponds but WebSocket is not open")}}class n{constructor(t,n={}){this.bp=t,this.options=n,this.options.window=this.options.window||{},this.data={},this.pondWindow=null}async init(){async function n(){this.client=new t({bp:this.bp}),await this.client.connect(),this.bp.on("hotpond::activePonds","update-pond-room-list",(t=>{this.data.hotPonds=t;const n=this.bp.apps.ui.windowManager.getWindow("pond_message_main");n?(this.bp.apps.buddylist.populateRoomList(t,n),this.pondWindow?.content&&this.updateHotPonds(t)):console.warn("Pond message main window not found, cannot update room list")})),this.bp.on("pond::connectedUsers","update-pond-connected-users",(t=>{this.bp.apps.buddylist.updatePondConnectedUsers(t)})),this.client.listActivePonds()}return await this.bp.load("/v5/apps/based/pond/pond.css"),this.html=await this.bp.load("/v5/apps/based/pond/pond.html"),this.bp.on("auth::qtoken","ponds-connect-client",(async t=>{this.pondWindow&&this.pondWindow.content&&($(".loggedIn",this.pondWindow.content).show(),$(".loggedOut",this.pondWindow.content).hide()),n.call(this)})),this.bp.qtokenid&&n.call(this),"loaded pond"}updateHotPonds(t){const n=$(".joinPondTable");n.empty(),t.sort(((t,n)=>n.connection_count-t.connection_count));for(let o of t){const t=o.pond_id.replace("pond/",""),e=n.find(`tr[data-pond="${o.pond_id}"]`);e.length>0?e.find("td").eq(1).text(o.connection_count):n.append(`\n                    <tr data-pond="${o.pond_id}">\n                        <td>#${t}</td>\n                        <td>${o.connection_count}</td>\n                        <td><button class="joinPondButton" data-context="${t}">Join</button></td>\n                    </tr>\n                `)}}joinPondByName(t){if(!t)return;if(this.bp.apps.buddylist.forbiddenNotes.containsBadWord(t))return void alert("Invalid pond name. Please choose a different name.");const n=this.bp.apps.ui.windowManager.getWindow("pond_message_main");n?(this.bp.apps.buddylist.joinPond(t),n.focus()):this.bp.apps.buddylist.openChatWindow({pondname:t})}open(t={}){if(!this.pondWindow){this.pondWindow=this.bp.apps.ui.windowManager.createWindow({id:"pond",title:"Ponds",app:"pond",icon:"desktop/assets/images/icons/icon_pond_64.png",x:100,y:100,width:400,height:470,minWidth:200,minHeight:200,parent:$("#desktop")[0],content:this.html,resizable:!0,minimizable:!0,maximizable:!0,closable:!0,focusable:!0,maximized:!1,minimized:!1,preventOverlap:this.options.window.preventOverlap,onClose:()=>{console.log("pond window closed"),this.pondWindow=null,clearInterval(this.updatePondsTimer)}}),this.bp.qtokenid?($(".loggedIn",this.pondWindow.content).show(),$(".loggedOut",this.pondWindow.content).hide()):($(".loggedIn",this.pondWindow.content).hide(),$(".loggedOut",this.pondWindow.content).show());const t=$(".joinCustomPondForm",this.pondWindow.content),n=$("#customPondName",this.pondWindow.content);t.on("submit",(t=>{t.preventDefault();const o=n.val();this.joinPondByName(o)}));$(".joinPondTable",this.pondWindow.content).on("click",".joinPondButton",(t=>{t.preventDefault();const n=$(t.currentTarget).data("context");this.joinPondByName(n)})),$(".joinPond",this.pondWindow.content).on("click",(t=>{t.preventDefault();const o=n.val();this.joinPondByName(o)}))}return this.client&&this.client.listActivePonds(),this.pondWindow}}export{n as default};
//# sourceMappingURL=pond.js.map
