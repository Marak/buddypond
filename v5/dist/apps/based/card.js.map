{"version":3,"file":"card.js","sources":["../../../apps/based/card/CardClass.js","../../../apps/based/card/CardManager.js","../../../apps/based/card/card.js"],"sourcesContent":["export default class Card {\n    constructor(bp, cardType, cardData, parent) {\n        this.bp = bp;\n        this.cardType = cardType;\n        this.cardData = cardData;\n        this.parent = parent;\n        this.htmlContent = '';\n        this.cssContent = '';\n        this.applyData = null; // Initially null, will be set when JS is loaded\n    }\n\n    async load() {\n\n        if (!this.cardType) {\n            console.error('Card type is not defined');\n            return;\n        }\n\n        const htmlUrl = `/v5/apps/based/card/cards/${this.cardType}/${this.cardType}-card.html`;\n        const cssUrl = `/v5/apps/based/card/cards/${this.cardType}/${this.cardType}-card.css`;\n        const jsUrl = `/v5/apps/based/card/cards/${this.cardType}/${this.cardType}-card.js`;\n        this.htmlContent = await this.bp.load(htmlUrl);\n        this.cssContent = await this.bp.load(cssUrl);\n        const applyDataModule = await this.bp.importModule(jsUrl, {}, false);\n\n        if (applyDataModule && typeof applyDataModule.default === 'function') {\n            this.applyData = applyDataModule.default.bind(this);\n        }\n\n        if (!this.htmlContent) {\n            this.htmlContent = `<div class=\"card\">${JSON.stringify(this.cardData)}</div>`;\n        }\n        if (!this.cssContent) {\n            this.cssContent = `.card { border: 1px solid black; padding: 1em; }`;\n        }\n        if (!this.applyData) {\n            this.applyData = (container, cardData) => {\n                // cardData.message is circular, so remove it for default stringify\n                if (cardData.message) {\n                    delete cardData.message;\n                }\n                container.querySelector('.card').textContent = JSON.stringify(cardData);\n            };\n        }\n    }\n\n    render(container, parent) {\n        // console.log('calling rendering card', container, this.cardType, this.cardData);\n        const styleTag = document.createElement('style');\n        styleTag.textContent = this.cssContent;\n        container.appendChild(styleTag);\n\n        const cardContainer = document.createElement('div');\n        cardContainer.style.position = 'relative';\n        cardContainer.innerHTML = this.htmlContent;\n        container.appendChild(cardContainer);\n        /*\n        // on mouse over show / ide the reaction buttons\n        cardContainer.addEventListener('mouseenter', () => {\n            cardContainer.querySelector('.reaction-container').classList.add('show');\n        });\n        cardContainer.addEventListener('mouseleave', () => {\n            cardContainer.querySelector('.reaction-container').classList.remove('show');\n        });\n        */\n\n        // Add reaction UI\n        //this.addReactionsUI(cardContainer);\n        // console.log('what is this.applyData', this.applyData);\n        if (this.applyData && typeof this.applyData === 'function') {\n            try {\n                return this.applyData(cardContainer, this.cardData, this, this.parent);\n            } catch (err) {\n                console.error('Error in applyData function:', err);\n            }\n        }\n    }\n\n    // TODO: move all reactions code to reaction.js\n    addReactionsUI(cardContainer) {\n        const reactions = ['👍', '❤️', '😂', '😮', '😢', '🔥']; // Example reaction emojis\n        const reactionContainer = document.createElement('div');\n        reactionContainer.classList.add('reaction-container');\n\n        reactions.forEach(emoji => {\n            const button = document.createElement('button');\n            button.textContent = emoji;\n            button.classList.add('reaction-button');\n            button.addEventListener('click', () => this.handleReaction(emoji));\n            reactionContainer.appendChild(button);\n        });\n\n        cardContainer.appendChild(reactionContainer);\n    }\n\n    handleReaction(emoji) {\n        const newMessage = {\n            uuid: this.cardData.message.uuid, // Ensure this exists in cardData\n            reaction: emoji,\n            user: this.bp.me\n        };\n        // TODO: send to server\n        // let api = this.bp.apps.client.api;\n        //api.messageReact(newMessage);\n        this.renderReaction(newMessage);\n    }\n\n    renderReaction(newMessage) {\n        console.log('Reaction added:', newMessage);\n        const message = $(`.chatMessage[data-uuid='${newMessage.uuid}']`);\n        console.log('`found message:', message);\n        if (!message) return;\n\n        let card = message.find('.cardContainer');\n        console.log('found card:', card);\n        let reactionSummary = card.find('.reaction-summary');\n        if (!reactionSummary.length) {\n            console.log('did not find reaction summary');\n            reactionSummary = document.createElement('div');\n            reactionSummary.classList.add('reaction-summary');\n            console.log('created reaction summary:', reactionSummary);\n            card.append(reactionSummary);\n        }\n        console.log(\"appending reaction\", newMessage.reaction);\n        reactionSummary.textContent += ` ${newMessage.reaction}`;\n    }\n}\n","import Card from './CardClass.js';\n\nexport default class CardManager {\n    constructor(bp) {\n      this.bp = bp;\n      this.cards = [];\n    }\n  \n    async loadCard(cardType, cardData, parent) {\n      const card = new Card(this.bp, cardType, cardData, parent);\n      await card.load();\n      this.cards.push(card);\n      return card;\n    }\n  \n    renderAll(container) {\n      this.cards.forEach(card => {\n\n        if (typeof card.render === 'function') {\n          card.render(container)\n        }\n\n      });\n    }\n  }\n  ","// various \"cards\" for messages\n// message is can have a card-type, which gives it special properties\n// such as multimedia, audio, video, etc.\n// or rendering special UI elements\n// messages are usually from chat, but displaying cards can be applied to any text\nimport CardManager from './CardManager.js';\n\nexport default class Card {\n  constructor(bp) {\n    this.bp = bp;\n  }\n\n  async init() {\n\n    this.cardManager = new CardManager(this.bp);\n  }\n\n  // we really actually want to bp.addMessageProcessor('card', function (message) {});\n  // this way the order of apps being loaded doesn't matter\n  // ECS invert the control\n  // handles all chat message cards ( youtube / url / image / etc )\n  // bp.addMessageProcessor('card', function (message) {});\n  // bp.addMessageProcessor('buddyscript', function (message) {});\n\n\n\n}\n "],"names":["Card$1","constructor","bp","cardType","cardData","parent","this","htmlContent","cssContent","applyData","load","console","error","htmlUrl","cssUrl","jsUrl","applyDataModule","importModule","default","bind","JSON","stringify","container","message","querySelector","textContent","render","styleTag","document","createElement","appendChild","cardContainer","style","position","innerHTML","err","addReactionsUI","reactionContainer","classList","add","forEach","emoji","button","addEventListener","handleReaction","newMessage","uuid","reaction","user","me","renderReaction","log","$","card","find","reactionSummary","length","append","CardManager","cards","loadCard","Card","push","renderAll","init","cardManager"],"mappings":"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"}