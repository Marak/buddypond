{"version":3,"file":"gpt-card.js","sources":["../../../../../../apps/based/card/cards/gpt/gpt-card.js"],"sourcesContent":["export default async function applyData(el, data, cardClass) {\n\n    // will return immediately if cached\n    await cardClass.bp.appendScript(\"https://cdn.jsdelivr.net/npm/prismjs@1.23.0/prism.min.js\");\n    await cardClass.bp.appendCSS(\"https://cdn.jsdelivr.net/npm/prismjs@1.23.0/themes/prism-coy.css\");\n\n    let cloneText = data.message.text;\n    cloneText = marked.parse(data.message.text);\n\n    const messageHTML = cloneText;\n    const messageTime = new Date(data.message.ctime);\n    const currentTime = new Date();\n    const timeDifference = (currentTime - messageTime) / 1000; // difference in seconds\n\n    const responseElement = $(el).find('.card-gpt-response');\n    responseElement.empty(); // Clear existing content\n    data.message.text = 'I have an AI-generated response:';\n\n    if (timeDifference < 30) {\n        // Parse the HTML string into DOM nodes\n        const tempContainer = document.createElement('div');\n        tempContainer.innerHTML = messageHTML;\n\n        function typeNode(node, parent, callback) {\n            if (node.nodeType === Node.TEXT_NODE) {\n                const text = node.textContent;\n                let index = 0;\n\n                function typeChar() {\n                    if (index < text.length) {\n                        parent.append(text.charAt(index));\n                        index++;\n                        setTimeout(typeChar, 33);\n                    } else {\n                        if (parent.closest('pre code')) {\n                            // Re-apply syntax highlighting when done typing a code block\n                            Prism.highlightElement(parent.closest('pre code'));\n                        }\n                        callback();\n                    }\n                }\n                typeChar();\n\n            } else if (node.nodeType === Node.ELEMENT_NODE) {\n                const newElement = document.createElement(node.tagName);\n                Array.from(node.attributes).forEach(attr => {\n                    newElement.setAttribute(attr.name, attr.value);\n                });\n                parent.append(newElement);\n\n                const children = Array.from(node.childNodes);\n                let childIndex = 0;\n                function typeNextChild() {\n                    if (childIndex < children.length) {\n                        typeNode(children[childIndex], newElement, typeNextChild);\n                        childIndex++;\n                    } else {\n                        callback();\n                    }\n                }\n                typeNextChild();\n            } else {\n                callback();\n            }\n        }\n\n        const nodes = Array.from(tempContainer.childNodes);\n        let currentNodeIndex = 0;\n        function typeNextNode() {\n            if (currentNodeIndex < nodes.length) {\n                typeNode(nodes[currentNodeIndex], responseElement[0], typeNextNode);\n                currentNodeIndex++;\n            }\n        }\n        typeNextNode();\n\n    } else {\n        // Display the message immediately\n        responseElement.html(messageHTML);\n        // Apply syntax highlighting immediately\n        responseElement.find('pre code').each(function () {\n            Prism.highlightElement(this);\n        });\n    }\n\n    return data;\n}\n"],"names":["async","applyData","el","data","cardClass","bp","appendScript","appendCSS","cloneText","message","text","marked","parse","messageHTML","messageTime","Date","ctime","timeDifference","responseElement","$","find","empty","tempContainer","document","createElement","typeNode","node","parent","callback","nodeType","Node","TEXT_NODE","textContent","index","typeChar","length","append","charAt","setTimeout","closest","Prism","highlightElement","ELEMENT_NODE","newElement","tagName","Array","from","attributes","forEach","attr","setAttribute","name","value","children","childNodes","childIndex","typeNextChild","innerHTML","nodes","currentNodeIndex","typeNextNode","html","each","this"],"mappings":"AAAeA,eAAeC,EAAUC,EAAIC,EAAMC,SAGxCA,EAAUC,GAAGC,aAAa,kEAC1BF,EAAUC,GAAGE,UAAU,oEAE7B,IAAIC,EAAYL,EAAKM,QAAQC,KAC7BF,EAAYG,OAAOC,MAAMT,EAAKM,QAAQC,MAEtC,MAAMG,EAAcL,EACdM,EAAc,IAAIC,KAAKZ,EAAKM,QAAQO,OAEpCC,GADc,IAAIF,KACcD,GAAe,IAE/CI,EAAkBC,EAAEjB,GAAIkB,KAAK,sBAInC,GAHAF,EAAgBG,QAChBlB,EAAKM,QAAQC,KAAO,mCAEhBO,EAAiB,GAAI,CAErB,MAAMK,EAAgBC,SAASC,cAAc,OAG7C,SAASC,EAASC,EAAMC,EAAQC,GAC5B,GAAIF,EAAKG,WAAaC,KAAKC,UAAW,CAClC,MAAMrB,EAAOgB,EAAKM,YAClB,IAAIC,EAAQ,EAEZ,SAASC,IACDD,EAAQvB,EAAKyB,QACbR,EAAOS,OAAO1B,EAAK2B,OAAOJ,IAC1BA,IACAK,WAAWJ,EAAU,MAEjBP,EAAOY,QAAQ,aAEfC,MAAMC,iBAAiBd,EAAOY,QAAQ,aAE1CX,IAExB,CACgBM,GAEH,MAAM,GAAIR,EAAKG,WAAaC,KAAKY,aAAc,CAC5C,MAAMC,EAAapB,SAASC,cAAcE,EAAKkB,SAC/CC,MAAMC,KAAKpB,EAAKqB,YAAYC,SAAQC,IAChCN,EAAWO,aAAaD,EAAKE,KAAMF,EAAKG,UAE5CzB,EAAOS,OAAOO,GAEd,MAAMU,EAAWR,MAAMC,KAAKpB,EAAK4B,YACjC,IAAIC,EAAa,EACjB,SAASC,IACDD,EAAaF,EAASlB,QACtBV,EAAS4B,EAASE,GAAaZ,EAAYa,GAC3CD,KAEA3B,GAExB,CACgB4B,GAChB,MACgB5B,GAEhB,CA3CQN,EAAcmC,UAAY5C,EA6C1B,MAAM6C,EAAQb,MAAMC,KAAKxB,EAAcgC,YACvC,IAAIK,EAAmB,EACvB,SAASC,IACDD,EAAmBD,EAAMvB,SACzBV,EAASiC,EAAMC,GAAmBzC,EAAgB,GAAI0C,GACtDD,IAEhB,CACQC,GAER,MAEQ1C,EAAgB2C,KAAKhD,GAErBK,EAAgBE,KAAK,YAAY0C,MAAK,WAClCtB,MAAMC,iBAAiBsB,KACnC,IAGI,OAAO5D,CACX"}