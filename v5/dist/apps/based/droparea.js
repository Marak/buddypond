class e{constructor(e,t={}){this.bp=e,this.options=t,this.dropTarget=null,this.dropInfoBar=this.createDropInfoBar()}createDropInfoBar(){const e=document.createElement("div");return e.style.position="fixed",e.style.top="0",e.style.left="0",e.style.width="100%",e.style.height="120px",e.style.backgroundColor="rgba(0, 0, 0, 0.5)",e.style.color="white",e.style.display="none",e.style.alignItems="center",e.style.justifyContent="center",e.style.zIndex="1000",e.style.padding="10px",document.body.appendChild(e),e}async init(){return this.bp.log("Hello from DropArea"),this.setupListeners(),"DropArea loaded"}setupListeners(){document.addEventListener("dragover",this.handleDragOver.bind(this),!1),document.addEventListener("dragleave",this.handleDragLeave.bind(this),!1),document.addEventListener("drop",this.handleDrop.bind(this),!1),document.addEventListener("dragend",this.handleDragEnd.bind(this),!1),document.addEventListener("mouseleave",this.handleDragLeave.bind(this),!1)}handleDragOver(e){e.preventDefault(),this.dropInfoBar.style.display="flex";let t=e.target;for(;t&&!t.classList.contains("has-droparea");){if(t===document.body){t=null;break}t=t.parentNode}t!==this.dropTarget?(this.dropTarget&&(this.dropTarget.style.border=""),t&&(t.style.border="2px dashed #f0f",this.updateDropInfoBar(e,t)),this.dropTarget=t):t&&this.updateDropInfoBar(e,t)}updateDropInfoBar(e,t){const r=Array.from(e.dataTransfer.files).map((e=>e.name)).join(", ");let a=`\n            <strong>ID:</strong> ${t.id||"None"}<br>\n            <strong>App:</strong> ${t.dataset.app||"None"}<br>\n            <strong>Type:</strong> ${t.dataset.type||"None"}<br>\n            <strong>Context:</strong> ${t.dataset.context||"None"}`;this.dropInfoBar.innerHTML=`\n            <strong>Target:</strong> ${t.className||"None"}<br>\n            <strong>Files:</strong> ${r||"None"}<br>\n            ${a}`}async handleDrop(e){if(console.log("DropArea: handleDrop called",e),e.preventDefault(),this.dropTarget&&e.target===this.dropTarget&&this.triggerDropAreaHandler(e),console.log("Files dropped:",e.target,e.dataTransfer.files),this.dropTarget&&"mainOverlay"!==this.dropTarget.id){this.dropTarget.id;let t=$(this.dropTarget),r=t.data("app");t.data("type"),t.data("context");let a=this.bp.apps[r];if(!a)return void console.error("target app not found:",r);if(a.handleDrop&&(console.log("target app has droparea handler:",r,"using it..."),a.handleDrop(e)),"buddylist"===r){let t=$(".aim-message-controls",this.dropTarget),r=$(".aim-send-btn",t);r.css("opacity","1");let a=document.createElement("div");a.innerHTML="File Preview",a.classList.add("file-preview"),a.style.color="#fff",a.style.fontWeight="bold",a.style.textAlign="center";let o=document.createElement("button");o.innerHTML="X",o.style.position="absolute",o.style.top="25px",o.style.right="22px",o.style.backgroundColor="#f00",o.style.color="#fff",o.style.border="none",o.style.padding="5px",o.style.cursor="pointer",o.style.opacity="0.9",o.style.fontSize="1.5em",o.style.zIndex="1000",o.onclick=()=>{a.remove(),r.css("opacity","0.5")},a.appendChild(o);for(let r=0;r<e.dataTransfer.files.length;r++){let o=e.dataTransfer.files[r],n=o.type;console.log("check file type",n);"binary"===buddypond.getFileCategory(n)?console.error("uploading binary files not supported yet..."):(this.bp.apps["file-viewer"].displaySingleFile(o,a),t.prepend(a))}}}else await this.bp.open("file-viewer");this.bp.emit("ui::droparea::drop",e.dataTransfer.files),this.clearDropTarget()}handleDragLeave(e){e.target!==document.documentElement&&e.target!==document.body||this.clearDropTarget()}handleDragEnd(e){this.clearDropTarget()}clearDropTarget(){this.dropTarget&&(this.dropTarget.style.border="",this.dropTarget=null),this.dropInfoBar.style.display="none"}triggerDropAreaHandler(e){console.log("Files dropped:",e.dataTransfer.files)}}export{e as default};
//# sourceMappingURL=droparea.js.map
