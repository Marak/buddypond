class e{constructor(e,t={}){return this.bp=e,this.supportedImageTypes=["image/jpeg","image/png","image/gif","image/webp","image/svg+xml"],this.supportedAudioTypes=["audio/mpeg","audio/wav","audio/ogg"],this.supportedVideoTypes=["video/mp4","video/webm","video/ogg"],this.supportedTextTypes=["text/plain","text/html","text/css","text/javascript","application/json"],this.fileCache=new Map,this}async init(){return this.bp.log("Initializing FileViewer"),await this.bp.load("/v5/apps/based/file-viewer/file-viewer.css"),this.html=await this.bp.load("/v5/apps/based/file-viewer/file-viewer.html"),"FileViewer loaded"}async open(){this.fileViewerWindow=this.bp.apps.ui.windowManager.createWindow({id:"file-viewer",title:"File Viewer",x:50,y:100,width:800,height:600,minWidth:400,minHeight:300,icon:"desktop/assets/images/icons/icon_file-viewer_64.png",parent:$("#desktop")[0],content:this.html,resizable:!0,minimizable:!0,maximizable:!0,closable:!0,focusable:!0,maximized:!1,minimized:!1}),this.updateDropTargets(),this.initializeEventListeners(),new this.bp.apps.ui.Tabs(this.fileViewerWindow.content),$(".fileviewer-upload-cloud",this.fileViewerWindow.content).hide(),$(".fileviewer-target",this.fileViewerWindow.content).hide()}initializeEventListeners(){this.bp.on("ui::droparea::drop","show-file-in-viewer",(e=>{e&&e.length>0&&this.displayFiles(e),$("#fileviewer-viewer").flexShow()})),this.bp.on("window::open","update-the-drop-targets",(()=>this.updateDropTargets())),this.bp.on("window::close","update-the-drop-targets",(()=>this.updateDropTargets())),$(this.fileViewerWindow.content).find(".fileviewer-target-app").on("change",(e=>{const t=e.target.value;t&&this.sendToApp(t)})),$(".fileviewer-upload",this.fileViewerWindow.content).on("click",(()=>{this.uploadToCloud()}))}initializeTabs(){const e=$(this.fileViewerWindow.content).find(".tabs-container"),t=e.find(".tab-list li a"),i=e.find(".tab-content");i.hide(),i.first().show(),t.first().addClass("active"),t.on("click",(e=>{e.preventDefault();const n=$(e.target).attr("href");t.removeClass("active"),$(e.target).addClass("active"),i.hide(),$(n).show()}))}displayHTMLFragment(e){console.log("displaying HTML fragment",e);const t=$(this.fileViewerWindow.content).find(".fileviewer-file"),i=$(this.fileViewerWindow.content).find("#fileviewer-meta"),n=document.createElement("div");n.classList.add("html-drop-preview"),n.appendChild(e),t.empty(),i.html("<h1>HTML Fragment</h1>");const a=document.createElement("pre");a.classList.add("html-code"),a.textContent=e.outerHTML,a.style.width="100%",a.style.whiteSpace="pre-wrap",i.append(a),t.append(n),this.fileViewerWindow.title="Viewing HTML Fragment"}async displayFiles(e){const t=$(this.fileViewerWindow.content).find(".fileviewer-file"),i=$(this.fileViewerWindow.content).find("#fileviewer-meta");t.empty(),i.html("<h1>File Metadata</h1>");for(let n of e)await this.displaySingleFile(n,t),this.displayMetadata(n,i);this.fileViewerWindow.title=1===e.length?`Viewing: ${e[0].name}`:`Viewing ${e.length} files`}async displaySingleFile(e,t){const i=document.createElement("div");i.className="file-content";const n=`file-${Date.now()}-${Math.random().toString(36).substr(2,9)}`;if(e.id=n,console.log("using file id",n),this.fileCache.set(n,e),i.dataset.filename=e.name,i.dataset.filetype=e.type,i.dataset.filesize=e.size,i.dataset.fileId=e.id,this.supportedImageTypes.includes(e.type)){const t=document.createElement("img"),n=URL.createObjectURL(e);t.src=n,t.onload=()=>{i.dataset.blobUrl=n},i.appendChild(t)}else if(this.supportedAudioTypes.includes(e.type)){const t=document.createElement("audio");t.controls=!0,console.log("OMGaudio",e);const n=URL.createObjectURL(e);console.log("objectUrl",n),t.src=n,i.dataset.blobUrl=n,i.appendChild(t)}else if(this.supportedVideoTypes.includes(e.type)){const t=document.createElement("video");t.controls=!0;const n=URL.createObjectURL(e);t.src=n,i.dataset.blobUrl=n,i.appendChild(t)}else if(this.supportedTextTypes.includes(e.type))try{const t=await e.text(),n=document.createElement("pre");n.textContent=t,i.appendChild(n),i.dataset.textContent=t}catch(e){i.textContent="Error reading text file"}else{i.innerHTML=`\n                <div class="binary-file">\n                    <i class="file-icon"></i>\n                    <p>Binary file: ${e.name}</p>\n                    <p>Size: ${this.formatFileSize(e.size)}</p>\n                    <p>Type: ${e.type||"unknown"}</p>\n                </div>\n            `;const t=URL.createObjectURL(e);i.dataset.blobUrl=t}i.cleanup=()=>{i.dataset.blobUrl&&URL.revokeObjectURL(i.dataset.blobUrl)},t.append(i)}displayMetadata(e,t){const i=document.createElement("div");i.className="file-metadata";const n=document.createElement("dl"),a=(e,t)=>{const i=document.createElement("dt"),a=document.createElement("dd");i.textContent=e,a.textContent=t,n.appendChild(i),n.appendChild(a)};a("Name",e.name),a("Size",this.formatFileSize(e.size)),a("Type",e.type||"unknown"),a("Last Modified",new Date(e.lastModified).toLocaleString()),i.appendChild(n),t.append(i)}getFile(e){console.log("fileContent",e);const t=e.dataset.fileId;return this.fileCache.get(t)}formatFileSize(e){const t=["B","KB","MB","GB"];let i=e,n=0;for(;i>=1024&&n<t.length-1;)i/=1024,n++;return`${i.toFixed(1)} ${t[n]}`}updateDropTargets(){const e=$(this.fileViewerWindow.content).find(".fileviewer-target-app");e.empty();const t=document.createElement("option");t.value="",t.text="Select target app...",e.append(t),$(".has-droparea").each(((t,i)=>{const n=document.createElement("option");n.value=i.id,n.text=i.id,e.append(n)}))}async uploadToCloud(){const e=[];$(".fileviewer-file",this.fileViewerWindow.content).each(((t,i)=>{$(".file-content",i).each(((t,i)=>{const n=this.bp.apps["file-viewer"].getFile(i);n&&e.push(n)}))})),await buddypond.uploadFiles(e)}sendToApp(e){this.fileViewerWindow.content.querySelectorAll(".file-content").forEach((e=>{const t=this.getFile(e);console.log("sending file",t)}))}}export{e as default};
//# sourceMappingURL=file-viewer.js.map
