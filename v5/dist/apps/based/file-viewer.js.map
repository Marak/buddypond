{"version":3,"file":"file-viewer.js","sources":["../../../apps/based/file-viewer/file-viewer.js"],"sourcesContent":["export default class FileViewer {\n    constructor(bp, options = {}) {\n        this.bp = bp;\n        this.supportedImageTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp', 'image/svg+xml'];\n        this.supportedAudioTypes = ['audio/mpeg', 'audio/wav', 'audio/ogg'];\n        this.supportedVideoTypes = ['video/mp4', 'video/webm', 'video/ogg'];\n        this.supportedTextTypes = ['text/plain', 'text/html', 'text/css', 'text/javascript', 'application/json'];\n        this.fileCache = new Map(); // Add a cache for the original files\n\n        return this;\n    }\n\n    async init() {\n        this.bp.log('Initializing FileViewer');\n        await this.bp.load('/v5/apps/based/file-viewer/file-viewer.css');\n        this.html = await this.bp.load('/v5/apps/based/file-viewer/file-viewer.html');\n\n        return 'FileViewer loaded';\n    }\n\n    async open() {\n        this.fileViewerWindow = this.bp.apps.ui.windowManager.createWindow({\n            id: 'file-viewer',\n            title: 'File Viewer',\n            x: 50,\n            y: 100,\n            width: 800,\n            height: 600,\n            minWidth: 400,\n            minHeight: 300,\n            parent: $('#desktop')[0],\n            content: this.html,\n            resizable: true,\n            minimizable: true,\n            maximizable: true,\n            closable: true,\n            focusable: true,\n            maximized: false,\n            minimized: false\n        });\n        this.updateDropTargets();\n        this.initializeEventListeners();\n        //$('.fileviewer-target', this.fileViewerWindow.content).flexHide(); // for now\n        // this.initializeTabs();\n        new this.bp.apps.ui.Tabs(this.fileViewerWindow.content);\n\n        // hide these features for now\n        $('.fileviewer-upload-cloud', this.fileViewerWindow.content).hide();\n        $('.fileviewer-target', this.fileViewerWindow.content).hide();\n    }\n\n    initializeEventListeners() {\n        this.bp.on('ui::droparea::drop', 'show-file-in-viewer', (files) => {\n            if (files && files.length > 0) {\n                this.displayFiles(files);\n            }\n            $('#fileviewer-viewer').flexShow();\n\n        });\n\n        this.bp.on('window::open', 'update-the-drop-targets', () => this.updateDropTargets());\n        this.bp.on('window::close', 'update-the-drop-targets', () => this.updateDropTargets());\n\n        // Add click handler for target app selection\n        $(this.fileViewerWindow.content).find('.fileviewer-target-app').on('change', (e) => {\n            const targetAppId = e.target.value;\n            if (targetAppId) {\n                this.sendToApp(targetAppId);\n            }\n        });\n\n        $('.fileviewer-upload', this.fileViewerWindow.content).on('click', () => {\n\n\n            this.uploadToCloud();\n        });\n    }\n\n    initializeTabs() {\n        const tabContainer = $(this.fileViewerWindow.content).find('.tabs-container');\n        const tabs = tabContainer.find('.tab-list li a');\n        const contents = tabContainer.find('.tab-content');\n\n        contents.hide();\n        contents.first().show();\n        tabs.first().addClass('active');\n\n        tabs.on('click', (e) => {\n            e.preventDefault();\n            const target = $(e.target).attr('href');\n\n            tabs.removeClass('active');\n            $(e.target).addClass('active');\n\n            contents.hide();\n            $(target).show();\n        });\n    }\n\n    async displayFiles(files) {\n        const viewerContainer = $(this.fileViewerWindow.content).find('.fileviewer-file');\n        const metadataContainer = $(this.fileViewerWindow.content).find('#fileviewer-meta');\n\n        viewerContainer.empty();\n        metadataContainer.html('<h1>File Metadata</h1>');\n\n        for (let file of files) {\n\n            await this.displaySingleFile(file, viewerContainer);\n            this.displayMetadata(file, metadataContainer);\n        }\n\n        this.fileViewerWindow.title = files.length === 1 ?\n            `Viewing: ${files[0].name}` :\n            `Viewing ${files.length} files`;\n    }\n\n    async displaySingleFile(file, container) {\n        const fileContent = document.createElement('div');\n        fileContent.className = 'file-content';\n\n        // Generate a unique ID for this file\n        const fileId = `file-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n        file.id = fileId;\n        console.log('using file id', fileId);\n        this.fileCache.set(fileId, file);\n\n        \n\n        // Store the original file object as a property\n        fileContent.dataset.filename = file.name;\n        fileContent.dataset.filetype = file.type;\n        fileContent.dataset.filesize = file.size;\n        fileContent.dataset.fileId = file.id;\n\n        if (this.supportedImageTypes.includes(file.type)) {\n            const img = document.createElement('img');\n            const objectUrl = URL.createObjectURL(file);\n            img.src = objectUrl;\n            img.onload = () => {\n                // Instead of revoking, store the blob URL\n                fileContent.dataset.blobUrl = objectUrl;\n            };\n            fileContent.appendChild(img);\n        } else if (this.supportedAudioTypes.includes(file.type)) {\n            const audio = document.createElement('audio');\n            audio.controls = true;\n            console.log(\"OMGaudio\", file);\n            const objectUrl = URL.createObjectURL(file);\n            console.log('objectUrl', objectUrl);\n            audio.src = objectUrl;\n            fileContent.dataset.blobUrl = objectUrl;\n            fileContent.appendChild(audio);\n        } else if (this.supportedVideoTypes.includes(file.type)) {\n            const video = document.createElement('video');\n            video.controls = true;\n            const objectUrl = URL.createObjectURL(file);\n            video.src = objectUrl;\n            fileContent.dataset.blobUrl = objectUrl;\n            fileContent.appendChild(video);\n        } else if (this.supportedTextTypes.includes(file.type)) {\n            try {\n                const text = await file.text();\n                const pre = document.createElement('pre');\n                pre.textContent = text;\n                fileContent.appendChild(pre);\n                // Store text content directly\n                fileContent.dataset.textContent = text;\n            } catch (error) {\n                fileContent.textContent = 'Error reading text file';\n            }\n        } else {\n            fileContent.innerHTML = `\n                <div class=\"binary-file\">\n                    <i class=\"file-icon\"></i>\n                    <p>Binary file: ${file.name}</p>\n                    <p>Size: ${this.formatFileSize(file.size)}</p>\n                    <p>Type: ${file.type || 'unknown'}</p>\n                </div>\n            `;\n            // Store binary blob URL\n            const objectUrl = URL.createObjectURL(file);\n            fileContent.dataset.blobUrl = objectUrl;\n        }\n\n\n        // Add cleanup method\n        fileContent.cleanup = () => {\n            if (fileContent.dataset.blobUrl) {\n                URL.revokeObjectURL(fileContent.dataset.blobUrl);\n            }\n        };\n\n        container.append(fileContent);\n    }\n\n    displayMetadata(file, container) {\n        const metadata = document.createElement('div');\n        metadata.className = 'file-metadata';\n\n        const metadataList = document.createElement('dl');\n        const addMetadata = (term, definition) => {\n            const dt = document.createElement('dt');\n            const dd = document.createElement('dd');\n            dt.textContent = term;\n            dd.textContent = definition;\n            metadataList.appendChild(dt);\n            metadataList.appendChild(dd);\n        };\n\n        addMetadata('Name', file.name);\n        addMetadata('Size', this.formatFileSize(file.size));\n        addMetadata('Type', file.type || 'unknown');\n        addMetadata('Last Modified', new Date(file.lastModified).toLocaleString());\n\n        metadata.appendChild(metadataList);\n        container.append(metadata);\n    }\n\n     // Method to get the original file\n     getFile(fileContent) {\n        console.log('fileContent', fileContent);\n        const fileId = fileContent.dataset.fileId;\n        return this.fileCache.get(fileId);\n    }\n    formatFileSize(bytes) {\n        const units = ['B', 'KB', 'MB', 'GB'];\n        let size = bytes;\n        let unitIndex = 0;\n\n        while (size >= 1024 && unitIndex < units.length - 1) {\n            size /= 1024;\n            unitIndex++;\n        }\n\n        return `${size.toFixed(1)} ${units[unitIndex]}`;\n    }\n\n    updateDropTargets() {\n        const select = $(this.fileViewerWindow.content).find('.fileviewer-target-app');\n        select.empty();\n\n        // Add default option\n        const defaultOption = document.createElement('option');\n        defaultOption.value = '';\n        defaultOption.text = 'Select target app...';\n        select.append(defaultOption);\n\n        // Add all droparea targets\n        $('.has-droparea').each((i, el) => {\n            const option = document.createElement('option');\n            option.value = el.id;\n            option.text = el.id;\n            select.append(option);\n\n        });\n    }\n\n    async uploadToCloud () {\n        // let files = this.fileViewerWindow.content.querySelectorAll('.file-content');\n\n        // TODO: implement this ability to upload files to the cloud from file viewer\n        const files = [];\n        const filePreviews = $('.fileviewer-file', this.fileViewerWindow.content);\n        // Collect all files first\n        filePreviews.each((_, filePreview) => {\n            $('.file-content', filePreview).each((_, fileContent) => {\n                const file = this.bp.apps['file-viewer'].getFile(fileContent);\n                if (file) {\n                    files.push(file);\n                }\n            });\n        });\n    \n\n\n\n        await buddypond.uploadFiles(files);\n    }\n\n    sendToApp(targetAppId) {\n        const fileContents = this.fileViewerWindow.content.querySelectorAll('.file-content');\n        fileContents.forEach(content => {\n            const originalFile = this.getFile(content);\n            console.log('sending file', originalFile);\n            if (originalFile) {\n                // TODO:\n                /*\n                this.bp.sendFile({\n                    type: 'pond', // TOOD: hardcoded?\n                    name: targetAppId,\n                    text: 'Sending file: ' + originalFile.name,\n                    file: originalFile\n                });\n                */\n            }\n        });\n    }\n}"],"names":["FileViewer","constructor","bp","options","this","supportedImageTypes","supportedAudioTypes","supportedVideoTypes","supportedTextTypes","fileCache","Map","init","log","load","html","open","fileViewerWindow","apps","ui","windowManager","createWindow","id","title","x","y","width","height","minWidth","minHeight","parent","$","content","resizable","minimizable","maximizable","closable","focusable","maximized","minimized","updateDropTargets","initializeEventListeners","Tabs","hide","on","files","length","displayFiles","flexShow","find","e","targetAppId","target","value","sendToApp","uploadToCloud","initializeTabs","tabContainer","tabs","contents","first","show","addClass","preventDefault","attr","removeClass","viewerContainer","metadataContainer","empty","file","displaySingleFile","displayMetadata","name","container","fileContent","document","createElement","className","fileId","Date","now","Math","random","toString","substr","console","set","dataset","filename","filetype","type","filesize","size","includes","img","objectUrl","URL","createObjectURL","src","onload","blobUrl","appendChild","audio","controls","video","text","pre","textContent","error","innerHTML","formatFileSize","cleanup","revokeObjectURL","append","metadata","metadataList","addMetadata","term","definition","dt","dd","lastModified","toLocaleString","getFile","get","bytes","units","unitIndex","toFixed","select","defaultOption","each","i","el","option","_","filePreview","push","buddypond","uploadFiles","querySelectorAll","forEach","originalFile"],"mappings":"AAAe,MAAMA,EACjB,WAAAC,CAAYC,EAAIC,EAAU,IAQtB,OAPAC,KAAKF,GAAKA,EACVE,KAAKC,oBAAsB,CAAC,aAAc,YAAa,YAAa,aAAc,iBAClFD,KAAKE,oBAAsB,CAAC,aAAc,YAAa,aACvDF,KAAKG,oBAAsB,CAAC,YAAa,aAAc,aACvDH,KAAKI,mBAAqB,CAAC,aAAc,YAAa,WAAY,kBAAmB,oBACrFJ,KAAKK,UAAY,IAAIC,IAEdN,IACf,CAEI,UAAMO,GAKF,OAJAP,KAAKF,GAAGU,IAAI,iCACNR,KAAKF,GAAGW,KAAK,8CACnBT,KAAKU,WAAaV,KAAKF,GAAGW,KAAK,+CAExB,mBACf,CAEI,UAAME,GACFX,KAAKY,iBAAmBZ,KAAKF,GAAGe,KAAKC,GAAGC,cAAcC,aAAa,CAC/DC,GAAI,cACJC,MAAO,cACPC,EAAG,GACHC,EAAG,IACHC,MAAO,IACPC,OAAQ,IACRC,SAAU,IACVC,UAAW,IACXC,OAAQC,EAAE,YAAY,GACtBC,QAAS3B,KAAKU,KACdkB,WAAW,EACXC,aAAa,EACbC,aAAa,EACbC,UAAU,EACVC,WAAW,EACXC,WAAW,EACXC,WAAW,IAEflC,KAAKmC,oBACLnC,KAAKoC,2BAGL,IAAIpC,KAAKF,GAAGe,KAAKC,GAAGuB,KAAKrC,KAAKY,iBAAiBe,SAG/CD,EAAE,2BAA4B1B,KAAKY,iBAAiBe,SAASW,OAC7DZ,EAAE,qBAAsB1B,KAAKY,iBAAiBe,SAASW,MAC/D,CAEI,wBAAAF,GACIpC,KAAKF,GAAGyC,GAAG,qBAAsB,uBAAwBC,IACjDA,GAASA,EAAMC,OAAS,GACxBzC,KAAK0C,aAAaF,GAEtBd,EAAE,sBAAsBiB,cAI5B3C,KAAKF,GAAGyC,GAAG,eAAgB,2BAA2B,IAAMvC,KAAKmC,sBACjEnC,KAAKF,GAAGyC,GAAG,gBAAiB,2BAA2B,IAAMvC,KAAKmC,sBAGlET,EAAE1B,KAAKY,iBAAiBe,SAASiB,KAAK,0BAA0BL,GAAG,UAAWM,IAC1E,MAAMC,EAAcD,EAAEE,OAAOC,MACzBF,GACA9C,KAAKiD,UAAUH,MAIvBpB,EAAE,qBAAsB1B,KAAKY,iBAAiBe,SAASY,GAAG,SAAS,KAG/DvC,KAAKkD,kBAEjB,CAEI,cAAAC,GACI,MAAMC,EAAe1B,EAAE1B,KAAKY,iBAAiBe,SAASiB,KAAK,mBACrDS,EAAOD,EAAaR,KAAK,kBACzBU,EAAWF,EAAaR,KAAK,gBAEnCU,EAAShB,OACTgB,EAASC,QAAQC,OACjBH,EAAKE,QAAQE,SAAS,UAEtBJ,EAAKd,GAAG,SAAUM,IACdA,EAAEa,iBACF,MAAMX,EAASrB,EAAEmB,EAAEE,QAAQY,KAAK,QAEhCN,EAAKO,YAAY,UACjBlC,EAAEmB,EAAEE,QAAQU,SAAS,UAErBH,EAAShB,OACTZ,EAAEqB,GAAQS,SAEtB,CAEI,kBAAMd,CAAaF,GACf,MAAMqB,EAAkBnC,EAAE1B,KAAKY,iBAAiBe,SAASiB,KAAK,oBACxDkB,EAAoBpC,EAAE1B,KAAKY,iBAAiBe,SAASiB,KAAK,oBAEhEiB,EAAgBE,QAChBD,EAAkBpD,KAAK,0BAEvB,IAAK,IAAIsD,KAAQxB,QAEPxC,KAAKiE,kBAAkBD,EAAMH,GACnC7D,KAAKkE,gBAAgBF,EAAMF,GAG/B9D,KAAKY,iBAAiBM,MAAyB,IAAjBsB,EAAMC,OAChC,YAAYD,EAAM,GAAG2B,OACrB,WAAW3B,EAAMC,cAC7B,CAEI,uBAAMwB,CAAkBD,EAAMI,GAC1B,MAAMC,EAAcC,SAASC,cAAc,OAC3CF,EAAYG,UAAY,eAGxB,MAAMC,EAAS,QAAQC,KAAKC,SAASC,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAG,KAa1E,GAZAf,EAAK/C,GAAKwD,EACVO,QAAQxE,IAAI,gBAAiBiE,GAC7BzE,KAAKK,UAAU4E,IAAIR,EAAQT,GAK3BK,EAAYa,QAAQC,SAAWnB,EAAKG,KACpCE,EAAYa,QAAQE,SAAWpB,EAAKqB,KACpChB,EAAYa,QAAQI,SAAWtB,EAAKuB,KACpClB,EAAYa,QAAQT,OAAST,EAAK/C,GAE9BjB,KAAKC,oBAAoBuF,SAASxB,EAAKqB,MAAO,CAC9C,MAAMI,EAAMnB,SAASC,cAAc,OAC7BmB,EAAYC,IAAIC,gBAAgB5B,GACtCyB,EAAII,IAAMH,EACVD,EAAIK,OAAS,KAETzB,EAAYa,QAAQa,QAAUL,GAElCrB,EAAY2B,YAAYP,EACpC,MAAe,GAAIzF,KAAKE,oBAAoBsF,SAASxB,EAAKqB,MAAO,CACrD,MAAMY,EAAQ3B,SAASC,cAAc,SACrC0B,EAAMC,UAAW,EACjBlB,QAAQxE,IAAI,WAAYwD,GACxB,MAAM0B,EAAYC,IAAIC,gBAAgB5B,GACtCgB,QAAQxE,IAAI,YAAakF,GACzBO,EAAMJ,IAAMH,EACZrB,EAAYa,QAAQa,QAAUL,EAC9BrB,EAAY2B,YAAYC,EACpC,MAAe,GAAIjG,KAAKG,oBAAoBqF,SAASxB,EAAKqB,MAAO,CACrD,MAAMc,EAAQ7B,SAASC,cAAc,SACrC4B,EAAMD,UAAW,EACjB,MAAMR,EAAYC,IAAIC,gBAAgB5B,GACtCmC,EAAMN,IAAMH,EACZrB,EAAYa,QAAQa,QAAUL,EAC9BrB,EAAY2B,YAAYG,EACpC,MAAe,GAAInG,KAAKI,mBAAmBoF,SAASxB,EAAKqB,MAC7C,IACI,MAAMe,QAAapC,EAAKoC,OAClBC,EAAM/B,SAASC,cAAc,OACnC8B,EAAIC,YAAcF,EAClB/B,EAAY2B,YAAYK,GAExBhC,EAAYa,QAAQoB,YAAcF,CACrC,CAAC,MAAOG,GACLlC,EAAYiC,YAAc,yBAC1C,KACe,CACHjC,EAAYmC,UAAY,mIAGExC,EAAKG,0CACZnE,KAAKyG,eAAezC,EAAKuB,2CACzBvB,EAAKqB,MAAQ,sDAIhC,MAAMK,EAAYC,IAAIC,gBAAgB5B,GACtCK,EAAYa,QAAQa,QAAUL,CAC1C,CAIQrB,EAAYqC,QAAU,KACdrC,EAAYa,QAAQa,SACpBJ,IAAIgB,gBAAgBtC,EAAYa,QAAQa,UAIhD3B,EAAUwC,OAAOvC,EACzB,CAEI,eAAAH,CAAgBF,EAAMI,GAClB,MAAMyC,EAAWvC,SAASC,cAAc,OACxCsC,EAASrC,UAAY,gBAErB,MAAMsC,EAAexC,SAASC,cAAc,MACtCwC,EAAc,CAACC,EAAMC,KACvB,MAAMC,EAAK5C,SAASC,cAAc,MAC5B4C,EAAK7C,SAASC,cAAc,MAClC2C,EAAGZ,YAAcU,EACjBG,EAAGb,YAAcW,EACjBH,EAAad,YAAYkB,GACzBJ,EAAad,YAAYmB,IAG7BJ,EAAY,OAAQ/C,EAAKG,MACzB4C,EAAY,OAAQ/G,KAAKyG,eAAezC,EAAKuB,OAC7CwB,EAAY,OAAQ/C,EAAKqB,MAAQ,WACjC0B,EAAY,gBAAiB,IAAIrC,KAAKV,EAAKoD,cAAcC,kBAEzDR,EAASb,YAAYc,GACrB1C,EAAUwC,OAAOC,EACzB,CAGK,OAAAS,CAAQjD,GACLW,QAAQxE,IAAI,cAAe6D,GAC3B,MAAMI,EAASJ,EAAYa,QAAQT,OACnC,OAAOzE,KAAKK,UAAUkH,IAAI9C,EAClC,CACI,cAAAgC,CAAee,GACX,MAAMC,EAAQ,CAAC,IAAK,KAAM,KAAM,MAChC,IAAIlC,EAAOiC,EACPE,EAAY,EAEhB,KAAOnC,GAAQ,MAAQmC,EAAYD,EAAMhF,OAAS,GAC9C8C,GAAQ,KACRmC,IAGJ,MAAO,GAAGnC,EAAKoC,QAAQ,MAAMF,EAAMC,IAC3C,CAEI,iBAAAvF,GACI,MAAMyF,EAASlG,EAAE1B,KAAKY,iBAAiBe,SAASiB,KAAK,0BACrDgF,EAAO7D,QAGP,MAAM8D,EAAgBvD,SAASC,cAAc,UAC7CsD,EAAc7E,MAAQ,GACtB6E,EAAczB,KAAO,uBACrBwB,EAAOhB,OAAOiB,GAGdnG,EAAE,iBAAiBoG,MAAK,CAACC,EAAGC,KACxB,MAAMC,EAAS3D,SAASC,cAAc,UACtC0D,EAAOjF,MAAQgF,EAAG/G,GAClBgH,EAAO7B,KAAO4B,EAAG/G,GACjB2G,EAAOhB,OAAOqB,KAG1B,CAEI,mBAAM/E,GAIF,MAAMV,EAAQ,GACOd,EAAE,mBAAoB1B,KAAKY,iBAAiBe,SAEpDmG,MAAK,CAACI,EAAGC,KAClBzG,EAAE,gBAAiByG,GAAaL,MAAK,CAACI,EAAG7D,KACrC,MAAML,EAAOhE,KAAKF,GAAGe,KAAK,eAAeyG,QAAQjD,GAC7CL,GACAxB,EAAM4F,KAAKpE,eAQjBqE,UAAUC,YAAY9F,EACpC,CAEI,SAAAS,CAAUH,GACe9C,KAAKY,iBAAiBe,QAAQ4G,iBAAiB,iBACvDC,SAAQ7G,IACjB,MAAM8G,EAAezI,KAAKsH,QAAQ3F,GAClCqD,QAAQxE,IAAI,eAAgBiI,KAaxC"}