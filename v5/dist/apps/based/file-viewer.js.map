{"version":3,"file":"file-viewer.js","sources":["../../../apps/based/file-viewer/file-viewer.js"],"sourcesContent":["export default class FileViewer {\n    constructor(bp, options = {}) {\n        this.bp = bp;\n        this.supportedImageTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp', 'image/svg+xml'];\n        this.supportedAudioTypes = ['audio/mpeg', 'audio/wav', 'audio/ogg'];\n        this.supportedVideoTypes = ['video/mp4', 'video/webm', 'video/ogg'];\n        this.supportedTextTypes = ['text/plain', 'text/html', 'text/css', 'text/javascript', 'application/json'];\n        this.fileCache = new Map(); // Add a cache for the original files\n\n        return this;\n    }\n\n    async init() {\n        this.bp.log('Initializing FileViewer');\n        await this.bp.load('/v5/apps/based/file-viewer/file-viewer.css');\n        this.html = await this.bp.load('/v5/apps/based/file-viewer/file-viewer.html');\n\n        return 'FileViewer loaded';\n    }\n\n    async open() {\n        this.fileViewerWindow = this.bp.apps.ui.windowManager.createWindow({\n            id: 'file-viewer',\n            title: 'File Viewer',\n            x: 50,\n            y: 100,\n            width: 800,\n            height: 600,\n            minWidth: 400,\n            minHeight: 300,\n            icon: 'desktop/assets/images/icons/icon_file-viewer_64.png',\n            parent: $('#desktop')[0],\n            content: this.html,\n            resizable: true,\n            minimizable: true,\n            maximizable: true,\n            closable: true,\n            focusable: true,\n            maximized: false,\n            minimized: false\n        });\n        this.updateDropTargets();\n        this.initializeEventListeners();\n        //$('.fileviewer-target', this.fileViewerWindow.content).flexHide(); // for now\n        // this.initializeTabs();\n        new this.bp.apps.ui.Tabs(this.fileViewerWindow.content);\n\n        // hide these features for now\n        $('.fileviewer-upload-cloud', this.fileViewerWindow.content).hide();\n        $('.fileviewer-target', this.fileViewerWindow.content).hide();\n    }\n\n    initializeEventListeners() {\n        this.bp.on('ui::droparea::drop', 'show-file-in-viewer', (files) => {\n            if (files && files.length > 0) {\n                this.displayFiles(files);\n            }\n            $('#fileviewer-viewer').flexShow();\n\n        });\n\n        this.bp.on('window::open', 'update-the-drop-targets', () => this.updateDropTargets());\n        this.bp.on('window::close', 'update-the-drop-targets', () => this.updateDropTargets());\n\n        // Add click handler for target app selection\n        $(this.fileViewerWindow.content).find('.fileviewer-target-app').on('change', (e) => {\n            const targetAppId = e.target.value;\n            if (targetAppId) {\n                this.sendToApp(targetAppId);\n            }\n        });\n\n        $('.fileviewer-upload', this.fileViewerWindow.content).on('click', () => {\n\n\n            this.uploadToCloud();\n        });\n    }\n\n    initializeTabs() {\n        const tabContainer = $(this.fileViewerWindow.content).find('.tabs-container');\n        const tabs = tabContainer.find('.tab-list li a');\n        const contents = tabContainer.find('.tab-content');\n\n        contents.hide();\n        contents.first().show();\n        tabs.first().addClass('active');\n\n        tabs.on('click', (e) => {\n            e.preventDefault();\n            const target = $(e.target).attr('href');\n\n            tabs.removeClass('active');\n            $(e.target).addClass('active');\n\n            contents.hide();\n            $(target).show();\n        });\n    }\n\n    // Not currently used, could be useful for displaying HTML fragments / inspecting HTML\n    // should be connected to file-editor\n    displayHTMLFragment(fragment) {\n        console.log('displaying HTML fragment', fragment);\n        const viewerContainer = $(this.fileViewerWindow.content).find('.fileviewer-file');\n        const metadataContainer = $(this.fileViewerWindow.content).find('#fileviewer-meta');\n\n        const container = document.createElement('div');\n        container.classList.add('html-drop-preview');\n        container.appendChild(fragment);\n\n        viewerContainer.empty();\n        metadataContainer.html('<h1>HTML Fragment</h1>');\n        // add code area to display the HTML code\n        const codeArea = document.createElement('pre');\n        codeArea.classList.add('html-code');\n        codeArea.textContent = fragment.outerHTML; // Use outerHTML to get the full HTML\n        // set small width and wrap\n        codeArea.style.width = '100%';\n        codeArea.style.whiteSpace = 'pre-wrap';\n        metadataContainer.append(codeArea);\n        //metadataContainer.append(fragment);\n        viewerContainer.append(container);\n        this.fileViewerWindow.title = 'Viewing HTML Fragment';\n    }\n\n    async displayFiles(files) {\n        const viewerContainer = $(this.fileViewerWindow.content).find('.fileviewer-file');\n        const metadataContainer = $(this.fileViewerWindow.content).find('#fileviewer-meta');\n\n        viewerContainer.empty();\n        metadataContainer.html('<h1>File Metadata</h1>');\n\n        for (let file of files) {\n\n            await this.displaySingleFile(file, viewerContainer);\n            this.displayMetadata(file, metadataContainer);\n        }\n\n        this.fileViewerWindow.title = files.length === 1 ?\n            `Viewing: ${files[0].name}` :\n            `Viewing ${files.length} files`;\n    }\n\n    async displaySingleFile(file, container) {\n        const fileContent = document.createElement('div');\n        fileContent.className = 'file-content';\n\n        // Generate a unique ID for this file\n        const fileId = `file-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n        file.id = fileId;\n        console.log('using file id', fileId);\n        this.fileCache.set(fileId, file);\n\n\n\n        // Store the original file object as a property\n        fileContent.dataset.filename = file.name;\n        fileContent.dataset.filetype = file.type;\n        fileContent.dataset.filesize = file.size;\n        fileContent.dataset.fileId = file.id;\n\n        if (this.supportedImageTypes.includes(file.type)) {\n            const img = document.createElement('img');\n            const objectUrl = URL.createObjectURL(file);\n            img.src = objectUrl;\n            img.onload = () => {\n                // Instead of revoking, store the blob URL\n                fileContent.dataset.blobUrl = objectUrl;\n            };\n            fileContent.appendChild(img);\n        } else if (this.supportedAudioTypes.includes(file.type)) {\n            const audio = document.createElement('audio');\n            audio.controls = true;\n            console.log(\"OMGaudio\", file);\n            const objectUrl = URL.createObjectURL(file);\n            console.log('objectUrl', objectUrl);\n            audio.src = objectUrl;\n            fileContent.dataset.blobUrl = objectUrl;\n            fileContent.appendChild(audio);\n        } else if (this.supportedVideoTypes.includes(file.type)) {\n            const video = document.createElement('video');\n            video.controls = true;\n            const objectUrl = URL.createObjectURL(file);\n            video.src = objectUrl;\n            fileContent.dataset.blobUrl = objectUrl;\n            fileContent.appendChild(video);\n        } else if (this.supportedTextTypes.includes(file.type)) {\n            try {\n                const text = await file.text();\n                const pre = document.createElement('pre');\n                pre.textContent = text;\n                fileContent.appendChild(pre);\n                // Store text content directly\n                fileContent.dataset.textContent = text;\n            } catch (error) {\n                fileContent.textContent = 'Error reading text file';\n            }\n        } else {\n            fileContent.innerHTML = `\n                <div class=\"binary-file\">\n                    <i class=\"file-icon\"></i>\n                    <p>Binary file: ${file.name}</p>\n                    <p>Size: ${this.formatFileSize(file.size)}</p>\n                    <p>Type: ${file.type || 'unknown'}</p>\n                </div>\n            `;\n            // Store binary blob URL\n            const objectUrl = URL.createObjectURL(file);\n            fileContent.dataset.blobUrl = objectUrl;\n        }\n\n\n        // Add cleanup method\n        fileContent.cleanup = () => {\n            if (fileContent.dataset.blobUrl) {\n                URL.revokeObjectURL(fileContent.dataset.blobUrl);\n            }\n        };\n\n        container.append(fileContent);\n    }\n\n    displayMetadata(file, container) {\n        const metadata = document.createElement('div');\n        metadata.className = 'file-metadata';\n\n        const metadataList = document.createElement('dl');\n        const addMetadata = (term, definition) => {\n            const dt = document.createElement('dt');\n            const dd = document.createElement('dd');\n            dt.textContent = term;\n            dd.textContent = definition;\n            metadataList.appendChild(dt);\n            metadataList.appendChild(dd);\n        };\n\n        addMetadata('Name', file.name);\n        addMetadata('Size', this.formatFileSize(file.size));\n        addMetadata('Type', file.type || 'unknown');\n        addMetadata('Last Modified', new Date(file.lastModified).toLocaleString());\n\n        metadata.appendChild(metadataList);\n        container.append(metadata);\n    }\n\n    // Method to get the original file\n    getFile(fileContent) {\n        console.log('fileContent', fileContent);\n        const fileId = fileContent.dataset.fileId;\n        return this.fileCache.get(fileId);\n    }\n    formatFileSize(bytes) {\n        const units = ['B', 'KB', 'MB', 'GB'];\n        let size = bytes;\n        let unitIndex = 0;\n\n        while (size >= 1024 && unitIndex < units.length - 1) {\n            size /= 1024;\n            unitIndex++;\n        }\n\n        return `${size.toFixed(1)} ${units[unitIndex]}`;\n    }\n\n    updateDropTargets() {\n        const select = $(this.fileViewerWindow.content).find('.fileviewer-target-app');\n        select.empty();\n\n        // Add default option\n        const defaultOption = document.createElement('option');\n        defaultOption.value = '';\n        defaultOption.text = 'Select target app...';\n        select.append(defaultOption);\n\n        // Add all droparea targets\n        $('.has-droparea').each((i, el) => {\n            const option = document.createElement('option');\n            option.value = el.id;\n            option.text = el.id;\n            select.append(option);\n\n        });\n    }\n\n    async uploadToCloud() {\n        // let files = this.fileViewerWindow.content.querySelectorAll('.file-content');\n\n        // TODO: implement this ability to upload files to the cloud from file viewer\n        const files = [];\n        const filePreviews = $('.fileviewer-file', this.fileViewerWindow.content);\n        // Collect all files first\n        filePreviews.each((_, filePreview) => {\n            $('.file-content', filePreview).each((_, fileContent) => {\n                const file = this.bp.apps['file-viewer'].getFile(fileContent);\n                if (file) {\n                    files.push(file);\n                }\n            });\n        });\n\n\n\n\n        await buddypond.uploadFiles(files);\n    }\n\n    sendToApp(targetAppId) {\n        const fileContents = this.fileViewerWindow.content.querySelectorAll('.file-content');\n        fileContents.forEach(content => {\n            const originalFile = this.getFile(content);\n            console.log('sending file', originalFile);\n            if (originalFile) {\n                // TODO:\n                /*\n                this.bp.sendFile({\n                    type: 'pond', // TOOD: hardcoded?\n                    name: targetAppId,\n                    text: 'Sending file: ' + originalFile.name,\n                    file: originalFile\n                });\n                */\n            }\n        });\n    }\n}"],"names":["FileViewer","constructor","bp","options","this","supportedImageTypes","supportedAudioTypes","supportedVideoTypes","supportedTextTypes","fileCache","Map","init","log","load","html","open","fileViewerWindow","apps","ui","windowManager","createWindow","id","title","x","y","width","height","minWidth","minHeight","icon","parent","$","content","resizable","minimizable","maximizable","closable","focusable","maximized","minimized","updateDropTargets","initializeEventListeners","Tabs","hide","on","files","length","displayFiles","flexShow","find","e","targetAppId","target","value","sendToApp","uploadToCloud","initializeTabs","tabContainer","tabs","contents","first","show","addClass","preventDefault","attr","removeClass","displayHTMLFragment","fragment","console","viewerContainer","metadataContainer","container","document","createElement","classList","add","appendChild","empty","codeArea","textContent","outerHTML","style","whiteSpace","append","file","displaySingleFile","displayMetadata","name","fileContent","className","fileId","Date","now","Math","random","toString","substr","set","dataset","filename","filetype","type","filesize","size","includes","img","objectUrl","URL","createObjectURL","src","onload","blobUrl","audio","controls","video","text","pre","error","innerHTML","formatFileSize","cleanup","revokeObjectURL","metadata","metadataList","addMetadata","term","definition","dt","dd","lastModified","toLocaleString","getFile","get","bytes","units","unitIndex","toFixed","select","defaultOption","each","i","el","option","_","filePreview","push","buddypond","uploadFiles","querySelectorAll","forEach","originalFile"],"mappings":"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"}