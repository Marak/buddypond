const e={};function t(e){for(let t in bp.apps.wallpaper.wallpaperManager._wallpapers){let i=bp.apps.wallpaper.wallpaperManager._wallpapers[t],o="";t===desktop.settings.wallpaper_name&&(o="checked");let a=`\n      <input type="radio" id="wallPaperRadio${t}" name="wallpaper_opt" class="wallpaper_opt" value="${t}" ${o}>\n      <label for="wallPaperRadio${t}">${i.label}</label>\n      <br>\n      `;e.append(a)}}function i(e,t){const i=["color","background","background-color","border-color","outline-color","text-decoration-color","column-rule-color","fill","stroke"].includes(e.toLowerCase()),o=(/^#([0-9a-f]{3}|[0-9a-f]{6})$/i||/^rgba?\(.+\)$/i||/^hsla?\(.+\)$/i||/^[a-z]+$/i).test(t);return i||o}e.legacyWallpapers=function(e){if(e.apps.wallpaper){function i(t,i){e.set("wallpaper_color","#"+i)}function o(t,i){e.set("wallpaper_color","#"+i)}t($(".wallpaperTypes")),e.on("settings::wallpaper_color","update-wallpaper-color-picker",(function(t){$(".wallpaperOptionColor").setColor(t),$(".simpleColorDisplay").html(t);let i=e.apps.wallpaper.wallpaperManager.active,o=e.apps.wallpaper.wallpaperManager.wallpapers[i];o?o.changeColor(t):console.log("cannot change color, active wallpaper not found",i)})),$(".wallpaperOptionColor").simpleColor({boxHeight:20,cellWidth:16,cellHeight:16,defaultColor:desktop.settings.wallpaper_color||"#008F11",inputCSS:{"border-radius":"4px","font-size":"4px",width:"10px"},chooserCSS:{border:"1px solid #660033",top:"20px"},displayCSS:{},displayColorCode:!0,livePreview:!0,insert:"before",onSelect:function(t,o){i(e.apps.wallpaper.active,t)},onCellEnter:function(t,i){o(e.apps.wallpaper.active,t)},onClose:function(e){}}),$("input[name=wallpaper_opt]").on("input",(function(){let t=$("input[name=wallpaper_opt]:checked").val();e.set("wallpaper_name",t)}))}};const o={};function a(e,t){const i=e.target.files[0],o=e.target,a=document.querySelector(".aim-profile-picture-upload-status"),s=a.querySelector(".status-text"),l=(e,t)=>{a.classList.remove("uploading","success","error","hidden"),s.textContent=e,a.classList.add(t),a.style.display="block"},n=(e=3e3)=>{setTimeout((()=>{a.classList.add("hidden"),a.style.display="none"}),e)};if(i){if(!["image/jpeg","image/png","image/gif","image/jpg","image/webp"].includes(i.type))return l("Please select a valid image file (JPEG, PNG, or GIF).","error"),o.value="",void n();const e=new Image,a=new FileReader;a.onload=a=>{e.src=a.target.result,e.onload=async()=>{const a=document.createElement("canvas"),s=a.getContext("2d");a.width=128,a.height=128;const r=Math.min(128/e.width,128/e.height),p=e.width*r,d=e.height*r,c=(128-p)/2,u=(128-d)/2;s.fillStyle="white",s.fillRect(0,0,128,128),s.drawImage(e,c,u,p,d);try{const e=await new Promise((e=>{a.toBlob((t=>e(t)),"image/jpeg",.8)})),s=307200;if(e.size>s)return l("Resized image exceeds 300KB. Please choose a smaller image.","error"),o.value="",void n();const r=URL.createObjectURL(e);t.src=r;const p=document.createElement("img");p.src=r,p.classList.add("aim-profile-picture-img");const d=document.querySelector(".aim-profile-picture-preview");d.innerHTML="",d.appendChild(p),l("Uploading...","uploading");const c=new File([e],i.name,{type:"image/jpeg",lastModified:Date.now()});try{let e,t=e=>{const t=Math.round(100*e);l(`Uploading: ${t}%`,"uploading")};c.filePath="/profile-pics/"+c.name,console.log("Uploading file:",c);try{e=await buddypond.uploadFile(c,t),console.log("File uploaded to:",e),l("Upload complete!","success"),n()}catch(e){return console.error("Error uploading file:",e),void l("Upload failed: "+e.message,"error")}console.log("File uploaded to:",e),await this.bp.apps.buddylist.client.setStatus(this.bp.me,{profilePicture:e}),this.bp.apps.buddylist.data.profileState.profilePicture=e}catch(e){console.error("Upload error:",e),l("Upload failed. Please try again.","error"),n()}}catch(e){console.error("Error processing image:",e),l("Error processing image. Please try again.","error"),o.value="",n()}},e.onerror=()=>{l("Failed to load image. Please select a valid image file.","error"),o.value="",n()}},a.readAsDataURL(i)}}o.endpoint=buddypond.apiKeysEndpoint,o.addApiKey=async function(e,t,i){return await o.apiRequest("/api-keys","POST",{name:e,roles:t,expiry:i})},o.revokeApiKey=async function(e){return await o.apiRequest(`/api-keys/${e}`,"DELETE")},o.getApiKeys=async function(){const e=await o.apiRequest("/api-keys","GET");if(Array.isArray(e))return e;throw new Error("Invalid API key list")},o.validateApiKey=async function(e,t){if(!e||!t||!Array.isArray(t)||0===t.length)throw new Error("Invalid key or requireRole parameter");return await o.apiRequest("/api-keys/validate","POST",{key:e,requireRole:t})},o.apiRequest=async(e,t="GET",i=null)=>{const a={method:t};let s={Accept:"application/json","Content-Type":"application/json; charset=utf-8","X-Me":buddypond.me};buddypond.qtokenid&&(s.Authorization=`Bearer ${buddypond.qtokenid}`),i&&(a.body=JSON.stringify(i)),a.headers=s;let l=`${o.endpoint}${e}`;console.log("admin client making api request",l,a);try{const e=await fetch(l,a);if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);return await e.json()}catch(e){throw console.error("Error in API request:",e),e}};class s{constructor(e,t={}){return this.bp=e,this}async init(){return await this.bp.load("/v5/apps/based/profile/profile.css"),await this.bp.load("browser"),await this.bp.appendScript("/desktop/assets/js/jquery.simple-color.js"),this.html=await this.bp.load("/v5/apps/based/profile/profile.html"),"loaded Profile"}async open(t={}){let i=this.bp.me||t.context;i=i.replace(":",""),i=i.replace(" ","");let o=document.createElement("div");o.classList.add("customProfile");let s=document.createElement("div");if(s.innerHTML=this.html,this.profileWindow)this.profileWindow.content=o,this.profileWindow.context!==i&&(this.profileWindow.context=i,$(this.profileWindow.content).html(o.innerHTML),this.profileWindow.setTitle("Profile - "+i),new this.bp.apps.ui.Tabs("#"+this.profileWindow.id));else{this.profileWindow=this.bp.apps.ui.windowManager.createWindow({id:"profile",title:"Profile - "+i,x:50,y:100,width:800,height:500,minWidth:200,minHeight:200,parent:$("#desktop")[0],icon:"/desktop/assets/images/icons/icon_profile_64.png",context:i||"default",content:s,resizable:!0,minimizable:!0,maximizable:!0,closable:!0,focusable:!0,maximized:!1,minimized:!1,onClose:()=>{this.profileWindow=null}}),this.profileWindow.loggedIn=!0,this.tabs=new this.bp.apps.ui.Tabs(".tabs-container","#"+this.profileWindow.id),e.legacyWallpapers(bp);const t=document.getElementById("profile-picture-input"),o=document.querySelector(".aim-profile-picture-img");$(".aim-set-password-email").on("click",(e=>{this.tabs.navigateToTab("#tabs-3")})),t.addEventListener("change",(async e=>{a.call(this,e,o)}));let l=this.bp.apps.buddylist.data.profileState.profilePicture,n=$(".aim-profile-picture-preview");if(l){let e=document.createElement("img");e.src=l,e.classList.add("aim-profile-picture-img"),n.append(e)}else{const e=this.bp.vendor.dicebear.createAvatar(this.bp.vendor.dicebearAvatars,{seed:this.bp.me,size:128,backgroundColor:["#f0f0f0"]}).toString();console.log("Avatar SVG:",e),n.html(e)}}$(".yourApps tbody",this.profileWindow.content).html("");for(let e in bp.settings.apps_installed);let l=this.bp.config.host+"/"+this.bp.me;$(".liveProfileLink",this.profileWindow.content).attr("href",l),$(".liveProfileLink",this.profileWindow.content).html(l),$(".editProfileButton",this.profileWindow.content).on("click",(()=>{$(".profileEditor",this.profileWindow.content).flexShow(),$(".customProfile",this.profileWindow.content).flexHide(),$(".updateProfileHtml",this.profileWindow.content).flexShow(),$(".cancelProfileEdit",this.profileWindow.content).flexShow()})),$(".cancelProfileEdit",this.profileWindow.content).on("click",(()=>{$(".profileEditor",this.profileWindow.content).flexHide(),$(".customProfile",this.profileWindow.content).flexShow(),$(".updateProfileHtml",this.profileWindow.content).flexHide(),$(".cancelProfileEdit",this.profileWindow.content).flexHide()})),$(".updateProfileHtml").flexHide(),$(".cancelProfileEdit").flexHide(),async function(e){$(".updateProfileButton").on("click",(async function(){let t={};if(t.email=$(".buddy_email").val(),t.password=$(".buddy_password").val(),t.confirmPassword=$(".confirm_buddy_password").val(),$(".updateProfileResponse").html(""),t.password&&(!t.confirmPassword||t.password!==t.confirmPassword))return $(".updateProfileResponse").addClass("error"),void $(".updateProfileResponse").html("Passwords do not match");console.log("Updating profile with",t),$(".updateProfileResponse").removeClass("error");try{let i=await buddypond.updateAccount({buddyname:e.me,password:t.password,email:t.email});console.log("password changed",i),i&&$(".updateProfileResponse").html("Account updated successfully")}catch(e){return $(".updateProfileResponse").addClass("error"),void $(".updateProfileResponse").html("Error: "+e.message)}})),e.apps.buddylist&&e.apps.buddylist.data.profileState&&e.apps.buddylist.data.profileState.email&&$(".buddy_email").val(e.apps.buddylist.data.profileState.email),e.apps.buddylist&&e.apps.buddylist.data.profileState&&"boolean"==typeof e.apps.buddylist.data.profileState.emailVerified&&(e.apps.buddylist.data.profileState.emailVerified?($(".buddy_email_verified_text").html("Email Verified"),$(".buddy_email_verify_button").hide()):($(".buddy_email_verified_text").html("Email Not Verified"),$(".buddy_email_verify_button").show())),$(".updateProfileForm").on("submit",(function(e){return e.preventDefault(),!1})),e.apps.say&&e.apps.say.voices.forEach((function(e){$(".ttsVoice").append(`<option value="${e.voiceURI}">${e.name} ${e.lang}</option>`)}));desktop.settings.tts_voice_index&&$(".ttsVoice").prop("selectedIndex",desktop.settings.tts_voice_index),$(".ttsVoice").on("change",(function(){let t=voices[$(this).prop("selectedIndex")];e.apps.say.setVoice($(this).prop("selectedIndex")),desktop.set("tts_voice",t),desktop.set("tts_voice_index",$(this).prop("selectedIndex")),e.say("Hello Beautiful")})),$(".hideFlag").on("click",(function(){$(this).prop("checked")?desktop.set("geo_flag_hidden",!0):desktop.set("geo_flag_hidden",!1)}))}(bp);let n=$(".pad-editor-holder",this.profileWindow.content)[0],r=this.bp.config.host+"/"+this.bp.me;-1===this.bp.config.host.indexOf("buddypond.com")&&(r+="/index.html"),this.browser||(this.browser=new this.bp.apps.browser.BrowserWindow(this.bp,n,r));let p=$("#your-profile",this.profileWindow.content);this.bp.on("file-explorer::update","update-profile-preview-if-profile-index",(e=>{this.browser.navigate(r)})),p.append(n),t.context&&"themes"===t.context&&$(".themesLink").click(),$(".me").html(this.bp.me),t&&"settings"===t.type&&this.tabs.showTab("#tabs-3"),t&&"themes"===t.type&&this.tabs.showTab("#tabs-2"),$(".themeSelect",this.profileWindow.content).on("change",(e=>{let t=$(e.target).val();"Custom"!==t&&(this.bp.apps.themes.applyTheme(t),this.themeEditor(t))}));let d=this.bp.get("active_theme")||"Light";return $(".themeSelect",this.profileWindow.content).val(d),$(".themeSelect",this.profileWindow.content).trigger("change"),this.bp.on("settings::active_theme","update-dropdown",(e=>{this.bp.get("active_theme")})),this.apiKeys(),this.profileWindow}}s.prototype.themeEditor=function(e){let t=this.bp.apps.themes.themes[e],o=t.styles||{},a=$(".theme-styles",this.profileWindow.content);a.html("");let s=JSON.parse(JSON.stringify(t));for(let e in o){let t=o[e],s=$("<tr></tr>"),l=$('<td colspan="2"></td>');l.append(`<div class="style-block"><div class="style-title">${e}</div>`);for(let o in t){let a=t[o],s=`input_${e}_${o}`.replace(/\W+/g,"_"),n="";if(i(o,a)){n=`<input type="color" value="${a.startsWith("#")?a:"#ffffff"}" data-style="${e}" data-prop="${o}" class="color-picker" />`}l.append(`\n        <div class="prop-row">\n            <label class="prop-name">${o}:</label>\n            <input type="text" id="${s}" value="${a}" data-style="${e}" data-prop="${o}" />\n            ${n}\n        </div>\n    `)}s.append(l),a.append(s)}a.on("input",'input[type="text"], input.color-picker',function(e){$(".themeSelect",this.profileWindow.content).val("Custom");let t=$(e.target).data("style"),i=$(e.target).data("prop");if(console.log("style",t,"prop",i),!t||!i)return;let o=$(e.target).val();if($(e.target).hasClass("color-picker")){$(e.target).closest(".prop-row").find('input[type="text"]').val(o)}s.styles[t][i]=o,console.log("editableTheme.styles",s),s.name="Custom",this.bp.apps.themes.applyTheme(s)}.bind(this)),a.on("click",".add-prop-btn",function(e){let t=$(e.target).data("style"),i=$(e.target).closest("div"),o=i.find(".new-prop-name"),a=i.find(".new-prop-value"),l=o.val().trim(),n=a.val().trim();l&&n&&(s.styles[t][l]=n,$(".themeSelect",this.profileWindow.content).trigger("change"))}.bind(this)),a.on("click",".remove-prop-btn",function(e){let t=$(e.target).data("style"),i=$(e.target).data("prop");delete s.styles[t][i],$(".themeSelect",this.profileWindow.content).trigger("change")}.bind(this)),console.log("themeData",t)},s.prototype.apiKeys=async function(){const e=$("#bp-api-keys-roles");async function t(){const e=$("#bp-api-keys-list");e.empty();(await o.getApiKeys()).forEach((t=>{const i=Array.isArray(t.roles)?t.roles:t.role?[t.role]:[],o=new Date(t.ctime||t.created_at).toLocaleString(),a=t.expiry?new Date(t.expiry).toLocaleDateString():"Never",s=t.usage?`${t.usage} times`:"Not used yet",l=$(`\n  <li class="bp-api-keys-list-item">\n    <div class="bp-api-keys-card">\n      <div class="bp-api-keys-header">\n        <strong class="bp-api-keys-name">${t.name}</strong>\n        <button class="bp-api-keys-revoke" data-id="${t.id}">Revoke</button>\n      </div>\n\n      <div class="bp-api-keys-keybox" data-full="${t.key||t.id}">\n        <code class="bp-api-keys-code">Hidden, click "Reveal" to show API Key</code>\n        <div class="bp-api-keys-buttons">\n          <button class="bp-api-keys-reveal">Reveal</button>\n          <button class="bp-api-keys-copy">Copy</button>\n          <button class="bp-api-keys-verify">Verify</button>\n        </div>\n        <div class="bp-api-keys-status"></div>\n      </div>\n\n      <div class="bp-api-keys-meta">\n        <div><strong>Roles:</strong> ${i.join(", ")}</div>\n        <div><strong>Created:</strong> ${o}</div>\n        <div><strong>Expiry:</strong> ${a}</div>\n        <div><strong>Used:</strong> <span class="usage-count">${s}</span></div>\n\n      </div>\n    </div>\n  </li>\n`);e.append(l)})),$(".bp-api-keys-reveal").on("click",(function(){const e=$(this).closest(".bp-api-keys-keybox"),t=e.data("full");e.find("code").text(t),$(this).remove()})),$(".bp-api-keys-copy").on("click",(function(){const e=$(this).closest(".bp-api-keys-keybox").data("full");navigator.clipboard?navigator.clipboard.writeText(e).then((()=>{$(this).text("Copied!"),setTimeout((()=>$(this).text("Copy")),1500)})):alert("Clipboard API not supported in this browser.")})),$(".bp-api-keys-verify").on("click",(async function(){const e=$(this).closest(".bp-api-keys-keybox"),t=e.data("full"),i=e.find(".bp-api-keys-status"),a=e.closest(".bp-api-keys-card").find(".bp-api-keys-meta").find('div:contains("Roles:")').text().replace("Roles:","").trim().split(",").map((e=>e.trim())).filter(Boolean);i.text("Verifying…");try{const s=await o.validateApiKey(t,a);if(s.valid){i.text("✅ Valid").css("color","green");e.closest(".bp-api-keys-card").find(".usage-count").text(s.usage+" times"||"0 times")}else i.text(`❌ Invalid (${s.reason||"unknown"})`).css("color","red")}catch(e){console.error("Validation failed",e),i.text("❌ Error validating key").css("color","red")}})),$(".bp-api-keys-revoke").on("click",(async function(){const e=$(this).data("id");confirm("Are you sure you want to revoke this API key?")&&(await o.revokeApiKey(e),t())}))}["deploy","read","write","admin"].forEach((t=>{const i=`bp-api-role-${t}`;let o="";"deploy"===t&&(o="checked"),e.append(`\n      <label for="${i}" class="bp-api-keys-role-label">\n        <input type="checkbox" name="roles" value="${t}" id="${i}" ${o} />\n        ${t}\n      </label>\n    `)})),$(".bp-api-keys-form").on("submit",(async function(e){e.preventDefault();const i=$(this),a=i.find('input[name="name"]').val(),s=i.find('input[name="expiry"]').val(),l=i.find('input[name="roles"]:checked').map((function(){return this.value})).get();if(!a||0===l.length)return alert("Please provide a name and at least one role."),!1;try{const e=await o.addApiKey(a,l,s||null);console.log("New API key created:",e),t()}catch(e){alert("Failed to create API key"),console.error(e)}return!1})),t()};export{s as default};
//# sourceMappingURL=profile.js.map
