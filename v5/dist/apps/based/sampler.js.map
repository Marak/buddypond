{"version":3,"file":"sampler.js","sources":["../../../apps/based/sampler/SamplerPad.js","../../../apps/based/ui/PianoRoll.js","../../../apps/based/ui/StreamingWaveform.js","../../../apps/based/ui/Slider.js","../../../apps/based/sampler/packs/tr-808/tr-808.js","../../../apps/based/sampler/SamplerPadComponent.js","../../../apps/based/sampler/SamplerPadComponent/_createPad.js","../../../apps/based/sampler/SamplerPadComponent/_createFileInput.js","../../../apps/based/sampler/SamplerPadComponent/_createSlicedRecordButton.js","../../../apps/based/sampler/SamplerPadComponent/_createMicrophoneSlicedRecordButton.js","../../../apps/based/sampler/SamplerPadComponent/_sliceAndLoadToPads.js","../../../apps/based/sampler/SamplerPadComponent/_sliceAudioBuffer.js","../../../apps/based/sampler/sampler.js"],"sourcesContent":["export default class SamplerPadEffect {\n  constructor(audioContext, globalBus = null) {\n    this.context = audioContext;\n    this.buffers = Array(8).fill(null); // Storage for audio buffers (8 pads)\n    this.recorder = null;\n    this.recordedChunks = [];\n    this.activeSources = new Map(); // Track active sources\n    this.pitchStates = new Map(); // Track current pitch states for active sources\n    this.gainNode = this.context.createGain(); // Gain node for volume control\n    this.mode = Array(8).fill('one-shot'); // Default mode is 'one-shot' for each pad\n    this.reversePlayback = Array(8).fill(false); // Reverse playback flag for each pad\n\n    // Connect gainNode to global bus or directly to destination\n    if (globalBus) {\n      globalBus.addTrack(this.gainNode, this.context);\n    } else {\n      this.gainNode.connect(this.context.destination);\n    }\n  }\n\n\n  async unload() {\n    this.buffers = Array(8).fill(null);\n    this.recorder = null;\n    this.recordedChunks = [];\n    this.activeSources.clear();\n    this.pitchStates.clear();\n  }\n\n  async loadSample(file, padIndex) {\n    const arrayBuffer = await file.arrayBuffer();\n    const audioBuffer = await this.context.decodeAudioData(arrayBuffer);\n    this.buffers[padIndex] = audioBuffer;\n    if (this.reversePlayback[padIndex]) {\n      this.reverseBuffer(padIndex); // Reverse the buffer if the pad is set to reverse\n    }\n  }\n  async recordMicrophone(padIndex) {\n    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n    this.recorder = new MediaRecorder(stream);\n    this.recordedChunks = [];\n\n    this.recorder.ondataavailable = (e) => this.recordedChunks.push(e.data);\n    this.recorder.onstop = async () => {\n      const blob = new Blob(this.recordedChunks, { type: \"audio/webm\" });\n      const arrayBuffer = await blob.arrayBuffer();\n      this.buffers[padIndex] = await this.context.decodeAudioData(arrayBuffer);\n    };\n\n    this.recorder.start();\n  }\n\n  stopMicrophoneRecording() {\n    if (this.recorder && this.recorder.state === \"recording\") {\n      this.recorder.stop();\n    }\n  }\n\n  recordGlobalBus(globalBus, padIndex) {\n    const streamDestination = globalBus.audioContext.createMediaStreamDestination();\n    globalBus.gainNode.connect(streamDestination);\n\n    this.recorder = new MediaRecorder(streamDestination.stream);\n    this.recordedChunks = [];\n\n    this.recorder.ondataavailable = (e) => this.recordedChunks.push(e.data);\n    this.recorder.onstop = async () => {\n      const blob = new Blob(this.recordedChunks, { type: \"audio/webm\" });\n      const arrayBuffer = await blob.arrayBuffer();\n      this.buffers[padIndex] = await this.context.decodeAudioData(arrayBuffer);\n    };\n\n    this.recorder.start();\n    return streamDestination.stream;\n  }\n\n  stopGlobalBusRecording() {\n    if (this.recorder && this.recorder.state === \"recording\") {\n      this.recorder.stop();\n    }\n  }\n\n  playSampleAtPitch(padIndex, pitchRatio) {\n    if (!this.buffers[padIndex]) return;\n\n    const source = this.context.createBufferSource();\n    source.buffer = this.buffers[padIndex];\n    source.playbackRate.value = pitchRatio; // Adjust pitch\n    source.connect(this.gainNode);\n    console.log('confirming this.gainNode', this.gainNode);\n\n    source.start();\n    // Store the source and initial pitch ratio for potential modulation\n    this.activeSources.set(padIndex, source);\n    this.pitchStates.set(padIndex, pitchRatio);\n  }\n\n  setReverse(padIndex, reverse) {\n    this.reversePlayback[padIndex] = reverse;\n    if (reverse) {\n      this.reverseBuffer(padIndex);\n    } else {\n      // Reload or reassign the original buffer if turning off reverse\n      this.loadSample(originalFile, padIndex); // Ensure `originalFile` is stored or accessible\n    }\n  }\n  \n  reverseBuffer(padIndex) {\n    const buffer = this.buffers[padIndex];\n    const numChannels = buffer.numberOfChannels;\n    const reversedBuffer = this.context.createBuffer(numChannels, buffer.length, buffer.sampleRate);\n  \n    for (let channel = 0; channel < numChannels; channel++) {\n      const channelData = buffer.getChannelData(channel);\n      const reversedData = reversedBuffer.getChannelData(channel);\n      for (let i = 0; i < buffer.length; i++) {\n        reversedData[i] = channelData[buffer.length - 1 - i];\n      }\n    }\n  \n    this.buffers[padIndex] = reversedBuffer; // Replace the original buffer with reversed\n  }\n\n  // Method to set the playback mode\n  setMode(padIndex, mode) {\n    this.mode[padIndex] = mode; // mode could be 'one-shot', 'hold', or 'toggle'\n  }\n\n  playSample(padIndex, press = false) {\n    if (!this.buffers[padIndex]) return;\n\n    const source = this.context.createBufferSource();\n    source.buffer = this.buffers[padIndex];\n    source.connect(this.gainNode);\n\n    const existingSource = this.activeSources.get(padIndex);\n    if (existingSource && this.mode[padIndex] === 'loop' && existingSource.loop) {\n      this.stopSample(padIndex);  // Stop loop if already playing\n      return;\n    }\n    console.log('existingSource', existingSource, 'this.mode[padIndex]', this.mode[padIndex]);\n    switch (this.mode[padIndex]) {\n      case 'one-shot':\n      case 'hold':\n      case 'toggle':\n      case 'loop':\n        if (existingSource && (this.mode[padIndex] === 'toggle' || this.mode[padIndex] === 'loop')) {\n          console.log(\"STOPPING\");\n          this.stopSample(padIndex);\n          return;\n        }\n        source.loop = this.mode[padIndex] === 'loop';\n        source.start();\n        console.log('setting the activeSources', source);\n        this.activeSources.set(padIndex, source);\n        break;\n    }\n  }\n\n  stopSample(padIndex) {\n    const source = this.activeSources.get(padIndex);\n    if (source) {\n      source.loop = false;\n      source.stop();\n      this.activeSources.delete(padIndex);\n    }\n  }\n\n  // Add event handlers to bind UI button presses/releases to these methods\n  handlePadPress(padIndex) {\n    if (this.mode[padIndex] === 'hold') {\n      this.playSample(padIndex, true);\n    } else {\n      this.playSample(padIndex);\n    }\n  }\n\n  handlePadRelease(padIndex) {\n    if (this.mode[padIndex] === 'hold') {\n      this.stopSample(padIndex);\n    }\n  }\n\n  stopAllRecordings() { // Currently all the same stop functions ( shared recorder between global and mic )\n    if (this.recorder && this.recorder.state === \"recording\") {\n      this.recorder.stop();\n    }\n  }\n\n  stopAllSamples() {\n\n    // call stopSample on each active source\n    this.activeSources.forEach((source) => {\n      source.loop = false;\n      source.stop();\n    });\n    //this.activeSources.forEach((source) => source.stop());\n    this.activeSources.clear();\n    this.pitchStates.clear();\n  }\n\n  setModWheel(value) {\n    // TODO: more of a change based on value, we want more of a pitch bend\n    const amplifiedValue = value * 5.5; // Increase multiplier as needed for stronger effect\n\n    console.log('incoming value from -1 to 1', value);\n    console.log('amplifiedValue', amplifiedValue);\n    const activeSources = this.activeSources.entries();\n    for (const [padIndex, source] of activeSources) {\n      const basePitch = this.pitchStates.get(padIndex) || 1; // Get the initial pitch\n      const pitchBendRatio = basePitch * Math.pow(2, amplifiedValue / 12); // Adjust relative to current pitch\n      source.playbackRate.value = pitchBendRatio;\n    }\n  }\n\n  adjustVolume(value) {\n    // Normalize value to a range of 0 to 1\n    const normalizedValue = Math.max(0, Math.min(1, value));\n    this.gainNode.gain.setValueAtTime(normalizedValue, this.context.currentTime);\n  }\n}\n","export default class PianoRoll {\n    constructor({ notes, onKeyPlay, onModWheelChange }) {\n      this.baseNotes = notes || this._defaultNotes();\n      this.currentOctave = 0; // Octave shift state\n      this.onKeyPlay = onKeyPlay || (() => {});\n      this.onModWheelChange = onModWheelChange || (() => {});\n      this.keyCount = 25; // Total keys in the piano roll\n  \n      this.isMouseDown = false; // For click-and-drag functionality\n      this.container = this._createPianoRollContainer();\n  \n      this._addEventListeners();\n      this._render();\n      return this;\n    }\n  \n    // Default notes if none provided\n    _defaultNotes() {\n      return [\n        { name: \"C\", ratio: 1.0 },\n        { name: \"C#\", ratio: 1.05946 },\n        { name: \"D\", ratio: 1.12246 },\n        { name: \"D#\", ratio: 1.18921 },\n        { name: \"E\", ratio: 1.25992 },\n        { name: \"F\", ratio: 1.33484 },\n        { name: \"F#\", ratio: 1.41421 },\n        { name: \"G\", ratio: 1.49831 },\n        { name: \"G#\", ratio: 1.5874 },\n        { name: \"A\", ratio: 1.68179 },\n        { name: \"A#\", ratio: 1.7818 },\n        { name: \"B\", ratio: 1.88775 },\n      ];\n    }\n  \n    // Create the full container with octave buttons\n    _createPianoRollContainer() {\n      const container = document.createElement(\"div\");\n      container.classList.add(\"piano-roll-wrapper\");\n  \n      // Octave buttons\n      const controls = document.createElement(\"div\");\n      controls.classList.add(\"piano-controls\");\n  \n      const minusButton = document.createElement(\"button\");\n      minusButton.textContent = \"- Octave\";\n      minusButton.classList.add(\"piano-octave-btn\");\n      minusButton.addEventListener(\"click\", () => this._shiftOctave(-1));\n  \n      const plusButton = document.createElement(\"button\");\n      plusButton.textContent = \"+ Octave\";\n      plusButton.classList.add(\"piano-octave-btn\");\n      plusButton.addEventListener(\"click\", () => this._shiftOctave(1));\n  \n      const octaveIndicator = document.createElement(\"span\");\n      octaveIndicator.classList.add(\"octave-indicator\");\n      octaveIndicator.textContent = `Octave ${this.currentOctave}`;\n      this.octaveIndicator = octaveIndicator;\n  \n      controls.appendChild(minusButton);\n      controls.appendChild(octaveIndicator);\n      controls.appendChild(plusButton);\n      container.appendChild(controls);\n  \n      // Mod wheel slider\n      const modWheelContainer = document.createElement(\"div\");\n      modWheelContainer.classList.add(\"mod-wheel-container\");\n  \n      const modWheelLabel = document.createElement(\"span\");\n      modWheelLabel.textContent = \"Mod Wheel\";\n      modWheelLabel.classList.add(\"mod-wheel-label\");\n  \n      const modWheel = document.createElement(\"input\");\n      modWheel.type = \"range\";\n      modWheel.min = \"-100\";\n      modWheel.max = \"100\";\n      modWheel.value = \"0\";\n      modWheel.classList.add(\"mod-wheel\");\n  \n      modWheel.addEventListener(\"input\", (e) => this._handleModWheelChange(e.target.value));\n      modWheel.addEventListener(\"mouseup\", () => this._resetModWheel(modWheel));\n  \n      modWheelContainer.appendChild(modWheelLabel);\n      modWheelContainer.appendChild(modWheel);\n      controls.appendChild(modWheelContainer);\n  \n      // Piano roll container\n      this.pianoContainer = document.createElement(\"div\");\n      this.pianoContainer.classList.add(\"piano-roll\");\n      container.appendChild(this.pianoContainer);\n  \n      return container;\n    }\n  \n    // Render keys in the piano roll\n    _render() {\n      // Clear existing keys\n      this.pianoContainer.innerHTML = \"\";\n  \n      // Generate 25 keys starting from base notes\n      const notes = [];\n      const centerIndex = Math.floor(this.keyCount / 2);\n  \n      for (let i = 0; i < this.keyCount; i++) {\n        const baseNote = this.baseNotes[i % this.baseNotes.length];\n        const octaveOffset = Math.floor((i - centerIndex) / this.baseNotes.length);\n        notes.push({\n          name: `${baseNote.name}`,\n          ratio: baseNote.ratio * Math.pow(2, octaveOffset + this.currentOctave),\n        });\n      }\n  \n      notes.forEach((note, index) => {\n        const keyButton = document.createElement(\"div\");\n        keyButton.classList.add(\n          \"piano-key\",\n          note.name.includes(\"#\") ? \"piano-black-key\" : \"piano-white-key\"\n        );\n  \n        // Align text for white keys to the bottom\n        if (!note.name.includes(\"#\")) {\n          keyButton.style.display = \"flex\";\n          keyButton.style.justifyContent = \"center\";\n          keyButton.style.alignItems = \"flex-end\";\n          keyButton.style.paddingBottom = \"4px\"; // Add some padding for better alignment\n        }\n  \n        keyButton.textContent = note.name;\n        keyButton.dataset.ratio = note.ratio;\n  \n        // Mouse interaction for individual keys\n        keyButton.addEventListener(\"mousedown\", () => this._playKey(note));\n        keyButton.addEventListener(\"mouseenter\", () => {\n          if (this.isMouseDown) this._playKey(note);\n        });\n  \n        this.pianoContainer.appendChild(keyButton);\n      });\n  \n      // Update the octave indicator\n      this.octaveIndicator.textContent = `Octave ${this.currentOctave}`;\n    }\n  \n    // Shift the octave and re-render\n    _shiftOctave(direction) {\n      this.currentOctave += direction; // Adjust octave\n      this._render(); // Re-render keys with new ratios\n    }\n  \n    // Add global event listeners for click-and-drag functionality\n    _addEventListeners() {\n      document.addEventListener(\"mousedown\", () => (this.isMouseDown = true));\n      document.addEventListener(\"mouseup\", () => (this.isMouseDown = false));\n    }\n  \n    // Play a key and trigger the callback\n    _playKey(note) {\n      if (this.onKeyPlay) {\n        this.onKeyPlay(note);\n      }\n    }\n  \n    // Handle mod wheel changes\n    _handleModWheelChange(value) {\n      const normalizedValue = value / 100; // Normalize value between -1 and 1\n      this.onModWheelChange(normalizedValue);\n    }\n  \n    // Reset mod wheel to center gradually\n    _resetModWheel(modWheel) {\n      const interval = setInterval(() => {\n        const currentValue = parseFloat(modWheel.value);\n        if (currentValue === 0) {\n          clearInterval(interval);\n          return;\n        }\n        modWheel.value = currentValue + (currentValue > 0 ? -1 : 1);\n        this._handleModWheelChange(modWheel.value);\n      }, 10);\n    }\n  }\n  ","export default class StreamingWaveform {\n    constructor({ audioContext, stream = null, buffer = null, parent, width, height }) {\n        this.audioContext = audioContext;\n        this.stream = stream; // MediaStream input\n        this.buffer = buffer; // AudioBuffer input\n        this.parent = parent;\n\n        // Canvas setup\n        this.canvas = document.createElement(\"canvas\");\n        this.canvas.classList.add(\"streaming-waveform\");\n        this.ctx = this.canvas.getContext(\"2d\");\n        this.canvas.width = width || 800; // Default width\n        this.canvas.height = height || 150; // Default height\n        this.parent.appendChild(this.canvas);\n\n        this.isDrawing = false;\n        this.currentX = 0; // Current x position for left-to-right drawing\n\n        // Web Audio setup\n        this.analyser = null;\n\n        if (this.stream) {\n            this._setupStream();\n        } else if (this.buffer) {\n            this._drawBuffer();\n        }\n\n        // Playhead state\n        this.playHeadPosition = 0;\n    }\n\n    // If a stream is provided, connect it to an analyser node\n    _setupStream() {\n        this.analyser = this.audioContext.createAnalyser();\n        this.analyser.fftSize = 1024; // Smooth waveform\n\n        const inputSource = this.audioContext.createMediaStreamSource(this.stream);\n        inputSource.connect(this.analyser);\n\n        this.bufferLength = this.analyser.frequencyBinCount;\n        this.dataArray = new Uint8Array(this.bufferLength);\n\n        this._startDrawing();\n    }\n\n    // Start drawing the waveform for a stream\n    _startDrawing() {\n        this.isDrawing = true;\n\n        const draw = () => {\n            if (!this.isDrawing) return;\n\n            requestAnimationFrame(draw);\n\n            this.analyser.getByteTimeDomainData(this.dataArray);\n\n            // Clear only the next slice area\n            this.ctx.fillStyle = \"#222\";\n            this.ctx.fillRect(this.currentX, 0, 2, this.canvas.height); // Clear old data slice\n\n            // Draw the new waveform slice\n            this.ctx.lineWidth = 1;\n            this.ctx.strokeStyle = \"#00ff00\";\n            this.ctx.beginPath();\n\n            const sliceHeight = this.canvas.height / 2;\n\n            for (let i = 0; i < this.bufferLength; i++) {\n                const value = this.dataArray[i] / 255.0;\n                const y = sliceHeight + (value - 0.5) * sliceHeight;\n\n                if (i === 0) {\n                    this.ctx.moveTo(this.currentX, y);\n                } else {\n                    this.ctx.lineTo(this.currentX, y);\n                }\n            }\n\n            this.ctx.stroke();\n\n            // Move the draw position right\n            this.currentX += 2;\n\n            // If we reach the end, reset to the start\n            if (this.currentX >= this.canvas.width) {\n                this.currentX = 0;\n                this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n            }\n        };\n\n        draw();\n    }\n\n    // Set the playhead position (value between 0 and 1)\n    setPlayHeadPosition(position) {\n        if (position < 0 || position > 1) return;\n\n        this.playHeadPosition = position;\n        this._redrawBufferWithPlayhead();\n    }\n\n    // Draw an AudioBuffer\n    _drawBuffer() {\n        this.rawData = this.buffer.getChannelData(0); // First channel\n        this.totalSamples = this.rawData.length;\n        this.samplesPerPixel = Math.ceil(this.totalSamples / this.canvas.width);\n        this._redrawBufferWithPlayhead();\n    }\n\n    // Redraw the buffer waveform and playhead\n    _redrawBufferWithPlayhead() {\n        const sliceHeight = this.canvas.height / 2;\n\n        // Clear canvas\n        this.ctx.fillStyle = \"#222\";\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n        // Draw the waveform\n        this.ctx.lineWidth = 1;\n        this.ctx.strokeStyle = \"#00ff00\";\n        this.ctx.beginPath();\n\n        for (let x = 0; x < this.canvas.width; x++) {\n            const start = x * this.samplesPerPixel;\n            const end = start + this.samplesPerPixel;\n\n            let min = 1.0;\n            let max = -1.0;\n\n            for (let i = start; i < end; i++) {\n                const value = this.rawData[i] || 0;\n                if (value > max) max = value;\n                if (value < min) min = value;\n            }\n\n            const yMin = sliceHeight + min * sliceHeight;\n            const yMax = sliceHeight + max * sliceHeight;\n\n            if (x === 0) {\n                this.ctx.moveTo(x, yMin);\n            } else {\n                this.ctx.lineTo(x, yMin);\n            }\n            this.ctx.lineTo(x, yMax);\n        }\n        this.ctx.stroke();\n\n        // Draw the playhead\n        this._drawPlayhead();\n    }\n\n    // Draw the playhead as a vertical line\n    _drawPlayhead() {\n        const playheadX = Math.floor(this.playHeadPosition * this.canvas.width);\n\n        this.ctx.strokeStyle = \"#FF0000\"; // Playhead color\n        this.ctx.lineWidth = 2;\n\n        this.ctx.beginPath();\n        this.ctx.moveTo(playheadX, 0);\n        this.ctx.lineTo(playheadX, this.canvas.height);\n        this.ctx.stroke();\n    }\n\n    remove() {\n        this.canvas.remove();\n    }\n\n    // Stop live waveform drawing\n    stop() {\n        this.isDrawing = false;\n    }\n\n    // Clear the canvas\n    clear() {\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        this.currentX = 0;\n    }\n}\n","export default function createSliderComponent(track, trackId, config = {}) {\n    let slider = new SliderComponent(track, trackId, config);\n    return slider;\n}\n\nfunction SliderComponent(track, trackId, config = {}) {\n    // Default configuration options\n    const defaultConfig = {\n        className: 'volume-slider',\n        thumbClassName: 'slider-thumb',\n        labelClassName: 'label', // New option for label class\n        orientation: 'vertical', // 'vertical' or 'horizontal'\n        trackColor: '#333',\n        thumbColor: '#fff',\n        trackWidth: '60px',\n        trackHeight: '200px',\n        thumbWidth: '48px',\n        thumbHeight: '8px',\n        showLabel: true,\n        showScale: false,\n        showCenterLine: false, // Option to enable/disable the center line\n        centerLineColor: '#aeafaf', // Default color for the center line\n        centerLineLength: '32px', // Length of the center line\n        scaleLineLength: '32px', // Length of the scale lines\n        centerLineWidth: '2px', // Default width for the center line\n        centerLineSpacing: 10, // Spacing between each line in pixels\n        progressBarColor: '#4caf50', // Default color for the progress bar\n        progressBarSize: '8px', // Default size for the progress bar\n        minValue: 0,\n        maxValue: 1,\n        step: 0.01,\n        value: 0,\n        defaultValue: 0, // Default value when double-clicking the slider\n        onDoubleClick: (value) => {\n            console.log('Must implement double-click handler to reset the value');\n            // resets the value to default\n            this.setValue(value);\n        },\n        onClick : (value) => {\n            // console.log('Must implement onClick to evoke changes to state');\n        },\n        onChange: (value, val) => {\n            console.log('Must implement changeFunction to evoke changes to state');\n        },\n        formatLabel: (value) => {\n            return value.toFixed(2);\n        }\n    };\n\n    const options = { ...defaultConfig, ...config };\n    this.options = options;\n\n    this.onClick = options.onClick.bind(this); // Binding the onClick method to ensure proper context\n    this.onChange = options.onChange.bind(this); // Binding the onChange method to ensure proper context\n    this.onDoubleClick = options.onDoubleClick.bind(this); // Binding the onDoubleClick method to ensure proper context\n    this.formatLabel = options.formatLabel.bind(this);\n    this.thumbHeight = options.thumbHeight;\n    this.thumbWidth = options.thumbWidth;\n    this.trackWidth = options.trackWidth;\n    this.trackHeight = options.trackHeight;\n    this.orientation = options.orientation;\n\n    this.defaultValue = options.defaultValue;\n\n\n    this.trackLength = options.orientation === 'vertical'\n        ? parseInt(options.trackHeight)\n        : parseInt(options.trackWidth);\n\n\n    const sliderContainer = document.createElement('div');\n    this.sliderContainer = sliderContainer;\n    this.minValue = options.minValue;\n    this.maxValue = options.maxValue;\n    this.value = options.value;\n\n    sliderContainer.style.background = options.trackColor;\n    sliderContainer.style.borderRadius = '5px';\n    sliderContainer.classList.add(options.className);\n    sliderContainer.classList.add('slider-component');\n\n    if (options.orientation === 'vertical') {\n        sliderContainer.style.width = options.trackWidth;\n        sliderContainer.style.height = options.trackHeight;\n    } else {\n        sliderContainer.style.width = options.trackHeight; // Flip dimensions for horizontal\n        sliderContainer.style.height = options.trackWidth;\n    }\n\n    if (options.showCenterLine) {\n        const centerLine = document.createElement('div');\n        centerLine.style.position = 'absolute';\n        centerLine.style.background = options.centerLineColor;\n\n        if (options.orientation === 'vertical') {\n            centerLine.style.width = options.centerLineLength;\n            centerLine.style.height = options.centerLineWidth;\n            centerLine.style.left = `calc(50% - ${parseInt(options.centerLineLength) / 2}px)`;\n            centerLine.style.top = '50%';\n        } else {\n            centerLine.style.height = options.centerLineLength;\n            centerLine.style.width = options.centerLineWidth;\n            centerLine.style.top = `calc(50% - ${parseInt(options.centerLineLength) / 2}px)`;\n            centerLine.style.left = '50%';\n        }\n\n        sliderContainer.appendChild(centerLine);\n    }\n\n    if (options.showScale) {\n        const createLine = (position) => {\n            const line = document.createElement('div');\n            line.style.position = 'absolute';\n            line.style.background = options.centerLineColor;\n            line.style.opacity = 0.2;\n\n            if (options.orientation === 'vertical') {\n                line.style.width = options.scaleLineLength;\n                line.style.height = options.centerLineWidth;\n                line.style.left = `calc(50% - ${parseInt(options.scaleLineLength) / 2}px)`;\n                line.style.top = `${position}px`;\n            } else {\n                line.style.height = options.scaleLineLength;\n                line.style.width = options.centerLineWidth;\n                line.style.top = `calc(50% - ${parseInt(options.scaleLineLength) / 2}px)`;\n                line.style.left = `${position}px`;\n            }\n\n            sliderContainer.appendChild(line);\n        };\n\n        // Add lines symmetrically starting from the center\n        const trackLength = options.orientation === 'vertical'\n            ? parseInt(options.trackHeight)\n            : parseInt(options.trackWidth);\n\n        const center = trackLength / 2;\n        const spacing = options.centerLineSpacing;\n\n        // Create lines from the center outward\n        for (let offset = 0; center + offset <= trackLength || center - offset >= 0; offset += spacing) {\n            if (center + offset <= trackLength) createLine(center + offset); // Line below/after center\n            if (center - offset >= 0 && offset !== 0) createLine(center - offset); // Line above/before center\n        }\n    }\n\n    if (options.showProgress) {\n        const progressBar = document.createElement('div');\n        progressBar.style.position = 'absolute';\n        progressBar.style.background = options.progressBarColor;\n        progressBar.style.zIndex = '1'; // Ensure it appears below the thumb\n        this.progressBar = progressBar;\n\n        if (options.orientation === 'vertical') {\n            progressBar.style.width = options.progressBarSize;\n            progressBar.style.left = `calc(50% - ${parseInt(options.progressBarSize) / 2}px)`;\n        } else {\n            progressBar.style.height = options.progressBarSize;\n            progressBar.style.top = `calc(50% - ${parseInt(options.progressBarSize) / 2}px)`;\n        }\n        sliderContainer.appendChild(progressBar);\n\n    }\n\n    // Slider thumb\n    const sliderThumb = document.createElement('div');\n    sliderThumb.classList.add(options.thumbClassName);\n    sliderThumb.style.position = 'absolute';\n    sliderThumb.style.background = options.thumbColor;\n    sliderThumb.style.borderRadius = '4px';\n    sliderThumb.style.cursor = 'pointer';\n    sliderThumb.title = this.options.title || \"Track Volume\";\n\n    if (this.options.sliderThumbStyles) {\n        // object array of styles with keys as the css property and values as the css value\n        // iterate and apply\n        Object.keys(this.options.sliderThumbStyles).forEach((key) => {\n            sliderThumb.style[key] = this.options.sliderThumbStyles[key];\n        });\n    }\n\n    if (options.orientation === 'vertical') {\n        sliderThumb.style.width = options.thumbWidth;\n        sliderThumb.style.height = options.thumbHeight;\n        // sliderThumb.style.left = `calc(50% - ${parseInt(options.thumbWidth) / 2}px)`;\n    } else {\n        sliderThumb.style.width = options.thumbHeight; // Flip dimensions for horizontal\n        sliderThumb.style.height = options.thumbWidth;\n        // sliderThumb.style.top = `calc(50% - ${parseInt(options.thumbWidth) / 2}px)`;\n    }\n\n    this.sliderThumb = sliderThumb;\n\n    const initialPosition =\n        options.orientation === 'vertical'\n            ? (1 - options.value) * this.trackLength\n            : options.value * this.trackLength;\n\n    if (options.orientation === 'vertical') {\n        sliderThumb.style.top = `${initialPosition - parseInt(options.thumbHeight) / 2}px`;\n    } else {\n        sliderThumb.style.left = `${initialPosition - parseInt(options.thumbWidth) / 2}px`;\n    }\n\n    sliderContainer.appendChild(sliderThumb);\n\n    const sliderLabel = document.createElement('div');\n    sliderLabel.classList.add(options.labelClassName);\n    sliderLabel.textContent = options.value.toFixed(2); // Initial value\n    sliderLabel.style.position = 'absolute';\n    sliderLabel.style.top = options.orientation === 'vertical' ? '-22px' : '50%';\n    sliderLabel.style.left = options.orientation === 'vertical' ? '50%' : 'calc(100% + 10px)';\n    sliderLabel.style.transform = options.orientation === 'vertical' ? 'translateX(-50%)' : 'translateY(-50%)';\n    this.sliderLabel = sliderLabel;\n\n    if (!this.options.showLabel) {\n        sliderLabel.style.display = 'none';\n    }\n\n    sliderContainer.appendChild(sliderLabel);\n\n    let self = this;\n\n    let isDragging = false;\n\n    sliderThumb.addEventListener('mousedown', (e) => {\n        this.onClick(this.getValue());\n        isDragging = true;\n        this._onChange(e);\n    });\n\n    sliderThumb.addEventListener('touchstart', (e) => {\n        isDragging = true;\n        this._onChange(e.touches[0]);\n    });\n\n    document.addEventListener('mousemove', (e) => {\n        if (isDragging) this._onChange(e);\n    });\n\n    document.addEventListener('touchmove', (e) => {\n        if (isDragging) this._onChange(e.touches[0]);\n    });\n\n    document.addEventListener('mouseup', () => {\n        isDragging = false;\n    });\n\n    document.addEventListener('touchend', () => {\n        isDragging = false;\n    });\n\n    sliderContainer.addEventListener('mousedown', (e) => {\n        if (e.target === sliderThumb) return;\n        this.onClick(this.getValue());\n        this._onChange(e);\n        isDragging = true;\n    });\n\n    // mobile touch events\n    sliderContainer.addEventListener('touchstart', (e) => {\n        if (e.target === sliderThumb) return;\n        this._onChange(e.touches[0]);\n        isDragging = true;\n    });\n\n    sliderContainer.addEventListener('touchend', () => {\n        isDragging = false;\n    });\n\n    sliderContainer.addEventListener('touchmove', (e) => {\n        if (isDragging) this._onChange(e.touches[0]);\n    });\n\n    sliderContainer.addEventListener('dblclick', (e) => {\n        // TODO: ensure a delay of 200ms has passed\n        // before resetting the value\n        this.onDoubleClick(this.defaultValue);\n    });\n\n    this.setValue(options.value, false);\n\n    return this;\n}\n\nSliderComponent.prototype._onChange = function (e) {\n    // Custom scale for zoomed-in elements\n    let scale = 1;\n    //scale = 1;\n    const rect = this.sliderContainer.getBoundingClientRect();\n    let position;\n\n    // Adjust rect dimensions based on scale\n    const scaledWidth = rect.width / scale;\n    const scaledHeight = rect.height / scale;\n\n    if (this.orientation === 'vertical') {\n        // Calculate position accounting for the scale\n        position = (e.clientY - rect.top) / scale;\n        position = Math.min(Math.max(position, 0), scaledHeight);\n\n        const volume = 1 - position / scaledHeight;\n\n        // Adjust slider thumb position based on scale\n        this.sliderThumb.style.top = `${Math.min(\n            Math.max(position - parseInt(this.thumbHeight) / 2 / scale, 0),\n            scaledHeight - parseInt(this.thumbHeight) / scale\n        )}px`;\n\n        // Update value and UI elements\n        this.value = volume;\n        this.updateProgressBar(volume);\n        this.updateLabel(this.formatLabel(volume));\n\n        this.onChange(volume, this.getValue());\n    } else {\n        // Calculate position accounting for the scale\n        position = (e.clientX - rect.left) / scale;\n        position = Math.min(Math.max(position, 0), scaledWidth);\n\n        const volume = position / scaledWidth;\n\n        // Adjust slider thumb position based on scale\n        this.sliderThumb.style.left = `${Math.min(\n            Math.max(position - parseInt(this.thumbWidth) / 2 / scale, 0),\n            scaledWidth - parseInt(this.thumbWidth) / scale\n        )}px`;\n\n        // Update value and UI elements\n        this.value = volume;\n        this.updateProgressBar(volume);\n        this.updateLabel(this.formatLabel(volume));\n\n        this.onChange(volume, this.getValue());\n    }\n};\n\nSliderComponent.prototype.getValue = function () {\n    // returns actual value from with 0 to 1 multipled by the range\n    return this.value * (this.maxValue - this.minValue) + this.minValue;\n}\n\nSliderComponent.prototype.setValue = function (value, propigate = true) {\n    const clampedValue = Math.min(Math.max(value, this.options.minValue), this.options.maxValue);\n    // incoming value is in units of the range,\n    // we need to conver this into 0-1 value\n    let range = this.maxValue - this.minValue;\n    let normalizedValue = (clampedValue - this.minValue) / range;\n\n    this.value = normalizedValue;\n\n    const position =\n        this.orientation === 'vertical'\n            ? (1 - normalizedValue) * this.trackLength\n            : normalizedValue * this.trackLength;\n\n    if (this.orientation === 'vertical') {\n        this.sliderThumb.style.top = `${Math.min(\n            Math.max(position - parseInt(this.thumbHeight) / 2, 0),\n            this.trackLength - parseInt(this.thumbHeight)\n        )}px`;\n        if (this.options.showProgress) {\n\n            this.progressBar.style.height = `${(1 - normalizedValue) * this.trackLength}px`;\n            this.progressBar.style.top = `${normalizedValue * this.trackLength}px`;\n        }\n    } else {\n        this.sliderThumb.style.left = `${Math.min(\n            Math.max(position - parseInt(this.thumbWidth) / 2, 0),\n            this.trackLength - parseInt(this.thumbWidth)\n        )}px`;\n        if (this.options.showProgress) {\n            this.progressBar.style.width = `${normalizedValue * this.trackLength}px`;\n        }\n    }\n    this.updateLabel(this.formatLabel(value));\n    this.updateProgressBar();\n\n    if (propigate) {\n        // this.onChange(normalizedValue, this.getValue()); // Ensure onChange is always called\n        this.onChange(normalizedValue, this.getValue());\n\n    }\n};\n\nSliderComponent.prototype.updateProgressBar = function (value) {\n    if (!this.options.showProgress) return;\n    const position = value * this.trackLength; // Position based on current value\n    console.log('value', value, 'position', position);\n\n    if (this.orientation === 'vertical') {\n        // Ensure the progress bar grows upward for vertical orientation\n        this.progressBar.style.height = `${position}px`;\n        this.progressBar.style.top = `${this.trackLength - position}px`;\n    } else {\n        // Ensure the progress bar grows to the right for horizontal orientation\n        this.progressBar.style.width = `${position}px`;\n        this.progressBar.style.left = '0'; // Reset any previous left offset\n    }\n};\n\nSliderComponent.prototype.updateLabel = function (val) {\n    this.sliderLabel.textContent = this.getValue().toFixed(2);\n};","export default [\n  \"808.wav\",         // Kick\n  \"Snare Mid.wav\",   // Snare\n  \"Hihat.wav\",       // Hi-hat\n  \"Clap.wav\",        // Clap (often used in kits)\n  \"Tom High.wav\",    // Tom (high)\n  \"Tom Low.wav\",     // Tom (low)\n  \"Cymbal.wav\",      // Cymbal\n  \"Rimshot.wav\",     // Rimshot\n  \"Claves.wav\",      // Percussion (can be used for more flavor)\n  \"Conga High.wav\",  // Conga (high)\n  \"Conga Mid.wav\",   // Conga (mid)\n  \"Conga Low.wav\",   // Conga (low)\n  \"Kick Basic.wav\",  // Alternative kick\n  \"Kick Long.wav\",   // Alternative kick\n  \"Kick Short.wav\",  // Alternative kick\n  \"Maracas.wav\",     // Percussion\n  \"Open Hat Short.wav\",  // Open hi-hat\n  \"Open Hat Long.wav\",   // Open hi-hat (long)\n  \"Snare Bright.wav\",    // Snare (bright)\n  \"Snare High.wav\",      // Snare (high)\n  \"Snare Low.wav\",       // Snare (low)\n  \"Tom Mid.wav\",         // Tom (mid)\n]","import SamplerPadEffect from \"./SamplerPad.js\";\nimport PianoRoll from \"../ui/PianoRoll.js\";\nimport StreamingWaveform from \"../ui/StreamingWaveform.js\";\nimport sliderComponent from \"../ui/Slider.js\";\n\nimport _createPad from \"./SamplerPadComponent/_createPad.js\";\nimport _createFileInput from \"./SamplerPadComponent/_createFileInput.js\";\nimport _createSlicedRecordButton from \"./SamplerPadComponent/_createSlicedRecordButton.js\";\nimport _createLiveSlicedRecordButton from \"./SamplerPadComponent/_createMicrophoneSlicedRecordButton.js\";\nimport _sliceAndLoadToPads from \"./SamplerPadComponent/_sliceAndLoadToPads.js\";\nimport _sliceAudioBuffer from \"./SamplerPadComponent/_sliceAudioBuffer.js\";\n\nimport tr808 from './packs/tr-808/tr-808.js';\n\nexport default class SamplerPadComponent {\n    constructor(audioContext, globalBus, options = {}) {\n        this.audioContext = audioContext;\n        this.globalBus = globalBus;\n        this.sampler = new SamplerPadEffect(audioContext, null); // TODO: should be globalBus / api.globalBus ( needs proper audio graph like track )\n        this.fetch = options.fetch || window.fetch.bind(window);\n        this.defaultSounds = options.defaultSounds || [\n            \"samples/lets-go.mp3\",\n            \"samples/make-some-noise.mp3\",\n            \"samples/drop-it.mp3\",\n            \"samples/airhorn.mp3\",\n            null,\n            null,\n            null,\n            null,\n        ];\n\n        // Container setup\n        this.container = document.createElement(\"div\");\n        this.container.classList.add(\"sampler-pad-container\", \"track-active\");\n\n        // top container with main pad and volume\n        this.topSection = document.createElement(\"div\");\n        this.topSection.classList.add(\"sampler-top-section\");\n        this.container.appendChild(this.topSection);\n\n        // Holds 8 pad buttons\n        this.buttonGrid = document.createElement(\"div\");\n        this.buttonGrid.classList.add(\"sampler-pad\");\n        this.buttonGrid.style.display = \"grid\";\n        this.buttonGrid.style.gridTemplateColumns = \"repeat(4, 1fr)\";\n        this.buttonGrid.style.gap = \"10px\";\n        this.buttonGrid.style.padding = \"0px\";\n        //this.buttonGrid.style.background = \"#333\";\n        this.buttonGrid.style.borderRadius = \"10px\";\n\n        this.topSection.appendChild(this.buttonGrid);\n\n        // Holds volume slider\n        this.volumeContainer = document.createElement(\"div\");\n        this.volumeContainer.classList.add(\"sampler-volume-container\");\n        this.topSection.appendChild(this.volumeContainer);\n\n        let that = this;\n        let samplerSliderVolume = sliderComponent(null, 'sampler-0', {\n            minValue: 0,\n            maxValue: 1, // TODO: could be higher...needs better gain logic linear gain is not ideal after 1\n            value: 1,\n            trackWidth: '20px',\n            trackHeight: '260px',\n            thumbHeight: '48px',\n            thumbWidth: '24px',\n            sliderThumbStyles: {\n                left: '18px',\n            },\n\n            showLabel: false,\n            className: 'sampler-volume-slider',\n            thumbClassName: 'volume-thumb',\n            onChange: function (value) {\n                that.sampler.adjustVolume(value);\n            }\n        });\n        // track.transport.volumeSlider = volumeSlider;\n        this.volumeSlider = samplerSliderVolume;\n        this.volumeContainer.append(samplerSliderVolume.sliderContainer); // TODO: samplerSliderVolume.container\n\n\n\n\n        // Sample Record Microphone / Record Global Bus\n        this.sliceRecordContainer = document.createElement(\"div\");\n        this.sliceRecordContainer.classList.add(\"sampler-slice-record-container\");\n        this.topSection.appendChild(this.sliceRecordContainer);\n\n        // Add Sliced Record Button\n        const slicedRecordButton = this._createSlicedRecordButton();\n        this.sliceRecordContainer.appendChild(slicedRecordButton);\n\n        // Add Live Sliced Record Button\n        const liveSlicedRecordButton = this._createLiveSlicedRecordButton()\n        this.sliceRecordContainer.appendChild(liveSlicedRecordButton);\n\n\n        const stopAllButton = document.createElement(\"button\");\n        stopAllButton.textContent = \"Stop\";\n        stopAllButton.innerHTML = '<i class=\"fa-duotone fa-solid fa-stop\"></i>';\n        stopAllButton.style.fontSize = \"2.5rem\";\n\n        stopAllButton.classList.add(\"sampler-stop-all-button\", \"sampler-record-button\");\n\n        stopAllButton.addEventListener(\"click\", () => {\n            this.sampler.stopAllSamples();\n            this.sampler.stopAllRecordings();\n        });\n\n        this.sliceRecordContainer.appendChild(stopAllButton);\n\n        const showPianoRoll = document.createElement(\"button\");\n        // showPianoRoll.textContent = \"Show Piano\";\n\n        // use <i class=\"fa-duotone fa-solid fa-piano-keyboard\"></i>\n        showPianoRoll.innerHTML = '<i class=\"fa-duotone fa-solid fa-piano-keyboard\"></i>';\n        showPianoRoll.style.fontSize = \"32px\";\n        showPianoRoll.classList.add(\"sampler-record-button\");\n\n        showPianoRoll.addEventListener(\"click\", () => {\n            /* TODO: add reverse button somewhere on pad\n            this.sampler.setReverse(0, true);\n            this.sampler.setReverse(1, true);\n            this.sampler.setReverse(2, true);\n            */\n            if (this.controlsContainer.style.display === \"flex\") {\n                this.controlsContainer.style.display = \"none\";\n            } else {\n                this.controlsContainer.style.display = \"flex\";\n            }\n        });\n        this.showPianoRoll = showPianoRoll;\n\n        this.sliceRecordContainer.appendChild(showPianoRoll);\n\n        // Bottom Pad Piano roll controls with global record\n        this.controlsContainer = document.createElement(\"div\");\n        this.controlsContainer.classList.add(\"sampler-controls-container\");\n\n        // Initialize Pads\n        this.pads = [];\n        for (let i = 0; i < 8; i++) {\n\n            if (this.defaultSounds[i]) {\n                this._loadDefaultSound('default', i, this.defaultSounds[i]);\n            }\n\n            const padContainer = this._createPad(i, this.defaultSounds[i]);\n            this.buttonGrid.appendChild(padContainer);\n            this.pads.push(padContainer);\n\n        }\n\n        // Piano Roll\n        const pianoRoll = new PianoRoll({\n            onKeyPlay: (note) => {\n                const frequency = 440 * note.ratio;\n                const padIndex = this.lastPlayedPad || 0; // Default to pad 0\n                this.sampler.playSampleAtPitch(padIndex, note.ratio);\n            },\n            onModWheelChange: (value) => {\n                this.sampler.setModWheel(value);\n            }\n        });\n\n        this.controlsContainer.appendChild(pianoRoll.container);\n\n        // Sample Bank\n        let sampleBanks = [\n            {\n                id: 'default',\n                name: 'Pvrty Bvx v1',\n                samples: [\n                    'dj-horn.mp3',\n                    'dang-son.mp3',\n                    `helicopter-helicopter.mp3`,\n                    `yooo.mp3`,\n                    'celebrate.mp3',\n                    'flawless-victory.wav',\n                    null,\n                    null,\n                ]\n            },\n            {\n                id: 'tr-808',\n                name: 'TR-808',\n                samples: tr808\n            },\n            {\n                id: 'custom',\n                name: 'Custom',\n                disabled: false,\n                samples: [] // TODO: loaded via function call to get from indexedDB ( needs binaries )\n            }\n\n        ];\n\n        // get the piano-controls div by class, it's inside this.controlsContainer\n        let pianoControls = this.controlsContainer.querySelector('.piano-controls');\n        // create a new div to hold sample bank select dropdown\n        let sampleBankSelectContainer = document.createElement('div');\n        sampleBankSelectContainer.classList.add('sample-bank-select-container');\n        // create a new select element\n        let sampleBankSelect = document.createElement('select');\n        sampleBankSelect.classList.add('sample-bank-select');\n\n        // iterate through all sample banks\n        // and create an option element for each\n        sampleBanks.forEach((sampleBank) => {\n            // create a new option element\n            let option = document.createElement('option');\n            option.value = sampleBank.id;\n            option.text = sampleBank.name;\n            if (sampleBank.disabled) {\n                option.disabled = true;\n            }\n            // add the option element to the select element\n            sampleBankSelect.add(option);\n        });\n\n        // add event listener to select element\n        sampleBankSelect.addEventListener('change', (e) => {\n            // TODO: test this\n            // get the selected value\n            let selectedValue = e.target.value;\n            // get the pads by class\n\n            // find the sample bank by id\n            let sampleBank = sampleBanks.find((bank) => bank.id === selectedValue);\n            this.defaultSounds = sampleBank.samples;\n            let pads = this.container.querySelectorAll('.sampler-pad');\n            // loop through the pads\n            pads.forEach((pad, index) => {\n                // get the waveform container by pad\n                let waveformContainer = pad.querySelector('.sampler-waveform-container');\n                // clear the waveform container\n                waveformContainer.innerHTML = '';\n                // if the selected value is default\n                if (selectedValue === 'default') {\n                    // load the default sound\n                }\n\n                this._loadDefaultSound(selectedValue, index, this.defaultSounds[index]);\n\n            });\n        });\n\n        // append the select element to the container\n        sampleBankSelectContainer.appendChild(sampleBankSelect);\n        // append the container to the piano-controls div\n\n        // insert before last element\n        pianoControls.insertBefore(sampleBankSelectContainer, pianoControls.lastElementChild);\n        //pianoControls.appendChild(sampleBankSelectContainer);\n\n        const waveformContainer = document.createElement(\"div\");\n        this.waveformContainer = waveformContainer;\n        this.container.appendChild(waveformContainer);\n\n        this.container.appendChild(this.controlsContainer);\n\n        this.waveform = null;\n\n        if (options.parent) {\n            options.parent.appendChild(this.container);\n        }\n\n        this.lastPlayedPad = 0; // Track last played pad\n    }\n\n    unload() {\n        // Clean-up // TODO: double check this\n        this.sampler.unload();\n        this.container.remove();\n    }\n\n    adjustVolume(value) {\n        // calls into sampler.adjustVolume\n        this.sampler.adjustVolume(value);\n        // updates the slider value\n        this.volumeSlider.setValue(value);\n    }\n\n    async _loadDefaultSound(packId, padIndex, url) {\n\n        url = '/v5/apps/based/sampler/packs/' + packId + '/' + url;\n        // console.log(\"Loading default sound:\", url);\n        const response = await this.fetch(url);\n        const arrayBuffer = await response.arrayBuffer();\n        const audioBuffer = await this.audioContext.decodeAudioData(arrayBuffer);\n        this.sampler.buffers[padIndex] = audioBuffer;\n\n        // get the wavecontainer by padIndex\n        let waveformContainer = this.pads[padIndex].querySelector('.sampler-waveform-container');\n        // render a waveform for this sound file\n        const waveform = new StreamingWaveform({\n            buffer: this.sampler.buffers[padIndex],\n            parent: waveformContainer,\n            width: 196,\n            height: 100,\n        });\n\n        // get the sampler-pad-label by padIndex\n        let samplerPadLabel = this.pads[padIndex].querySelector('.sampler-pad-label');\n\n        // update the sampler-pad-label text\n        samplerPadLabel.textContent = url.split('/').pop();\n\n    }\n}\n\nSamplerPadComponent.prototype._createPad = _createPad;\nSamplerPadComponent.prototype._createFileInput = _createFileInput;\nSamplerPadComponent.prototype._createSlicedRecordButton = _createSlicedRecordButton;\nSamplerPadComponent.prototype._createLiveSlicedRecordButton = _createLiveSlicedRecordButton;\nSamplerPadComponent.prototype._sliceAndLoadToPads = _sliceAndLoadToPads;\nSamplerPadComponent.prototype._sliceAudioBuffer = _sliceAudioBuffer;","import StreamingWaveform from \"../../ui/StreamingWaveform.js\";\n\n// Create a pad with button controls\nexport default function _createPad(padIndex, soundFile) {\n    const padContainer = document.createElement(\"div\");\n    padContainer.classList.add(\"sampler-pad\");\n\n    // Waveform Container (behind the button)\n    const waveformContainer = document.createElement(\"div\");\n    waveformContainer.classList.add(\"sampler-waveform-container\");\n    waveformContainer.style.position = \"absolute\";\n    waveformContainer.style.top = \"0\";\n    waveformContainer.style.left = \"0\";\n    waveformContainer.style.zIndex = \"0\"; // Behind everything\n\n    // Pad Button\n    const button = document.createElement(\"button\");\n\n    button.classList.add(\"sampler-pad-button\");\n    button.style.position = \"relative\";\n    button.style.zIndex = \"1\"; // Above the waveform\n    // button.style.background = \"transparent\"; // Transparent background\n    button.style.border = \"1px solid #555\";\n    button.style.color = \"#FFF\";\n\n    button.addEventListener(\"mousedown\", () => {\n        // check to see if there is actually a buffer loaded at this location\n        if (this.sampler.buffers[padIndex]) {\n            this.sampler.handlePadPress(padIndex);\n            this.lastPlayedPad = padIndex; // Set last played pad\n        } else {\n            // trigger the click event on the file input to prompt the user to load a sample\n            fileInput.click();\n        }\n    });\n\n    button.addEventListener(\"mouseup\", () => {\n        this.sampler.handlePadRelease(padIndex);\n    });\n\n    // Pad label for button\n    const label = document.createElement(\"div\");\n\n    if (soundFile) {\n        let fileName = soundFile.split(\"/\").pop();\n        // remove the file extension\n        fileName = fileName.split(\".\")[0];\n        label.textContent = fileName;\n    } else {\n        label.textContent = `Pad ${padIndex + 1}`;\n        // set bg to #333\n        button.style.background = \"#333\";\n    }\n\n    label.classList.add(\"sampler-pad-label\");\n    button.appendChild(label);\n\n\n    // Controls Container\n    const controlsContainer = document.createElement(\"div\");\n    controlsContainer.classList.add(\"sampler-pad-controls\");\n\n    // TODO: replace default file input with fontawesome icon\n\n    const { fileInput, iconButton } = this._createFileInput(button, this.sampler, padIndex);\n\n    // Record Mic Button\n    const recordMicButton = document.createElement(\"button\");\n    recordMicButton.textContent = \"Record Mic\";\n    recordMicButton.innerHTML = `<i class=\"fa-duotone fa-solid fa-microphone-lines\"></i> Record`;\n    recordMicButton.title = \"Record audio from microphone\";\n\n    recordMicButton.classList.add(\"sampler-record-button\");\n\n    // TODO: refactor this into SamplerComponent.startPadMicrophoneRecording()\n    recordMicButton.addEventListener(\"mousedown\", () => {\n        recordingOverlay.style.display = \"flex\"; // Show the overlay\n\n        if (recordMicButton.waveform) {\n            recordMicButton.waveform.remove();\n\n        }\n\n        if (this.waveform) {\n            this.waveform.remove();\n        }\n\n        button.style.background = 'none';\n\n        recordingStartTime = Date.now();\n        // Start timer\n        timerInterval = setInterval(() => {\n            const elapsed = ((Date.now() - recordingStartTime) / 1000);\n            const minutes = String(Math.floor(elapsed / 60)).padStart(1, \"0\");\n            const seconds = String(elapsed % 60).padStart(2, \"0\");\n            const milliseconds = String(Math.floor((elapsed % 1) * 1000)).padStart(3, \"0\");\n            timer.textContent = `${minutes}:${seconds}:${milliseconds}`;\n        }, 10);\n\n        this.sampler.recordMicrophone(padIndex);\n    });\n\n    // TODO: refactor this into SamplerComponent.stopPadMicrophoneRecording()\n    recordMicButton.addEventListener(\"mouseup\", () => {\n        recordingOverlay.style.display = \"none\"; // Hide the overlay\n        clearInterval(timerInterval); // Stop the timer\n        timer.textContent = \"0:00\";\n        this.sampler.stopMicrophoneRecording();\n    });\n\n    const padPlaybackSelector = document.createElement(\"select\");\n    padPlaybackSelector.classList.add(\"sampler-pad-playback-selector\");\n    let padPlaybackModes = [{\n        value: 'one-shot',\n        label: 'One Shot'\n    }, {\n        value: 'hold',\n        label: 'Hold'\n    },\n    {\n        value: 'toggle',\n        label: 'Toggle'\n    },{\n        value: 'loop',\n        label: 'Loop'\n    },\n    /* TODO: reverse is a flag, not a mode\n    {\n        value: 'reverse',\n        label: 'Reverse'\n    }\n    */\n    \n];\n\n    padPlaybackModes.forEach((option) => {\n        let opt = document.createElement('option');\n        opt.value = option.value;\n        opt.innerHTML = option.label;\n        padPlaybackSelector.appendChild(opt);\n    });\n\n    padPlaybackSelector.addEventListener('change', (e) => {\n        // when changing modes, stop the sample\n        this.sampler.stopSample(padIndex);\n        this.sampler.setMode(padIndex, e.target.value);\n    });\n\n    controlsContainer.appendChild(padPlaybackSelector);\n\n    // Overlay for recording indicator\n    const recordingOverlay = document.createElement(\"div\");\n    recordingOverlay.classList.add(\"recording-overlay\");\n    recordingOverlay.style.display = \"none\"; // Hidden by default\n    recordingOverlay.style.position = \"absolute\";\n    recordingOverlay.style.top = \"0\";\n    recordingOverlay.style.left = \"0\";\n    // recordingOverlay.style.width = \"100%\";\n    recordingOverlay.style.height = \"50%\";\n    //recordingOverlay.style.background = \"rgba(0, 255, 0, 0.2)\";\n    // recordingOverlay.style.display = \"flex\";\n    recordingOverlay.style.flexDirection = \"column\";\n    recordingOverlay.style.alignItems = \"center\";\n    recordingOverlay.style.justifyContent = \"center\";\n    recordingOverlay.style.color = \"black\";\n    recordingOverlay.style.fontSize = \"14px\";\n\n    recordingOverlay.style.zIndex = \"9999\"; // Overlay on top of everything\n    const oscilloscope = document.createElement(\"div\");\n    oscilloscope.style.width = \"80%\";\n    oscilloscope.style.height = \"50px\";\n    oscilloscope.style.background = \"green\"; // Placeholder for oscilloscope\n    recordingOverlay.appendChild(oscilloscope);\n\n    const timer = document.createElement(\"span\");\n    timer.textContent = \"0:00\";\n    recordingOverlay.appendChild(timer);\n\n\n    // Record Global Bus Button\n    const recordGlobalButton = document.createElement(\"button\");\n    recordGlobalButton.textContent = \"\";\n    recordGlobalButton.innerHTML = `<i class=\"fa-duotone fa-solid fa-volume-high\"></i> Record`;\n    recordGlobalButton.title = \"Record audio from global bus\";\n\n    recordGlobalButton.classList.add(\"sampler-record-button\");\n\n    let recordingStartTime = 0;\n    let timerInterval = null;\n\n    // TODO: refactor this into SamplerComponent.startPadGlobalRecording()\n    recordGlobalButton.addEventListener(\"mousedown\", () => {\n        let recordingStream = this.sampler.recordGlobalBus(this.globalBus, padIndex);\n        recordingOverlay.style.display = \"flex\"; // Show the overlay\n        button.style.background = 'none';\n\n        if (this.waveform) {\n            this.waveform.remove();\n        }\n        recordingStartTime = Date.now();\n        console.log('sending recording stream to waveform', recordingStream);\n        console.log(\"sending audio context to waveform\", this.audioContext);\n\n        // Start the waveform rendering\n        this.waveform = new StreamingWaveform({\n            audioContext: this.audioContext,\n            stream: recordingStream,\n            parent: waveformContainer,\n            width: 196,\n            height: 100,\n        });\n\n        // Start timer\n        timerInterval = setInterval(() => {\n            const elapsed = Math.floor((Date.now() - recordingStartTime) / 1000);\n            const minutes = String(Math.floor(elapsed / 60)).padStart(1, \"0\");\n            const seconds = String(elapsed % 60).padStart(2, \"0\");\n            timer.textContent = `${minutes}:${seconds}`;\n        }, 1000);\n    });\n\n    // TODO: refactor this into SamplerComponent.stopPadGlobalRecording()\n    recordGlobalButton.addEventListener(\"mouseup\", () => {\n        this.sampler.stopGlobalBusRecording();\n        if (this.waveform) {\n            this.waveform.stop();\n        }\n        recordingOverlay.style.display = \"none\"; // Hide the overlay\n        clearInterval(timerInterval); // Stop the timer\n        timer.textContent = \"0:00\";\n        console.log('STOP RECORDING');\n\n    });\n    padContainer.appendChild(recordingOverlay);\n\n    // Append controls\n    controlsContainer.appendChild(recordGlobalButton);\n    controlsContainer.appendChild(recordMicButton);\n    controlsContainer.appendChild(fileInput);\n    controlsContainer.appendChild(iconButton);\n    padContainer.appendChild(waveformContainer); // Add waveform behind\n\n\n    padContainer.appendChild(button);\n    padContainer.appendChild(controlsContainer);\n\n    return padContainer;\n}","import StreamingWaveform from \"../../ui/StreamingWaveform.js\";\n\n// File Input\nexport default function _createFileInput(button, sampler, padIndex) {\n    // Create a hidden file input element\n    const fileInput = document.createElement(\"input\");\n    fileInput.type = \"file\";\n    fileInput.accept = \"audio/*\";\n    fileInput.style.display = \"none\"; // Hide the input element\n\n    // Create a FontAwesome icon button\n    const iconButton = document.createElement(\"button\");\n    iconButton.classList.add(\"sampler-file-icon-button\", 'sampler-record-button');\n    iconButton.innerHTML = '<i class=\"fa-sharp-duotone fa-solid fa-upload\"></i>'; // FontAwesome audio file icon\n    iconButton.title = \"Load Audio Sample\";\n\n    // Event listener for the file input change\n    fileInput.addEventListener(\"change\", async (e) => {\n        const file = e.target.files[0];\n        if (file) {\n            await sampler.loadSample(file, padIndex);\n            button.textContent = file.name.split(\".\")[0]; // Update button text with file name\n\n            // get the wavecontainer by padIndex\n            let waveformContainer = this.pads[padIndex].querySelector('.sampler-waveform-container');\n            waveformContainer.innerHTML = ''; // clear the waveform container\n            // render a waveform for this sound file\n            const waveform = new StreamingWaveform({\n                buffer: this.sampler.buffers[padIndex],\n                parent: waveformContainer,\n                width: 196,\n                height: 100,\n            });\n\n\n\n        }\n    });\n\n    // Click the hidden file input when the icon is clicked\n    iconButton.addEventListener(\"click\", () => {\n        fileInput.click();\n    });\n\n    return { fileInput, iconButton };\n}","import StreamingWaveform from \"../../ui/StreamingWaveform.js\";\n\n// Create Sliced Record Button\nexport default function  _createSlicedRecordButton() {\n        const button = document.createElement(\"button\");\n        button.textContent = \"Global Sliced Record\";\n        //button.innerHTML = `Record <i class=\"fa-duotone fa-solid fa-volume-high\"></i>`;\n\n        button.innerHTML = '<i class=\"fa-duotone fa-solid fa-cassette-tape\"></i>';\n        button.style.fontSize = \"2.5rem\";\n\n        \n        button.title = \"Record audio from global output bus and slice into 8 pads\";\n        button.classList.add(\"sampler-record-button\");\n        button.style.gridColumn = \"span 4\";\n\n        let recordingStream = null;\n        let recorder = null;\n        let recordedChunks = [];\n\n        // TODO: refactor this into SamplerComponent.startGlobalRecording()\n        button.addEventListener(\"mousedown\", async () => {\n            recordedChunks = [];\n            const streamDestination = this.globalBus.audioContext.createMediaStreamDestination();\n            this.globalBus.gainNode.connect(streamDestination);\n            recordingStream = streamDestination.stream;\n\n\n            // Start the waveform rendering\n            this.waveform = new StreamingWaveform({\n                audioContext: this.globalBus.audioContext,\n                stream: recordingStream,\n                parent: this.waveformContainer,\n                width: 800,\n                height: 280,\n            });\n            this.waveformContainer.style.position = \"absolute\";\n            this.waveformContainer.style.top = \"0\";\n            this.waveformContainer.style.left = \"0\";\n            this.waveformContainer.style.zIndex = \"9999\";\n            \n\n            // TOOD: move to Sampler class\n            recorder = new MediaRecorder(recordingStream);\n            recorder.ondataavailable = (e) => recordedChunks.push(e.data);\n\n            recorder.start();\n            console.log(\"Sliced recording started...\");\n        });\n\n        // TODO: refactor this into SamplerComponent.stopGlobalRecording()\n        button.addEventListener(\"mouseup\", async () => {\n\n            if (this.waveform) {\n                this.waveform.stop();\n                console.log(\"Sliced recording stopped.\");\n                this.waveform.remove();\n            }\n            if (recorder && recorder.state === \"recording\") {\n                recorder.stop();\n\n                recorder.onstop = async () => {\n                    console.log(\"Sliced recording stopped.\");\n\n                    // Process recorded audio\n                    const blob = new Blob(recordedChunks, { type: \"audio/webm\" });\n                    const arrayBuffer = await blob.arrayBuffer();\n                    const audioBuffer = await this.audioContext.decodeAudioData(arrayBuffer);\n\n                    this._sliceAndLoadToPads(audioBuffer);\n                };\n            }\n        });\n\n        return button;\n    }\n\n","import StreamingWaveform from \"../../ui/StreamingWaveform.js\";\n\nexport default function _createLiveSlicedRecordButton() {\n    const button = document.createElement(\"button\");\n    //button.textContent = \"Mic Sliced Record\";\n    button.title = \"Record audio from microphone and slice into 8 pads\";\n    button.classList.add(\"sampler-record-button\");\n    button.style.gridColumn = \"span 4\";\n\n    button.innerHTML = `<i class=\"fa-duotone fa-solid fa-microphone-lines\"></i>`;\n    button.style.fontSize = \"2.5rem\";\n\n    let recordingStream = null;\n    let recorder = null;\n    let recordedChunks = [];\n    let mediaStreamSource = null;\n\n    // TODO: refactor this into SamplerComponent.startMicrophoneRecording()\n    button.addEventListener(\"mousedown\", async () => {\n        recordedChunks = [];\n\n        try {\n            // Request access to the microphone\n            recordingStream = await navigator.mediaDevices.getUserMedia({ audio: true });\n\n            // Connect the microphone stream to the audio context\n            mediaStreamSource = this.audioContext.createMediaStreamSource(recordingStream);\n\n            // Start the waveform rendering\n            this.waveform = new StreamingWaveform({\n                audioContext: this.audioContext,\n                stream: recordingStream,\n                parent: this.waveformContainer,\n                width: 800,\n                height: 280,\n            });\n            this.waveformContainer.style.position = \"absolute\";\n            this.waveformContainer.style.top = \"0\";\n            this.waveformContainer.style.left = \"0\";\n\n            // Setup MediaRecorder for the microphone stream\n            recorder = new MediaRecorder(recordingStream);\n            recorder.ondataavailable = (e) => recordedChunks.push(e.data);\n\n            recorder.start();\n            console.log(\"Live sliced recording started...\");\n        } catch (error) {\n            console.error(\"Microphone access denied or failed:\", error);\n        }\n    });\n\n\n    // TODO: refactor this into SamplerComponent.stopMicrophoneRecording()\n    button.addEventListener(\"mouseup\", async () => {\n        if (recorder && recorder.state === \"recording\") {\n            recorder.stop();\n\n            recorder.onstop = async () => {\n                console.log(\"Live sliced recording stopped.\");\n\n                if (this.waveform) {\n                    this.waveform.stop();\n                    this.waveform.remove();\n                }\n\n                // Stop microphone stream\n                recordingStream.getTracks().forEach(track => track.stop());\n\n                // Process recorded audio\n                const blob = new Blob(recordedChunks, { type: \"audio/webm\" });\n                const arrayBuffer = await blob.arrayBuffer();\n                const audioBuffer = await this.audioContext.decodeAudioData(arrayBuffer);\n\n                // Slice and load the audio buffer into the pads\n                this._sliceAndLoadToPads(audioBuffer);\n            };\n        }\n    });\n\n    return button;\n}\n","import StreamingWaveform from \"../../ui/StreamingWaveform.js\";\n\nexport default async function _sliceAndLoadToPads(audioBuffer) {\n    // Detect beats and retrieve beat grid\n    //let beatGrid = await detectSmallerBeats(audioBuffer);\n    let beatGrid = [];\n    console.log(\"Beat grid:\", beatGrid);\n\n    const sliceCount = 8;\n    let slicePoints = []; // To hold slice start and end times\n\n    if (beatGrid && beatGrid.beatTimes && beatGrid.beatTimes.length > 0) {\n        const beatTimes = beatGrid.beatTimes;\n\n        // Logic to determine evenly spaced beats\n        if (beatTimes.length <= sliceCount) {\n            // Use the first 8 beats or fewer\n            slicePoints = beatTimes.slice(0, sliceCount);\n        } else {\n            // Divide beats evenly into 8 slices\n            const step = Math.floor(beatTimes.length / sliceCount);\n            for (let i = 0; i < sliceCount; i++) {\n                slicePoints.push(beatTimes[i * step]);\n            }\n        }\n\n        // Ensure the first beat starts at 0\n        if (slicePoints[0] !== 0) slicePoints.unshift(0);\n\n        // Adjust to ensure exactly 8 slices\n        while (slicePoints.length > sliceCount) {\n            slicePoints.pop();\n        }\n        while (slicePoints.length < sliceCount) {\n            slicePoints.push(audioBuffer.duration); // Fill remaining slices\n        }\n\n        console.log(\"Adjusted slice points based on beats:\", slicePoints);\n    } else {\n        // Fallback to uniform slices if beat grid fails\n        const sliceDuration = audioBuffer.duration / sliceCount;\n        for (let i = 0; i < sliceCount; i++) {\n            slicePoints.push(i * sliceDuration);\n        }\n        slicePoints.push(audioBuffer.duration);\n    }\n\n    // Perform slicing and waveform rendering\n    for (let i = 0; i < sliceCount; i++) {\n        const start = slicePoints[i];\n        const end = slicePoints[i + 1] || audioBuffer.duration;\n\n        // Render waveform behind the pad button\n        const padContainer = this.pads[i]; // Access the pad container\n        const waveformContainer = padContainer.querySelector(\".sampler-waveform-container\");\n\n        // Slice the audio buffer\n        const slicedBuffer = this._sliceAudioBuffer(audioBuffer, start, end);\n        this.sampler.buffers[i] = slicedBuffer;\n\n        // get the pad button associated with sampler i and remove its innerText\n        const button = padContainer.querySelector(\".sampler-pad-button\");\n        button.innerText = \"\";\n\n        waveformContainer.innerHTML = \"\";\n\n        // Clear any existing waveform\n        waveformContainer.innerHTML = \"\";\n        new StreamingWaveform({\n            audioContext: this.audioContext,\n            buffer: slicedBuffer,\n            parent: waveformContainer,\n            width: 196,\n            height: 100,\n        });\n\n        console.log(`Loaded slice ${i + 1} from ${start.toFixed(2)}s to ${end.toFixed(2)}s`);\n    }\n}\n","\n    // Slice an AudioBuffer between start and end times\nexport default  function  _sliceAudioBuffer(audioBuffer, start, end) {\n        const sampleRate = audioBuffer.sampleRate;\n        const startSample = Math.floor(start * sampleRate);\n        const endSample = Math.floor(end * sampleRate);\n\n        const slicedBuffer = this.audioContext.createBuffer(\n            audioBuffer.numberOfChannels,\n            endSample - startSample,\n            sampleRate\n        );\n\n        for (let channel = 0; channel < audioBuffer.numberOfChannels; channel++) {\n            const originalData = audioBuffer.getChannelData(channel);\n            const slicedData = slicedBuffer.getChannelData(channel);\n\n            for (let i = 0; i < slicedData.length; i++) {\n                slicedData[i] = originalData[startSample + i];\n            }\n        }\n\n        return slicedBuffer;\n    }\n\n","import SamplerPadComponent from './SamplerPadComponent.js';\n\nexport default class Sampler {\n    constructor(bp, options = {}) {\n        this.bp = bp;\n\n        if (typeof options.window !== 'boolean') {\n            options.window = true;\n        }\n        this.options = options;\n        return this;\n    }\n\n    async init() {\n        this.bp.log('Hello from Example');\n\n        await this.bp.load('/v5/apps/based/sampler/sampler.css');\n\n        return 'loaded Example';\n    }\n\n    async open(options = {}) {\n\n        if (!this.samplerHolder) {\n\n            // TODO: better options for rendering apps with windows\n            if (this.options.window && this.bp.apps.ui && this.bp.apps.ui.windowManager) {\n                let samplerWindow = this.bp.apps.ui.windowManager.createWindow({\n                    id: 'sampler-0',\n                    title: 'Sampler',\n                    x: 50,\n                    y: 100,\n                    width: 1000,\n                    height: 460,\n                    minWidth: 600,\n                    minHeight: 500,\n                    className: 'sampler-window',\n                    parent: $('#desktop')[0],\n                    icon: '/desktop/assets/images/icons/icon_midifighter_64.png',\n                    resizable: true,\n                    minimizable: true,\n                    maximizable: true,\n                    closable: true,\n                    focusable: true,\n                    maximized: false,\n                    minimized: false,\n                    onClose: () => {\n                        this.samplerHolder = null;\n                    }\n                });\n                this.samplerHolder = samplerWindow.content;\n            } else {\n                this.samplerHolder = document.createElement('div');\n                this.samplerHolder.className = 'sampler-window';\n                document.body.appendChild(samplerHolder);\n            }\n\n            let samplerPadComponent = new SamplerPadComponent(new AudioContext(), {\n                audioContext: new AudioContext(),\n            }, {\n                fetch: window.fetch.bind(window), // TODO: use the fetch from the bp\n                defaultSounds: [\n                    'dj-horn.mp3',\n                    'dang-son.mp3',\n                    `helicopter-helicopter.mp3`,\n                    `yooo.mp3`,\n                    'celebrate.mp3',\n                    'flawless-victory.wav',\n                ]\n            });\n            this.samplerHolder.appendChild(samplerPadComponent.container);\n            samplerPadComponent.adjustVolume(0.5);\n            samplerPadComponent.showPianoRoll.click();\n\n        }\n\n    }\n}"],"names":["SamplerPadEffect","constructor","audioContext","globalBus","this","context","buffers","Array","fill","recorder","recordedChunks","activeSources","Map","pitchStates","gainNode","createGain","mode","reversePlayback","addTrack","connect","destination","unload","clear","loadSample","file","padIndex","arrayBuffer","audioBuffer","decodeAudioData","reverseBuffer","recordMicrophone","stream","navigator","mediaDevices","getUserMedia","audio","MediaRecorder","ondataavailable","e","push","data","onstop","async","blob","Blob","type","start","stopMicrophoneRecording","state","stop","recordGlobalBus","streamDestination","createMediaStreamDestination","stopGlobalBusRecording","playSampleAtPitch","pitchRatio","source","createBufferSource","buffer","playbackRate","value","console","log","set","setReverse","reverse","originalFile","numChannels","numberOfChannels","reversedBuffer","createBuffer","length","sampleRate","channel","channelData","getChannelData","reversedData","i","setMode","playSample","press","existingSource","get","loop","stopSample","delete","handlePadPress","handlePadRelease","stopAllRecordings","stopAllSamples","forEach","setModWheel","amplifiedValue","entries","pitchBendRatio","Math","pow","adjustVolume","normalizedValue","max","min","gain","setValueAtTime","currentTime","PianoRoll","notes","onKeyPlay","onModWheelChange","baseNotes","_defaultNotes","currentOctave","keyCount","isMouseDown","container","_createPianoRollContainer","_addEventListeners","_render","name","ratio","document","createElement","classList","add","controls","minusButton","textContent","addEventListener","_shiftOctave","plusButton","octaveIndicator","appendChild","modWheelContainer","modWheelLabel","modWheel","_handleModWheelChange","target","_resetModWheel","pianoContainer","innerHTML","centerIndex","floor","baseNote","octaveOffset","note","index","keyButton","includes","style","display","justifyContent","alignItems","paddingBottom","dataset","_playKey","direction","interval","setInterval","currentValue","parseFloat","clearInterval","StreamingWaveform","parent","width","height","canvas","ctx","getContext","isDrawing","currentX","analyser","_setupStream","_drawBuffer","playHeadPosition","createAnalyser","fftSize","createMediaStreamSource","bufferLength","frequencyBinCount","dataArray","Uint8Array","_startDrawing","draw","requestAnimationFrame","getByteTimeDomainData","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","sliceHeight","y","moveTo","lineTo","stroke","clearRect","setPlayHeadPosition","position","_redrawBufferWithPlayhead","rawData","totalSamples","samplesPerPixel","ceil","x","end","yMin","yMax","_drawPlayhead","playheadX","remove","SliderComponent","track","trackId","config","options","className","thumbClassName","labelClassName","orientation","trackColor","thumbColor","trackWidth","trackHeight","thumbWidth","thumbHeight","showLabel","showScale","showCenterLine","centerLineColor","centerLineLength","scaleLineLength","centerLineWidth","centerLineSpacing","progressBarColor","progressBarSize","minValue","maxValue","step","defaultValue","onDoubleClick","setValue","onClick","onChange","val","formatLabel","toFixed","bind","trackLength","parseInt","sliderContainer","background","borderRadius","centerLine","left","top","createLine","line","opacity","center","spacing","offset","showProgress","progressBar","zIndex","sliderThumb","cursor","title","sliderThumbStyles","Object","keys","key","initialPosition","sliderLabel","transform","isDragging","getValue","_onChange","touches","prototype","rect","getBoundingClientRect","scaledWidth","scaledHeight","clientY","volume","updateProgressBar","updateLabel","clientX","propigate","clampedValue","range","tr808","SamplerPadComponent","sampler","fetch","window","defaultSounds","topSection","buttonGrid","gridTemplateColumns","gap","padding","volumeContainer","that","samplerSliderVolume","sliderComponent","volumeSlider","append","sliceRecordContainer","slicedRecordButton","_createSlicedRecordButton","liveSlicedRecordButton","_createLiveSlicedRecordButton","stopAllButton","fontSize","showPianoRoll","controlsContainer","pads","_loadDefaultSound","padContainer","_createPad","pianoRoll","lastPlayedPad","sampleBanks","id","samples","disabled","pianoControls","querySelector","sampleBankSelectContainer","sampleBankSelect","sampleBank","option","text","selectedValue","find","bank","querySelectorAll","pad","insertBefore","lastElementChild","waveformContainer","waveform","packId","url","response","split","pop","soundFile","button","border","color","fileInput","click","label","fileName","iconButton","_createFileInput","recordMicButton","recordingOverlay","recordingStartTime","Date","now","timerInterval","elapsed","minutes","String","padStart","seconds","milliseconds","timer","padPlaybackSelector","opt","flexDirection","oscilloscope","recordGlobalButton","recordingStream","accept","files","gridColumn","_sliceAndLoadToPads","mediaStreamSource","error","getTracks","beatGrid","slicePoints","beatTimes","slice","unshift","duration","sliceDuration","slicedBuffer","_sliceAudioBuffer","innerText","startSample","endSample","originalData","slicedData","Sampler","bp","init","load","open","samplerHolder","apps","ui","windowManager","samplerWindow","createWindow","minWidth","minHeight","$","icon","resizable","minimizable","maximizable","closable","focusable","maximized","minimized","onClose","content","body","samplerPadComponent","AudioContext"],"mappings":"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"}