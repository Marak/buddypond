{"version":3,"file":"sampler.js","sources":["../../../apps/based/sampler/SamplerPad.js","../../../apps/based/ui/PianoRoll.js","../../../apps/based/ui/StreamingWaveform.js","../../../apps/based/ui/Slider.js","../../../apps/based/sampler/packs/tr-808/tr-808.js","../../../apps/based/sampler/SamplerPadComponent.js","../../../apps/based/sampler/SamplerPadComponent/_createPad.js","../../../apps/based/sampler/SamplerPadComponent/_createFileInput.js","../../../apps/based/sampler/SamplerPadComponent/_createSlicedRecordButton.js","../../../apps/based/sampler/SamplerPadComponent/_createMicrophoneSlicedRecordButton.js","../../../apps/based/sampler/SamplerPadComponent/_sliceAndLoadToPads.js","../../../apps/based/sampler/SamplerPadComponent/_sliceAudioBuffer.js","../../../apps/based/sampler/sampler.js"],"sourcesContent":["export default class SamplerPadEffect {\n  constructor(audioContext, globalBus = null) {\n    this.context = audioContext;\n    this.buffers = Array(8).fill(null); // Storage for audio buffers (8 pads)\n    this.recorder = null;\n    this.recordedChunks = [];\n    this.activeSources = new Map(); // Track active sources\n    this.pitchStates = new Map(); // Track current pitch states for active sources\n    this.gainNode = this.context.createGain(); // Gain node for volume control\n    this.mode = Array(8).fill('one-shot'); // Default mode is 'one-shot' for each pad\n    this.reversePlayback = Array(8).fill(false); // Reverse playback flag for each pad\n\n    // Connect gainNode to global bus or directly to destination\n    if (globalBus) {\n      globalBus.addTrack(this.gainNode, this.context);\n    } else {\n      this.gainNode.connect(this.context.destination);\n    }\n  }\n\n\n  async unload() {\n    this.buffers = Array(8).fill(null);\n    this.recorder = null;\n    this.recordedChunks = [];\n    this.activeSources.clear();\n    this.pitchStates.clear();\n  }\n\n  async loadSample(file, padIndex) {\n    const arrayBuffer = await file.arrayBuffer();\n    const audioBuffer = await this.context.decodeAudioData(arrayBuffer);\n    this.buffers[padIndex] = audioBuffer;\n    if (this.reversePlayback[padIndex]) {\n      this.reverseBuffer(padIndex); // Reverse the buffer if the pad is set to reverse\n    }\n  }\n\n  // TODO: we previously had the waveform generate, where did it go?\n  async recordMicrophone(padIndex) {\n    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n    this.recorder = new MediaRecorder(stream);\n    this.recordedChunks = [];\n\n    let resolveBuffer;\n    const bufferPromise = new Promise((resolve) => (resolveBuffer = resolve));\n\n    this.recorder.ondataavailable = (e) => this.recordedChunks.push(e.data);\n    this.recorder.onstop = async () => {\n      const blob = new Blob(this.recordedChunks, { type: \"audio/webm\" });\n      const arrayBuffer = await blob.arrayBuffer();\n      const audioBuffer = await this.context.decodeAudioData(arrayBuffer);\n      this.buffers[padIndex] = audioBuffer;\n      resolveBuffer(audioBuffer);\n    };\n\n    this.recorder.start();\n    return { stream, bufferPromise }; // return both\n  }\n\n  stopMicrophoneRecording() {\n    if (this.recorder && this.recorder.state === \"recording\") {\n      this.recorder.stop();\n    }\n  }\n\n  recordGlobalBus(globalBus, padIndex) {\n    const streamDestination = globalBus.audioContext.createMediaStreamDestination();\n    globalBus.gainNode.connect(streamDestination);\n\n    this.recorder = new MediaRecorder(streamDestination.stream);\n    this.recordedChunks = [];\n\n    this.recorder.ondataavailable = (e) => this.recordedChunks.push(e.data);\n    this.recorder.onstop = async () => {\n      const blob = new Blob(this.recordedChunks, { type: \"audio/webm\" });\n      const arrayBuffer = await blob.arrayBuffer();\n      this.buffers[padIndex] = await this.context.decodeAudioData(arrayBuffer);\n    };\n\n    this.recorder.start();\n    return streamDestination.stream;\n  }\n\n  stopGlobalBusRecording() {\n    if (this.recorder && this.recorder.state === \"recording\") {\n      this.recorder.stop();\n    }\n  }\n\n  playSampleAtPitch(padIndex, pitchRatio) {\n    if (!this.buffers[padIndex]) return;\n\n    const source = this.context.createBufferSource();\n    source.buffer = this.buffers[padIndex];\n    source.playbackRate.value = pitchRatio; // Adjust pitch\n    source.connect(this.gainNode);\n    // console.log('confirming this.gainNode', this.gainNode);\n\n    source.start();\n    // Store the source and initial pitch ratio for potential modulation\n    this.activeSources.set(padIndex, source);\n    this.pitchStates.set(padIndex, pitchRatio);\n  }\n\n  setReverse(padIndex, reverse) {\n    this.reversePlayback[padIndex] = reverse;\n    if (reverse) {\n      this.reverseBuffer(padIndex);\n    } else {\n      // Reload or reassign the original buffer if turning off reverse\n      this.loadSample(originalFile, padIndex); // Ensure `originalFile` is stored or accessible\n    }\n  }\n\n  reverseBuffer(padIndex) {\n    const buffer = this.buffers[padIndex];\n    const numChannels = buffer.numberOfChannels;\n    const reversedBuffer = this.context.createBuffer(numChannels, buffer.length, buffer.sampleRate);\n\n    for (let channel = 0; channel < numChannels; channel++) {\n      const channelData = buffer.getChannelData(channel);\n      const reversedData = reversedBuffer.getChannelData(channel);\n      for (let i = 0; i < buffer.length; i++) {\n        reversedData[i] = channelData[buffer.length - 1 - i];\n      }\n    }\n\n    this.buffers[padIndex] = reversedBuffer; // Replace the original buffer with reversed\n  }\n\n  // Method to set the playback mode\n  setMode(padIndex, mode) {\n    this.mode[padIndex] = mode; // mode could be 'one-shot', 'hold', or 'toggle'\n  }\n\n  playSample(padIndex, press = false) {\n    if (!this.buffers[padIndex]) return;\n\n    const source = this.context.createBufferSource();\n    source.buffer = this.buffers[padIndex];\n    source.connect(this.gainNode);\n\n    const existingSource = this.activeSources.get(padIndex);\n    if (existingSource && this.mode[padIndex] === 'loop' && existingSource.loop) {\n      this.stopSample(padIndex);  // Stop loop if already playing\n      return;\n    }\n    console.log('existingSource', existingSource, 'this.mode[padIndex]', this.mode[padIndex]);\n    switch (this.mode[padIndex]) {\n      case 'one-shot':\n      case 'hold':\n      case 'toggle':\n      case 'loop':\n        if (existingSource && (this.mode[padIndex] === 'toggle' || this.mode[padIndex] === 'loop')) {\n          console.log(\"STOPPING\");\n          this.stopSample(padIndex);\n          return;\n        }\n        source.loop = this.mode[padIndex] === 'loop';\n        source.start();\n        console.log('setting the activeSources', source);\n        this.activeSources.set(padIndex, source);\n        break;\n    }\n  }\n\n  stopSample(padIndex) {\n    const source = this.activeSources.get(padIndex);\n    if (source) {\n      source.loop = false;\n      source.stop();\n      this.activeSources.delete(padIndex);\n    }\n  }\n\n  // Add event handlers to bind UI button presses/releases to these methods\n  handlePadPress(padIndex) {\n    if (this.mode[padIndex] === 'hold') {\n      this.playSample(padIndex, true);\n    } else {\n      this.playSample(padIndex);\n    }\n  }\n\n  handlePadRelease(padIndex) {\n    if (this.mode[padIndex] === 'hold') {\n      this.stopSample(padIndex);\n    }\n  }\n\n  stopAllRecordings() { // Currently all the same stop functions ( shared recorder between global and mic )\n    if (this.recorder && this.recorder.state === \"recording\") {\n      this.recorder.stop();\n    }\n  }\n\n  stopAllSamples() {\n\n    // call stopSample on each active source\n    this.activeSources.forEach((source) => {\n      source.loop = false;\n      source.stop();\n    });\n    //this.activeSources.forEach((source) => source.stop());\n    this.activeSources.clear();\n    this.pitchStates.clear();\n  }\n\n  setModWheel(value) {\n    // TODO: more of a change based on value, we want more of a pitch bend\n    const amplifiedValue = value * 5.5; // Increase multiplier as needed for stronger effect\n\n    console.log('incoming value from -1 to 1', value);\n    console.log('amplifiedValue', amplifiedValue);\n    const activeSources = this.activeSources.entries();\n    for (const [padIndex, source] of activeSources) {\n      const basePitch = this.pitchStates.get(padIndex) || 1; // Get the initial pitch\n      const pitchBendRatio = basePitch * Math.pow(2, amplifiedValue / 12); // Adjust relative to current pitch\n      source.playbackRate.value = pitchBendRatio;\n    }\n  }\n\n  adjustVolume(value) {\n    // Normalize value to a range of 0 to 1\n    const normalizedValue = Math.max(0, Math.min(1, value));\n    this.gainNode.gain.setValueAtTime(normalizedValue, this.context.currentTime);\n  }\n\n}","export default class PianoRoll {\n    constructor({ notes, onKeyPlay, onModWheelChange }) {\n      this.baseNotes = notes || this._defaultNotes();\n      this.currentOctave = 0; // Octave shift state\n      this.onKeyPlay = onKeyPlay || (() => {});\n      this.onModWheelChange = onModWheelChange || (() => {});\n      this.keyCount = 25; // Total keys in the piano roll\n  \n      this.isMouseDown = false; // For click-and-drag functionality\n      this.container = this._createPianoRollContainer();\n  \n      this._addEventListeners();\n      this._render();\n      return this;\n    }\n  \n    // Default notes if none provided\n    _defaultNotes() {\n      return [\n        { name: \"C\", ratio: 1.0 },\n        { name: \"C#\", ratio: 1.05946 },\n        { name: \"D\", ratio: 1.12246 },\n        { name: \"D#\", ratio: 1.18921 },\n        { name: \"E\", ratio: 1.25992 },\n        { name: \"F\", ratio: 1.33484 },\n        { name: \"F#\", ratio: 1.41421 },\n        { name: \"G\", ratio: 1.49831 },\n        { name: \"G#\", ratio: 1.5874 },\n        { name: \"A\", ratio: 1.68179 },\n        { name: \"A#\", ratio: 1.7818 },\n        { name: \"B\", ratio: 1.88775 },\n      ];\n    }\n  \n    // Create the full container with octave buttons\n    _createPianoRollContainer() {\n      const container = document.createElement(\"div\");\n      container.classList.add(\"piano-roll-wrapper\");\n  \n      // Octave buttons\n      const controls = document.createElement(\"div\");\n      controls.classList.add(\"piano-controls\");\n  \n      const minusButton = document.createElement(\"button\");\n      minusButton.textContent = \"- Octave\";\n      minusButton.classList.add(\"piano-octave-btn\");\n      minusButton.addEventListener(\"click\", () => this._shiftOctave(-1));\n  \n      const plusButton = document.createElement(\"button\");\n      plusButton.textContent = \"+ Octave\";\n      plusButton.classList.add(\"piano-octave-btn\");\n      plusButton.addEventListener(\"click\", () => this._shiftOctave(1));\n  \n      const octaveIndicator = document.createElement(\"span\");\n      octaveIndicator.classList.add(\"octave-indicator\");\n      octaveIndicator.textContent = `Octave ${this.currentOctave}`;\n      this.octaveIndicator = octaveIndicator;\n  \n      controls.appendChild(minusButton);\n      controls.appendChild(octaveIndicator);\n      controls.appendChild(plusButton);\n      container.appendChild(controls);\n  \n      // Mod wheel slider\n      const modWheelContainer = document.createElement(\"div\");\n      modWheelContainer.classList.add(\"mod-wheel-container\");\n  \n      const modWheelLabel = document.createElement(\"span\");\n      modWheelLabel.textContent = \"Mod Wheel\";\n      modWheelLabel.classList.add(\"mod-wheel-label\");\n  \n      const modWheel = document.createElement(\"input\");\n      modWheel.type = \"range\";\n      modWheel.min = \"-100\";\n      modWheel.max = \"100\";\n      modWheel.value = \"0\";\n      modWheel.classList.add(\"mod-wheel\");\n  \n      modWheel.addEventListener(\"input\", (e) => this._handleModWheelChange(e.target.value));\n      modWheel.addEventListener(\"mouseup\", () => this._resetModWheel(modWheel));\n  \n      modWheelContainer.appendChild(modWheelLabel);\n      modWheelContainer.appendChild(modWheel);\n      controls.appendChild(modWheelContainer);\n  \n      // Piano roll container\n      this.pianoContainer = document.createElement(\"div\");\n      this.pianoContainer.classList.add(\"piano-roll\");\n      container.appendChild(this.pianoContainer);\n  \n      return container;\n    }\n  \n    // Render keys in the piano roll\n    _render() {\n      // Clear existing keys\n      this.pianoContainer.innerHTML = \"\";\n  \n      // Generate 25 keys starting from base notes\n      const notes = [];\n      const centerIndex = Math.floor(this.keyCount / 2);\n  \n      for (let i = 0; i < this.keyCount; i++) {\n        const baseNote = this.baseNotes[i % this.baseNotes.length];\n        const octaveOffset = Math.floor((i - centerIndex) / this.baseNotes.length);\n        notes.push({\n          name: `${baseNote.name}`,\n          ratio: baseNote.ratio * Math.pow(2, octaveOffset + this.currentOctave),\n        });\n      }\n  \n      notes.forEach((note, index) => {\n        const keyButton = document.createElement(\"div\");\n        keyButton.classList.add(\n          \"piano-key\",\n          note.name.includes(\"#\") ? \"piano-black-key\" : \"piano-white-key\"\n        );\n  \n        // Align text for white keys to the bottom\n        if (!note.name.includes(\"#\")) {\n          keyButton.style.display = \"flex\";\n          keyButton.style.justifyContent = \"center\";\n          keyButton.style.alignItems = \"flex-end\";\n          keyButton.style.paddingBottom = \"4px\"; // Add some padding for better alignment\n        }\n  \n        keyButton.textContent = note.name;\n        keyButton.dataset.ratio = note.ratio;\n  \n        // Mouse interaction for individual keys\n        keyButton.addEventListener(\"mousedown\", () => this._playKey(note));\n        keyButton.addEventListener(\"mouseenter\", () => {\n          if (this.isMouseDown) this._playKey(note);\n        });\n  \n        this.pianoContainer.appendChild(keyButton);\n      });\n  \n      // Update the octave indicator\n      this.octaveIndicator.textContent = `Octave ${this.currentOctave}`;\n    }\n  \n    // Shift the octave and re-render\n    _shiftOctave(direction) {\n      this.currentOctave += direction; // Adjust octave\n      this._render(); // Re-render keys with new ratios\n    }\n  \n    // Add global event listeners for click-and-drag functionality\n    _addEventListeners() {\n      document.addEventListener(\"mousedown\", () => (this.isMouseDown = true));\n      document.addEventListener(\"mouseup\", () => (this.isMouseDown = false));\n    }\n  \n    // Play a key and trigger the callback\n    _playKey(note) {\n      if (this.onKeyPlay) {\n        this.onKeyPlay(note);\n      }\n    }\n  \n    // Handle mod wheel changes\n    _handleModWheelChange(value) {\n      const normalizedValue = value / 100; // Normalize value between -1 and 1\n      this.onModWheelChange(normalizedValue);\n    }\n  \n    // Reset mod wheel to center gradually\n    _resetModWheel(modWheel) {\n      const interval = setInterval(() => {\n        const currentValue = parseFloat(modWheel.value);\n        if (currentValue === 0) {\n          clearInterval(interval);\n          return;\n        }\n        modWheel.value = currentValue + (currentValue > 0 ? -1 : 1);\n        this._handleModWheelChange(modWheel.value);\n      }, 10);\n    }\n  }\n  ","export default class StreamingWaveform {\n    constructor({ audioContext, stream = null, buffer = null, parent, width, height }) {\n        this.audioContext = audioContext;\n        this.stream = stream; // MediaStream input\n        this.buffer = buffer; // AudioBuffer input\n        this.parent = parent;\n\n        // Canvas setup\n        this.canvas = document.createElement(\"canvas\");\n        this.canvas.classList.add(\"streaming-waveform\");\n        this.ctx = this.canvas.getContext(\"2d\");\n        this.canvas.width = width || 800; // Default width\n        this.canvas.height = height || 150; // Default height\n\n        // empty the parent container\n        this.parent.innerHTML = '';\n        this.parent.appendChild(this.canvas);\n\n        this.isDrawing = false;\n        this.currentX = 0; // Current x position for left-to-right drawing\n\n        // Web Audio setup\n        this.analyser = null;\n\n        if (this.stream) {\n            this._setupStream();\n        } else if (this.buffer) {\n            this._drawBuffer();\n        }\n\n        // Playhead state\n        this.playHeadPosition = 0;\n    }\n\n    // If a stream is provided, connect it to an analyser node\n    _setupStream() {\n        this.analyser = this.audioContext.createAnalyser();\n        this.analyser.fftSize = 1024; // Smooth waveform\n\n        const inputSource = this.audioContext.createMediaStreamSource(this.stream);\n        inputSource.connect(this.analyser);\n\n        this.bufferLength = this.analyser.frequencyBinCount;\n        this.dataArray = new Uint8Array(this.bufferLength);\n\n        this._startDrawing();\n    }\n\n    // Start drawing the waveform for a stream\n    _startDrawing() {\n        this.isDrawing = true;\n\n        const draw = () => {\n            if (!this.isDrawing) return;\n\n            requestAnimationFrame(draw);\n\n            this.analyser.getByteTimeDomainData(this.dataArray);\n\n            // Step 1: Scroll everything to the left by 2px\n            const imageData = this.ctx.getImageData(2, 0, this.canvas.width - 2, this.canvas.height);\n            this.ctx.putImageData(imageData, 0, 0);\n\n            // Step 2: Clear the rightmost 2px\n            this.ctx.fillStyle = \"#222\";\n            this.ctx.fillRect(this.canvas.width - 2, 0, 2, this.canvas.height);\n\n            // Step 3: Draw new waveform slice on right edge\n            this.ctx.lineWidth = 1;\n            this.ctx.strokeStyle = \"#00ff00\";\n            this.ctx.beginPath();\n\n            const sliceHeight = this.canvas.height / 2;\n\n            for (let i = 0; i < this.bufferLength; i++) {\n                const value = this.dataArray[i] / 255.0;\n                const y = sliceHeight + (value - 0.5) * sliceHeight;\n                const x = this.canvas.width - 2;\n\n                if (i === 0) {\n                    this.ctx.moveTo(x, y);\n                } else {\n                    this.ctx.lineTo(x, y);\n                }\n            }\n\n            this.ctx.stroke();\n        };\n\n        draw();\n    }\n\n    // Set the playhead position (value between 0 and 1)\n    setPlayHeadPosition(position) {\n        if (position < 0 || position > 1) return;\n\n        this.playHeadPosition = position;\n        this._redrawBufferWithPlayhead();\n    }\n\n    // Draw an AudioBuffer\n    _drawBuffer() {\n        this.rawData = this.buffer.getChannelData(0); // First channel\n        this.totalSamples = this.rawData.length;\n        this.samplesPerPixel = Math.ceil(this.totalSamples / this.canvas.width);\n        this._redrawBufferWithPlayhead();\n    }\n\n    renderFinalBuffer(buffer) {\n        this.buffer = buffer;\n        this.stream = null;\n        this.isDrawing = false;\n\n        // Optional: match canvas width to parent (if not already)\n        const targetWidth = this.parent.clientWidth;\n        if (this.canvas.width !== targetWidth) {\n            this.canvas.width = targetWidth;\n        }\n\n        this._drawBuffer(); // Now renders entire waveform to fit width\n    }\n\n    // Redraw the buffer waveform and playhead\n    _redrawBufferWithPlayhead() {\n        const sliceHeight = this.canvas.height / 2;\n\n        // Clear canvas\n        this.ctx.fillStyle = \"#222\";\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n        // Draw the waveform\n        this.ctx.lineWidth = 1;\n        this.ctx.strokeStyle = \"#00ff00\";\n        this.ctx.beginPath();\n\n        for (let x = 0; x < this.canvas.width; x++) {\n            const start = x * this.samplesPerPixel;\n            const end = start + this.samplesPerPixel;\n\n            let min = 1.0;\n            let max = -1.0;\n\n            for (let i = start; i < end; i++) {\n                const value = this.rawData[i] || 0;\n                if (value > max) max = value;\n                if (value < min) min = value;\n            }\n\n            const yMin = sliceHeight + min * sliceHeight;\n            const yMax = sliceHeight + max * sliceHeight;\n\n            if (x === 0) {\n                this.ctx.moveTo(x, yMin);\n            } else {\n                this.ctx.lineTo(x, yMin);\n            }\n            this.ctx.lineTo(x, yMax);\n        }\n        this.ctx.stroke();\n\n        // Draw the playhead\n        this._drawPlayhead();\n    }\n\n    // Draw the playhead as a vertical line\n    _drawPlayhead() {\n        const playheadX = Math.floor(this.playHeadPosition * this.canvas.width);\n\n        this.ctx.strokeStyle = \"#FF0000\"; // Playhead color\n        this.ctx.lineWidth = 2;\n\n        this.ctx.beginPath();\n        this.ctx.moveTo(playheadX, 0);\n        this.ctx.lineTo(playheadX, this.canvas.height);\n        this.ctx.stroke();\n    }\n\n    remove() {\n        this.canvas.remove();\n    }\n\n    // Stop live waveform drawing\n    stop() {\n        this.isDrawing = false;\n    }\n\n    // Clear the canvas\n    clear() {\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        this.currentX = 0;\n    }\n}\n","export default function createSliderComponent(track, trackId, config = {}) {\n    let slider = new SliderComponent(track, trackId, config);\n    return slider;\n}\n\nfunction SliderComponent(track, trackId, config = {}) {\n    // Default configuration options\n    const defaultConfig = {\n        className: 'volume-slider',\n        thumbClassName: 'slider-thumb',\n        labelClassName: 'label', // New option for label class\n        orientation: 'vertical', // 'vertical' or 'horizontal'\n        trackColor: '#333',\n        thumbColor: '#fff',\n        trackWidth: '60px',\n        trackHeight: '200px',\n        thumbWidth: '48px',\n        thumbHeight: '8px',\n        showLabel: true,\n        showScale: false,\n        showCenterLine: false, // Option to enable/disable the center line\n        centerLineColor: '#aeafaf', // Default color for the center line\n        centerLineLength: '32px', // Length of the center line\n        scaleLineLength: '32px', // Length of the scale lines\n        centerLineWidth: '2px', // Default width for the center line\n        centerLineSpacing: 10, // Spacing between each line in pixels\n        progressBarColor: '#4caf50', // Default color for the progress bar\n        progressBarSize: '8px', // Default size for the progress bar\n        minValue: 0,\n        maxValue: 1,\n        step: 0.01,\n        value: 0,\n        defaultValue: 0, // Default value when double-clicking the slider\n        onDoubleClick: (value) => {\n            console.log('Must implement double-click handler to reset the value');\n            // resets the value to default\n            this.setValue(value);\n        },\n        onClick : (value) => {\n            // console.log('Must implement onClick to evoke changes to state');\n        },\n        onChange: (value, val) => {\n            console.log('Must implement changeFunction to evoke changes to state');\n        },\n        formatLabel: (value) => {\n            return value.toFixed(2);\n        }\n    };\n\n    const options = { ...defaultConfig, ...config };\n    this.options = options;\n\n    this.onClick = options.onClick.bind(this); // Binding the onClick method to ensure proper context\n    this.onChange = options.onChange.bind(this); // Binding the onChange method to ensure proper context\n    this.onDoubleClick = options.onDoubleClick.bind(this); // Binding the onDoubleClick method to ensure proper context\n    this.formatLabel = options.formatLabel.bind(this);\n    this.thumbHeight = options.thumbHeight;\n    this.thumbWidth = options.thumbWidth;\n    this.trackWidth = options.trackWidth;\n    this.trackHeight = options.trackHeight;\n    this.orientation = options.orientation;\n\n    this.defaultValue = options.defaultValue;\n\n\n    this.trackLength = options.orientation === 'vertical'\n        ? parseInt(options.trackHeight)\n        : parseInt(options.trackWidth);\n\n\n    const sliderContainer = document.createElement('div');\n    this.sliderContainer = sliderContainer;\n    this.minValue = options.minValue;\n    this.maxValue = options.maxValue;\n    this.value = options.value;\n\n    sliderContainer.style.background = options.trackColor;\n    sliderContainer.style.borderRadius = '5px';\n    sliderContainer.classList.add(options.className);\n    sliderContainer.classList.add('slider-component');\n\n    if (options.orientation === 'vertical') {\n        sliderContainer.style.width = options.trackWidth;\n        sliderContainer.style.height = options.trackHeight;\n    } else {\n        sliderContainer.style.width = options.trackHeight; // Flip dimensions for horizontal\n        sliderContainer.style.height = options.trackWidth;\n    }\n\n    if (options.showCenterLine) {\n        const centerLine = document.createElement('div');\n        centerLine.style.position = 'absolute';\n        centerLine.style.background = options.centerLineColor;\n\n        if (options.orientation === 'vertical') {\n            centerLine.style.width = options.centerLineLength;\n            centerLine.style.height = options.centerLineWidth;\n            centerLine.style.left = `calc(50% - ${parseInt(options.centerLineLength) / 2}px)`;\n            centerLine.style.top = '50%';\n        } else {\n            centerLine.style.height = options.centerLineLength;\n            centerLine.style.width = options.centerLineWidth;\n            centerLine.style.top = `calc(50% - ${parseInt(options.centerLineLength) / 2}px)`;\n            centerLine.style.left = '50%';\n        }\n\n        sliderContainer.appendChild(centerLine);\n    }\n\n    if (options.showScale) {\n        const createLine = (position) => {\n            const line = document.createElement('div');\n            line.style.position = 'absolute';\n            line.style.background = options.centerLineColor;\n            line.style.opacity = 0.2;\n\n            if (options.orientation === 'vertical') {\n                line.style.width = options.scaleLineLength;\n                line.style.height = options.centerLineWidth;\n                line.style.left = `calc(50% - ${parseInt(options.scaleLineLength) / 2}px)`;\n                line.style.top = `${position}px`;\n            } else {\n                line.style.height = options.scaleLineLength;\n                line.style.width = options.centerLineWidth;\n                line.style.top = `calc(50% - ${parseInt(options.scaleLineLength) / 2}px)`;\n                line.style.left = `${position}px`;\n            }\n\n            sliderContainer.appendChild(line);\n        };\n\n        // Add lines symmetrically starting from the center\n        const trackLength = options.orientation === 'vertical'\n            ? parseInt(options.trackHeight)\n            : parseInt(options.trackWidth);\n\n        const center = trackLength / 2;\n        const spacing = options.centerLineSpacing;\n\n        // Create lines from the center outward\n        for (let offset = 0; center + offset <= trackLength || center - offset >= 0; offset += spacing) {\n            if (center + offset <= trackLength) createLine(center + offset); // Line below/after center\n            if (center - offset >= 0 && offset !== 0) createLine(center - offset); // Line above/before center\n        }\n    }\n\n    if (options.showProgress) {\n        const progressBar = document.createElement('div');\n        progressBar.style.position = 'absolute';\n        progressBar.style.background = options.progressBarColor;\n        progressBar.style.zIndex = '1'; // Ensure it appears below the thumb\n        this.progressBar = progressBar;\n\n        if (options.orientation === 'vertical') {\n            progressBar.style.width = options.progressBarSize;\n            progressBar.style.left = `calc(50% - ${parseInt(options.progressBarSize) / 2}px)`;\n        } else {\n            progressBar.style.height = options.progressBarSize;\n            progressBar.style.top = `calc(50% - ${parseInt(options.progressBarSize) / 2}px)`;\n        }\n        sliderContainer.appendChild(progressBar);\n\n    }\n\n    // Slider thumb\n    const sliderThumb = document.createElement('div');\n    sliderThumb.classList.add(options.thumbClassName);\n    sliderThumb.style.position = 'absolute';\n    sliderThumb.style.background = options.thumbColor;\n    sliderThumb.style.borderRadius = '4px';\n    sliderThumb.style.cursor = 'pointer';\n    sliderThumb.title = this.options.title || \"Track Volume\";\n\n    if (this.options.sliderThumbStyles) {\n        // object array of styles with keys as the css property and values as the css value\n        // iterate and apply\n        Object.keys(this.options.sliderThumbStyles).forEach((key) => {\n            sliderThumb.style[key] = this.options.sliderThumbStyles[key];\n        });\n    }\n\n    if (options.orientation === 'vertical') {\n        sliderThumb.style.width = options.thumbWidth;\n        sliderThumb.style.height = options.thumbHeight;\n        // sliderThumb.style.left = `calc(50% - ${parseInt(options.thumbWidth) / 2}px)`;\n    } else {\n        sliderThumb.style.width = options.thumbHeight; // Flip dimensions for horizontal\n        sliderThumb.style.height = options.thumbWidth;\n        // sliderThumb.style.top = `calc(50% - ${parseInt(options.thumbWidth) / 2}px)`;\n    }\n\n    this.sliderThumb = sliderThumb;\n\n    const initialPosition =\n        options.orientation === 'vertical'\n            ? (1 - options.value) * this.trackLength\n            : options.value * this.trackLength;\n\n    if (options.orientation === 'vertical') {\n        sliderThumb.style.top = `${initialPosition - parseInt(options.thumbHeight) / 2}px`;\n    } else {\n        sliderThumb.style.left = `${initialPosition - parseInt(options.thumbWidth) / 2}px`;\n    }\n\n    sliderContainer.appendChild(sliderThumb);\n\n    const sliderLabel = document.createElement('div');\n    sliderLabel.classList.add(options.labelClassName);\n    sliderLabel.textContent = options.value.toFixed(2); // Initial value\n    sliderLabel.style.position = 'absolute';\n    sliderLabel.style.top = options.orientation === 'vertical' ? '-22px' : '50%';\n    sliderLabel.style.left = options.orientation === 'vertical' ? '50%' : 'calc(100% + 10px)';\n    sliderLabel.style.transform = options.orientation === 'vertical' ? 'translateX(-50%)' : 'translateY(-50%)';\n    this.sliderLabel = sliderLabel;\n\n    if (!this.options.showLabel) {\n        sliderLabel.style.display = 'none';\n    }\n\n    sliderContainer.appendChild(sliderLabel);\n\n    let self = this;\n\n    let isDragging = false;\n\n    sliderThumb.addEventListener('mousedown', (e) => {\n        this.onClick(this.getValue());\n        isDragging = true;\n        this._onChange(e);\n    });\n\n    sliderThumb.addEventListener('touchstart', (e) => {\n        isDragging = true;\n        this._onChange(e.touches[0]);\n    });\n\n    document.addEventListener('mousemove', (e) => {\n        if (isDragging) this._onChange(e);\n    });\n\n    document.addEventListener('touchmove', (e) => {\n        if (isDragging) this._onChange(e.touches[0]);\n    });\n\n    document.addEventListener('mouseup', () => {\n        isDragging = false;\n    });\n\n    document.addEventListener('touchend', () => {\n        isDragging = false;\n    });\n\n    sliderContainer.addEventListener('mousedown', (e) => {\n        if (e.target === sliderThumb) return;\n        this.onClick(this.getValue());\n        this._onChange(e);\n        isDragging = true;\n    });\n\n    // mobile touch events\n    sliderContainer.addEventListener('touchstart', (e) => {\n        if (e.target === sliderThumb) return;\n        this._onChange(e.touches[0]);\n        isDragging = true;\n    });\n\n    sliderContainer.addEventListener('touchend', () => {\n        isDragging = false;\n    });\n\n    sliderContainer.addEventListener('touchmove', (e) => {\n        if (isDragging) this._onChange(e.touches[0]);\n    });\n\n    sliderContainer.addEventListener('dblclick', (e) => {\n        // TODO: ensure a delay of 200ms has passed\n        // before resetting the value\n        this.onDoubleClick(this.defaultValue);\n    });\n\n    this.setValue(options.value, false);\n\n    return this;\n}\n\nSliderComponent.prototype._onChange = function (e) {\n    // Custom scale for zoomed-in elements\n    let scale = 1;\n    //scale = 1;\n    const rect = this.sliderContainer.getBoundingClientRect();\n    let position;\n\n    // Adjust rect dimensions based on scale\n    const scaledWidth = rect.width / scale;\n    const scaledHeight = rect.height / scale;\n\n    if (this.orientation === 'vertical') {\n        // Calculate position accounting for the scale\n        position = (e.clientY - rect.top) / scale;\n        position = Math.min(Math.max(position, 0), scaledHeight);\n\n        const volume = 1 - position / scaledHeight;\n\n        // Adjust slider thumb position based on scale\n        this.sliderThumb.style.top = `${Math.min(\n            Math.max(position - parseInt(this.thumbHeight) / 2 / scale, 0),\n            scaledHeight - parseInt(this.thumbHeight) / scale\n        )}px`;\n\n        // Update value and UI elements\n        this.value = volume;\n        this.updateProgressBar(volume);\n        this.updateLabel(this.formatLabel(volume));\n\n        this.onChange(volume, this.getValue());\n    } else {\n        // Calculate position accounting for the scale\n        position = (e.clientX - rect.left) / scale;\n        position = Math.min(Math.max(position, 0), scaledWidth);\n\n        const volume = position / scaledWidth;\n\n        // Adjust slider thumb position based on scale\n        this.sliderThumb.style.left = `${Math.min(\n            Math.max(position - parseInt(this.thumbWidth) / 2 / scale, 0),\n            scaledWidth - parseInt(this.thumbWidth) / scale\n        )}px`;\n\n        // Update value and UI elements\n        this.value = volume;\n        this.updateProgressBar(volume);\n        this.updateLabel(this.formatLabel(volume));\n\n        this.onChange(volume, this.getValue());\n    }\n};\n\nSliderComponent.prototype.getValue = function () {\n    // returns actual value from with 0 to 1 multipled by the range\n    return this.value * (this.maxValue - this.minValue) + this.minValue;\n}\n\nSliderComponent.prototype.setValue = function (value, propigate = true) {\n    const clampedValue = Math.min(Math.max(value, this.options.minValue), this.options.maxValue);\n    // incoming value is in units of the range,\n    // we need to conver this into 0-1 value\n    let range = this.maxValue - this.minValue;\n    let normalizedValue = (clampedValue - this.minValue) / range;\n\n    this.value = normalizedValue;\n\n    const position =\n        this.orientation === 'vertical'\n            ? (1 - normalizedValue) * this.trackLength\n            : normalizedValue * this.trackLength;\n\n    if (this.orientation === 'vertical') {\n        this.sliderThumb.style.top = `${Math.min(\n            Math.max(position - parseInt(this.thumbHeight) / 2, 0),\n            this.trackLength - parseInt(this.thumbHeight)\n        )}px`;\n        if (this.options.showProgress) {\n\n            this.progressBar.style.height = `${(1 - normalizedValue) * this.trackLength}px`;\n            this.progressBar.style.top = `${normalizedValue * this.trackLength}px`;\n        }\n    } else {\n        this.sliderThumb.style.left = `${Math.min(\n            Math.max(position - parseInt(this.thumbWidth) / 2, 0),\n            this.trackLength - parseInt(this.thumbWidth)\n        )}px`;\n        if (this.options.showProgress) {\n            this.progressBar.style.width = `${normalizedValue * this.trackLength}px`;\n        }\n    }\n    this.updateLabel(this.formatLabel(value));\n    this.updateProgressBar();\n\n    if (propigate) {\n        // this.onChange(normalizedValue, this.getValue()); // Ensure onChange is always called\n        this.onChange(normalizedValue, this.getValue());\n\n    }\n};\n\nSliderComponent.prototype.updateProgressBar = function (value) {\n    if (!this.options.showProgress) return;\n    const position = value * this.trackLength; // Position based on current value\n    console.log('value', value, 'position', position);\n\n    if (this.orientation === 'vertical') {\n        // Ensure the progress bar grows upward for vertical orientation\n        this.progressBar.style.height = `${position}px`;\n        this.progressBar.style.top = `${this.trackLength - position}px`;\n    } else {\n        // Ensure the progress bar grows to the right for horizontal orientation\n        this.progressBar.style.width = `${position}px`;\n        this.progressBar.style.left = '0'; // Reset any previous left offset\n    }\n};\n\nSliderComponent.prototype.updateLabel = function (val) {\n    this.sliderLabel.textContent = this.getValue().toFixed(2);\n};","export default [\n  \"808.wav\",         // Kick\n  \"Snare Mid.wav\",   // Snare\n  \"Hihat.wav\",       // Hi-hat\n  \"Clap.wav\",        // Clap (often used in kits)\n  \"Tom High.wav\",    // Tom (high)\n  \"Tom Low.wav\",     // Tom (low)\n  \"Cymbal.wav\",      // Cymbal\n  \"Rimshot.wav\",     // Rimshot\n  \"Claves.wav\",      // Percussion (can be used for more flavor)\n  \"Conga High.wav\",  // Conga (high)\n  \"Conga Mid.wav\",   // Conga (mid)\n  \"Conga Low.wav\",   // Conga (low)\n  \"Kick Basic.wav\",  // Alternative kick\n  \"Kick Long.wav\",   // Alternative kick\n  \"Kick Short.wav\",  // Alternative kick\n  \"Maracas.wav\",     // Percussion\n  \"Open Hat Short.wav\",  // Open hi-hat\n  \"Open Hat Long.wav\",   // Open hi-hat (long)\n  \"Snare Bright.wav\",    // Snare (bright)\n  \"Snare High.wav\",      // Snare (high)\n  \"Snare Low.wav\",       // Snare (low)\n  \"Tom Mid.wav\",         // Tom (mid)\n]","import SamplerPadEffect from \"./SamplerPad.js\";\nimport PianoRoll from \"../ui/PianoRoll.js\";\nimport StreamingWaveform from \"../ui/StreamingWaveform.js\";\nimport sliderComponent from \"../ui/Slider.js\";\n\nimport _createPad from \"./SamplerPadComponent/_createPad.js\";\nimport _createFileInput from \"./SamplerPadComponent/_createFileInput.js\";\nimport _createSlicedRecordButton from \"./SamplerPadComponent/_createSlicedRecordButton.js\";\nimport _createLiveSlicedRecordButton from \"./SamplerPadComponent/_createMicrophoneSlicedRecordButton.js\";\nimport _sliceAndLoadToPads from \"./SamplerPadComponent/_sliceAndLoadToPads.js\";\nimport _sliceAudioBuffer from \"./SamplerPadComponent/_sliceAudioBuffer.js\";\n\nimport tr808 from './packs/tr-808/tr-808.js';\n\nexport default class SamplerPadComponent {\n    constructor(audioContext, globalBus, options = {}) {\n        this.audioContext = audioContext;\n        this.globalBus = globalBus;\n        this.sampler = new SamplerPadEffect(audioContext, null); // TODO: should be globalBus / api.globalBus ( needs proper audio graph like track )\n        this.fetch = options.fetch || window.fetch.bind(window);\n        this.defaultSounds = options.defaultSounds || [\n            \"samples/lets-go.mp3\",\n            \"samples/make-some-noise.mp3\",\n            \"samples/drop-it.mp3\",\n            \"samples/airhorn.mp3\",\n            null,\n            null,\n            null,\n            null,\n        ];\n\n        // Container setup\n        this.container = document.createElement(\"div\");\n        this.container.classList.add(\"sampler-pad-container\", \"track-active\");\n\n        // top container with main pad and volume\n        this.topSection = document.createElement(\"div\");\n        this.topSection.classList.add(\"sampler-top-section\");\n        this.container.appendChild(this.topSection);\n\n        // Holds 8 pad buttons\n        this.buttonGrid = document.createElement(\"div\");\n        this.buttonGrid.classList.add(\"sampler-pad\");\n        this.buttonGrid.style.display = \"grid\";\n        this.buttonGrid.style.gridTemplateColumns = \"repeat(4, 1fr)\";\n        this.buttonGrid.style.gap = \"10px\";\n        this.buttonGrid.style.padding = \"0px\";\n        //this.buttonGrid.style.background = \"#333\";\n        this.buttonGrid.style.borderRadius = \"10px\";\n\n        this.topSection.appendChild(this.buttonGrid);\n\n        // Holds volume slider\n        this.volumeContainer = document.createElement(\"div\");\n        this.volumeContainer.classList.add(\"sampler-volume-container\");\n        this.topSection.appendChild(this.volumeContainer);\n\n        let that = this;\n        let samplerSliderVolume = sliderComponent(null, 'sampler-0', {\n            minValue: 0,\n            maxValue: 1, // TODO: could be higher...needs better gain logic linear gain is not ideal after 1\n            value: 1,\n            trackWidth: '20px',\n            trackHeight: '260px',\n            thumbHeight: '48px',\n            thumbWidth: '24px',\n            sliderThumbStyles: {\n                left: '18px',\n            },\n\n            showLabel: false,\n            className: 'sampler-volume-slider',\n            thumbClassName: 'volume-thumb',\n            onChange: function (value) {\n                that.sampler.adjustVolume(value);\n            }\n        });\n        // track.transport.volumeSlider = volumeSlider;\n        this.volumeSlider = samplerSliderVolume;\n        this.volumeContainer.append(samplerSliderVolume.sliderContainer); // TODO: samplerSliderVolume.container\n\n\n\n\n        // Sample Record Microphone / Record Global Bus\n        this.sliceRecordContainer = document.createElement(\"div\");\n        this.sliceRecordContainer.classList.add(\"sampler-slice-record-container\");\n        this.topSection.appendChild(this.sliceRecordContainer);\n\n        // Remark: Records from global audio bus, removed for now\n        // Add Sliced Record Button\n        //const slicedRecordButton = this._createSlicedRecordButton();\n        //this.sliceRecordContainer.appendChild(slicedRecordButton);\n\n        // Add Live Sliced Record Button\n        const liveSlicedRecordButton = this._createLiveSlicedRecordButton()\n        this.sliceRecordContainer.appendChild(liveSlicedRecordButton);\n\n\n        const stopAllButton = document.createElement(\"button\");\n        stopAllButton.textContent = \"Stop\";\n        stopAllButton.innerHTML = '<i class=\"fa-duotone fa-solid fa-stop\"></i>';\n        stopAllButton.style.fontSize = \"2.5rem\";\n\n        stopAllButton.classList.add(\"sampler-stop-all-button\", \"sampler-record-button\");\n\n        stopAllButton.addEventListener(\"click\", () => {\n            this.sampler.stopAllSamples();\n            this.sampler.stopAllRecordings();\n        });\n\n        this.sliceRecordContainer.appendChild(stopAllButton);\n\n        const showPianoRoll = document.createElement(\"button\");\n        // showPianoRoll.textContent = \"Show Piano\";\n\n        // use <i class=\"fa-duotone fa-solid fa-piano-keyboard\"></i>\n        showPianoRoll.innerHTML = '<i class=\"fa-duotone fa-solid fa-piano-keyboard\"></i>';\n        showPianoRoll.style.fontSize = \"32px\";\n        showPianoRoll.classList.add(\"sampler-record-button\");\n\n        showPianoRoll.addEventListener(\"click\", () => {\n            /* TODO: add reverse button somewhere on pad\n            this.sampler.setReverse(0, true);\n            this.sampler.setReverse(1, true);\n            this.sampler.setReverse(2, true);\n            */\n            if (this.controlsContainer.style.display === \"flex\") {\n                this.controlsContainer.style.display = \"none\";\n            } else {\n                this.controlsContainer.style.display = \"flex\";\n            }\n        });\n        this.showPianoRoll = showPianoRoll;\n\n        this.sliceRecordContainer.appendChild(showPianoRoll);\n\n        // Bottom Pad Piano roll controls with global record\n        this.controlsContainer = document.createElement(\"div\");\n        this.controlsContainer.classList.add(\"sampler-controls-container\");\n\n        // Initialize Pads\n        this.pads = [];\n        for (let i = 0; i < 8; i++) {\n\n            if (this.defaultSounds[i]) {\n                this._loadDefaultSound('default', i, this.defaultSounds[i]);\n            }\n\n            const padContainer = this._createPad(i, this.defaultSounds[i]);\n            this.buttonGrid.appendChild(padContainer);\n            this.pads.push(padContainer);\n\n        }\n\n        // Piano Roll\n        const pianoRoll = new PianoRoll({\n            onKeyPlay: (note) => {\n                const frequency = 440 * note.ratio;\n                const padIndex = this.lastPlayedPad || 0; // Default to pad 0\n                this.sampler.playSampleAtPitch(padIndex, note.ratio);\n            },\n            onModWheelChange: (value) => {\n                this.sampler.setModWheel(value);\n            }\n        });\n\n        this.controlsContainer.appendChild(pianoRoll.container);\n\n        // Sample Bank\n        let sampleBanks = [\n            {\n                id: 'default',\n                name: 'Pvrty Bvx v1',\n                samples: [\n                    'dj-horn.mp3',\n                    'dang-son.mp3',\n                    `helicopter-helicopter.mp3`,\n                    `yooo.mp3`,\n                    'celebrate.mp3',\n                    'flawless-victory.wav',\n                    null,\n                    null,\n                ]\n            },\n            {\n                id: 'tr-808',\n                name: 'TR-808',\n                samples: tr808\n            },\n            {\n                id: 'custom',\n                name: 'Custom',\n                disabled: false,\n                samples: [] // TODO: loaded via function call to get from indexedDB ( needs binaries )\n            }\n\n        ];\n\n        // get the piano-controls div by class, it's inside this.controlsContainer\n        let pianoControls = this.controlsContainer.querySelector('.piano-controls');\n        // create a new div to hold sample bank select dropdown\n        let sampleBankSelectContainer = document.createElement('div');\n        sampleBankSelectContainer.classList.add('sample-bank-select-container');\n        // create a new select element\n        let sampleBankSelect = document.createElement('select');\n        sampleBankSelect.classList.add('sample-bank-select');\n\n        // iterate through all sample banks\n        // and create an option element for each\n        sampleBanks.forEach((sampleBank) => {\n            // create a new option element\n            let option = document.createElement('option');\n            option.value = sampleBank.id;\n            option.text = sampleBank.name;\n            if (sampleBank.disabled) {\n                option.disabled = true;\n            }\n            // add the option element to the select element\n            sampleBankSelect.add(option);\n        });\n\n        // add event listener to select element\n        sampleBankSelect.addEventListener('change', (e) => {\n            // TODO: test this\n            // get the selected value\n            let selectedValue = e.target.value;\n            // get the pads by class\n\n            // find the sample bank by id\n            let sampleBank = sampleBanks.find((bank) => bank.id === selectedValue);\n            this.defaultSounds = sampleBank.samples;\n            let pads = this.container.querySelectorAll('.sampler-pad');\n            // loop through the pads\n            pads.forEach((pad, index) => {\n                // get the waveform container by pad\n                let waveformContainer = pad.querySelector('.sampler-waveform-container');\n                // clear the waveform container\n                waveformContainer.innerHTML = '';\n                // if the selected value is default\n                if (selectedValue === 'default') {\n                    // load the default sound\n                }\n\n                this._loadDefaultSound(selectedValue, index, this.defaultSounds[index]);\n\n            });\n        });\n\n        // append the select element to the container\n        sampleBankSelectContainer.appendChild(sampleBankSelect);\n        // append the container to the piano-controls div\n\n        // insert before last element\n        pianoControls.insertBefore(sampleBankSelectContainer, pianoControls.lastElementChild);\n        //pianoControls.appendChild(sampleBankSelectContainer);\n\n        const waveformContainer = document.createElement(\"div\");\n        this.waveformContainer = waveformContainer;\n        this.container.appendChild(waveformContainer);\n\n        this.container.appendChild(this.controlsContainer);\n\n        this.waveform = null;\n\n        if (options.parent) {\n            options.parent.appendChild(this.container);\n        }\n\n        this.lastPlayedPad = 0; // Track last played pad\n    }\n\n    unload() {\n        // Clean-up // TODO: double check this\n        this.sampler.unload();\n        this.container.remove();\n    }\n\n    adjustVolume(value) {\n        // calls into sampler.adjustVolume\n        this.sampler.adjustVolume(value);\n        // updates the slider value\n        this.volumeSlider.setValue(value);\n    }\n\n    async _loadDefaultSound(packId, padIndex, url) {\n\n        url = '/v5/apps/based/sampler/packs/' + packId + '/' + url;\n        // console.log(\"Loading default sound:\", url);\n        const response = await this.fetch(url);\n        const arrayBuffer = await response.arrayBuffer();\n        const audioBuffer = await this.audioContext.decodeAudioData(arrayBuffer);\n        this.sampler.buffers[padIndex] = audioBuffer;\n\n        // get the wavecontainer by padIndex\n        let waveformContainer = this.pads[padIndex].querySelector('.sampler-waveform-container');\n        // render a waveform for this sound file\n        const waveform = new StreamingWaveform({\n            buffer: this.sampler.buffers[padIndex],\n            parent: waveformContainer,\n            width: 196,\n            height: 100,\n        });\n\n        // get the sampler-pad-label by padIndex\n        let samplerPadLabel = this.pads[padIndex].querySelector('.sampler-pad-label');\n\n        // update the sampler-pad-label text\n        samplerPadLabel.textContent = url.split('/').pop();\n\n    }\n}\n\nSamplerPadComponent.prototype._createPad = _createPad;\nSamplerPadComponent.prototype._createFileInput = _createFileInput;\nSamplerPadComponent.prototype._createSlicedRecordButton = _createSlicedRecordButton;\nSamplerPadComponent.prototype._createLiveSlicedRecordButton = _createLiveSlicedRecordButton;\nSamplerPadComponent.prototype._sliceAndLoadToPads = _sliceAndLoadToPads;\nSamplerPadComponent.prototype._sliceAudioBuffer = _sliceAudioBuffer;","import StreamingWaveform from \"../../ui/StreamingWaveform.js\";\n\n// Create a pad with button controls\nexport default function _createPad(padIndex, soundFile) {\n    const padContainer = document.createElement(\"div\");\n    padContainer.classList.add(\"sampler-pad\");\n\n    // Waveform Container (behind the button)\n    const waveformContainer = document.createElement(\"div\");\n    waveformContainer.classList.add(\"sampler-waveform-container\");\n    waveformContainer.style.position = \"absolute\";\n    waveformContainer.style.top = \"0\";\n    waveformContainer.style.left = \"0\";\n    waveformContainer.style.zIndex = \"0\"; // Behind everything\n\n    // Pad Button\n    const button = document.createElement(\"button\");\n\n    button.classList.add(\"sampler-pad-button\");\n    button.style.position = \"relative\";\n    button.style.zIndex = \"1\"; // Above the waveform\n    // button.style.background = \"transparent\"; // Transparent background\n    button.style.border = \"1px solid #555\";\n    button.style.color = \"#FFF\";\n\n    button.addEventListener(\"mousedown\", () => {\n        // check to see if there is actually a buffer loaded at this location\n        if (this.sampler.buffers[padIndex]) {\n            this.sampler.handlePadPress(padIndex);\n            this.lastPlayedPad = padIndex; // Set last played pad\n        } else {\n            // trigger the click event on the file input to prompt the user to load a sample\n            fileInput.click();\n        }\n    });\n\n    button.addEventListener(\"mouseup\", () => {\n        this.sampler.handlePadRelease(padIndex);\n    });\n\n    // Pad label for button\n    const label = document.createElement(\"div\");\n\n    if (soundFile) {\n        let fileName = soundFile.split(\"/\").pop();\n        // remove the file extension\n        fileName = fileName.split(\".\")[0];\n        label.textContent = fileName;\n    } else {\n        label.textContent = `Pad ${padIndex + 1}`;\n    }\n\n    label.classList.add(\"sampler-pad-label\");\n    button.appendChild(label);\n\n    // Controls Container\n    const controlsContainer = document.createElement(\"div\");\n    controlsContainer.classList.add(\"sampler-pad-controls\");\n\n    // Remark: replace default file input with fontawesome icon\n\n    const { fileInput, iconButton } = this._createFileInput(button, this.sampler, padIndex);\n\n    // Record Mic Button\n    const recordMicButton = document.createElement(\"button\");\n    recordMicButton.textContent = \"Record Mic\";\n    recordMicButton.innerHTML = `<i class=\"fa-duotone fa-solid fa-microphone-lines\"></i> Record`;\n    recordMicButton.title = \"Record audio from microphone\";\n\n    recordMicButton.classList.add(\"sampler-record-button\");\n\n    // Remark: refactor this into SamplerComponent.startPadMicrophoneRecording()\n    recordMicButton.addEventListener(\"mousedown\", async () => {\n        recordingOverlay.style.display = \"flex\"; // Show the overlay\n\n        if (recordMicButton.waveform) {\n            recordMicButton.waveform.remove();\n\n        }\n\n        if (this.waveform) {\n            this.waveform.remove();\n        }\n\n        // empty the label\n        label.textContent = \"\";\n\n        button.style.background = 'none';\n\n        recordingStartTime = Date.now();\n        // Start timer\n        timerInterval = setInterval(() => {\n            const elapsed = ((Date.now() - recordingStartTime) / 1000);\n            const minutes = String(Math.floor(elapsed / 60)).padStart(1, \"0\");\n            const seconds = String(elapsed % 60).padStart(2, \"0\");\n            const milliseconds = String(Math.floor((elapsed % 1) * 1000)).padStart(3, \"0\");\n            timer.textContent = `${minutes}:${seconds}:${milliseconds}`;\n        }, 10);\n\n        const { stream, bufferPromise } = await this.sampler.recordMicrophone(padIndex);\n\n        this._recordingBufferPromise = bufferPromise;\n\n        this.waveform = new StreamingWaveform({\n            audioContext: this.audioContext,\n            stream,\n            parent: waveformContainer,\n            width: 196,\n            height: 100,\n        });\n\n    });\n\n    // Remark: refactor this into SamplerComponent.stopPadMicrophoneRecording()\n    recordMicButton.addEventListener(\"mouseup\", async () => {\n        recordingOverlay.style.display = \"none\"; // Hide the overlay\n        clearInterval(timerInterval); // Stop the timer\n        timer.textContent = \"0:00\";\n        this.sampler.stopMicrophoneRecording();\n        if (this.waveform) {\n            this.waveform.stop();\n        }\n\n        // TODO: where does finalDecodedAudioBuffer come from?\n        const finalDecodedAudioBuffer = await this._recordingBufferPromise;\n        this.waveform.renderFinalBuffer(finalDecodedAudioBuffer);\n    });\n\n    const padPlaybackSelector = document.createElement(\"select\");\n    padPlaybackSelector.classList.add(\"sampler-pad-playback-selector\");\n    let padPlaybackModes = [{\n        value: 'one-shot',\n        label: 'One Shot'\n    }, {\n        value: 'hold',\n        label: 'Hold'\n    },\n    {\n        value: 'toggle',\n        label: 'Toggle'\n    }, {\n        value: 'loop',\n        label: 'Loop'\n    },\n        /* Remark: reverse is a flag, not a mode\n        {\n            value: 'reverse',\n            label: 'Reverse'\n        }\n        */\n\n    ];\n\n    padPlaybackModes.forEach((option, i) => {\n        let opt = document.createElement('option');\n        opt.value = option.value;\n        opt.innerHTML = option.label;\n        padPlaybackSelector.appendChild(opt);\n    });\n\n    padPlaybackSelector.addEventListener('change', (e) => {\n        // when changing modes, stop the sample\n        this.sampler.stopSample(padIndex);\n        this.sampler.setMode(padIndex, e.target.value);\n    });\n\n    // select the first option by default\n\n    controlsContainer.appendChild(padPlaybackSelector);\n\n    // Overlay for recording indicator\n    const recordingOverlay = document.createElement(\"div\");\n    recordingOverlay.classList.add(\"recording-overlay\");\n    recordingOverlay.style.display = \"none\"; // Hidden by default\n    recordingOverlay.style.position = \"absolute\";\n    recordingOverlay.style.top = \"0\";\n    recordingOverlay.style.left = \"0\";\n    // recordingOverlay.style.width = \"100%\";\n    recordingOverlay.style.height = \"50%\";\n    //recordingOverlay.style.background = \"rgba(0, 255, 0, 0.2)\";\n    // recordingOverlay.style.display = \"flex\";\n    recordingOverlay.style.flexDirection = \"column\";\n    recordingOverlay.style.alignItems = \"center\";\n    recordingOverlay.style.justifyContent = \"center\";\n    recordingOverlay.style.color = \"black\";\n    recordingOverlay.style.fontSize = \"14px\";\n\n    recordingOverlay.style.zIndex = \"9999\"; // Overlay on top of everything\n    const oscilloscope = document.createElement(\"div\");\n    oscilloscope.style.width = \"80%\";\n    oscilloscope.style.height = \"50px\";\n    oscilloscope.style.background = \"green\"; // Placeholder for oscilloscope\n    recordingOverlay.appendChild(oscilloscope);\n\n    const timer = document.createElement(\"span\");\n    timer.textContent = \"0:00\";\n    recordingOverlay.appendChild(timer);\n\n\n    // Record Global Bus Button\n    const recordGlobalButton = document.createElement(\"button\");\n    recordGlobalButton.textContent = \"\";\n    recordGlobalButton.innerHTML = `<i class=\"fa-duotone fa-solid fa-volume-high\"></i> Record`;\n    recordGlobalButton.title = \"Record audio from global bus\";\n    recordGlobalButton.classList.add(\"sampler-record-button\");\n\n    let recordingStartTime = 0;\n    let timerInterval = null;\n\n    // Remark: refactor this into SamplerComponent.startPadGlobalRecording()\n    recordGlobalButton.addEventListener(\"mousedown\", () => {\n        let recordingStream = this.sampler.recordGlobalBus(this.globalBus, padIndex);\n        recordingOverlay.style.display = \"flex\"; // Show the overlay\n        button.style.background = 'none';\n\n        if (this.waveform) {\n            this.waveform.remove();\n        }\n        recordingStartTime = Date.now();\n        console.log('sending recording stream to waveform', recordingStream);\n        console.log(\"sending audio context to waveform\", this.audioContext);\n\n        // Start the waveform rendering\n        this.waveform = new StreamingWaveform({\n            audioContext: this.audioContext,\n            stream: recordingStream,\n            parent: waveformContainer,\n            width: 196,\n            height: 100,\n        });\n\n        // Start timer\n        timerInterval = setInterval(() => {\n            const elapsed = Math.floor((Date.now() - recordingStartTime) / 1000);\n            const minutes = String(Math.floor(elapsed / 60)).padStart(1, \"0\");\n            const seconds = String(elapsed % 60).padStart(2, \"0\");\n            timer.textContent = `${minutes}:${seconds}`;\n        }, 1000);\n    });\n\n    // Remark: refactor this into SamplerComponent.stopPadGlobalRecording()\n    recordGlobalButton.addEventListener(\"mouseup\", () => {\n        this.sampler.stopGlobalBusRecording();\n        if (this.waveform) {\n            this.waveform.stop();\n        }\n        recordingOverlay.style.display = \"none\"; // Hide the overlay\n        clearInterval(timerInterval); // Stop the timer\n        timer.textContent = \"0:00\";\n        console.log('STOP RECORDING');\n\n    });\n    padContainer.appendChild(recordingOverlay);\n\n    // Append controls\n    // controlsContainer.appendChild(recordGlobalButton);\n    controlsContainer.appendChild(recordMicButton);\n    controlsContainer.appendChild(fileInput);\n    controlsContainer.appendChild(iconButton);\n    padContainer.appendChild(waveformContainer); // Add waveform behind\n\n\n    padContainer.appendChild(button);\n    padContainer.appendChild(controlsContainer);\n\n    return padContainer;\n}","import StreamingWaveform from \"../../ui/StreamingWaveform.js\";\n\n// File Input\nexport default function _createFileInput(button, sampler, padIndex) {\n    // Create a hidden file input element\n    const fileInput = document.createElement(\"input\");\n    fileInput.type = \"file\";\n    fileInput.accept = \"audio/*\";\n    fileInput.style.display = \"none\"; // Hide the input element\n\n    // Create a FontAwesome icon button\n    const iconButton = document.createElement(\"button\");\n    iconButton.classList.add(\"sampler-file-icon-button\", 'sampler-record-button');\n    iconButton.innerHTML = '<i class=\"fa-duotone fa-regular fa-upload\"></i>'; // FontAwesome audio file icon\n    iconButton.title = \"Load Audio Sample\";\n\n    // Event listener for the file input change\n    fileInput.addEventListener(\"change\", async (e) => {\n        const file = e.target.files[0];\n        if (file) {\n            await sampler.loadSample(file, padIndex);\n            button.textContent = file.name.split(\".\")[0]; // Update button text with file name\n\n            // get the wavecontainer by padIndex\n            let waveformContainer = this.pads[padIndex].querySelector('.sampler-waveform-container');\n            waveformContainer.innerHTML = ''; // clear the waveform container\n            // render a waveform for this sound file\n            const waveform = new StreamingWaveform({\n                buffer: this.sampler.buffers[padIndex],\n                parent: waveformContainer,\n                width: 196,\n                height: 100,\n            });\n\n\n\n        }\n    });\n\n    // Click the hidden file input when the icon is clicked\n    iconButton.addEventListener(\"click\", () => {\n        fileInput.click();\n    });\n\n    return { fileInput, iconButton };\n}","import StreamingWaveform from \"../../ui/StreamingWaveform.js\";\n\n// Create Sliced Record Button\nexport default function  _createSlicedRecordButton() {\n        const button = document.createElement(\"button\");\n        button.textContent = \"Global Sliced Record\";\n        //button.innerHTML = `Record <i class=\"fa-duotone fa-solid fa-volume-high\"></i>`;\n\n        button.innerHTML = '<i class=\"fa-duotone fa-solid fa-cassette-tape\"></i>';\n        button.style.fontSize = \"2.5rem\";\n\n        \n        button.title = \"Record audio from global output bus and slice into 8 pads\";\n        button.classList.add(\"sampler-record-button\");\n        button.style.gridColumn = \"span 4\";\n\n        let recordingStream = null;\n        let recorder = null;\n        let recordedChunks = [];\n\n        // TODO: refactor this into SamplerComponent.startGlobalRecording()\n        button.addEventListener(\"mousedown\", async () => {\n            recordedChunks = [];\n            const streamDestination = this.globalBus.audioContext.createMediaStreamDestination();\n            this.globalBus.gainNode.connect(streamDestination);\n            recordingStream = streamDestination.stream;\n\n\n            // Start the waveform rendering\n            this.waveform = new StreamingWaveform({\n                audioContext: this.globalBus.audioContext,\n                stream: recordingStream,\n                parent: this.waveformContainer,\n                width: 800,\n                height: 280,\n            });\n            this.waveformContainer.style.position = \"absolute\";\n            this.waveformContainer.style.top = \"0\";\n            this.waveformContainer.style.left = \"0\";\n            this.waveformContainer.style.zIndex = \"9999\";\n            \n\n            // TOOD: move to Sampler class\n            recorder = new MediaRecorder(recordingStream);\n            recorder.ondataavailable = (e) => recordedChunks.push(e.data);\n\n            recorder.start();\n            console.log(\"Sliced recording started...\");\n        });\n\n        // TODO: refactor this into SamplerComponent.stopGlobalRecording()\n        button.addEventListener(\"mouseup\", async () => {\n\n            if (this.waveform) {\n                this.waveform.stop();\n                console.log(\"Sliced recording stopped.\");\n                this.waveform.remove();\n            }\n            if (recorder && recorder.state === \"recording\") {\n                recorder.stop();\n\n                recorder.onstop = async () => {\n                    console.log(\"Sliced recording stopped.\");\n\n                    // Process recorded audio\n                    const blob = new Blob(recordedChunks, { type: \"audio/webm\" });\n                    const arrayBuffer = await blob.arrayBuffer();\n                    const audioBuffer = await this.audioContext.decodeAudioData(arrayBuffer);\n\n                    this._sliceAndLoadToPads(audioBuffer);\n                };\n            }\n        });\n\n        return button;\n    }\n\n","import StreamingWaveform from \"../../ui/StreamingWaveform.js\";\n\nexport default function _createLiveSlicedRecordButton() {\n    const button = document.createElement(\"button\");\n    //button.textContent = \"Mic Sliced Record\";\n    button.title = \"Record audio from microphone and slice into 8 pads\";\n    button.classList.add(\"sampler-record-button\");\n    button.style.gridColumn = \"span 4\";\n\n    button.innerHTML = `<i class=\"fa-duotone fa-solid fa-microphone-lines\"></i>`;\n    button.style.fontSize = \"2.5rem\";\n\n    let recordingStream = null;\n    let recorder = null;\n    let recordedChunks = [];\n    let mediaStreamSource = null;\n\n    // TODO: refactor this into SamplerComponent.startMicrophoneRecording()\n    button.addEventListener(\"mousedown\", async () => {\n        recordedChunks = [];\n\n        try {\n            // Request access to the microphone\n            recordingStream = await navigator.mediaDevices.getUserMedia({ audio: true });\n\n            // Connect the microphone stream to the audio context\n            mediaStreamSource = this.audioContext.createMediaStreamSource(recordingStream);\n\n            // Start the waveform rendering\n            this.waveform = new StreamingWaveform({\n                audioContext: this.audioContext,\n                stream: recordingStream,\n                parent: this.waveformContainer,\n                width: 800,\n                height: 280,\n            });\n            this.waveformContainer.style.position = \"absolute\";\n            this.waveformContainer.style.top = \"0\";\n            this.waveformContainer.style.left = \"0\";\n\n            // Setup MediaRecorder for the microphone stream\n            recorder = new MediaRecorder(recordingStream);\n            recorder.ondataavailable = (e) => recordedChunks.push(e.data);\n\n            recorder.start();\n            console.log(\"Live sliced recording started...\");\n        } catch (error) {\n            console.error(\"Microphone access denied or failed:\", error);\n        }\n    });\n\n\n    // TODO: refactor this into SamplerComponent.stopMicrophoneRecording()\n    button.addEventListener(\"mouseup\", async () => {\n        if (recorder && recorder.state === \"recording\") {\n            recorder.stop();\n\n            recorder.onstop = async () => {\n                console.log(\"Live sliced recording stopped.\");\n\n                if (this.waveform) {\n                    this.waveform.stop();\n                    this.waveform.remove();\n                }\n\n                // Stop microphone stream\n                recordingStream.getTracks().forEach(track => track.stop());\n\n                // Process recorded audio\n                const blob = new Blob(recordedChunks, { type: \"audio/webm\" });\n                const arrayBuffer = await blob.arrayBuffer();\n                const audioBuffer = await this.audioContext.decodeAudioData(arrayBuffer);\n\n                // Slice and load the audio buffer into the pads\n                this._sliceAndLoadToPads(audioBuffer);\n            };\n        }\n    });\n\n    return button;\n}\n","import StreamingWaveform from \"../../ui/StreamingWaveform.js\";\n\nexport default async function _sliceAndLoadToPads(audioBuffer) {\n    // Detect beats and retrieve beat grid\n    //let beatGrid = await detectSmallerBeats(audioBuffer);\n    let beatGrid = [];\n    console.log(\"Beat grid:\", beatGrid);\n\n    const sliceCount = 8;\n    let slicePoints = []; // To hold slice start and end times\n\n    if (beatGrid && beatGrid.beatTimes && beatGrid.beatTimes.length > 0) {\n        const beatTimes = beatGrid.beatTimes;\n\n        // Logic to determine evenly spaced beats\n        if (beatTimes.length <= sliceCount) {\n            // Use the first 8 beats or fewer\n            slicePoints = beatTimes.slice(0, sliceCount);\n        } else {\n            // Divide beats evenly into 8 slices\n            const step = Math.floor(beatTimes.length / sliceCount);\n            for (let i = 0; i < sliceCount; i++) {\n                slicePoints.push(beatTimes[i * step]);\n            }\n        }\n\n        // Ensure the first beat starts at 0\n        if (slicePoints[0] !== 0) slicePoints.unshift(0);\n\n        // Adjust to ensure exactly 8 slices\n        while (slicePoints.length > sliceCount) {\n            slicePoints.pop();\n        }\n        while (slicePoints.length < sliceCount) {\n            slicePoints.push(audioBuffer.duration); // Fill remaining slices\n        }\n\n        console.log(\"Adjusted slice points based on beats:\", slicePoints);\n    } else {\n        // Fallback to uniform slices if beat grid fails\n        const sliceDuration = audioBuffer.duration / sliceCount;\n        for (let i = 0; i < sliceCount; i++) {\n            slicePoints.push(i * sliceDuration);\n        }\n        slicePoints.push(audioBuffer.duration);\n    }\n\n    // Perform slicing and waveform rendering\n    for (let i = 0; i < sliceCount; i++) {\n        const start = slicePoints[i];\n        const end = slicePoints[i + 1] || audioBuffer.duration;\n\n        // Render waveform behind the pad button\n        const padContainer = this.pads[i]; // Access the pad container\n        const waveformContainer = padContainer.querySelector(\".sampler-waveform-container\");\n\n        // Slice the audio buffer\n        const slicedBuffer = this._sliceAudioBuffer(audioBuffer, start, end);\n        this.sampler.buffers[i] = slicedBuffer;\n\n        // get the pad button associated with sampler i and remove its innerText\n        const button = padContainer.querySelector(\".sampler-pad-button\");\n        button.innerText = \"\";\n\n        waveformContainer.innerHTML = \"\";\n\n        // Clear any existing waveform\n        waveformContainer.innerHTML = \"\";\n        new StreamingWaveform({\n            audioContext: this.audioContext,\n            buffer: slicedBuffer,\n            parent: waveformContainer,\n            width: 196,\n            height: 100,\n        });\n\n        console.log(`Loaded slice ${i + 1} from ${start.toFixed(2)}s to ${end.toFixed(2)}s`);\n    }\n}\n","\n    // Slice an AudioBuffer between start and end times\nexport default  function  _sliceAudioBuffer(audioBuffer, start, end) {\n        const sampleRate = audioBuffer.sampleRate;\n        const startSample = Math.floor(start * sampleRate);\n        const endSample = Math.floor(end * sampleRate);\n\n        const slicedBuffer = this.audioContext.createBuffer(\n            audioBuffer.numberOfChannels,\n            endSample - startSample,\n            sampleRate\n        );\n\n        for (let channel = 0; channel < audioBuffer.numberOfChannels; channel++) {\n            const originalData = audioBuffer.getChannelData(channel);\n            const slicedData = slicedBuffer.getChannelData(channel);\n\n            for (let i = 0; i < slicedData.length; i++) {\n                slicedData[i] = originalData[startSample + i];\n            }\n        }\n\n        return slicedBuffer;\n    }\n\n","import SamplerPadComponent from './SamplerPadComponent.js';\n\nexport default class Sampler {\n    constructor(bp, options = {}) {\n        this.bp = bp;\n\n        if (typeof options.window !== 'boolean') {\n            options.window = true;\n        }\n        this.options = options;\n        return this;\n    }\n\n    async init() {\n        this.bp.log('Hello from Example');\n\n        await this.bp.load('/v5/apps/based/sampler/sampler.css');\n\n        return 'loaded Example';\n    }\n\n    async open(options = {}) {\n\n        if (!this.samplerHolder) {\n\n            // TODO: better options for rendering apps with windows\n            if (this.options.window && this.bp.apps.ui && this.bp.apps.ui.windowManager) {\n                let samplerWindow = this.bp.apps.ui.windowManager.createWindow({\n                    id: 'sampler-0',\n                    title: 'Sampler',\n                    x: 50,\n                    y: 100,\n                    width: 1000,\n                    height: 460,\n                    minWidth: 600,\n                    minHeight: 500,\n                    className: 'sampler-window',\n                    parent: $('#desktop')[0],\n                    icon: '/desktop/assets/images/icons/icon_midifighter_64.png',\n                    resizable: true,\n                    minimizable: true,\n                    maximizable: true,\n                    closable: true,\n                    focusable: true,\n                    maximized: false,\n                    minimized: false,\n                    onClose: () => {\n                        this.samplerHolder = null;\n                    }\n                });\n                this.samplerHolder = samplerWindow.content;\n            } else {\n                this.samplerHolder = document.createElement('div');\n                this.samplerHolder.className = 'sampler-window';\n                document.body.appendChild(samplerHolder);\n            }\n\n            let samplerPadComponent = new SamplerPadComponent(new AudioContext(), {\n                audioContext: new AudioContext(),\n            }, {\n                fetch: window.fetch.bind(window), // TODO: use the fetch from the bp\n                defaultSounds: [\n                    'dj-horn.mp3',\n                    'dang-son.mp3',\n                    `helicopter-helicopter.mp3`,\n                    `yooo.mp3`,\n                    'celebrate.mp3',\n                    'flawless-victory.wav',\n                ]\n            });\n            this.samplerHolder.appendChild(samplerPadComponent.container);\n            samplerPadComponent.adjustVolume(0.5);\n            samplerPadComponent.showPianoRoll.click();\n\n        }\n\n    }\n}"],"names":["SamplerPadEffect","constructor","audioContext","globalBus","this","context","buffers","Array","fill","recorder","recordedChunks","activeSources","Map","pitchStates","gainNode","createGain","mode","reversePlayback","addTrack","connect","destination","unload","clear","loadSample","file","padIndex","arrayBuffer","audioBuffer","decodeAudioData","reverseBuffer","recordMicrophone","stream","navigator","mediaDevices","getUserMedia","audio","resolveBuffer","MediaRecorder","bufferPromise","Promise","resolve","ondataavailable","e","push","data","onstop","async","blob","Blob","type","start","stopMicrophoneRecording","state","stop","recordGlobalBus","streamDestination","createMediaStreamDestination","stopGlobalBusRecording","playSampleAtPitch","pitchRatio","source","createBufferSource","buffer","playbackRate","value","set","setReverse","reverse","originalFile","numChannels","numberOfChannels","reversedBuffer","createBuffer","length","sampleRate","channel","channelData","getChannelData","reversedData","i","setMode","playSample","press","existingSource","get","loop","stopSample","console","log","delete","handlePadPress","handlePadRelease","stopAllRecordings","stopAllSamples","forEach","setModWheel","amplifiedValue","entries","pitchBendRatio","Math","pow","adjustVolume","normalizedValue","max","min","gain","setValueAtTime","currentTime","PianoRoll","notes","onKeyPlay","onModWheelChange","baseNotes","_defaultNotes","currentOctave","keyCount","isMouseDown","container","_createPianoRollContainer","_addEventListeners","_render","name","ratio","document","createElement","classList","add","controls","minusButton","textContent","addEventListener","_shiftOctave","plusButton","octaveIndicator","appendChild","modWheelContainer","modWheelLabel","modWheel","_handleModWheelChange","target","_resetModWheel","pianoContainer","innerHTML","centerIndex","floor","baseNote","octaveOffset","note","index","keyButton","includes","style","display","justifyContent","alignItems","paddingBottom","dataset","_playKey","direction","interval","setInterval","currentValue","parseFloat","clearInterval","StreamingWaveform","parent","width","height","canvas","ctx","getContext","isDrawing","currentX","analyser","_setupStream","_drawBuffer","playHeadPosition","createAnalyser","fftSize","createMediaStreamSource","bufferLength","frequencyBinCount","dataArray","Uint8Array","_startDrawing","draw","requestAnimationFrame","getByteTimeDomainData","imageData","getImageData","putImageData","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","sliceHeight","y","x","moveTo","lineTo","stroke","setPlayHeadPosition","position","_redrawBufferWithPlayhead","rawData","totalSamples","samplesPerPixel","ceil","renderFinalBuffer","targetWidth","clientWidth","end","yMin","yMax","_drawPlayhead","playheadX","remove","clearRect","SliderComponent","track","trackId","config","options","className","thumbClassName","labelClassName","orientation","trackColor","thumbColor","trackWidth","trackHeight","thumbWidth","thumbHeight","showLabel","showScale","showCenterLine","centerLineColor","centerLineLength","scaleLineLength","centerLineWidth","centerLineSpacing","progressBarColor","progressBarSize","minValue","maxValue","step","defaultValue","onDoubleClick","setValue","onClick","onChange","val","formatLabel","toFixed","bind","trackLength","parseInt","sliderContainer","background","borderRadius","centerLine","left","top","createLine","line","opacity","center","spacing","offset","showProgress","progressBar","zIndex","sliderThumb","cursor","title","sliderThumbStyles","Object","keys","key","initialPosition","sliderLabel","transform","isDragging","getValue","_onChange","touches","prototype","rect","getBoundingClientRect","scaledWidth","scaledHeight","clientY","volume","updateProgressBar","updateLabel","clientX","propigate","clampedValue","range","tr808","SamplerPadComponent","sampler","fetch","window","defaultSounds","topSection","buttonGrid","gridTemplateColumns","gap","padding","volumeContainer","that","samplerSliderVolume","sliderComponent","volumeSlider","append","sliceRecordContainer","liveSlicedRecordButton","_createLiveSlicedRecordButton","stopAllButton","fontSize","showPianoRoll","controlsContainer","pads","_loadDefaultSound","padContainer","_createPad","pianoRoll","lastPlayedPad","sampleBanks","id","samples","disabled","pianoControls","querySelector","sampleBankSelectContainer","sampleBankSelect","sampleBank","option","text","selectedValue","find","bank","querySelectorAll","pad","insertBefore","lastElementChild","waveformContainer","waveform","packId","url","response","split","pop","soundFile","button","border","color","fileInput","click","label","fileName","iconButton","_createFileInput","recordMicButton","recordingOverlay","recordingStartTime","Date","now","timerInterval","elapsed","minutes","String","padStart","seconds","milliseconds","timer","_recordingBufferPromise","finalDecodedAudioBuffer","padPlaybackSelector","opt","flexDirection","oscilloscope","recordGlobalButton","recordingStream","accept","files","_createSlicedRecordButton","gridColumn","_sliceAndLoadToPads","mediaStreamSource","error","getTracks","beatGrid","slicePoints","beatTimes","slice","unshift","duration","sliceDuration","slicedBuffer","_sliceAudioBuffer","innerText","startSample","endSample","originalData","slicedData","Sampler","bp","init","load","open","samplerHolder","apps","ui","windowManager","samplerWindow","createWindow","minWidth","minHeight","$","icon","resizable","minimizable","maximizable","closable","focusable","maximized","minimized","onClose","content","body","samplerPadComponent","AudioContext"],"mappings":"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"}