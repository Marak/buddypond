{"version":3,"file":"ramblor.js","sources":["../../../apps/based/ramblor/RamblorClass.js","../../../apps/based/ramblor/ramblor.js"],"sourcesContent":["export default class Ramblor {\n    constructor(options = {}) {\n        // console.log('New Ramblor instance created with options:', options);\n        this.algo = options.algo || 'default';\n        this.history = [];\n        this.userSeed = [];\n        this.systemSeed = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    }\n\n    seed(...seeds) {\n        this.userSeed = seeds.flat().map(seed => seed.toString());\n    }\n\n    roll(min, max) {\n        if (typeof min !== 'number' || typeof max !== 'number') {\n            throw new Error('Min and max must be numbers');\n        }\n        if (min > max) {\n            throw new Error('Min cannot be greater than max');\n        }\n\n        const seedString = this.userSeed.join('|') + '|' + this.systemSeed;\n        const randomValue = this.simpleHash(seedString);\n        \n        // Ensure positive value and proper distribution\n        const positiveValue = Math.abs(randomValue);\n        const range = max - min + 1;\n        const result = min + (positiveValue % range);\n\n        const roll = {\n            generation: this.history.length + 1,\n            min: min,\n            max: max,\n            value: result,\n            userSeeds: this.userSeed.slice(),\n            systemSeed: this.systemSeed\n        };\n\n        this.history.push(roll);\n        return roll;\n    }\n\n    toss() {\n        const result = this.roll(0, 1);\n        // Repurpose the result object for toss specifics\n        return {\n            ...result,\n            label: result.value === 1 ? 'heads' : 'tails',  // Return 'heads' or 'tails' instead of 0 or 1\n            value: result.value  // Return 'heads' or 'tails' instead of 0 or 1\n        };\n    }\n    \n    pick(array) {\n        if (!Array.isArray(array) || array.length === 0) {\n            throw new Error('Pick requires a non-empty array');\n        }\n        const result = this.roll(0, array.length - 1);\n        return {\n            ...result,\n            item: array[result.value],  // Include the selected item in the result\n            index: result.value         // Include the index as a specific attribute\n        };\n    }\n    \n\n    getHistory(index = null) {\n        if (index === null) return this.history;\n        if (index < 0) {\n            const actualIndex = this.history.length + index;\n            return actualIndex >= 0 ? this.history[actualIndex] : null;\n        }\n        return this.history[index];\n    }\n\n    prove(roll) {\n        if (!roll || typeof roll !== 'object') {\n            return false;\n        }\n\n        const seedString = roll.userSeeds.join('|') + '|' + roll.systemSeed;\n        const randomValue = this.simpleHash(seedString);\n        const positiveValue = Math.abs(randomValue);\n        const range = roll.max - roll.min + 1;\n        console.log('proving roll', roll, 'positiveValue', positiveValue, 'range', range);\n        const expectedResult = roll.min + (positiveValue % range);\n        console.log('expectedResult', expectedResult, 'actualResult', roll.value);\n        let result = (expectedResult === roll.value);\n        console.log('result', result)\n        return result;\n    }\n\n    simpleHash(input) {\n        let hash = 0;\n        for (let i = 0; i < input.length; i++) {\n            const char = input.charCodeAt(i);\n            hash = ((hash << 5) - hash + char) | 0;\n        }\n        return hash;\n    }\n}","import RamblorClass from './RamblorClass.js';\n\nexport default class Ramblor {\n    constructor(bp, options = {}) {\n        this.bp = bp;\n        this.options = options;\n        this.ramblor = new RamblorClass();\n        return this;\n    }\n\n    async init() {\n        this.bp.log('Hello from Ramblor');\n\n        // Load HTML fragment\n        this.html = await this.bp.load('/v5/apps/based/ramblor/ramblor.html');\n\n        await this.bp.appendCSS('/v5/apps/based/ramblor/ramblor.css');\n\n      \n\n        return 'loaded Ramblor';\n    }\n\n    async open(options = {}) {\n\n          if (!this.ramblorWindow) {\n            // Create window\n            this.ramblorWindow = this.bp.apps.ui.windowManager.createWindow({\n                id: 'ramblow',\n                title: 'Ramblor',\n                x: 50,\n                y: 100,\n                width: 400,\n                height: 460,\n                parent: $('#desktop')[0],\n                onClose: () => {\n                    this.ramblorWindow = null; // Clear reference on close\n                },\n                content: this.html,\n                resizable: true,\n                minimizable: true,\n                maximizable: true,\n                closable: true,\n                focusable: true,\n                maximized: false,\n                minimized: false\n            });\n\n            // Get DOM elements\n            const $window = $(this.ramblorWindow.content);\n            const $form = $window.find('.ramblor-verify-form');\n            const $resultText = $window.find('.ramblor-result-text');\n\n            // Handle form submission\n            $form.on('submit', (e) => {\n                e.preventDefault();\n                const rollData = {\n                    generation: parseInt($form.find('#ramblor-gen').val(), 10),\n                    min: parseInt($form.find('#ramblor-min').val(), 10),\n                    max: parseInt($form.find('#ramblor-max').val(), 10),\n                    value: parseInt($form.find('#ramblor-value').val(), 10),\n                    userSeeds: JSON.parse($form.find('#ramblor-user-seeds').val() || '[]'),\n                    systemSeed: parseInt($form.find('#ramblor-system-seed').val(), 10)\n                };\n\n                const isValid = this.ramblor.prove(rollData);\n                $resultText.text(isValid ? 'Roll is valid!' : 'Roll is invalid.').css('color', isValid ? '#20C997' : '#DC3545');\n            });\n\n            // add event that if any inputs change, reroll the verification\n            $form.find('input').on('input', () => {\n                const rollData = {\n                    generation: parseInt($form.find('#ramblor-gen').val(), 10),\n                    min: parseInt($form.find('#ramblor-min').val(), 10),\n                    max: parseInt($form.find('#ramblor-max').val(), 10),\n                    value: parseInt($form.find('#ramblor-value').val(), 10),\n                    userSeeds: JSON.parse($form.find('#ramblor-user-seeds').val() || '[]'),\n                    systemSeed: parseInt($form.find('#ramblor-system-seed').val(), 10)\n                };\n                console.log('proving rollData:', rollData);\n                const isValid = this.ramblor.prove(rollData);\n                $resultText.text(isValid ? 'Roll is valid!' : 'Roll is invalid.').css('color', isValid ? '#20C997' : '#DC3545');\n            });\n        }\n\n        const $window = $(this.ramblorWindow.content);\n        const $form = $window.find('.ramblor-verify-form');\n        const $resultText = $window.find('.ramblor-result-text');\n        console.log('Opening Ramblor with options:', options);\n        // Pre-fill form if roll data is provided\n        const roll = options.roll || {};\n        console.log('Roll data:', roll);\n        if (roll.generation) {\n            $window.find('#ramblor-gen').val(roll.generation);\n            $window.find('#ramblor-min').val(roll.min);\n            $window.find('#ramblor-max').val(roll.max);\n            $window.find('#ramblor-value').val(roll.value);\n            $window.find('#ramblor-user-seeds').val(JSON.stringify(roll.userSeeds || []));\n            $window.find('#ramblor-system-seed').val(roll.systemSeed);\n\n            // Auto-run verification\n            const isValid = this.ramblor.prove(roll);\n            $resultText.text(isValid ? 'Roll is valid!' : 'Roll is invalid.').css('color', isValid ? '#20C997' : '#DC3545');\n        }\n        return this.ramblorWindow;\n\n    }\n\n\n}\n\nlet ramblorEndpoint = 'https://ramblor.buddypond.com/api/v6/';\nramblorEndpoint = 'https://localhost:8888/api/v6';\n/* TODO: we have a separate rolling service that exists at ramblor.buddypond.com\n         currently not being used as the messages services directly calls the RamblorClass\nthis.bp.apps.client.api.roll = async (max = 6) => {\n    // match api request to ramblor.buddypond.com/api/v6/roll\n    let response = await fetch(`${ramblorEndpoint}roll?max=` + max, {\n        method: 'POST',\n        headers: { \n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json; charset=utf-8\"\n        },\n        body: JSON.stringify({ from: 'Ramblor', to: 'Marak', type: 'buddy' })   \n    });\n    console.log('response:', response);\n}\n*/\n"],"names":["Ramblor$1","constructor","options","this","algo","history","userSeed","systemSeed","Math","floor","random","Number","MAX_SAFE_INTEGER","seed","seeds","flat","map","toString","roll","min","max","Error","seedString","join","randomValue","simpleHash","result","abs","generation","length","value","userSeeds","slice","push","toss","label","pick","array","Array","isArray","item","index","getHistory","actualIndex","prove","positiveValue","range","console","log","expectedResult","input","hash","i","charCodeAt","Ramblor","bp","ramblor","RamblorClass","init","html","load","appendCSS","open","ramblorWindow","apps","ui","windowManager","createWindow","id","title","x","y","width","height","parent","$","onClose","content","resizable","minimizable","maximizable","closable","focusable","maximized","minimized","$window","$form","find","$resultText","on","e","preventDefault","rollData","parseInt","val","JSON","parse","isValid","text","css","stringify"],"mappings":"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"}