async function e(){let e=[{username:"alice",ip:"192.168.1.1",time:"2025-05-11 10:00:00"},{username:"bob",ip:"192.168.1.2",time:"2025-05-11 09:30:00"}];e=await this.client.apiRequest("/super-admin/recent-logins","GET");const n=document.querySelector("#recent-logins-table tbody");n.innerHTML="",e.forEach((e=>{const t=document.createElement("tr");let a="",o=[];try{e.knownIps&&(o=JSON.parse(e.knownIps))}catch(e){console.error("Error parsing knownIPs",e)}o.forEach((e=>{a+=`<a href="https://iplocation.io/ip/${e}" target="_blank">${e}</a>`})),t.innerHTML=`\n            <td><span class="admin-username-link" data-username="${e.buddyname}">${e.buddyname}</span></td>\n            <td><a href="https://iplocation.io/ip/${e.lastKnownIP}" target="_blank">${e.lastKnownIP}</a></td>\n            <td>${e.utime}</td>\n            <td>${a}</td>\n        `,n.appendChild(t)}))}async function n(e){console.log("userByIp",e);let n={"192.168.1.1":[{username:"alice",ip:"192.168.1.1"}],"192.168.1.2":[{username:"bob",ip:"192.168.1.2"}]};n=await this.client.apiRequest(`/super-admin/user-by-ip?ip=${e}`,"GET"),console.log("userByIp userByIpData",n);const t=document.querySelector("#user-by-ip-table tbody");t.innerHTML="",n.forEach((e=>{const n=document.createElement("tr");n.innerHTML=`\n            <td><span class="admin-username-link" data-username="${e.buddyname}">${e.buddyname}</span></td>\n            <td>${e.lastKnownIP}</td>\n            <td>${e.knownIps}</td>\n        `,t.appendChild(n)}))}async function t(e){let n=await this.client.apiRequest(`/super-admin/buddy-profile?buddyname=${e}`,"GET"),t=n.database,a=n.durableObject,o=n.curses;const i=document.querySelector("#profile-display-database");i.textContent=t?JSON.stringify(t,null,2):"No database profile found";const r=document.querySelector("#profile-display-durable");r.textContent=a?JSON.stringify(a,null,2):"No durable object cachedProfile found";const s=document.querySelector("#profile-display-curses");o&&o.length>0?s.textContent=JSON.stringify(o,null,2):s.textContent="No curses found"}async function a(){let e=await this.client.apiRequest("/super-admin/ban-list","GET");console.log("banList",e);const n=document.querySelector("#admin-banlist tbody");n.innerHTML="",e.forEach((e=>{let t=[];e.curses&&(t=JSON.parse(e.curses));let a=t.map((n=>{console.log("cursecursecurse",n);let t=n.type;return`<button class="admin-remove-ban-link" data-username="${e.buddyname}" data-curse="${t}">${t}</button>`}));console.log("curseButtons",a);const o=document.createElement("tr");o.innerHTML=`\n            <td><span class="admin-username-link" data-username="${e.buddyname}">${e.buddyname}</span></td>\n            <td>${e.ip}</td>\n            <td>${e.curses}</td>\n            <td>${new Date(e.utime).toLocaleString()}</td>\n            <td>${a.join(" ")}</td>\n        `,n.appendChild(o)}))}async function o(e,n,t=60){let a=await this.client.apiRequest("/super-admin/ban-buddy","POST",{buddyname:e,type:n,duration:t,reason:"Inappropriate behavior"});if(a.error)return $(".api-response","#admin-buddyProfile").html(bankResponse.error),void console.error("Error banning buddy:",a.error);$(".api-response","#admin-buddyProfile").html(a.message),this.tabs.showTab("#admin-banlist"),console.log("banResponse",a)}async function i(e,n){console.log("unbanUserbanBuddy",e,n);let t=await this.client.apiRequest("/super-admin/unban-buddy","POST",{buddyname:e,type:n});if(console.log("unbanResponse",t),t.error)return $(".api-response","#admin-banlist").html(t.error),void console.error("Error banning buddy:",t.error);$(".api-response","#admin-banlist").html(t.message),this.tabs.showTab("#admin-banlist"),console.log("unbanResponse",t)}async function r(e){console.log("destroyBuddy",e);let n=await this.client.apiRequest("/super-admin/destroy-buddy","POST",{buddyname:e});console.log("removeResponse",n),n.error?console.error("Error banning buddy:",n.error):(this.tabs.showTab("#admin-buddyProfile"),console.log("removeResponse",n))}async function s(e,n){console.log("addAdmin called with buddyname:",e,"and ip:",n);let t=await this.client.apiRequest("/super-admin/add-admin","POST",{buddyname:e,ip:n});if(t.error)return $(".api-response","#admin-add-admin").html(t.error),void console.error("Error banning buddy:",t.error);$(".api-response","#admin-add-admie").html(t.message),this.tabs.showTab("#admin-add-admin"),console.log("addAdminResponse",t)}async function l(e,n){console.log("listAdmins called with buddyname:",e,"and ip:",n);let t=await this.client.apiRequest("/super-admin/admin-list","GET");if(t.error)return $(".api-response","#admin-add-admin").html(t.error),void console.error("Error banning buddy:",t.error);$(".api-response","#admin-add-admin").html(t.message),console.log("listAdminsResponse",t),$("#admin-list-table").html(""),t&&t.length>0?t.forEach((e=>{$("#admin-list-table").append(`\n                <tr>\n                    <td>${e.buddyname}</td>\n                    <td>${e.ip}</td>\n                    <td>${e.role}</td>\n                    <td>${e.ctime}</td>\n                    <td><button class="remove-admin">Remove Admin</button></td>\n\n                </tr>\n            `)})):$("#admin-list-table").append('\n            <tr>\n                <td colspan="3">No admins found</td>\n            </tr>\n        ')}async function d(){console.log("listRules called");let e=(await this.client.apiRequest("/super-admin/ip-ban","GET")).rules||[];console.log("rules",e);let n=document.querySelector("#firewall-rules-table");n.innerHTML="";let t=n.insertRow();if(["#","IP Address","Created On","Actions"].forEach((e=>{let n=document.createElement("th");n.textContent=e,t.appendChild(n)})),e.forEach(((e,t)=>{let a=n.insertRow(),o=e.filter?.expression?.match(/\((ip\.src eq )([^\)]+)\)/),i=o?o[2]:"Unknown";a.insertCell(0).textContent=t+1,a.insertCell(1).textContent=i,a.insertCell(2).textContent=new Date(e.created_on).toLocaleString();let r=a.insertCell(3),s=document.createElement("button");s.textContent="Delete",s.className="delete-rule-button",s.addEventListener("click",(async()=>{confirm(`Are you sure you want to delete rule for IP ${i}?`)&&(await this.client.apiRequest(`/super-admin/ip-ban/${e.id}`,"DELETE"),d.call(this))})),r.appendChild(s)})),0===e.length){let e=n.insertRow().insertCell(0);e.colSpan=4,e.textContent="No firewall rules found."}console.log("Firewall rules listed:",e)}async function c(e="147.81.46.172"){try{await this.client.apiRequest("/super-admin/ip-ban","POST",{ip:e})}catch(e){throw $("#admin-firewall .api-response").text("Error adding firewall rule: "+e.message),console.error("Error adding firewall rule:",e),e}d.call(this)}const u={};u.endpoint=buddypond.adminEndpoint,u.apiRequest=async(e,n="GET",t=null)=>{const a={method:n};let o={Accept:"application/json","Content-Type":"application/json; charset=utf-8","X-Me":buddypond.me};buddypond.qtokenid&&(o.Authorization=`Bearer ${buddypond.qtokenid}`),t&&(a.body=JSON.stringify(t)),a.headers=o;let i=`${u.endpoint}${e}`;console.log("admin client making api request",i,a);try{const e=await fetch(i,a);if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);return await e.json()}catch(e){throw console.error("Error in API request:",e),e}};class m{constructor(e,n={}){return this.bp=e,this.icon="desktop/assets/images/icons/icon_admin_64.png",this}async init(){return console.log("admin is: under construction"),this.html=await this.bp.load("/v5/apps/based/admin/admin.html"),await this.bp.load("/v5/apps/based/admin/admin.css"),"loaded admin window"}async open(e={}){return this.adminWindow||(this.adminWindow=this.bp.apps.ui.windowManager.createWindow({id:"admin",title:"Admin",icon:this.icon,x:250,y:75,width:800,height:400,minWidth:200,minHeight:200,parent:$("#desktop")[0],resizable:!0,minimizable:!0,maximizable:!0,closable:!0,focusable:!0,maximized:!1,minimized:!1,onClose:()=>{this.adminWindow=null}}),this.adminWindow.loggedIn=!0),"default"===e.context&&(e.context="admin"),await this.render(this.adminWindow),this.eventBind(this.adminWindow),this.adminWindow}resetAllPondCounts(){let e=buddypond.messagesApiEndpoint+"/reset-hotpond-counts";console.log("Resetting all pond counts at:",e),fetch(e,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.bp.qtokenid}`,"x-me":this.bp.me}}).then((e=>{if(!e.ok)throw new Error("Failed to reset pond counts");console.log("All pond counts reset successfully")})).catch((e=>{console.error("Error resetting pond counts:",e)}))}}m.prototype.render=function(e){$(e.content).html(this.html)},m.prototype.eventBind=function(u){this.tabs=new this.bp.apps.ui.Tabs(".tabs-container",u.content),this.tabs.onTab((o=>{switch(console.log("tabId",o),o){case"#admin-recent-logins":console.log("admin-recent-logins"),e.call(this);break;case"#admin-userbyIP":console.log("admin-userbyIP"),document.querySelector("#ip-input").value="",n.call(this,"192.168.200.59");break;case"#admin-buddyProfile":console.log("admin-buddyProfile");let i=document.querySelector("#profile-input").value.trim();t.call(this,i);break;case"#admin-banlist":console.log("admin-banlist"),a.call(this);break;case"#admin-add-admin":console.log("admin-add-admin"),document.querySelector("#admin-username").value.trim(),document.querySelector("#admin-ip").value.trim(),l.call(this);case"#admin-firewall":console.log("admin-firewall"),d.call(this);break;default:console.warn("Unknown tabId:",o)}})),this.tabs.navigateToTab("#admin-recent-logins"),document.querySelector("#ip-search-button").addEventListener("click",(()=>{const e=document.querySelector("#ip-input").value.trim();e&&n.call(this,e)})),document.querySelector("#add-admin-button").addEventListener("click",(()=>{let e=document.querySelector("#admin-username").value.trim(),n=document.querySelector("#admin-ip").value.trim();e?e&&s.call(this,e,n):alert("No buddyname provided")})),document.querySelector("#ip-ban-button").addEventListener("click",(()=>{let e=document.querySelector("#profile-input").value.trim(),n=document.querySelector("#ban-type").value,t=document.querySelector("#ban-length").value;e?e&&o.call(this,e,n,t):alert("No buddyname provided")})),document.querySelector("#profile-search-button").addEventListener("click",(()=>{const e=document.querySelector("#profile-input").value.trim();e&&t.call(this,e)})),document.querySelector("#recent-logins-table").addEventListener("click",(e=>{const n=e.target.closest(".admin-username-link");if(n){const e=n.dataset.username;document.querySelector("#profile-input").value=e,this.tabs.navigateToTab("#admin-buddyProfile"),t.call(this,e)}})),document.querySelector("#user-by-ip-table").addEventListener("click",(e=>{const n=e.target.closest(".admin-username-link");if(n){const e=n.dataset.username;document.querySelector("#profile-input").value=e,this.tabs.navigateToTab("#admin-buddyProfile"),t.call(this,e)}})),document.querySelector("#admin-banlist").addEventListener("click",(e=>{const n=e.target.closest(".admin-username-link");if(n){const e=n.dataset.username;document.querySelector("#profile-input").value=e,this.tabs.navigateToTab("#admin-buddyProfile"),t.call(this,e)}})),document.querySelector("#admin-banlist").addEventListener("click",(e=>{const n=e.target.closest(".admin-remove-ban-link");if(n){console.log("unbanButtonunbanButtonunbanButtonunbanButton",n);const e=n.dataset.username,t=n.dataset.curse;i.call(this,e,t)}})),document.querySelector("#delete-buddy-button").addEventListener("click",(()=>{if(!confirm("Are you sure you want to delete this buddy?"))return;let e=document.querySelector("#profile-input").value.trim();e?e&&r.call(this,e):alert("No buddyname provided")})),$("#login-as-user-button").on("click",(async()=>{let e=$("#super-admin-token").val().trim(),n=$("#profile-input").val().trim();if(e){console.log("Logging in as user with token:",n,e);try{let t=await fetch(buddypond.endpoint+"/auth",{method:"POST",body:JSON.stringify({buddyname:n}),headers:{"Content-Type":"application/json","x-admin-token":e}}),a=await t.json();a.success?(alert("Logged in as user successfully"),localStorage.setItem("qtokenid",a.qtokenid),localStorage.setItem("me",n),window.location.reload()):alert("Failed to log in as user: "+a.message)}catch(e){console.error("Error logging in as user:",e),alert("Error logging in as user: "+e.message)}}else alert("No token provided")})),$("#firewall-rule-form").on("submit",(async e=>{e.preventDefault();let n=$("#firewall-rule-action").val(),t=$("#firewall-rule-ip").val().trim();console.log("Adding firewall rule:",n,t),t?await c.call(this,t):alert("No IP address provided")}))},m.prototype.client=u;export{m as default};
//# sourceMappingURL=admin.js.map
