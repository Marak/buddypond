async function e(){let e=[{username:"alice",ip:"192.168.1.1",time:"2025-05-11 10:00:00"},{username:"bob",ip:"192.168.1.2",time:"2025-05-11 09:30:00"}];e=await this.client.apiRequest("/super-admin/recent-logins","GET");const t=document.querySelector("#recent-logins-table tbody");t.innerHTML="",e.forEach((e=>{const n=document.createElement("tr");let o="",a=[];try{e.knownIps&&(a=JSON.parse(e.knownIps))}catch(e){console.error("Error parsing knownIPs",e)}a.forEach((e=>{o+=`<a href="https://iplocation.io/ip/${e}" target="_blank">${e}</a>`})),n.innerHTML=`\n            <td><span class="admin-username-link" data-username="${e.buddyname}">${e.buddyname}</span></td>\n            <td><a href="https://iplocation.io/ip/${e.lastKnownIP}" target="_blank">${e.lastKnownIP}</a></td>\n            <td>${e.utime}</td>\n            <td>${o}</td>\n        `,t.appendChild(n)}))}async function t(e){console.log("userByIp",e);let t={"192.168.1.1":[{username:"alice",ip:"192.168.1.1"}],"192.168.1.2":[{username:"bob",ip:"192.168.1.2"}]};t=await this.client.apiRequest(`/super-admin/user-by-ip?ip=${e}`,"GET"),console.log("userByIp userByIpData",t);const n=document.querySelector("#user-by-ip-table tbody");n.innerHTML="",t.forEach((e=>{const t=document.createElement("tr");t.innerHTML=`\n            <td><span class="admin-username-link" data-username="${e.buddyname}">${e.buddyname}</span></td>\n            <td>${e.lastKnownIP}</td>\n            <td>${e.knownIps}</td>\n        `,n.appendChild(t)}))}async function n(e){if(!e)return void console.log("Buddy name is required");let t=await this.client.apiRequest(`/super-admin/buddy-profile?buddyname=${e}`,"GET"),n=t.database,o=t.durableObject,a=t.curses;const i=document.querySelector("#profile-display-database");i.textContent=n?JSON.stringify(n,null,2):"No database profile found";const r=document.querySelector("#profile-display-durable");r.textContent=o?JSON.stringify(o,null,2):"No durable object cachedProfile found";const s=document.querySelector("#profile-display-curses");a&&a.length>0?s.textContent=JSON.stringify(a,null,2):s.textContent="No curses found"}async function o(){let e=await this.client.apiRequest("/super-admin/ban-list","GET");console.log("banList",e);const t=document.querySelector("#admin-banlist tbody");t.innerHTML="",e.forEach((e=>{let n=[];e.curses&&(n=JSON.parse(e.curses));let o=n.map((t=>{console.log("cursecursecurse",t);let n=t.type;return`<button class="admin-remove-ban-link" data-username="${e.buddyname}" data-curse="${n}">${n}</button>`}));console.log("curseButtons",o);const a=document.createElement("tr");a.innerHTML=`\n            <td><span class="admin-username-link" data-username="${e.buddyname}">${e.buddyname}</span></td>\n            <td>${e.ip}</td>\n            <td>${e.curses}</td>\n            <td>${new Date(e.utime).toLocaleString()}</td>\n            <td>${o.join(" ")}</td>\n        `,t.appendChild(a)}))}async function a(e,t,n=60){let o=await this.client.apiRequest("/super-admin/ban-buddy","POST",{buddyname:e,type:t,duration:n,reason:"Inappropriate behavior"});if(o.error)return $(".api-response","#admin-buddyProfile").html(bankResponse.error),void console.error("Error banning buddy:",o.error);$(".api-response","#admin-buddyProfile").html(o.message),this.tabs.showTab("#admin-banlist"),console.log("banResponse",o)}async function i(e,t){console.log("unbanUserbanBuddy",e,t);let n=await this.client.apiRequest("/super-admin/unban-buddy","POST",{buddyname:e,type:t});if(console.log("unbanResponse",n),n.error)return $(".api-response","#admin-banlist").html(n.error),void console.error("Error banning buddy:",n.error);$(".api-response","#admin-banlist").html(n.message),this.tabs.showTab("#admin-banlist"),console.log("unbanResponse",n)}async function r(e){console.log("destroyBuddy",e);let t=await this.client.apiRequest("/super-admin/destroy-buddy","POST",{buddyname:e});console.log("removeResponse",t),t.error?console.error("Error banning buddy:",t.error):(this.tabs.showTab("#admin-buddyProfile"),console.log("removeResponse",t))}async function s(e,t){console.log("resetPassword",e);let n=await this.client.apiRequest("/super-admin/reset-password","POST",{buddyname:e,newPassword:t||e});console.log("resetResponse",n),n.error?console.error("Error resetting buddy password:",n.error):(this.tabs.showTab("#admin-buddyProfile"),console.log("resetResponse",n))}async function l(e,t){console.log("addAdmin called with buddyname:",e,"and ip:",t);let n=await this.client.apiRequest("/super-admin/add-admin","POST",{buddyname:e,ip:t});if(n.error)return $(".api-response","#admin-add-admin").html(n.error),void console.error("Error banning buddy:",n.error);$(".api-response","#admin-add-admie").html(n.message),this.tabs.showTab("#admin-add-admin"),console.log("addAdminResponse",n)}async function d(e,t){console.log("listAdmins called with buddyname:",e,"and ip:",t);let n=await this.client.apiRequest("/super-admin/admin-list","GET");if(n.error)return $(".api-response","#admin-add-admin").html(n.error),void console.error("Error banning buddy:",n.error);$(".api-response","#admin-add-admin").html(n.message),console.log("listAdminsResponse",n),$("#admin-list-table").html(""),n&&n.length>0?n.forEach((e=>{$("#admin-list-table").append(`\n                <tr>\n                    <td>${e.buddyname}</td>\n                    <td>${e.ip}</td>\n                    <td>${e.role}</td>\n                    <td>${e.ctime}</td>\n                    <td><button class="remove-admin">Remove Admin</button></td>\n\n                </tr>\n            `)})):$("#admin-list-table").append('\n            <tr>\n                <td colspan="3">No admins found</td>\n            </tr>\n        ')}async function c(e={}){console.log("listErrorLogs called with query:",e);const t=parseInt(e.limit)||100,n=parseInt(e.offset)||0,o=new URLSearchParams({limit:t,offset:n}).toString(),a=await m.apiRequest(`/logs?${o}`,"GET");if(a.error)return $(".api-response","#admin-error-logs").html(a.error),void console.error("Error listing logs:",a.error);if($(".api-response","#admin-error-logs").html(a.message||""),console.log("listErrorResponse",a),$("#admin-list-error-logs-table tbody").html(""),a&&a.logs&&a.logs.length>0)for(const e of a.logs)$("#admin-list-error-logs-table tbody").append(`\n                <tr>\n                    <td>${new Date(e.ctime).toLocaleString()}</td>\n                    <td>${e.type}</td> \n                    <td>${e.message}</td>\n                    <td>${e.stack}</td> \n                </tr>\n            `);else $("#admin-list-error-logs-table tbody").append('\n            <tr>\n                <td colspan="4">No logs found</td>\n            </tr>\n        ');const i=a.pagination||{limit:t,offset:n,total:a.logs.length};u.call(this,i)}function u({limit:e,offset:t,total:n}){const o=Math.floor(t/e)+1,a=Math.ceil(n/e)||1;$(".page-info",this.adminWindow.content).text(`Page ${o} of ${a}`),console.log("Updating pagination controls:",{limit:e,offset:t,total:n}),$(".page-size",this.adminWindow.content).val(e),console.log("Pagination updated:",{limit:e,offset:t,total:n}),$(".prev-page",this.adminWindow.content).off("click").on("click",(()=>{console.log("Prev page clicked"),c.call(this,{limit:e,offset:t-e})})),$(".next-page",this.adminWindow.content).off("click").on("click",(()=>{console.log("Next page clicked"),c.call(this,{limit:e,offset:t+e})})),$(".page-size",this.adminWindow.content).off("change").on("change",(e=>{const t=parseInt(e.target.value);c.call(this,{limit:t,offset:0})}))}const m={};async function p(){console.log("listRules called");let e=(await this.client.apiRequest("/super-admin/ip-ban","GET")).rules||[];console.log("rules",e);let t=document.querySelector("#firewall-rules-table");t.innerHTML="";let n=t.insertRow();if(["#","IP Address","Created On","Actions"].forEach((e=>{let t=document.createElement("th");t.textContent=e,n.appendChild(t)})),e.forEach(((e,n)=>{let o=t.insertRow(),a=e.filter?.expression?.match(/\((ip\.src eq )([^\)]+)\)/),i=a?a[2]:"Unknown";o.insertCell(0).textContent=n+1,o.insertCell(1).textContent=i,o.insertCell(2).textContent=new Date(e.created_on).toLocaleString();let r=o.insertCell(3),s=document.createElement("button");s.textContent="Delete",s.className="delete-rule-button",s.addEventListener("click",(async()=>{confirm(`Are you sure you want to delete rule for IP ${i}?`)&&(await this.client.apiRequest(`/super-admin/ip-ban/${e.id}`,"DELETE"),p.call(this))})),r.appendChild(s)})),0===e.length){let e=t.insertRow().insertCell(0);e.colSpan=4,e.textContent="No firewall rules found."}console.log("Firewall rules listed:",e)}async function b(e="147.81.46.172"){try{await this.client.apiRequest("/super-admin/ip-ban","POST",{ip:e})}catch(e){throw $("#admin-firewall .api-response").text("Error adding firewall rule: "+e.message),console.error("Error adding firewall rule:",e),e}p.call(this)}m.endpoint=buddypond.errorsEndpoint,m.apiRequest=async(e,t="GET",n=null)=>{const o={method:t};let a={Accept:"application/json","Content-Type":"application/json; charset=utf-8","X-Me":buddypond.me};buddypond.qtokenid&&(a.Authorization=`Bearer ${buddypond.qtokenid}`),n&&(o.body=JSON.stringify(n)),o.headers=a;let i=`${m.endpoint}${e}`;console.log("admin client making api request",i,o);try{const e=await fetch(i,o);if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);return await e.json()}catch(e){throw console.error("Error in API request:",e),e}};const h={};h.endpoint=buddypond.adminEndpoint,h.apiRequest=async(e,t="GET",n=null)=>{const o={method:t};let a={Accept:"application/json","Content-Type":"application/json; charset=utf-8","X-Me":buddypond.me};buddypond.qtokenid&&(a.Authorization=`Bearer ${buddypond.qtokenid}`),n&&(o.body=JSON.stringify(n)),o.headers=a;let i=`${h.endpoint}${e}`;console.log("admin client making api request",i,o);try{const e=await fetch(i,o);if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);return await e.json()}catch(e){throw console.error("Error in API request:",e),e}};class y{constructor(e,t={}){return this.bp=e,this.icon="desktop/assets/images/icons/icon_admin_64.png",this}async init(){return this.html=await this.bp.load("/v5/apps/based/admin/admin.html"),await this.bp.load("/v5/apps/based/admin/admin.css"),await this.bp.appendScript("/v5/apps/based/admin/vendor/source-map.bundle.js"),"loaded admin window"}async open(e={}){return this.adminWindow||(this.adminWindow=this.bp.apps.ui.windowManager.createWindow({id:"admin",title:"Admin",icon:this.icon,x:250,y:75,width:800,height:400,minWidth:200,minHeight:200,parent:$("#desktop")[0],resizable:!0,minimizable:!0,maximizable:!0,closable:!0,focusable:!0,maximized:!1,minimized:!1,onClose:()=>{this.adminWindow=null}}),this.adminWindow.loggedIn=!0),"default"===e.context&&(e.context="admin"),await this.render(this.adminWindow),this.eventBind(this.adminWindow),this.adminWindow}resetAllPondCounts(){let e=buddypond.messagesApiEndpoint+"/reset-hotpond-counts";console.log("Resetting all pond counts at:",e),fetch(e,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.bp.qtokenid}`,"x-me":this.bp.me}}).then((e=>{if(!e.ok)throw new Error("Failed to reset pond counts");console.log("All pond counts reset successfully")})).catch((e=>{console.error("Error resetting pond counts:",e)}))}}y.prototype.render=function(e){$(e.content).html(this.html)},y.prototype.eventBind=function(u){this.tabs=new this.bp.apps.ui.Tabs(".tabs-container",u.content),this.tabs.onTab((a=>{switch(console.log("tabId",a),a){case"#admin-recent-logins":console.log("admin-recent-logins"),e.call(this);break;case"#admin-userbyIP":console.log("admin-userbyIP"),document.querySelector("#ip-input").value="",t.call(this,"192.168.200.59");break;case"#admin-buddyProfile":console.log("admin-buddyProfile");let i=document.querySelector("#profile-input").value.trim();n.call(this,i);break;case"#admin-banlist":console.log("admin-banlist"),o.call(this);break;case"#admin-add-admin":console.log("admin-add-admin"),document.querySelector("#admin-username").value.trim(),document.querySelector("#admin-ip").value.trim(),d.call(this);case"#admin-firewall":console.log("admin-firewall"),p.call(this);break;case"#admin-error-logs":console.log("admin-error-logs"),c.call(this);break;default:console.warn("Unknown tabId:",a)}})),this.tabs.navigateToTab("#admin-recent-logins"),document.querySelector("#ip-search-button").addEventListener("click",(()=>{const e=document.querySelector("#ip-input").value.trim();e&&t.call(this,e)})),document.querySelector("#add-admin-button").addEventListener("click",(()=>{let e=document.querySelector("#admin-username").value.trim(),t=document.querySelector("#admin-ip").value.trim();e?e&&l.call(this,e,t):alert("No buddyname provided")})),document.querySelector("#ip-ban-button").addEventListener("click",(()=>{let e=document.querySelector("#profile-input").value.trim(),t=document.querySelector("#ban-type").value,n=document.querySelector("#ban-length").value;e?e&&a.call(this,e,t,n):alert("No buddyname provided")})),document.querySelector("#profile-search-button").addEventListener("click",(()=>{const e=document.querySelector("#profile-input").value.trim();e&&n.call(this,e)})),document.querySelector("#recent-logins-table").addEventListener("click",(e=>{const t=e.target.closest(".admin-username-link");if(t){const e=t.dataset.username;document.querySelector("#profile-input").value=e,this.tabs.navigateToTab("#admin-buddyProfile"),n.call(this,e)}})),document.querySelector("#user-by-ip-table").addEventListener("click",(e=>{const t=e.target.closest(".admin-username-link");if(t){const e=t.dataset.username;document.querySelector("#profile-input").value=e,this.tabs.navigateToTab("#admin-buddyProfile"),n.call(this,e)}})),document.querySelector("#admin-banlist").addEventListener("click",(e=>{const t=e.target.closest(".admin-username-link");if(t){const e=t.dataset.username;document.querySelector("#profile-input").value=e,this.tabs.navigateToTab("#admin-buddyProfile"),n.call(this,e)}})),document.querySelector("#admin-banlist").addEventListener("click",(e=>{const t=e.target.closest(".admin-remove-ban-link");if(t){console.log("unbanButtonunbanButtonunbanButtonunbanButton",t);const e=t.dataset.username,n=t.dataset.curse;i.call(this,e,n)}})),document.querySelector("#delete-buddy-button").addEventListener("click",(()=>{if(!confirm("Are you sure you want to delete this buddy?"))return;let e=document.querySelector("#profile-input").value.trim();e?e&&r.call(this,e):alert("No buddyname provided")})),document.querySelector("#reset-buddy-password-button").addEventListener("click",(()=>{if(!confirm("Are you sure you want to reset this buddy's password?"))return;let e=prompt("Enter new password for buddy:","");e||(e=t);let t=document.querySelector("#profile-input").value.trim();t?(console.log("Resetting password for buddy:",t,"to new password:",e),t&&s.call(this,t,e)):alert("No buddyname provided")})),$("#login-as-user-button").on("click",(async()=>{let e=$("#super-admin-token").val().trim(),t=$("#profile-input").val().trim();if(e){console.log("Logging in as user with token:",t,e);try{let n=await fetch(buddypond.endpoint+"/auth",{method:"POST",body:JSON.stringify({buddyname:t}),headers:{"Content-Type":"application/json","x-admin-token":e}}),o=await n.json();o.success?(alert("Logged in as user successfully"),localStorage.setItem("qtokenid",o.qtokenid),localStorage.setItem("me",t),window.location.reload()):alert("Failed to log in as user: "+o.message)}catch(e){console.error("Error logging in as user:",e),alert("Error logging in as user: "+e.message)}}else alert("No token provided")})),$("#firewall-rule-form").on("submit",(async e=>{e.preventDefault();let t=$("#firewall-rule-action").val(),n=$("#firewall-rule-ip").val().trim();console.log("Adding firewall rule:",t,n),n?await b.call(this,n):alert("No IP address provided")}))},y.prototype.client=h;export{y as default};
//# sourceMappingURL=admin.js.map
