{"version":3,"file":"ui.js","sources":["../../../apps/based/ui/Window/StartPanel.js","../../../apps/based/ui/Window/TaskBar.js","../../../apps/based/ui/Window/Window.js","../../../apps/based/ui/Window/WindowManager.js","../../../apps/based/ui/CountdownManager.js","../../../apps/based/ui/ui.js"],"sourcesContent":["/* StartPanel.js - Marak Squires 2025 - BuddyPond */\nexport default class StartPanel {\n    constructor({ onAppLaunch, bp } = {}) {\n        this.onAppLaunch = onAppLaunch || function () { };\n        this.bp = bp;\n        this.panelElement = null;\n    }\n\n    open() {\n        // console.log('Opening start panel', this.panelElement);\n        if (this.panelElement) {\n            // if the panel is already open, close it first\n            this.close();\n            return;\n        }\n\n        const panel = document.createElement('div');\n        panel.className = 'start-panel';\n\n        const searchInput = document.createElement('input');\n        searchInput.id = 'start-panel-search';\n        searchInput.className = 'start-panel-search';\n        searchInput.type = 'text';\n        searchInput.placeholder = 'Search apps...';\n\n        const recentSection = document.createElement('div');\n        recentSection.className = 'start-panel-section';\n        recentSection.innerHTML = `<h3>Recent Apps</h3>`;\n        const recentGrid = document.createElement('div');\n        recentGrid.className = 'start-panel-grid';\n        recentSection.appendChild(recentGrid);\n\n        const allSection = document.createElement('div');\n        allSection.className = 'start-panel-section';\n        allSection.innerHTML = `<h3>All Apps</h3>`;\n        const allGrid = document.createElement('div');\n        allGrid.className = 'start-panel-grid';\n        allSection.appendChild(allGrid);\n\n        panel.appendChild(searchInput);\n        panel.appendChild(recentSection);\n        panel.appendChild(allSection);\n\n        document.body.appendChild(panel);\n        this.panelElement = panel;\n\n        // Populate recent apps (stub)\n        const recentApps = (window.bp?.apps?.ui?.recentApps || []).slice(0, 10);\n        // console.log('Recent apps:', recentApps);\n        recentApps.forEach(appData => {\n            //appData.app = appData.app || appName; // Ensure appName is available\n            //appData.id = appData.id || appName; // Ensure id is available\n            const app = this.createAppTile(appData);\n            recentGrid.appendChild(app);\n        });\n\n        // Populate all apps (stub)\n        const appList = window.bp?.apps?.desktop?.appList || {};\n\n        // TODO: we should have a sort on here, maybe preserve appList order itself to keep it simple\n        const allAppEntries = Object.entries(appList);\n        allAppEntries.forEach(([appName, appData]) => {\n            appData.app = appData.app || appName; // Ensure appName is available\n            appData.id = appData.id || appName; // Ensure id is available\n            const app = this.createAppTile(appData, appData.icon);\n            allGrid.appendChild(app);\n        });\n\n        // Live search filtering\n        searchInput.addEventListener('input', () => {\n            const query = searchInput.value.toLowerCase();\n            allGrid.querySelectorAll('.start-panel-app').forEach(el => {\n                const label = el.dataset.name.toLowerCase();\n                let _app = this.bp.apps.desktop.appList[el.dataset.id];\n                console.log('Searching app:', el.dataset.app, _app);\n                let showResult = false;\n                if (_app) {\n                    console.log('Found app in appList', _app);\n                    // first search the label\n                    if (label.includes(query)) {\n                        showResult = true;\n                    }\n                    // then search the category\n                    if (!showResult && _app.categories) {\n                        console.log('App has categories', _app.categories);\n                        // _app.category is an array of strings, so we need to check if any of them match\n                        showResult = _app.categories.some(cat => cat.toLowerCase().includes(query));\n                    }\n                }\n\n                console.log('el.dataset.name', el.dataset, 'query', query);\n                if (showResult) {\n                    el.style.display = 'flex'\n                } else {\n                    el.style.display = 'none';\n                }\n                // el.style.display = label.includes(query) ? '' : 'none';\n            });\n        });\n\n        this.closeEventHandler = (event) => {\n            // console.log('click event target', event.target);\n            if ($(event.target).hasClass('taskbar-item')) {\n                // If the click is inside the panel or on the search input, do nothing\n                return;\n            }\n            // close the panel if it exists\n            if (this.panelElement && !this.panelElement.contains(event.target) && event.target !== searchInput) {\n                this.close();\n            }\n            // If the click is outside the panel and not on the search input, close the panel\n            // .taskbar-item, .taskbar-container\n        }\n        // add event listener to close panel on click outside\n        document.addEventListener('click', this.closeEventHandler);\n\n        // focus on the start-panel-search input\n        searchInput.focus();\n\n    }\n\n    close() {\n        if (this.panelElement) {\n            this.panelElement.remove();\n            this.panelElement = null;\n        }\n        // remove the event listener for closing the panel\n        if (this.closeEventHandler) {\n            document.removeEventListener('click', this.closeEventHandler);\n            this.closeEventHandler = null;\n        }\n    }\n\n    createAppTile(appData, icon = 'icons/default.png') {\n        // console.log('Creating app tile for:', appData);\n        let name = appData.id || appData.appName || appData.name || appData.label || 'Unknown App';\n        icon = appData.icon || icon || 'icons/default.png';\n        const tile = document.createElement('div');\n        tile.className = 'start-panel-app';\n        tile.dataset.name = name;\n        tile.dataset.id = appData.id || appData.app || name;\n        tile.dataset.app = appData.app || appData.id || name;\n\n        const img = document.createElement('img');\n        img.src = icon;\n        img.alt = name;\n\n        const label = document.createElement('div');\n        label.textContent = appData.label || name;\n\n        tile.appendChild(img);\n        tile.appendChild(label);\n\n        tile.onclick = async () => {\n            let win = await this.bp.open(appData.app || appData.id, { context: appData.context });\n            this.onAppLaunch(name);\n            this.close();\n        };\n\n        return tile;\n    }\n}","import StartPanel from \"./StartPanel.js\";\n\nexport default class TaskBar {\n    constructor({ homeCallback, bp } = {}) {\n        this.taskBarElement = document.createElement(\"div\");\n        this.taskBarElement.className = \"taskbar-container\";\n        document.body.appendChild(this.taskBarElement);\n\n        this.bp = bp; // reference to the base platform instance\n\n        this.items = new Map(); // id -> config\n        this.shortcuts = new Set(); // id\n\n\n        function openStartPanel() {\n            if (!this.startPanel) {\n                this.startPanel = new StartPanel({ bp: this.bp });\n            }\n            this.startPanel.open();\n        }\n\n        if (homeCallback) {\n            this.addItem({\n                id: \"home\",\n                label: \"Home\",\n                // onClick: homeCallback,\n                onClick: openStartPanel,\n                icon: \"desktop/assets/images/icons/icon_mantra_64.png\",\n                isShortcut: true,\n            });\n        }\n        this.taskBarElement.addEventListener('contextmenu', (e) => {\n            e.preventDefault();\n            const target = e.target.closest('.taskbar-item');\n            if (!target) return;\n            const id = target.dataset.id;\n            if (!id || id === 'home') return;\n            this.showContextMenu(id, e.clientX, e.clientY);\n        });\n\n        this.enableDragAndDrop();\n    }\n\n    showContextMenu(id, x, y) {\n        const existing = document.querySelector('.taskbar-context-menu');\n        if (existing) existing.remove();\n\n        const item = this.items.get(id);\n        if (!item) return;\n\n        const menu = document.createElement('div');\n        menu.className = 'taskbar-context-menu';\n        menu.style.position = 'fixed';\n        menu.style.left = `${x}px`;\n        menu.style.visibility = 'hidden'; // hide until we calculate dimensions\n        document.body.appendChild(menu);\n\n        // Helper\n        const makeOption = (label, handler) => {\n            const option = document.createElement('div');\n            option.className = 'taskbar-context-menu-item';\n            option.textContent = label;\n            option.onclick = () => {\n                handler();\n                menu.remove();\n            };\n            menu.appendChild(option);\n        };\n\n        // Options\n        if (item.isOpen) {\n            makeOption('Close', () => this.closeItem(id));\n        } else {\n            makeOption('Open', () => this.openItem(item));\n        }\n\n        if (this.shortcuts.has(id)) {\n            makeOption('Unpin from Taskbar', () => {\n                this.shortcuts.delete(id);\n                // this.removeItem(id);\n            });\n        } else {\n\n            if (item.app === 'buddylist' && id !== 'buddylist') {\n                // don't allow pinning buddylist with context\n            } else {\n                // Remark: Issue with non-singleton apps like 'emulator'\n                // Needs to be handled differently\n                if (item.app !== 'emulator') {\n                    makeOption('Keep in Taskbar', () => {\n                        // console.log('Pinning item to taskbar:', item);\n                        // console.log('Adding shortcut to taskbar:', item.app);\n                        this.shortcuts.add(item.app || id);\n                        // save the taskbar_apps to settings\n                        let installedTaskBarApps = this.bp.settings.taskbar_apps || {};\n                        installedTaskBarApps[item.app || id] = {\n                            app: item.app || id,\n                            context: item.context || 'default',\n                            label: item.label || id,\n                            icon: item.icon || ''\n                        };\n                        this.bp.set('taskbar_apps', installedTaskBarApps);\n                    });\n                }\n\n            }\n\n        }\n\n        // makeOption('Remove from Taskbar', () => this.removeItem(id));\n\n        // Wait for DOM to layout, then position the menu\n        requestAnimationFrame(() => {\n            const menuHeight = menu.offsetHeight;\n            const viewportHeight = window.innerHeight;\n\n            // Attempt to place above the cursor\n            let top = y - menuHeight - 4; // slight offset\n\n            // If that would go off screen, place below (fallback)\n            if (top < 0) {\n                top = y + 4;\n            }\n\n            menu.style.top = `${top}px`;\n            menu.style.visibility = 'visible';\n        });\n\n        const removeMenu = () => menu.remove();\n        setTimeout(() => {\n            window.addEventListener('click', removeMenu, { once: true });\n            window.addEventListener('contextmenu', removeMenu, { once: true });\n        }, 0);\n    }\n\n\n    addItem(config) {\n        let { app, id, context, label = \"\", onClick, icon, isShortcut = true } = config;\n        // console.log('TaskBar.addItem', config);\n\n        // save the taskbar_apps\n        if (context && context !== 'default') {\n            // app = app + '-' + context; // append context to app name\n        }\n\n        let installedTaskBarApps = this.bp.settings.taskbar_apps || {};\n        if (id !== 'home') {\n            installedTaskBarApps[app || id] = {\n                id: id,\n                app: app || id,\n                context: context || 'default',\n                label: label || id,\n                icon: icon || ''\n            };\n            // console.log('TaskBar.addItem installedTaskBarApps', installedTaskBarApps);\n\n        }\n\n        if (isShortcut) {\n            // save the taskbar_apps to settings, if it is a shortcut\n            this.bp.set('taskbar_apps', installedTaskBarApps);\n        }\n\n        // console.log('TaskBar.addItem', config);\n        if (typeof onClick !== 'function') {\n            // default action is to open the app, bp.open()\n            onClick = async (ev, itemElement) => {\n\n                // first check to see if the window exists / is open\n                let existingWindow = this.bp.apps.ui.windowManager.getWindow(id);\n\n                if (!existingWindow) {\n                    console.log('default onClick, opening window', id, config);\n                    // Remark: this.bp wasn't scoped here? should work...\n                    let win = await this.bp.open(app || id, { context });\n                    // console.log('TaskBar.onClick bp.open', id, win);\n                } else {\n                    if (existingWindow.isMinimized) {\n                        // console.log('TaskBar.onClick restoring window', existingWindow);\n                        existingWindow.restore();\n                        existingWindow.focus();\n                    } else {\n                        // console.log('TaskBar.onClick minimizing window', existingWindow);\n                        existingWindow.minimize();\n                    }\n                }\n                ev.stopPropagation();\n            };\n        }\n\n        let existing = this.taskBarElement.querySelector(`[data-id=\"${id}\"]`);\n        if (existing) return existing;\n\n        const itemElement = document.createElement(\"div\");\n        itemElement.className = \"taskbar-item\";\n        itemElement.dataset.id = id;\n        itemElement.draggable = true;\n\n        const itemText = document.createElement(\"div\");\n        itemText.className = \"taskbar-item-text\";\n        itemText.textContent = label;\n        itemElement.appendChild(itemText);\n\n        if (icon) {\n            const itemIcon = document.createElement(\"img\");\n            itemIcon.src = icon;\n            itemIcon.height = 32;\n            itemIcon.width = 32;\n            itemIcon.alt = label;\n            itemElement.appendChild(itemIcon);\n        } else {\n            itemElement.textContent = label;\n        }\n\n        itemElement.onclick = (ev) => {\n            if (onClick) onClick.call(this, ev, itemElement);\n            this.alertItem(id);\n        };\n\n        if (isShortcut) {\n            this.shortcuts.add(id);\n        }\n\n        this.taskBarElement.appendChild(itemElement);\n        this.items.set(id, {\n            ...config,\n            element: itemElement,\n            isOpen: false,\n            isShortcut: isShortcut\n        });\n\n        return itemElement;\n    }\n\n    openItem(config) {\n        // console.log('TaskBar.openItem', config);\n        let item = this.items.get(config.id);\n        if (item) {\n            item.isOpen = true;\n            item.element.classList.add(\"taskbar-item-open\");\n            // console.log('TaskBar.openItem', item);\n            // item.onClick?.(null, item.element); // call the onClick handler if it exists\n        } else {\n            this.addItem({ ...config, isShortcut: false }); // treat open as temporary unless marked otherwise\n            this.openItem(config); // re-call to apply open state\n        }\n    }\n\n    closeItem(id) {\n        const item = this.items.get(id);\n        if (!item) return;\n\n        item.isOpen = false;\n        item.element.classList.remove(\"taskbar-item-open\");\n\n        console.log('TaskBar.closeItem', id, item);\n        console.log('shortcuts', this.shortcuts);\n\n        // shouldn't this be checking this.shortcuts instead of item.isShortcut?\n        if (!this.shortcuts.has(id)) {\n            this.removeItem(id);\n        }\n        /*\n        console.log('shortcuts', this.shortcuts);\n        // If the item is NOT a shortcut, remove it from the taskbar\n        if (!item.isShortcut) {\n            this.removeItem(id);\n        }\n        */\n\n        // get the window instance and close it\n        const win = this.bp.apps.ui.windowManager.getWindow(id);\n        if (win) {\n            win.close();\n        } else {\n            console.warn(`No window found with ID: ${id}`);\n        }\n    }\n\n    removeItem(id) {\n        const item = this.items.get(id);\n        if (item) {\n            this.taskBarElement.removeChild(item.element);\n            this.items.delete(id);\n            this.shortcuts.delete(id);\n\n            // save the updated taskbar_apps\n            let taskBarApps = this.bp.settings.taskbar_apps || {};\n            if (taskBarApps[id]) {\n                delete taskBarApps[id];\n                this.bp.set('taskbar_apps', taskBarApps);\n            }\n            console.log('TaskBar.removeItem', id, item);\n\n        }\n    }\n\n    getItem(id) {\n        return this.items.get(id);\n    }\n\n    alertItem(id) {\n        const item = this.items.get(id);\n        if (item) {\n            item.element.classList.add(\"taskbar-item-alert\");\n            setTimeout(() => item.element.classList.remove(\"taskbar-item-alert\"), 3000);\n        }\n    }\n\n    enableDragAndDrop() {\n        let dragged = null;\n\n        this.taskBarElement.addEventListener(\"dragstart\", (e) => {\n            dragged = e.target.closest(\".taskbar-item\");\n        });\n\n        this.taskBarElement.addEventListener(\"dragover\", (e) => {\n            e.preventDefault();\n            const over = e.target.closest(\".taskbar-item\");\n            if (dragged && over && dragged !== over) {\n                const draggedIndex = [...this.taskBarElement.children].indexOf(dragged);\n                const overIndex = [...this.taskBarElement.children].indexOf(over);\n                if (draggedIndex < overIndex) {\n                    this.taskBarElement.insertBefore(over, dragged);\n                } else {\n                    this.taskBarElement.insertBefore(dragged, over);\n                }\n            }\n        });\n\n        this.taskBarElement.addEventListener(\"dragend\", () => {\n            dragged = null;\n\n            // resave the new order of shortcuts\n            const newOrder = Array.from(this.taskBarElement.children).map(item => item.dataset.id);\n            let taskBarApps = this.bp.settings.taskbar_apps || {};\n            // reorder the taskbar_apps based on the new order\n            const newTaskBarApps = {};\n            newOrder.forEach(id => {\n                if (taskBarApps[id]) {\n                    newTaskBarApps[id] = taskBarApps[id];\n                }\n            });\n            //console.log('New taskbar order:', newOrder);\n            this.bp.set('taskbar_apps', newTaskBarApps);\n\n        });\n    }\n}\n","// Buddy Pond - Window.js - Marak Squires 2023\n// A simple window class for creating draggable, resizable windows\n// Remark: WindowManager interface is optional and will be stubbed out if not provided\nlet idCounter = 0;\n\nclass Window {\n    constructor(options = {}, windowManager) {\n        const {\n            title = \"Window\", // Title of the window\n            width = '400px', // Default width\n            height = '300px', // Default height\n            app = 'default', // default app\n            type = 'singleton', // Default type ( intended to not have siblings )\n            context = 'default', // Default context\n            content = '', // Default content\n            iframeContent = false,\n            icon = '', // Default icon\n            x = 50, // Default x position\n            y = 50, // Default y position\n            z = 99, // Default z-index\n            parent = window.document.body, // Parent element to append to\n            id = `window-${idCounter}`, // Unique ID for the panel\n            onFocus = () => { }, // Callback when the window is focused\n            onClose = () => { }, // Callback when the window is closed\n            onOpen = () => { }, // Callback when the window is opened\n            onMessage = () => { }, // Callback when the window receives a message\n            onLoad = () => { }, // Callback when the window is loaded ( remote content )\n            className = '', // Custom classes for styling\n            resizeable = true, // Enable resizable feature\n            preventOverlap = true, // prevents direct overlap with other windows\n            canBeBackground = false // Can be set as background\n        } = options;\n\n        this.windowManager = windowManager;\n\n        // ensure that no other window has the same id\n        // we could check the windowManger.windows array for this\n        // we will check the document ( in case another system has created a window )\n        let existingWindow = document.getElementById(id);\n        if (existingWindow) {\n            console.log('Window with id already exists', id);\n            return existingWindow;\n        }\n\n        this.title = title;\n        this.icon = icon;\n        this.width = width;\n        this.height = height;\n\n        if (app !== 'default') {\n            this.app = app;\n        } else {\n            this.app = id;\n        }\n\n        \n        this.type = type;\n        this.x = x;\n        this.y = y;\n        this.z = 99;\n        this.context = context;\n        this.parent = parent;\n        this.id = id;\n        this.isMaximized = false;\n        this.isMinimized = false;\n        this.container = null;\n        this.content = null;\n        this.iframeContent = iframeContent;\n        this.contentValue = content;\n        this.isActive = false;\n        this.className = className;\n        this.resizeable = resizeable;\n        this.preventOverlap = preventOverlap;\n        this.canBeBackground = canBeBackground;\n\n        windowManager = windowManager || {\n            windows: [],\n            saveWindowsState: () => { },\n            removeWindow: () => { },\n\n        };\n\n        this.bp = options.bp;\n\n        this.onFocus = onFocus;\n        this.onClose = onClose;\n        this.onOpen = onOpen;\n        this.onLoad = onLoad;\n        this.onMessage = onMessage;\n\n        this.startDrag = this.startDrag.bind(this);\n        this.drag = this.drag.bind(this);\n        this.stopDrag = this.stopDrag.bind(this);\n\n\n        this.createWindow();\n        this.open();\n\n        return this;\n    }\n\n    createWindow() {\n        // Create the main window container\n        this.container = document.createElement(\"div\");\n        this.container.classList.add(\"window-container\");\n\n        // add dataset for app, type, context\n        this.container.dataset.app = this.app;\n        this.container.dataset.type = this.type;\n        this.container.dataset.context = this.context;\n\n        if (this.className) {\n            this.container.classList.add(this.className);\n        }\n\n        if (!this.resizeable) {\n            this.container.classList.add(\"window-not-resizeable\");\n        }\n\n\n        // Helper function to check if two rectangles overlap\n        function checkOverlap(x1, y1, w1, h1, x2, y2, w2, h2, buffer = 10) {\n            // console.log('checkOverlap', x1, y1, w1, h1, x2, y2, w2, h2, buffer);\n            w1 = parseInt(w1);\n            h1 = parseInt(h1);\n            w2 = parseInt(w2);\n            h2 = parseInt(h2);\n            return (\n                x1 < x2 + w2 + buffer &&\n                x1 + w1 + buffer > x2 &&\n                y1 < y2 + h2 + buffer &&\n                y1 + h1 + buffer > y2\n            );\n        }\n\n        // Function to adjust position to prevent overlap\n        function adjustPosition(newWindow, windows, screenWidth, screenHeight, buffer = 10) {\n            let adjustedX = newWindow.x;\n            let adjustedY = newWindow.y;\n\n            // Check overlap with other windows\n            windows.forEach((win) => {\n                if (checkOverlap(adjustedX, adjustedY, newWindow.width, newWindow.height, win.x, win.y, win.width, win.height, buffer)) {\n                    // console.log('OVERLAP DETECTED');\n                    adjustedX += buffer; // Move slightly to the right\n                    // adjustedY += buffer; // Move slightly down\n                }\n            });\n\n            // Check screen boundaries\n            if (adjustedX + newWindow.width + buffer > screenWidth) {\n                adjustedX = screenWidth - newWindow.width - buffer; // Move to the left\n            }\n            if (adjustedY + newWindow.height + buffer > screenHeight) {\n                adjustedY = screenHeight - newWindow.height - buffer; // Move up\n            }\n            if (adjustedX < buffer) {\n                adjustedX = buffer; // Move to the right\n            }\n            if (adjustedY < buffer) {\n                adjustedY = buffer; // Move down\n            }\n\n            return { x: adjustedX, y: adjustedY };\n        }\n\n        // Main Window Creation Logic\n        this.container.id = this.id;\n        this.container.style.width = `${this.width}px`;\n        this.container.style.height = `${this.height}px`;\n        this.container.style.position = \"absolute\";\n\n        // Assume screen dimensions\n        const screenWidth = window.innerWidth;\n        const screenHeight = window.innerHeight;\n\n        /*\n        // Remark: We could perform a general zoom scale for mobile devices\n        if (screenWidth <= 980) {\n            // this.container.style.zoom = 1.5; // Adjust zoom for mobile\n        } else {\n            // do nothing\n        }\n        */\n\n        // Adjust position to prevent overlap\n        let adjustedPosition = {\n            x: this.x,\n            y: this.y,\n        };\n\n        if (this.preventOverlap) {\n            adjustedPosition = adjustPosition(\n                { x: this.x, y: this.y, width: this.width, height: this.height },\n                this.windowManager.windows,\n                screenWidth,\n                screenHeight,\n                32\n            );\n        }\n\n\n        // Apply adjusted position\n        this.x = adjustedPosition.x;\n        this.y = adjustedPosition.y;\n        this.container.style.top = `${this.y}px`;\n        this.container.style.left = `${this.x}px`;\n\n        this.container.style.zIndex = 99;\n\n        // add a mousedown handler to container itself to set 'window-active' status\n        this.container.addEventListener('mousedown', () => {\n            // set all windows to inactive\n            document.querySelectorAll('.window-container').forEach((window) => {\n                window.classList.remove('window-active');\n                window.isActive = false;\n            });\n            // set this window to active\n            this.container.classList.add('window-active');\n            this.isActive = true;\n        });\n\n        // same for touchstart\n        this.container.addEventListener('touchstart', () => {\n            // set all windows to inactive\n            document.querySelectorAll('.window-container').forEach((window) => {\n                window.classList.remove('window-active');\n                window.isActive = false;\n            });\n            // set this window to active\n            this.container.classList.add('window-active');\n            this.isActive = true;\n        });\n\n        // Create the title bar\n        this.titleBar = document.createElement(\"div\");\n        this.titleBar.classList.add(\"window-title-bar\");\n\n        if (this.bp.isMobile()) {\n            this.titleBar.onclick = () => {\n                console.log('titleBar clicked on mobile');\n                this.minimize();\n                return;\n                if (!this.isMinimized) {\n                    this.minimize(true); // force minimize on mobile\n                } else {\n                    this.restore(); // restore on mobile\n                }\n            }\n        }\n\n        // on double click maximize\n        this.titleBar.ondblclick = () => this.maximize();\n\n        if (this.icon) {\n            let iconTitleBar = document.createElement(\"img\");\n            iconTitleBar.src = this.icon;\n            iconTitleBar.classList.add(\"window-icon\");\n            this.titleBar.appendChild(iconTitleBar);\n        }\n\n        let titleBarSpan = document.createElement(\"span\");\n        titleBarSpan.classList.add(\"window-title-text\");\n        titleBarSpan.textContent = this.title;\n        this.titleBarSpan = titleBarSpan;\n\n        // Drag functionality\n        // Add mouse and touch event listeners to the titleBar\n        this.titleBar.addEventListener('mousedown', this.startDrag);\n        this.titleBar.addEventListener('touchstart', this.startDrag, { passive: false });\n\n        // Touch events for mobile\n\n\n        // Create control buttons (Minimize, Maximize, Close)\n        const controls = document.createElement(\"div\");\n        controls.classList.add(\"window-controls\");\n\n        if (!this.bp.isMobile()) {\n            this.minimizeButton = document.createElement(\"button\");\n            this.minimizeButton.innerHTML = \"&#x1F7E1;\"; // Yellow circle\n            this.minimizeButton.classList.add(\"minimize-button\");\n            this.minimizeButton.title = \"Minimize\";\n            this.minimizeButton.onclick = () => this.minimize();\n\n            controls.appendChild(this.minimizeButton);\n\n\n        }\n\n\n        this.maximizeButton = document.createElement(\"button\");\n        this.maximizeButton.innerHTML = \"&#x1F7E2;\"; // Green circle\n        this.maximizeButton.classList.add(\"maximize-button\");\n        this.maximizeButton.title = \"Maximize\";\n        this.maximizeButton.onclick = () => this.maximize();\n\n        controls.appendChild(this.maximizeButton);\n\n\n        this.closeButton = document.createElement(\"button\");\n        this.closeButton.innerHTML = \"&#x1F534;\"; // Red circle\n        this.closeButton.classList.add(\"close-button\");\n        this.closeButton.title = \"Close\";\n        this.closeButton.onclick = () => this.close();\n\n        controls.appendChild(this.closeButton);\n\n        this.titleBar.appendChild(titleBarSpan);\n        this.titleBar.appendChild(controls);\n\n        this.initContentArea();\n\n        // Append components\n        this.container.appendChild(this.titleBar);\n        this.container.appendChild(this.content);\n\n        if (this.parent) {\n            this.parent.appendChild(this.container);\n        }\n\n        // Resizing\n        if (this.resizeable) {\n            this.addResizeHandles();\n        }\n\n        if (this.canBeBackground) {\n            // get the menubar-set-window-as-background element and remove disabled class\n            let el = document.getElementById('menubar-set-window-as-background');\n            if (el) {\n                el.classList.remove('disabled');\n            }\n        }\n\n\n        return this.container;\n    }\n\n\n    initContentArea() {\n        if (typeof this.iframeContent === 'boolean' && this.iframeContent) {\n            this.content = document.createElement(\"iframe\");\n            this.content.classList.add(\"bp-window-content\");\n            document.body.appendChild(this.content);\n            this.content.src = 'about:blank';\n            this.content.onload = () => {\n                let iframeDoc = this.content.contentDocument || this.content.contentWindow.document;\n                iframeDoc.open();\n                iframeDoc.write(this.contentValue);\n                iframeDoc.close();\n                this.setupMessageHandling();\n            };\n        } else if (typeof this.iframeContent === 'string' && this.iframeContent.length) {\n            this.content = document.createElement(\"iframe\");\n            this.content.classList.add(\"bp-window-content\");\n            this.content.src = this.iframeContent;\n            this.content.onload = () => this.setupMessageHandling();\n        } else {\n            this.content = document.createElement(\"div\");\n            this.content.classList.add(\"bp-window-content\");\n            if (typeof this.contentValue === 'string') {\n                this.content.innerHTML = this.contentValue;\n            } else {\n                this.content.appendChild(this.contentValue);\n            }\n        }\n    }\n\n    // TODO: migrate away from iframe messages and use BroadcastChannel instead\n    setupMessageHandling() {\n        // iframe is loaded by now\n        this.onLoad(this);\n        const iframeWindow = this.content.contentWindow;\n\n        // Inject a script into the iframe to listen for the ESC key\n        const iframeDoc = this.content.contentDocument || this.content.contentWindow.document;\n        const script = iframeDoc.createElement(\"script\");\n        script.type = \"text/javascript\";\n        script.textContent = `\n            document.addEventListener('keydown', (event) => {\n                if (event.key === 'Escape') {\n                    window.parent.postMessage({ event: 'ESC_KEY_PRESSED' }, '*');\n                }\n            });\n        `;\n        //alert(script.textContent)\n        iframeDoc.body.appendChild(script);\n\n        // Set the message event listener on the iframe's window\n        window.addEventListener('message', this.receiveMessage.bind(this), false);\n    }\n\n\n    sendMessage(message) {\n        if (this.content && this.content.contentWindow) {\n            this.content.contentWindow.postMessage(message, '*'); // Consider specifying an origin here instead of '*'\n        }\n    }\n\n    receiveMessage(event) {\n        // Ensure security by checking the event.origin, if possible\n        if (typeof event.data === 'object' && event.data.event) {\n            if (event.data.event === 'ESC_KEY_PRESSED') {\n                console.log('ESC key pressed inside iframe. Closing window...');\n                this.close();\n            } else {\n                this.handleReceivedMessage(event.data);\n            }\n        }\n    }\n\n    handleReceivedMessage(data) {\n        //console.log('Handled Received message:', data, this.onMessage);\n        if (this.onMessage) {\n            this.onMessage(data);\n        }\n    }\n\n\n    move(x, y) {\n        this.x = x;\n        this.y = y;\n        this.container.style.top = `${this.y}px`;\n        this.container.style.left = `${this.x}px`;\n        this.windowManager.saveWindowsState();\n    }\n\n    serialize() {\n\n        // we need an xpath selector for this.parent\n        let parentXpath = getXPathForElement(this.parent);\n        // console.log('parentXpath', parentXpath);\n        return {\n            title: this.title,\n            width: this.width,\n            height: this.height,\n            type: this.type,\n            app: this.app,\n            x: this.x,\n            y: this.y,\n            z: this.z,\n            context: this.context,\n            parent: parentXpath,\n            id: this.id,\n            onClose: this.onClose,\n            onOpen: this.onOpen,\n            className: this.className,\n            resizeable: this.resizeable,\n            canBeBackground: this.canBeBackground\n        };\n    }\n\n    hydrate(data) {\n        console.log('hydrate', data);\n        this.title = data.title;\n        this.width = data.width;\n        this.height = data.height;\n        this.app = data.app;\n        this.type = data.type;\n        this.x = data.x;\n        this.y = data.y;\n        this.z = Number(data.z);\n        this.context = data.context;\n        // TODO: some of these are constructor...maybe all?\n        // this.parent = document.querySelector(data.parent);\n        this.id = data.id;\n        this.onClose = data.onClose;\n        this.onOpen = data.onOpen;\n        this.onMessage = data.onMessage;\n        this.className = data.className;\n        this.resizeable = data.resizeable;\n        this.canBeBackground = data.canBeBackground;\n\n        this.updateWindow();\n    }\n\n    updateWindow() {\n        this.container.style.width = `${this.width}px`;\n        this.container.style.height = `${this.height}px`;\n        this.container.style.top = `${this.y}px`;\n        this.container.style.left = `${this.x}px`;\n        this.container.style.zIndex = this.z;\n        // console.log('updateWindow', this);\n    }\n\n    setDepth(depth) {\n        this.z = depth;\n        this.container.style.zIndex = depth;\n        // console.log('container depth was set to', this.id, depth);\n        this.windowManager.saveWindowsState();\n    }\n\n    setAsBackground() {\n        console.log('setAsBackground', this.windowManager.windows);\n        if (!this.canBeBackground) {\n            console.log('This window cannot be set as background. Try setting canBeBackground:true in the Window declaration');\n            return;\n        }\n        // check other api.ui.windowManager.windows and restore them if isBackground is true\n        this.windowManager.windows.forEach((window) => {\n            if (window.isBackground) {\n                window.restoreWindowFromBackground();\n            }\n        });\n\n        this.container.style.zIndex = -1;\n\n        // make full window size\n        this.container.style.width = \"100%\";\n        this.container.style.height = \"100%\";\n\n        // set top and left to 0\n        this.container.style.top = \"0\";\n        this.container.style.left = \"0\";\n\n        this.isBackground = true;\n        this.isActive = false;\n    }\n\n    restoreWindowFromBackground() {\n\n        this.isBackground = false;\n\n        // reset the z-index\n        this.container.style.zIndex = 11000;\n\n        // reset the window size\n        this.container.style.width = `${this.width}`;\n        this.container.style.height = `${this.height}`;\n\n        // put window back to original position\n        this.container.style.top = `${this.y}px`;\n        this.container.style.left = `${this.x}px`;\n\n        // get the menubar-restore-background-window element and add disabled class\n        let el = document.getElementById('menubar-restore-background-window');\n        if (el) {\n            el.classList.add('disabled');\n        }\n\n    }\n\n    startDrag(e) {\n        this.isDragging = true;\n        this.container.style.cursor = \"grabbing\";\n\n        // Disable pointer events on iframe\n        const iframes = this.container.querySelectorAll('iframe');\n        iframes.forEach(iframe => {\n            iframe.style.pointerEvents = 'none';\n        });\n\n        // Get coordinates from mouse or touch event\n        const { clientX, clientY } = this.getEventCoordinates(e);\n        this.offsetX = clientX - this.container.offsetLeft;\n        this.offsetY = clientY - this.container.offsetTop;\n\n        // Add event listeners for both mouse and touch events\n        document.addEventListener('mousemove', this.drag);\n        document.addEventListener('touchmove', this.drag, { passive: false });\n        document.addEventListener('mouseup', this.stopDrag);\n        document.addEventListener('touchend', this.stopDrag);\n    }\n\n    drag(e) {\n        if (!this.isDragging) return;\n\n        // Prevent default behavior for touchmove to avoid scrolling\n        e.preventDefault();\n\n        // Get coordinates from mouse or touch event\n        const { clientX, clientY } = this.getEventCoordinates(e);\n\n        // Update container position\n        // Ensure window does not drag off the screen\n        let menuBarHeight = 42;\n        let bottomLimit = window.innerHeight - 52; // 50px from bottom\n        if (clientY > menuBarHeight && clientY < bottomLimit) {\n            this.container.style.top = `${clientY - this.offsetY}px`;\n        }\n        let leftLimit = 52; // 0px from left\n        let rightLimit = window.innerWidth - 52; // 0px from right\n        if (clientX > leftLimit && clientX < rightLimit) {\n            this.container.style.left = `${clientX - this.offsetX}px`;\n        }\n    }\n\n    stopDrag() {\n        this.isDragging = false;\n        this.container.style.cursor = \"default\";\n\n        // Restore pointer events on iframe\n        const iframes = this.container.querySelectorAll('iframe');\n        iframes.forEach(iframe => {\n            iframe.style.pointerEvents = 'auto';\n        });\n\n        // Remove event listeners\n        document.removeEventListener('mousemove', this.drag);\n        document.removeEventListener('touchmove', this.drag);\n        document.removeEventListener('mouseup', this.stopDrag);\n        document.removeEventListener('touchend', this.stopDrag);\n\n        // Save window state\n        this.x = this.container.offsetLeft;\n        this.y = this.container.offsetTop;\n        this.z = Number(this.container.style.zIndex);\n        if (this.windowManager) {\n            this.windowManager.saveWindowsState();\n        } else {\n            console.warn('windowManager is not defined');\n        }\n    }\n\n    getEventCoordinates(e) {\n        let clientX, clientY;\n        if (e.type.startsWith('touch')) {\n            // Use the first touch point for dragging\n            const touch = e.touches[0] || e.changedTouches[0];\n            clientX = touch.clientX;\n            clientY = touch.clientY;\n        } else {\n            // Mouse event\n            clientX = e.clientX;\n            clientY = e.clientY;\n        }\n        return { clientX, clientY };\n    }\n\n    minimize(force = false) {\n        // console.log('minimize', this.isMinimized);\n        if (this.bp.isMobile()) {\n\n            if (this.isMinimized && !force) {\n                this.restore();\n                // this.content.style.display = \"block\"; // Show content area\n            } else {\n                // Minimize the window\n                // this.container.style.display = \"none\";  // Hide content area\n                // hides the `bp-window-content` area\n                //this.content.style.display = \"none\";  // Hide content area\n                // set the window-container height to 50px\n                this.container.style.height = \"120px\"; // Set height to 50px\n\n                this.isMinimized = true;\n            }\n\n            this.windowManager.arrangeVerticalStacked();\n\n        } else {\n            if (this.isMinimized && !force) {\n                this.restore();\n            } else {\n                // Minimize the window\n                this.container.style.display = \"none\";  // Hide content area\n                this.isMinimized = true;\n            }\n        }\n        // TODO: save the window state\n    }\n\n    // Restore the window\n    restore() {\n        // console.log('restore', this)\n        // Restore the window's content and original size\n        this.container.style.display = \"flex\";\n\n        //this.container.style.top = this.y + 'px';\n        //this.container.style.left = this.x + 'px';\n\n        // Mark as not minimized\n        this.isMinimized = false;\n        // TODO: save the window state\n\n        if (this.bp.isMobile()) {\n            this.windowManager.arrangeVerticalStacked();\n        }\n    }\n\n    maximize() {\n\n        // offset the top position by $('.desktop-menu-bar').height()\n        // so that on smaller devices the window is not hidden behind the menubar\n        if (this.isMaximized) {\n            if (this.bp.isMobile()) {\n                //this.container.style.width = \"100vw\";\n                //this.container.style.height = \"100vh\";\n                //this.container.style.top = \"0\";\n                //this.container.style.left = \"0\";\n                this.windowManager.arrangeVerticalStacked();\n\n            } else {\n                this.container.style.width = `${this.width}px`;\n                this.container.style.height = `${this.height}px`;\n                this.container.style.top = \"50px\";\n                this.container.style.left = \"50px\";\n                this.isMaximized = false;\n\n            }\n        } else {\n            let normalMenuBarHeight = 21;\n            let currentMenuBarHeight = $('.desktop-menu-bar').height() || normalMenuBarHeight;\n            let diff = currentMenuBarHeight - normalMenuBarHeight;\n            diff += (normalMenuBarHeight + 2); // add 2px for border\n            let pixelOffset = diff + 'px';\n\n            if (this.bp.isMobile()) {\n                this.container.style.width = \"100vw\";\n                this.container.style.height = \"100vh\";\n                this.container.style.top = pixelOffset;\n                this.container.style.left = \"0\";\n\n            } else {\n                this.container.style.width = \"100vw\";\n                this.container.style.height = \"calc(100vh - 104px)\";\n                this.container.style.top = pixelOffset;\n                this.container.style.left = \"0\";\n\n            }\n            this.isMaximized = true;\n        }\n        // TODO: save the window state\n\n    }\n\n    focus(propigate = true) {\n        // console.log('on focus called from Window.js')\n        if (propigate) {\n            this.windowManager.focusWindow(this);\n        }\n        this.onFocus(this);\n    }\n\n    open() {\n        // set focus to this window ( first )\n        this.focus();\n\n        try {\n            // onOpen may have additional focus events\n            this.onOpen(this);\n        } catch (err) {\n            console.error(err);\n        }\n        // TODO: save the window state ???\n        // ???? this.parent.appendChild(this.container);\n\n        if (this.bp.isMobile()) {\n            // this.minimizeAllWindows(true);\n            // alert('opening window on mobile');\n            setTimeout(() => {\n                this.windowManager.arrangeVerticalStacked();\n            }, 100);\n        }\n\n        this.bp.emit('window::open', this);\n\n        // console.log('Window opened:', this);\n        let _app = {\n            id: this.id,\n            app: this.app,\n            label: this.title,\n            icon: this.icon,\n            // app: this.app,\n            type: this.type,\n            context: this.context\n        };\n        // console.log('openWindow openItem', _app);\n        this.bp.apps.ui.windowManager.taskBar.openItem(_app);\n\n        // add the items to this.bp.apps.ui.recentApps\n        // TODO: truncate the array to a maximum of 10 items, newest first\n        this.bp.apps.ui.recentApps = this.bp.apps.ui.recentApps || this.bp.settings.recentApps || [];\n\n        // remove items with the same id if already exists\n        this.bp.apps.ui.recentApps = this.bp.apps.ui.recentApps.filter(app => app.id !== this.id);\n        \n        this.bp.apps.ui.recentApps.unshift({\n            id: this.id,\n            app: this.app,\n            label: this.label || this.title,\n            icon: this.icon,\n            type: this.type\n        });\n\n        // update the recentApps localStorage\n        this.bp.apps.ui.recentApps = this.bp.apps.ui.recentApps.slice(-10); // keep only the last 10 items\n        this.bp.set('recentApps', this.bp.apps.ui.recentApps);\n\n\n    }\n    close() {\n\n        if (this.parent) {\n            // check first to see if child is in parent\n            if (this.container.parentElement && this.container.parentElement === this.parent) {\n                this.parent.removeChild(this.container);\n            }\n        } else {\n            this.container.parentElement.removeChild(this.container);\n        }\n\n        // check to see if this is an iframe and remove event listener\n        if (this.content && this.content.contentWindow) {\n            this.content.contentWindow.removeEventListener('message', this.receiveMessage.bind(this), false);\n        }\n        if (this.content) {\n            if (this.content.parentNode) {\n                this.content.parentNode.removeChild(this.content);\n            }\n            this.content = null;\n        }\n\n        // check to see if no more windows\n        // TODO: remove this code from Window.js class ( it should not know about menubar )\n        // if window count is 0 get the menubar-set-window-as-background element and add disabled class\n        let windowCount = this.windowManager.windows.length;\n        if (windowCount === 0) {\n            let el = document.getElementById('menubar-set-window-as-background');\n            if (el) {\n                el.classList.add('disabled');\n            }\n        }\n        // console.log('removeWindow', this.id);\n        this.windowManager.removeWindow(this.id);\n\n\n        if (this.windowManager.taskBar) {\n            // remove the chat window from the taskbar\n            this.windowManager.taskBar.closeItem(this.id);\n        }\n\n        // TODO: save the window state ??? removeWindow could do it..?\n\n        this.onClose(this);\n        this.bp.emit('window::close', this);\n\n        if (this.bp.isMobile()) {\n            // this.minimizeAllWindows(true);\n            //this.windowManager.arrangeVerticalStacked();\n            setTimeout(() => {\n                this.windowManager.arrangeVerticalStacked();\n            }, 100);\n        }\n\n    }\n\n    addResizeHandles() {\n        const resizeHandle = document.createElement(\"div\");\n        resizeHandle.classList.add(\"resize-handle\");\n        this.container.appendChild(resizeHandle);\n        resizeHandle.addEventListener(\"mousedown\", (e) => this.startResize(e), { passive: false });\n        resizeHandle.addEventListener(\"touchstart\", (e) => {\n            e.preventDefault(); // Prevent default touch behavior\n            this.startResize(e.touches[0]);\n        }, { passive: false });\n    }\n\n    setSize(width, height) {\n        this.width = width;\n        this.height = height;\n        this.container.style.width = `${this.width}`;\n        this.container.style.height = `${this.height}`;\n        // save the window state\n        this.windowManager.saveWindowsState();\n    }\n\n    startResize(e) {\n        const container = this.container;\n        const startX = e.clientX;\n        const startY = e.clientY;\n        const startWidth = container.offsetWidth;\n        const startHeight = container.offsetHeight;\n\n        const onMove = (moveEvent) => {\n            const clientX = moveEvent.clientX || moveEvent.touches[0].clientX;\n            const clientY = moveEvent.clientY || moveEvent.touches[0].clientY;\n            const newWidth = startWidth + (clientX - startX);\n            const newHeight = startHeight + (clientY - startY);\n\n            // Apply new dimensions, respecting min/max constraints\n            container.style.width = `${Math.max(100, newWidth)}px`; // Example min-width\n            container.style.height = `${Math.max(100, newHeight)}px`; // Example min-height\n        };\n\n        const onUp = () => {\n            document.removeEventListener(\"mousemove\", onMove);\n            document.removeEventListener(\"mouseup\", onUp);\n            document.removeEventListener(\"touchmove\", onMove);\n            document.removeEventListener(\"touchend\", onUp);\n        };\n\n        document.addEventListener(\"mousemove\", onMove);\n        document.addEventListener(\"mouseup\", onUp);\n        document.addEventListener(\"touchmove\", onMove, { passive: false });\n        document.addEventListener(\"touchend\", onUp);\n    }\n\n    resize(e) {\n        if (!this.isResizing) return;\n        const newWidth = this.startWidth + (e.clientX - this.startX);\n        const newHeight = this.startHeight + (e.clientY - this.startY);\n\n        this.container.style.width = `${newWidth}px`;\n        this.container.style.height = `${newHeight}px`;\n    }\n\n    stopResize() {\n        this.isResizing = false;\n        // TODO: save the window state\n\n    }\n\n    setTitle(title) {\n        this.title = title;\n        this.titleBarSpan.textContent = title;\n        // save the window state\n        this.windowManager.saveWindowsState();\n    }\n\n    setContent(content) {\n        this.contentValue = content;\n        this.content.innerHTML = content;\n        // save the window state\n        this.windowManager.saveWindowsState();\n    }\n}\n\nexport default Window;\n\n\nfunction getXPathForElement(element) {\n    const fullPath = (el) => {\n        let names = [];\n        while (el.parentNode) {\n            if (el.id) { // If the element has an ID, use it as a unique identifier\n                names.unshift('#' + el.id);\n                break;\n            } else {\n                let e = el, sibling, count = 1;\n                while (sibling = e.previousSibling) {\n                    if (sibling.nodeType === 1 && sibling.tagName === e.tagName) { count++; }\n                    e = sibling;\n                }\n                const tagName = el.tagName.toLowerCase();\n                const nth = count > 1 ? `:nth-of-type(${count})` : '';\n                names.unshift(`${tagName}${nth}`);\n                el = el.parentNode;\n            }\n        }\n        return names.length ? names.join(' > ') : null;\n    };\n    return fullPath(element);\n}\n","/* Buddy Pond - WindowManager.js - Marak Squires 2023 */\nimport TaskBar from './TaskBar.js';\nimport Window from \"./Window.js\";\n\nexport default class WindowManager {\n    constructor(ui, options = {}) {\n        this.storage = options.storage || localStorage; // Use localStorage by default\n        this.storageKey = options.storageKey || 'windowsState'; // Key for storing data\n        this.windows = [];\n        this._windows = [];\n        this.options = options;\n\n        this.bp = ui.bp;\n\n        this.useKeyboardControls = true;\n\n        if (typeof options.useKeyboardControls === \"boolean\") {\n            this.useKeyboardControls = options.useKeyboardControls;\n        }\n\n        if (typeof options.hideTaskBar === \"boolean\") {\n            this.hideTaskBar = options.hideTaskBar;\n        }\n\n        if (typeof options.openWindow === \"function\") {\n            this._openWindow = options.openWindow;\n        } else {\n            this._openWindow = function (name, config) {\n                const window = this.createWindow(config);\n                window.hydrate(config);\n            }\n        }\n\n        this.taskBar = new TaskBar({\n            bp: this.bp,\n            homeCallback: () => {\n\n                if (!this.state) {\n                    // save current window positions\n                    this.lastPositionsBeforeArranged = this.windows.map(w => {\n                        return {\n                            x: w.x,\n                            y: w.y,\n                            height: w.height,\n                            width: w.width\n                        }\n                    });\n                    // console.log('lastPositionsBeforeArranged', this.lastPositionsBeforeArranged);\n                    this.state = 'maximized';\n                }\n\n\n                if (this.state === 'minimized') {\n                    this.minimizeAllWindows();\n                    // this.arrangeHorizontalStacked();\n                    this.state = 'maximized';\n\n                } else if (this.state === 'stacked-vertical') {\n                    // stack-vertical has been removed ( for now )\n                    // it wasn't looking good as a default and was rarely used\n                    /*\n                    // restore all windows to their previous positions\n                    this.windows.forEach((w, i) => {\n                        w.move(this.lastPositionsBeforeArranged[i].x, this.lastPositionsBeforeArranged[i].y);\n                        w.setSize(this.lastPositionsBeforeArranged[i].width + 'px', this.lastPositionsBeforeArranged[i].height + 'px');\n                    });\n                    this.state = 'maximized';\n                    */\n\n                } else if (this.state === 'stacked-horizontal') {\n                    // this.arrangeVerticalStacked();\n                    // this.state = 'stacked-vertical';\n                    // restore all windows to their previous positions\n                    this.windows.forEach((w, i) => {\n                        w.move(this.lastPositionsBeforeArranged[i].x, this.lastPositionsBeforeArranged[i].y);\n                        w.setSize(this.lastPositionsBeforeArranged[i].width + 'px', this.lastPositionsBeforeArranged[i].height + 'px');\n                    });\n                    this.state = 'maximized';\n\n                } else {\n                    this.minimizeAllWindows(true);\n                    this.windows.forEach((w, i) => {\n                        w.move(this.lastPositionsBeforeArranged[i].x, this.lastPositionsBeforeArranged[i].y);\n                        w.setSize(this.lastPositionsBeforeArranged[i].width + 'px', this.lastPositionsBeforeArranged[i].height + 'px');\n                    });\n\n                    this.state = 'minimized';\n\n                }\n\n                // close all windows\n                // this.minimizeAllWindows();\n                // this.windowsClosed = true;\n\n                // hide all legacy BP windows\n                $('.window').hide();\n                $('.window').removeClass('window_stack');\n\n            }\n        });\n\n        if (this.options.hideTaskBar) {\n            this.taskBar.taskBarElement.style.display = 'none';\n        }\n\n        if (this.useKeyboardControls) {\n            window.addEventListener(\"keydown\", (e) => {\n                // alert(this.bp.editingMode);\n                if (e.key === \"Escape\" && !this.bp.ignoreUIControlKeys) {\n                    // alert(\"Escape key pressed\");\n                    // find the window with the highest depth and close it\n\n                    // first check to see if there is a dialog open, close that first\n                    const dialog = document.querySelector('.dialog');\n                    if (dialog) {\n                        dialog.remove();\n                        return;\n                    }\n\n                    const window = this.windows[0]; // no sort needed, windows are already sorted by depth\n                    if (window) {\n                        window.close();\n                    }\n                }\n            });\n        }\n\n    }\n\n    createWindow(options) {\n\n        // check to see if there is previous window data in this._windows\n        // check by id, if found, hydrate the window\n        // This is a temporary solution until full app hydration is back online\n        // This solution will allow for position and size to be saved and restored\n        options = { ...options, ...this.options.window };\n        // console.log('createWindow', options);\n        let previousWindowData = this._windows.find(w => w.id === options.id);\n        if (previousWindowData) {\n            // just merge the previous window data with the new options\n            options = { ...previousWindowData, ...options };\n        }\n\n        // check to see if window already exists with id\n        const existingWindow = this.getWindow(options.id);\n        let window;\n\n        if (existingWindow) {\n            window = existingWindow;\n            this.focusWindow(window); // Focus the newly created window\n            return window;\n        }\n        options.bp = this.bp;\n        window = new Window(options, this);\n\n        window.container.addEventListener(\"mousedown\", () => {\n            this.focusWindow(window);\n        });\n        this.addWindow(window);\n        this.focusWindow(window); // Focus the newly created window\n\n        // when opening a window, automatically add it to the taskbar\n        //alert(window.id)\n        /*\n        this.taskBar.openItem({\n            id: window.app,\n            title: window.title,\n            icon: window.icon,\n            onClick: () => {\n                // toggle window minimize / restore state\n                if (this.isMobile()) {\n                    // this.minimizeAllWindows(true);\n                    this.arrangeVerticalStacked();\n                    // we could minimize all other windows here\n                    // minimizeAllWindows();\n                }\n                if (window.isMinimized) {\n                    window.restore();\n                    window.focus();\n                } else {\n                    window.minimize();\n                }\n            }\n        });\n        */\n\n        return window;\n    }\n\n    isMobile() {\n        return window.innerWidth < 1000;\n    }\n\n    addWindow(window) {\n        this.windows.push(window);\n        this.saveWindowsState(); // Save state when a window is added\n        this.updateFocus();\n    }\n\n    removeWindow(window) {\n        // console.log(\"Removing window\", window);\n        this.windows = this.windows.filter(w => w.id !== window);\n        //console.log(\"Remaining windows\", this.windows);\n        this.saveWindowsState(); // Save state when a window is removed\n        this.updateFocus();\n    }\n\n    focusWindow(window) {\n        // window can be the window instance or the window id\n        if (typeof window === 'string') {\n            window = this.getWindow(window);\n        }\n\n        // console.log(\"Focusing window\", window);\n\n        // TODO: this isn't working consistenly?  there seems to be an issue with index\n        // console.log(\"Focusing window\", window.id);\n        const index = this.windows.indexOf(window);\n        if (index !== -1) {\n            this.windows.splice(index, 1);\n            this.windows.unshift(window);\n            // console.log('Focusing window', window.id, 'at index', index);\n            this.updateFocus();\n            window.focus(false);\n            this.saveWindowsState(); // Save state when focus changes\n        }\n        // iterate through all windows and set isFocused to false\n        // set this window isFocused to true\n        this.windows.forEach(w => {\n            if (w.id !== window) {\n                w.isFocused = false;\n\n            } else {\n                window.isFocused = true;\n\n            }\n        });\n    }\n\n    updateFocus() {\n        // console.log(\"Updating focus\");\n        this.windows.forEach((window, index) => {\n            // console.log(\"Setting depth for window\", window.id, \"to\", 1000 - index);\n            // console.log(\"setting depth for window\", window.id, \"to\", 1000 - index);\n            window.setDepth(1000 - index); // Higher index, higher depth\n        });\n    }\n\n    closeAllWindows() {\n        this.windows.forEach(window => window.close());\n        this.windows = [];\n        this.storage.removeItem(this.storageKey); // Clear storage when all windows are closed\n    }\n\n    minimizeAllWindows(force = false) {\n        if (!this.windowsHiding) {\n            this.windowsHiding = true;\n        } else {\n            this.windowsHiding = false;\n        }\n        this.windows.forEach(window => {\n\n            if (!this.windowsHiding || force) {\n                window.minimize(force);\n            } else {\n                window.restore();\n            }\n        });\n    }\n\n    getWindow(id) {\n        // console.log('searching for', id, 'in', this.windows)\n        return this.windows.find(w => w.id === id);\n    }\n\n    findWindows({ app, type }) {\n        if (!app) {\n            console.warn(\"No app provided to findWindows\");\n            return [];\n        }\n\n        // Normalize app and type to arrays for unified matching\n        const apps = Array.isArray(app) ? app : [app];\n        const types = type ? (Array.isArray(type) ? type : [type]) : null;\n\n        return this.windows.filter(w => {\n            const appMatch = apps.includes(w.app);\n            const typeMatch = types ? types.includes(w.type) : true;\n            return appMatch && typeMatch;\n        });\n    }\n\n    saveWindowsState() {\n        const state = JSON.stringify(this.windows.map(window => window.serialize()));\n        // console.log(\"Saving windows state\", JSON.parse(state));\n        this.storage.setItem(this.storageKey, state);\n    }\n\n    // Remark: This should probably be mostly in settings app or a separate app\n    loadWindows() {\n        const serializedWindows = this.storage.getItem(this.storageKey);\n        if (serializedWindows) {\n            this.restoreWindows(serializedWindows);\n        }\n    }\n\n    arrangeVerticalStacked() {\n        let containerHeight = document.body.clientHeight - 100; // Adjust for container and offset\n        let windowWidth = document.body.clientWidth - 10; // Adjust for container and offset\n        const defaultWindowHeight = containerHeight * 0.8; // Default height for non-minimized windows\n        const minimizedHeight = 120; // Height for minimized windows\n        const gap = 10; // Optional gap between windows for better spacing\n        let totalY = 0; // Initialize Y position\n\n        // console.log('window count', this.windows.length, 'defaultWindowHeight', defaultWindowHeight, 'windowWidth', windowWidth);\n        // console.log(this.windows);\n\n        this.windows.reverse().forEach((window, index) => {\n            // Determine the height for the current window\n            let currentWindowHeight = window.isMinimized ? minimizedHeight : defaultWindowHeight;\n\n            // console.log(\"index\", index, window.title, 'isMinimized', window.isMinimized, 'currentWindowHeight', currentWindowHeight, 'windowWidth', windowWidth);\n\n            // Set window size and position\n            window.setSize(windowWidth + 'px', currentWindowHeight + 'px'); // Set size\n            window.move(0, totalY); // Move to calculated Y position\n\n            // Increment totalY for the next window\n            totalY += currentWindowHeight + gap; // Add current window's height and gap\n\n            // console.log(\"totalY\", totalY, \"currentWindowHeight\", currentWindowHeight, \"windowWidth\", windowWidth);\n        });\n\n        // Position the shortCutsContainer below the last window\n        // console.log('setting shortCutsContainer top to', totalY);\n        if (this.bp.apps.desktop && this.bp.apps.desktop.shortCutsContainer) {\n            this.bp.apps.desktop.shortCutsContainer.style.position = 'absolute';\n            this.bp.apps.desktop.shortCutsContainer.style.left = '0px';\n            this.bp.apps.desktop.shortCutsContainer.style.top = totalY + 'px';\n        }\n    }\n\n    arrangeHorizontalStacked() {\n        const containerWidth = document.body.clientWidth; // Adjust to your specific container if not the body\n        const numWindows = this.windows.length;\n        let windowWidth = containerWidth / numWindows;\n        windowWidth -= 10; // Adjust to your desired offset\n        this.windows.forEach((window, index) => {\n            let xPos = windowWidth * index;\n            xPos += 5;\n            xPos += 10 * index; // Adjust to your desired offset\n            window.setSize(windowWidth + 'px', 'calc(100% - 80px)'); // Assuming you have a resize method\n            window.move(xPos, 30); // Assuming you have a move method\n        });\n\n    }\n\n    arrangeCascadeFromTopLeft() {\n        const offset = 20; // Adjust to your desired offset\n        this.windows.forEach((window, index) => {\n            const xPos = offset * index;\n            const yPos = offset * index;\n            window.move(xPos, yPos); // Assuming you have a move method\n        });\n    }\n\n    // Remark: This should probably be mostly in settings app or a separate app\n    // Restore windows from serialized state\n    restoreWindows(serializedWindows, inflate = false) {\n        const windowsData = JSON.parse(serializedWindows);\n        // console.log(\"Restoring windows\", windowsData);\n        // alert(\"Restoring windows from storage, this will be removed in the future, please use the settings app to manage windows\");\n        this._windows = windowsData;\n\n        if (!inflate) {\n            // for now, probably better suited elsewhere\n            return;\n        }\n        windowsData.forEach(data => {\n            // check to see if window already exists with id\n            const existingWindow = this.getWindow(data.id);\n            if (existingWindow) {\n                console.log(\"WARNING: Window with id\", data.id, \"already exists, hydrating instead of creating new window\");\n                existingWindow.hydrate(data);\n                return;\n            }\n            data.parent = document.querySelector(data.parent);\n            // console.log(\"hydrating window\", data);\n            // this.openWindow(data.app, data);\n            //const window = this.createWindow(data);\n            //window.hydrate(data);\n        });\n    }\n}","export default class CountdownManager {\n    constructor() {\n        this.intervalId = null;\n        this.expiryCallbacks = new WeakMap(); // store per-element callbacks\n    }\n\n    updateCountdowns() {\n        const countdownEls = $('.countdown-date').filter(function () {\n            return $(this).data('expired') !== true;\n        });\n\n        if (countdownEls.length === 0) {\n            if (this.intervalId) {\n                clearInterval(this.intervalId);\n                this.intervalId = null;\n                if (bp?.apps?.ui) {\n                    bp.apps.ui.countdownTimer = null;\n                }\n            }\n            return;\n        }\n\n        countdownEls.each((_, el) => {\n            const $el = $(el);\n\n            const expiry = new Date($el.data('expiry')).getTime();\n            const now = Date.now();\n            const distance = expiry - now;\n\n            if (!$el.data('duration')) {\n                const ctime = $el.data('ctime');\n                if (ctime) {\n                    $el.data('duration', expiry - ctime);\n                }\n            }\n            // console.log('distance for', $el, distance);\n            // distance is going negative? on recurse?\n            if (distance < 0) {\n                $el.data('expired', true);\n\n                const cb = this.expiryCallbacks.get(el);\n                if (typeof cb === 'function') {\n                    cb($el);\n                    this.expiryCallbacks.delete(el); // Cleanup\n                }\n\n                return;\n            }\n\n            const days = Math.floor(distance / (1000 * 60 * 60 * 24));\n            const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n            const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n            const seconds = Math.floor((distance % (1000 * 60)) / 1000);\n\n            let prefix = '';\n            let timeParts = [];\n\n            if (days > 0) {\n                prefix = `${days} Day${days > 1 ? 's' : ''} `;\n                timeParts.push(hours.toString().padStart(2, '0'));\n            } else if (hours > 0) {\n                timeParts.push(hours.toString());\n            }\n\n            timeParts.push(minutes.toString().padStart(2, '0'));\n            timeParts.push(seconds.toString().padStart(2, '0'));\n\n            $el.text(prefix + timeParts.join(':'));\n        });\n    }\n\n    /**\n     * Start a countdown on the given jQuery element\n     * @param {jQuery} $el - The element to attach the countdown to\n     * @param {string|Date} expiry - Expiry date/time\n     * @param {function} [onExpire] - Optional callback when countdown expires\n     */\n    startCountdown($el, expiry, onExpire) {\n        const expiryTime = new Date(expiry).getTime();\n        const now = Date.now();\n        const duration = expiryTime - now;\n\n        // console.log('Starting countdown for', $el, expiry);\n\n        $el\n            .data('expiry', expiryTime)\n            .data('ctime', now)\n            .data('duration', duration)\n            .data('expired', false);\n\n        if (typeof onExpire === 'function') {\n            this.expiryCallbacks.set($el[0], onExpire);\n        }\n\n        if (!this.intervalId) {\n            this.intervalId = setInterval(() => this.updateCountdowns(), 1000);\n            if (bp?.apps?.ui) {\n                bp.apps.ui.countdownTimer = this.intervalId;\n            }\n        }\n\n        this.updateCountdowns(); // Immediate update\n    }\n}\n","// Remark: We may be able to remove UI and put all this logic in the desktop app\nimport WindowManager from \"./Window/WindowManager.js\";\nimport CountdownManager from \"../ui/CountdownManager.js\";\n\nexport default class UI {\n    constructor(bp, options = {}) {\n        this.bp = bp;\n\n        let windowManagerOptions = {};\n        windowManagerOptions.openWindow = this.bp.open.bind(this.bp),\n        windowManagerOptions.window = options.window || {};\n        windowManagerOptions.hideTaskBar = options.hideTaskBar;\n        this.windowManager = new WindowManager(this, windowManagerOptions);\n        this.bp.windows = this.windowManager.windows;\n        // will re-load any previous stored metadata about windows\n        // storage provider is defaulted to localStorage\n        this.windowManager.loadWindows();\n\n        options.parent = options.parent || document.body;\n\n        // options.parent.classList.add('droparea');\n\n        this.options = options;\n\n        if (typeof options.fontAwesome !== 'boolean') {\n            options.fontAwesome = true;\n        }\n\n        this.parent = options.parent;\n\n        this.countdownManager = new CountdownManager(this.bp);\n        // this.countdownManager.updateCountdowns();\n        let that = this;\n        this.bp.window = that.windowManager.createWindow.bind(that.windowManager);\n        return this;\n    }\n\n    async init() {\n\n        // base CSS for ui, this can be themed in the future\n        if (!this.options.noCSS) {\n            this.bp.appendCSS('/v5/apps/based/ui/ui.css'); // no need to wait for CSS to load?\n            if (this.bp.mode !== 'prod') {\n                this.bp.appendCSS('/v5/apps/based/ui/mobile.css'); // no need to wait for CSS to load?\n                this.bp.appendCSS('/v5/apps/based/ui/Window/Window.css'); // no need to wait for CSS to load?\n                this.bp.appendCSS('/v5/apps/based/ui/Window/TaskBar.css'); // no need to wait for CSS to load?\n                this.bp.appendCSS('/v5/apps/based/ui/Window/StartPanel.css'); // no need to wait for CSS to load?\n\n            }\n        }\n\n        if (this.options.fontAwesome) {\n            this.bp.appendCSS('/v5/vendor/font-awesome/css/fontawesome.css', false, true);\n            this.bp.appendCSS('/v5/vendor/font-awesome/css/all.min.css', false, true);\n        }\n\n        // TODO: add these lines back after removing v4 completely ( as jQuery is already loaded in v4)\n        if (!this.options.noZepto) {\n            // If you need jQuery or another version of $\n            // we have the ability to not load Zepto as $\n            //await this.bp.appendScript('/v5/vendor/zepto.min.js');\n        } else {\n            //await this.bp.appendScript('/v5/vendor/jquery.min.js');\n\n        }\n\n        // await this.bp.appendScript('/desktop/assets/js/jquery.js');\n\n\n        if (!this.options.noTabs) {\n            // what happened here with config? we shouldn't need to reference host here,\n            // TODO: check implementation of importModule with options\n            let SimpleTabs = await this.bp.importModule(this.bp.config.host + '/v5/apps/based/ui/SimpleTabs.js', {}, false)\n            this.Tabs = SimpleTabs.default;\n\n        }\n\n        await this.bp.appendScript('/v5/vendor/DateFormat.js');\n\n        // bind common document events\n        // TODO: move UI events to separate file\n        let d = document;\n\n        $(d).on('click', '.open-app', function (e) {\n            let appName = $(this).data('app');\n            let context = $(e.target).data('context');\n            let type = $(this).data('type');\n            // let output = $(this).data('output');\n\n            console.log('open-app ' + appName);\n            // check to see if legacy app ( for now)\n            bp.open(appName, { context, type });\n\n        });\n\n        return 'loaded ui';\n    }\n\n    async appendToElement(el) {\n        console.log('appendToElement', this);\n        let html = await fetchHTMLFragment('ui.html'); // TODO: might need root\n        console.log(html);\n        el.innerHTML = html;\n        return 'hello ui';\n    }\n\n    async loadDocumentBody() {\n        console.log('loadDocumentBody', this);\n        let html = await this.bp.fetchHTMLFragment('/v5/apps/based/ui/ui.html'); // TODO: might need root\n        console.log(html);\n        $('body').append(html);\n        //document.body.innerHTML = html;\n        return 'hello ui';\n\n    }\n\n    toggleFullScreen() {\n        if (document.fullscreenElement) {\n            document.exitFullscreen();\n        } else {\n            document.documentElement.requestFullscreen();\n        }\n    }\n\n}"],"names":["StartPanel","constructor","onAppLaunch","bp","this","panelElement","open","close","panel","document","createElement","className","searchInput","id","type","placeholder","recentSection","innerHTML","recentGrid","appendChild","allSection","allGrid","body","window","apps","ui","recentApps","slice","forEach","appData","app","createAppTile","appList","desktop","Object","entries","appName","icon","addEventListener","query","value","toLowerCase","querySelectorAll","el","label","dataset","name","_app","console","log","showResult","includes","categories","some","cat","style","display","closeEventHandler","event","$","target","hasClass","contains","focus","remove","removeEventListener","tile","img","src","alt","textContent","onclick","async","context","TaskBar","homeCallback","taskBarElement","items","Map","shortcuts","Set","addItem","onClick","startPanel","isShortcut","e","preventDefault","closest","showContextMenu","clientX","clientY","enableDragAndDrop","x","y","existing","querySelector","item","get","menu","position","left","visibility","makeOption","handler","option","isOpen","closeItem","openItem","has","delete","add","installedTaskBarApps","settings","taskbar_apps","set","requestAnimationFrame","menuHeight","offsetHeight","top","removeMenu","setTimeout","once","config","ev","itemElement","existingWindow","windowManager","getWindow","isMinimized","restore","minimize","stopPropagation","draggable","itemText","itemIcon","height","width","call","alertItem","element","classList","removeItem","win","warn","removeChild","taskBarApps","getItem","dragged","over","children","indexOf","insertBefore","newOrder","Array","from","map","newTaskBarApps","idCounter","Window","options","title","content","iframeContent","z","parent","onFocus","onClose","onOpen","onMessage","onLoad","resizeable","preventOverlap","canBeBackground","getElementById","isMaximized","container","contentValue","isActive","windows","saveWindowsState","removeWindow","startDrag","bind","drag","stopDrag","createWindow","screenWidth","innerWidth","screenHeight","innerHeight","adjustedPosition","newWindow","buffer","adjustedX","adjustedY","x1","y1","w1","h1","x2","y2","w2","h2","parseInt","checkOverlap","adjustPosition","zIndex","titleBar","isMobile","ondblclick","maximize","iconTitleBar","titleBarSpan","passive","controls","minimizeButton","maximizeButton","closeButton","initContentArea","addResizeHandles","onload","iframeDoc","contentDocument","contentWindow","write","setupMessageHandling","length","script","receiveMessage","sendMessage","message","postMessage","data","handleReceivedMessage","move","serialize","parentXpath","names","parentNode","unshift","sibling","count","previousSibling","nodeType","tagName","nth","join","fullPath","hydrate","Number","updateWindow","setDepth","depth","setAsBackground","isBackground","restoreWindowFromBackground","isDragging","cursor","iframe","pointerEvents","getEventCoordinates","offsetX","offsetLeft","offsetY","offsetTop","bottomLimit","rightLimit","startsWith","touch","touches","changedTouches","force","arrangeVerticalStacked","normalMenuBarHeight","diff","pixelOffset","propigate","focusWindow","err","error","emit","taskBar","filter","parentElement","resizeHandle","startResize","setSize","startX","startY","startWidth","offsetWidth","startHeight","onMove","moveEvent","newWidth","newHeight","Math","max","onUp","resize","isResizing","stopResize","setTitle","setContent","WindowManager","storage","localStorage","storageKey","_windows","useKeyboardControls","hideTaskBar","openWindow","_openWindow","state","lastPositionsBeforeArranged","w","minimizeAllWindows","i","hide","removeClass","key","ignoreUIControlKeys","dialog","previousWindowData","find","addWindow","push","updateFocus","index","splice","isFocused","closeAllWindows","windowsHiding","findWindows","isArray","types","appMatch","typeMatch","JSON","stringify","setItem","loadWindows","serializedWindows","restoreWindows","containerHeight","clientHeight","windowWidth","clientWidth","defaultWindowHeight","totalY","reverse","currentWindowHeight","shortCutsContainer","arrangeHorizontalStacked","xPos","arrangeCascadeFromTopLeft","yPos","inflate","windowsData","parse","CountdownManager","intervalId","expiryCallbacks","WeakMap","updateCountdowns","countdownEls","each","_","$el","expiry","Date","getTime","distance","now","ctime","cb","days","floor","hours","minutes","seconds","prefix","timeParts","toString","padStart","text","clearInterval","countdownTimer","startCountdown","onExpire","expiryTime","duration","setInterval","UI","windowManagerOptions","fontAwesome","countdownManager","init","noCSS","appendCSS","mode","noZepto","noTabs","SimpleTabs","importModule","host","Tabs","default","appendScript","d","on","appendToElement","html","fetchHTMLFragment","loadDocumentBody","append","toggleFullScreen","fullscreenElement","exitFullscreen","documentElement","requestFullscreen"],"mappings":"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"}