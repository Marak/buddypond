{"version":3,"file":"ui.js","sources":["../../../apps/based/ui/Window/StartPanel.js","../../../apps/based/ui/Window/TaskBar.js","../../../apps/based/ui/Window/Window.js","../../../apps/based/ui/Window/WindowManager.js","../../../apps/based/ui/CountdownManager.js","../../../apps/based/ui/ui.js"],"sourcesContent":["/* StartPanel.js - Marak Squires 2025 - BuddyPond */\nexport default class StartPanel {\n    constructor({ onAppLaunch, bp } = {}) {\n        this.onAppLaunch = onAppLaunch || function () { };\n        this.bp = bp;\n        this.panelElement = null;\n    }\n\n    open() {\n        if (this.panelElement) {\n            this.close();\n            return;\n        }\n\n        const panel = document.createElement('div');\n        panel.className = 'start-panel';\n        panel.style.display = 'none'; // hide initially for animation\n\n        const searchInput = document.createElement('input');\n        searchInput.id = 'start-panel-search';\n        searchInput.className = 'start-panel-search';\n        searchInput.type = 'text';\n        searchInput.placeholder = 'Search apps...';\n        searchInput.autocomplete = 'off';\n\n        const recentSection = document.createElement('div');\n        recentSection.className = 'start-panel-section';\n        recentSection.innerHTML = `<h3>Recent Apps</h3>`;\n        const recentGrid = document.createElement('div');\n        recentGrid.className = 'start-panel-grid';\n        recentSection.appendChild(recentGrid);\n\n        const allSection = document.createElement('div');\n        allSection.className = 'start-panel-section';\n        allSection.innerHTML = `<h3>All Apps</h3>`;\n        const allGrid = document.createElement('div');\n        allGrid.className = 'start-panel-grid';\n        allSection.appendChild(allGrid);\n\n        panel.appendChild(searchInput);\n        panel.appendChild(recentSection);\n        panel.appendChild(allSection);\n\n        document.body.appendChild(panel);\n        this.panelElement = panel;\n        // Animate it in\n        $(panel).css({\n            display: 'block',\n            opacity: 1,\n            transform: 'translateY(100%)',\n            transition: 'all 300ms ease-out'\n        });\n\n        requestAnimationFrame(() => {\n            $(panel).css({\n                opacity: 1,\n                transform: 'translateY(0)'\n            });\n        });\n\n\n        const recentApps = (window.bp?.apps?.ui?.recentApps || []).slice(0, 10);\n        recentApps.forEach(appData => {\n            const app = this.createAppTile(appData);\n            recentGrid.appendChild(app);\n        });\n\n        const appList = window.bp?.apps?.desktop?.appList || {};\n        const allAppEntries = Object.entries(appList);\n        allAppEntries.forEach(([appName, appData]) => {\n            if (appData.adminOnly && this.bp.me !== 'Marak') return;\n            appData.app = appData.app || appName;\n            appData.id = appData.id || appName;\n            const app = this.createAppTile(appData, appData.icon);\n            allGrid.appendChild(app);\n        });\n\n        searchInput.addEventListener('input', () => {\n            const query = searchInput.value.toLowerCase();\n\n            recentSection.style.display = query.length > 0 ? 'none' : '';\n            allGrid.querySelectorAll('.start-panel-app').forEach(el => {\n                const label = el.dataset.name.toLowerCase();\n                const _app = this.bp.apps.desktop.appList[el.dataset.id];\n                let showResult = label.includes(query);\n                if (!showResult && _app?.categories) {\n                    showResult = _app.categories.some(cat => cat.toLowerCase().includes(query));\n                }\n                el.style.display = showResult ? 'flex' : 'none';\n            });\n        });\n\n        this.closeEventHandler = (event) => {\n            if ($(event.target).hasClass('taskbar-item')) return;\n            if (this.panelElement && !this.panelElement.contains(event.target) && event.target !== searchInput) {\n                this.close();\n            }\n        };\n\n        document.addEventListener('click', this.closeEventHandler);\n        if (!this.bp.isMobile()) {\n            // Remark: We don't want to focus the search input on mobile devices, since this brings up the keyboard\n            searchInput.focus();\n        }\n    }\n\n\n    close() {\n        if (this.panelElement) {\n            const $panel = $(this.panelElement);\n\n            $panel.css({\n                transform: 'translateY(0)',\n                opacity: 1,\n                transition: 'all 300ms ease-in'\n            });\n\n            requestAnimationFrame(() => {\n                $panel.css({\n                    transform: 'translateY(100%)',\n                    opacity: 1\n                });\n\n                setTimeout(() => {\n                    $panel.remove();\n                    this.panelElement = null;\n                }, 300); // match transition duration\n            });\n        }\n\n        if (this.closeEventHandler) {\n            document.removeEventListener('click', this.closeEventHandler);\n            this.closeEventHandler = null;\n        }\n    }\n\n\n    createAppTile(appData, icon = 'icons/default.png') {\n        // console.log('Creating app tile for:', appData);\n        let name = appData.id || appData.appName || appData.name || appData.label || 'Unknown App';\n        icon = appData.icon || icon || 'icons/default.png';\n        const tile = document.createElement('div');\n        tile.className = 'start-panel-app';\n        tile.dataset.name = name;\n        tile.dataset.id = appData.id || appData.app || name;\n        tile.dataset.app = appData.app || appData.id || name;\n\n        const img = document.createElement('img');\n        img.src = icon;\n        img.alt = name;\n\n        const label = document.createElement('div');\n        label.textContent = appData.label || name;\n\n        tile.appendChild(img);\n        tile.appendChild(label);\n\n        tile.onclick = async () => {\n            let win = await this.bp.open(appData.app || appData.id, { context: appData.context });\n            this.onAppLaunch(name);\n            this.close();\n        };\n\n        return tile;\n    }\n}\n\n// Enable keyboard navigation for the start panel\nStartPanel.prototype.enableKeyboardNavigation = function (panel, searchInput) {\n    // Add keyboard navigation\n    let currentIndex = -1;\n    let appTiles = [];\n\n    function updateTilesList() {\n        appTiles = Array.from(panel.querySelectorAll('.start-panel-app'))\n            .filter(el => el.style.display !== 'none');\n    }\n    updateTilesList();\n\n    // Add highlight class\n    function focusTile(index) {\n        console.log('Focusing tile at index:', index);\n        appTiles.forEach((el, i) => {\n            el.classList.toggle('focused', i === index);\n            if (i === index) el.scrollIntoView({ block: 'nearest' });\n        });\n        currentIndex = index;\n    }\n\n    // Clear highlight\n    function clearFocus() {\n        appTiles.forEach(el => el.classList.remove('focused'));\n        currentIndex = -1;\n    }\n\n    searchInput.addEventListener('keydown', (e) => {\n        if (e.key === 'ArrowDown') {\n            updateTilesList();\n            if (appTiles.length > 0) {\n                focusTile(0);\n                e.preventDefault();\n            }\n        }\n    });\n\n    let ROW_LENGTH = 5;\n\n    panel.addEventListener('keydown', (e) => {\n        console.log('Key pressed:', e.key);\n        if (appTiles.length === 0) return;\n\n\n        // tab key should select the first tile\n        if (e.key === 'Tab') {\n            // TODO: shift tab should select the last tile\n            if (currentIndex === -1) {\n                focusTile(0);\n            } else {\n                // Move to next tile\n                let nextIndex = currentIndex + 1;\n                if (nextIndex < appTiles.length) {\n                    focusTile(nextIndex);\n                } else {\n                    // Stay on last tile if next tile is out of bounds\n                    focusTile(appTiles.length - 1);\n                }\n            }\n            e.preventDefault();\n            return;\n        }\n\n        if (e.key === 'ArrowDown') {\n            // ✅ If nothing is focused, focus first tile\n            if (currentIndex === -1) {\n                focusTile(0);\n            } else {\n                // ✅ Move down one row\n                let nextIndex = currentIndex + ROW_LENGTH;\n                if (nextIndex < appTiles.length) {\n                    focusTile(nextIndex);\n                } else {\n                    // Stay on last tile if next row is out of bounds\n                    focusTile(appTiles.length - 1);\n                }\n            }\n            e.preventDefault();\n        }\n\n        if (e.key === 'ArrowUp') {\n            if (currentIndex === -1) {\n                focusTile(0);\n            } else {\n                // ✅ Move up one row\n                let prevIndex = currentIndex - ROW_LENGTH;\n                if (prevIndex >= 0) {\n                    focusTile(prevIndex);\n                } else {\n                    // Stay on first tile if already in top row\n                    focusTile(0);\n                }\n            }\n            e.preventDefault();\n        }\n\n        if (e.key === 'ArrowRight') {\n            if (currentIndex === -1) {\n                focusTile(0);\n            } else {\n                focusTile(Math.min(currentIndex + 1, appTiles.length - 1));\n            }\n            e.preventDefault();\n        }\n\n        if (e.key === 'ArrowLeft') {\n            if (currentIndex === -1) {\n                focusTile(0);\n            } else {\n                focusTile(Math.max(currentIndex - 1, 0));\n            }\n            e.preventDefault();\n        }\n\n        if (e.key === 'Enter' && currentIndex >= 0) {\n            appTiles[currentIndex].click();\n            e.preventDefault();\n        }\n\n        if (e.key === 'Escape') {\n            clearFocus();\n            searchInput.focus();\n        }\n    });\n}","import StartPanel from \"./StartPanel.js\";\n\nexport default class TaskBar {\n    constructor({ homeCallback, bp } = {}) {\n        this.taskBarElement = document.createElement(\"div\");\n        this.taskBarElement.className = \"taskbar-container\";\n        document.body.appendChild(this.taskBarElement);\n\n        // Create containers for anchored and scrollable items\n        this.taskbarLeft = document.createElement(\"div\");\n        this.taskbarLeft.className = \"taskbar-left\";\n        this.taskBarElement.appendChild(this.taskbarLeft);\n\n        this.taskbarItems = document.createElement(\"div\");\n        this.taskbarItems.className = \"taskbar-items\";\n        this.taskBarElement.appendChild(this.taskbarItems);\n\n        this.taskbarRight = document.createElement(\"div\");\n        this.taskbarRight.className = \"taskbar-right\";\n        this.taskBarElement.appendChild(this.taskbarRight);\n\n        this.bp = bp; // Reference to the base platform instance\n        this.items = new Map(); // id -> config\n        this.shortcuts = new Set(); // id\n\n          // Add scroll listener for indicator visibility\n        this.taskbarItems.addEventListener('scroll', () => {\n            const isAtEnd = this.taskbarItems.scrollLeft + this.taskbarItems.clientWidth >= this.taskbarItems.scrollWidth - 1;\n            console.log(\"Scroll end reached:\", isAtEnd);\n            this.taskbarItems.setAttribute('data-scroll-end', isAtEnd);\n        });\n\n        function openStartPanel() {\n            if (!this.startPanel) {\n                this.startPanel = new StartPanel({ bp: this.bp });\n            }\n            this.startPanel.open();\n        }\n\n        // Add \"home\" button (anchored right)\n        if (homeCallback) {\n            this.addItem({\n                id: \"home\",\n                label: \"Home\",\n                onClick: openStartPanel,\n                icon: \"desktop/assets/images/icons/icon_mantra_64.png\",\n                isShortcut: true,\n                anchor: \"right\"\n            });\n        }\n\n        // Add \"settings\" button (anchored left on mobile)\n        if (this.bp.isMobile()) {\n            this.addItem({\n                id: \"settings\",\n                label: \"Settings\",\n                onClick: (e) => {\n                    e.stopPropagation();\n                    const $menu = $('.menu-bar'); // TODO: Reference class property, not DOM\n                    if ($menu.hasClass(\"mobile-active\")) {\n                        $menu.animate({ left: \"-100%\" }, 300, () => {\n                            $menu.removeClass(\"mobile-active\");\n                        });\n                    } else {\n                        $menu\n                            .css({ left: \"-100%\", display: \"flex\" })\n                            .addClass(\"mobile-active\")\n                            .animate({ left: \"0%\" }, 300);\n                    }\n                },\n                icon: \"desktop/assets/images/icons/icon_settings_64.png\",\n                isShortcut: true,\n                anchor: \"left\"\n            });\n        }\n\n        this.taskBarElement.addEventListener('contextmenu', (e) => {\n            e.preventDefault();\n            const target = e.target.closest('.taskbar-item');\n            if (!target) return;\n            const id = target.dataset.id;\n            if (!id || id === 'home' || id === 'settings') return; // Exclude anchored items\n            this.showContextMenu(id, e.clientX, e.clientY);\n        });\n\n        this.enableDragAndDrop();\n    }\n\n    showContextMenu(id, x, y) {\n        const existing = document.querySelector('.taskbar-context-menu');\n        if (existing) existing.remove();\n\n        const item = this.items.get(id);\n        if (!item) return;\n\n        const menu = document.createElement('div');\n        menu.className = 'taskbar-context-menu';\n        menu.style.position = 'fixed';\n        menu.style.left = `${x}px`;\n        menu.style.visibility = 'hidden';\n        document.body.appendChild(menu);\n\n        const makeOption = (label, handler) => {\n            const option = document.createElement('div');\n            option.className = 'taskbar-context-menu-item';\n            option.textContent = label;\n            option.onclick = () => {\n                handler();\n                this.startPanel.close();\n                menu.remove();\n            };\n            menu.appendChild(option);\n        };\n\n        if (item.isOpen) {\n            makeOption('Close', () => this.closeItem(id));\n        } else {\n            makeOption('Open', () => this.openItem(item));\n        }\n\n        if (this.shortcuts.has(id)) {\n            makeOption('Unpin from Taskbar', () => {\n                this.shortcuts.delete(id);\n                if (!item.isOpen) {\n                    this.removeItem(id);\n                }\n            });\n        } else {\n            if (item.app !== 'buddylist' && id !== 'buddylist' && item.app !== 'emulator') {\n                makeOption('Keep in Taskbar', () => {\n                    this.shortcuts.add(item.app || id);\n                    let installedTaskBarApps = this.bp.settings.taskbar_apps || {};\n                    installedTaskBarApps[item.app || id] = {\n                        app: item.app || id,\n                        context: item.context || 'default',\n                        label: item.label || id,\n                        icon: item.icon || ''\n                    };\n                    this.bp.set('taskbar_apps', installedTaskBarApps);\n                });\n            }\n        }\n\n        requestAnimationFrame(() => {\n            const menuHeight = menu.offsetHeight;\n            const viewportHeight = window.innerHeight;\n            let top = y - menuHeight - 4;\n            if (top < 0) {\n                top = y + 4;\n            }\n            menu.style.top = `${top}px`;\n            menu.style.visibility = 'visible';\n        });\n\n        const removeMenu = () => menu.remove();\n        setTimeout(() => {\n            window.addEventListener('click', removeMenu, { once: true });\n            window.addEventListener('contextmenu', removeMenu, { once: true });\n        }, 0);\n    }\n\n    addItem(config) {\n        let { app, id, context, label = \"\", onClick, icon, isShortcut = true, anchor } = config;\n\n        let installedTaskBarApps = this.bp.settings.taskbar_apps || {};\n        if (id !== 'home' && id !== 'settings') {\n            installedTaskBarApps[app || id] = {\n                id: id,\n                app: app || id,\n                context: context || 'default',\n                label: label || id,\n                icon: icon || ''\n            };\n            this.bp.set('taskbar_apps', installedTaskBarApps);\n        }\n\n        if (typeof onClick !== 'function') {\n            onClick = async (ev, itemElement) => {\n                let existingWindow = this.bp.apps.ui.windowManager.getWindow(id);\n                if (!existingWindow) {\n                    let win = await this.bp.open(app || id, { context });\n                } else {\n                    if (existingWindow.isMinimized) {\n                        existingWindow.restore();\n                        existingWindow.focus();\n                    } else {\n                        existingWindow.minimize();\n                    }\n                }\n                this.startPanel.close();\n                ev.stopPropagation();\n            };\n        }\n\n        let existing = this.taskBarElement.querySelector(`[data-id=\"${id}\"]`);\n        if (existing) return existing;\n\n        const itemElement = document.createElement(\"div\");\n        itemElement.className = \"taskbar-item\";\n        itemElement.dataset.id = id;\n        itemElement.draggable = id !== 'home' && id !== 'settings'; // Disable drag for anchored items\n\n        if (!this.bp.isMobile()) {\n            const itemText = document.createElement(\"div\");\n            itemText.className = \"taskbar-item-text\";\n            itemText.textContent = label;\n            itemElement.appendChild(itemText);\n        }\n\n        if (icon) {\n            const itemIcon = document.createElement(\"img\");\n            itemIcon.src = icon;\n            itemIcon.height = 32;\n            itemIcon.width = 32;\n            itemIcon.alt = label;\n            itemElement.appendChild(itemIcon);\n        } else {\n            itemElement.textContent = label;\n        }\n\n        itemElement.onclick = (ev) => {\n            if (onClick) onClick.call(this, ev, itemElement);\n            this.alertItem(id);\n        };\n\n        if (isShortcut) {\n            this.shortcuts.add(id);\n        }\n\n        // Append to appropriate container\n        if (id === 'home' && anchor === 'right') {\n            this.taskbarRight.appendChild(itemElement);\n        } else if (id === 'settings' && anchor === 'left') {\n            this.taskbarLeft.appendChild(itemElement);\n        } else {\n            this.taskbarItems.appendChild(itemElement);\n            // Scroll to the newly added item\n            if (this.bp.isMobile()) {\n                requestAnimationFrame(() => {\n                    itemElement.scrollIntoView({ behavior: 'smooth', inline: 'start' });\n                });\n            }\n        }\n\n        this.items.set(id, {\n            ...config,\n            element: itemElement,\n            isOpen: false,\n            isShortcut: isShortcut\n        });\n\n        return itemElement;\n    }\n\n    openItem(config) {\n        let item = this.items.get(config.id);\n        if (item) {\n            item.isOpen = true;\n            item.element.classList.add(\"taskbar-item-open\");\n            // Scroll to the opened item\n            if (this.bp.isMobile()) {\n                requestAnimationFrame(() => {\n                    item.element.scrollIntoView({ behavior: 'smooth', inline: 'start' });\n                });\n            }\n        } else {\n            this.addItem({ ...config, isShortcut: false });\n            this.openItem(config); // Scroll happens in addItem\n        }\n    }\n\n    closeItem(id) {\n        const item = this.items.get(id);\n        if (!item) return;\n\n        item.isOpen = false;\n        item.element.classList.remove(\"taskbar-item-open\");\n\n        if (!this.shortcuts.has(id)) {\n            this.removeItem(id);\n        }\n\n        const win = this.bp.apps.ui.windowManager.getWindow(id);\n        if (win) {\n            win.close();\n        } else {\n            console.warn(`No window found with ID: ${id}`);\n        }\n    }\n\n    removeItem(id) {\n        const item = this.items.get(id);\n        if (!item) return;\n\n        item.element.parentNode.removeChild(item.element);\n        this.items.delete(id);\n        this.shortcuts.delete(id);\n\n        let taskBarApps = this.bp.settings.taskbar_apps || {};\n        if (taskBarApps[id]) {\n            delete taskBarApps[id];\n            this.bp.set('taskbar_apps', taskBarApps);\n        }\n    }\n\n    getItem(id) {\n        return this.items.get(id);\n    }\n\n    alertItem(id) {\n        const item = this.items.get(id);\n        if (item) {\n            item.element.classList.add(\"taskbar-item-alert\");\n            setTimeout(() => item.element.classList.remove(\"taskbar-item-alert\"), 1000);\n        }\n    }\n\n    enableDragAndDrop() {\n        let dragged = null;\n\n        this.taskbarItems.addEventListener(\"dragstart\", (e) => {\n            dragged = e.target.closest(\".taskbar-item\");\n            if (dragged && (dragged.dataset.id === 'home' || dragged.dataset.id === 'settings')) {\n                e.preventDefault(); // Prevent dragging anchored items\n                dragged = null;\n            }\n        });\n\n        this.taskbarItems.addEventListener(\"dragover\", (e) => {\n            e.preventDefault();\n            const over = e.target.closest(\".taskbar-item\");\n            if (dragged && over && dragged !== over && over.dataset.id !== 'home' && over.dataset.id !== 'settings') {\n                const draggedIndex = [...this.taskbarItems.children].indexOf(dragged);\n                const overIndex = [...this.taskbarItems.children].indexOf(over);\n                if (draggedIndex < overIndex) {\n                    this.taskbarItems.insertBefore(over, dragged);\n                } else {\n                    this.taskbarItems.insertBefore(dragged, over);\n                }\n            }\n        });\n\n        this.taskbarItems.addEventListener(\"dragend\", () => {\n            if (dragged) {\n                const newOrder = Array.from(this.taskbarItems.children).map(item => item.dataset.id);\n                let taskBarApps = this.bp.settings.taskbar_apps || {};\n                const newTaskBarApps = {};\n                newOrder.forEach(id => {\n                    if (taskBarApps[id]) {\n                        newTaskBarApps[id] = taskBarApps[id];\n                    }\n                });\n                this.bp.set('taskbar_apps', newTaskBarApps);\n            }\n            dragged = null;\n        });\n    }\n}","// Buddy Pond - Window.js - Marak Squires 2023\n// A simple window class for creating draggable, resizable windows\n// Remark: WindowManager interface is optional and will be stubbed out if not provided\nlet idCounter = 0;\n\nclass Window {\n    constructor(options = {}, windowManager) {\n        const {\n            title = \"Window\", // Title of the window\n            width = '400px', // Default width\n            height = '300px', // Default height\n            app = 'default', // default app\n            type = 'singleton', // Default type ( intended to not have siblings )\n            context = 'default', // Default context\n            content = '', // Default content\n            iframeContent = false,\n            icon = '', // Default icon\n            x = 50, // Default x position\n            y = 50, // Default y position\n            z = 99, // Default z-index\n            parent = window.document.body, // Parent element to append to\n            id = `window-${idCounter}`, // Unique ID for the panel\n            onFocus = () => { }, // Callback when the window is focused\n            onClose = () => { }, // Callback when the window is closed\n            onOpen = () => { }, // Callback when the window is opened\n            onMessage = () => { }, // Callback when the window receives a message\n            onLoad = () => { }, // Callback when the window is loaded ( remote content )\n            className = '', // Custom classes for styling\n            resizeable = true, // Enable resizable feature\n            preventOverlap = true, // prevents direct overlap with other windows\n            canBeBackground = false // Can be set as background\n        } = options;\n\n        this.windowManager = windowManager;\n\n        // ensure that no other window has the same id\n        // we could check the windowManger.windows array for this\n        // we will check the document ( in case another system has created a window )\n        let existingWindow = document.getElementById(id);\n        if (existingWindow) {\n            console.log('Window with id already exists', id);\n            return existingWindow;\n        }\n\n        this.title = title;\n        this.icon = icon;\n        this.width = width;\n        this.height = height;\n\n        if (app !== 'default') {\n            this.app = app;\n        } else {\n            this.app = id;\n        }\n\n\n        this.type = type;\n        this.x = x;\n        this.y = y;\n        this.z = 99;\n        this.context = context;\n        this.parent = parent;\n        this.id = id;\n        this.isMaximized = false;\n        this.isMinimized = false;\n        this.container = null;\n        this.content = null;\n        this.iframeContent = iframeContent;\n        this.contentValue = content;\n        this.isActive = false;\n        this.className = className;\n        this.resizeable = resizeable;\n        this.preventOverlap = preventOverlap;\n        this.canBeBackground = canBeBackground;\n\n        windowManager = windowManager || {\n            windows: [],\n            saveWindowsState: () => { },\n            removeWindow: () => { },\n\n        };\n\n        this.bp = options.bp;\n\n        this.onFocus = onFocus;\n        this.onClose = onClose;\n        this.onOpen = onOpen;\n        this.onLoad = onLoad;\n        this.onMessage = onMessage;\n\n        this.startDrag = this.startDrag.bind(this);\n        this.drag = this.drag.bind(this);\n        this.stopDrag = this.stopDrag.bind(this);\n\n\n        this.createWindow();\n        this.open();\n\n        return this;\n    }\n\n    createWindow() {\n        // Create the main window container\n        this.container = document.createElement(\"div\");\n        this.container.classList.add(\"window-container\");\n\n        // add dataset for app, type, context\n        this.container.dataset.app = this.app;\n        this.container.dataset.type = this.type;\n        this.container.dataset.context = this.context;\n\n        if (this.className) {\n            this.container.classList.add(this.className);\n        }\n\n        if (!this.resizeable) {\n            this.container.classList.add(\"window-not-resizeable\");\n        }\n\n\n        // Helper function to check if two rectangles overlap\n        function checkOverlap(x1, y1, w1, h1, x2, y2, w2, h2, buffer = 10) {\n            // console.log('checkOverlap', x1, y1, w1, h1, x2, y2, w2, h2, buffer);\n            w1 = parseInt(w1);\n            h1 = parseInt(h1);\n            w2 = parseInt(w2);\n            h2 = parseInt(h2);\n            return (\n                x1 < x2 + w2 + buffer &&\n                x1 + w1 + buffer > x2 &&\n                y1 < y2 + h2 + buffer &&\n                y1 + h1 + buffer > y2\n            );\n        }\n\n        // Function to adjust position to prevent overlap\n        function adjustPosition(newWindow, windows, screenWidth, screenHeight, buffer = 10) {\n            let adjustedX = newWindow.x;\n            let adjustedY = newWindow.y;\n\n            // Check overlap with other windows\n            windows.forEach((win) => {\n                if (checkOverlap(adjustedX, adjustedY, newWindow.width, newWindow.height, win.x, win.y, win.width, win.height, buffer)) {\n                    // console.log('OVERLAP DETECTED');\n                    adjustedX += buffer; // Move slightly to the right\n                    // adjustedY += buffer; // Move slightly down\n                }\n            });\n\n            // Check screen boundaries\n            if (adjustedX + newWindow.width + buffer > screenWidth) {\n                adjustedX = screenWidth - newWindow.width - buffer; // Move to the left\n            }\n            if (adjustedY + newWindow.height + buffer > screenHeight) {\n                adjustedY = screenHeight - newWindow.height - buffer; // Move up\n            }\n            if (adjustedX < buffer) {\n                adjustedX = buffer; // Move to the right\n            }\n            if (adjustedY < buffer) {\n                adjustedY = buffer; // Move down\n            }\n\n            return { x: adjustedX, y: adjustedY };\n        }\n\n        // Main Window Creation Logic\n        this.container.id = this.id;\n        this.container.style.width = `${this.width}px`;\n        this.container.style.height = `${this.height}px`;\n        this.container.style.position = \"absolute\";\n\n        // Assume screen dimensions\n        const screenWidth = window.innerWidth;\n        const screenHeight = window.innerHeight;\n\n        /*\n        // Remark: We could perform a general zoom scale for mobile devices\n        if (screenWidth <= 980) {\n            // this.container.style.zoom = 1.5; // Adjust zoom for mobile\n        } else {\n            // do nothing\n        }\n        */\n\n        // Adjust position to prevent overlap\n        let adjustedPosition = {\n            x: this.x,\n            y: this.y,\n        };\n\n        if (this.preventOverlap) {\n            adjustedPosition = adjustPosition(\n                { x: this.x, y: this.y, width: this.width, height: this.height },\n                this.windowManager.windows,\n                screenWidth,\n                screenHeight,\n                32\n            );\n        }\n\n\n        // Apply adjusted position\n        this.x = adjustedPosition.x;\n        this.y = adjustedPosition.y;\n        this.container.style.top = `${this.y}px`;\n        this.container.style.left = `${this.x}px`;\n\n        this.container.style.zIndex = 99;\n\n        // add a mousedown handler to container itself to set 'window-active' status\n        this.container.addEventListener('mousedown', () => {\n            // set all windows to inactive\n            document.querySelectorAll('.window-container').forEach((window) => {\n                window.classList.remove('window-active');\n                window.isActive = false;\n            });\n            // set this window to active\n            this.container.classList.add('window-active');\n            this.isActive = true;\n        });\n\n        // same for touchstart\n        this.container.addEventListener('touchstart', () => {\n            // set all windows to inactive\n            document.querySelectorAll('.window-container').forEach((window) => {\n                window.classList.remove('window-active');\n                window.isActive = false;\n            });\n            // set this window to active\n            this.container.classList.add('window-active');\n            this.isActive = true;\n        });\n\n        // Create the title bar\n        this.titleBar = document.createElement(\"div\");\n        this.titleBar.classList.add(\"window-title-bar\");\n\n        if (this.bp.isMobile()) {\n            this.titleBar.onclick = () => {\n                console.log('titleBar clicked on mobile');\n                this.minimize();\n                return;\n                if (!this.isMinimized) {\n                    this.minimize(true); // force minimize on mobile\n                } else {\n                    this.restore(); // restore on mobile\n                }\n            }\n        }\n\n        // on double click maximize\n        this.titleBar.ondblclick = () => this.maximize();\n\n        if (this.icon) {\n            let iconTitleBar = document.createElement(\"img\");\n            iconTitleBar.src = this.icon;\n            iconTitleBar.classList.add(\"window-icon\");\n            this.titleBar.appendChild(iconTitleBar);\n        }\n\n        let titleBarSpan = document.createElement(\"span\");\n        titleBarSpan.classList.add(\"window-title-text\");\n        titleBarSpan.textContent = this.title;\n        this.titleBarSpan = titleBarSpan;\n\n        // Drag functionality\n        // Add mouse and touch event listeners to the titleBar\n        this.titleBar.addEventListener('mousedown', this.startDrag);\n        this.titleBar.addEventListener('touchstart', this.startDrag, { passive: false });\n\n        // Touch events for mobile\n\n\n        // Create control buttons (Minimize, Maximize, Close)\n        const controls = document.createElement(\"div\");\n        controls.classList.add(\"window-controls\");\n\n        if (!this.bp.isMobile()) {\n            this.minimizeButton = document.createElement(\"button\");\n            this.minimizeButton.innerHTML = \"&#x1F7E1;\"; // Yellow circle\n            this.minimizeButton.classList.add(\"minimize-button\");\n            this.minimizeButton.title = \"Minimize\";\n            this.minimizeButton.onclick = () => this.minimize();\n\n            controls.appendChild(this.minimizeButton);\n\n\n        }\n\n\n        this.maximizeButton = document.createElement(\"button\");\n        this.maximizeButton.innerHTML = \"&#x1F7E2;\"; // Green circle\n        this.maximizeButton.classList.add(\"maximize-button\");\n        this.maximizeButton.title = \"Maximize\";\n        this.maximizeButton.onclick = () => this.maximize();\n\n        controls.appendChild(this.maximizeButton);\n\n\n        this.closeButton = document.createElement(\"button\");\n        this.closeButton.innerHTML = \"&#x1F534;\"; // Red circle\n        this.closeButton.classList.add(\"close-button\");\n        this.closeButton.title = \"Close\";\n        this.closeButton.onclick = () => this.close();\n\n        controls.appendChild(this.closeButton);\n\n        this.titleBar.appendChild(titleBarSpan);\n        this.titleBar.appendChild(controls);\n\n        this.initContentArea();\n\n        // Append components\n        this.container.appendChild(this.titleBar);\n        this.container.appendChild(this.content);\n\n        if (this.parent) {\n            this.parent.appendChild(this.container);\n        }\n\n        // Resizing\n        if (this.resizeable) {\n            this.addResizeHandles();\n        }\n\n        if (this.canBeBackground) {\n            // get the menubar-set-window-as-background element and remove disabled class\n            let el = document.getElementById('menubar-set-window-as-background');\n            if (el) {\n                el.classList.remove('disabled');\n            }\n        }\n\n\n        return this.container;\n    }\n\n\n    initContentArea() {\n        if (typeof this.iframeContent === 'boolean' && this.iframeContent) {\n            this.content = document.createElement(\"iframe\");\n            this.content.classList.add(\"bp-window-content\");\n            document.body.appendChild(this.content);\n            this.content.src = 'about:blank';\n            this.content.onload = () => {\n                let iframeDoc = this.content.contentDocument || this.content.contentWindow.document;\n                iframeDoc.open();\n                iframeDoc.write(this.contentValue);\n                iframeDoc.close();\n                this.setupMessageHandling();\n            };\n        } else if (typeof this.iframeContent === 'string' && this.iframeContent.length) {\n            this.content = document.createElement(\"div\");\n            this.content.classList.add(\"bp-window-content\");\n\n            this.iframe = document.createElement(\"iframe\");\n\n            this.content.appendChild(this.iframe);\n            // by default add allow attributes to the iframe\n            this.iframe.setAttribute(\"allow\", \"autoplay; encrypted-media; fullscreen; clipboard-write; accelerometer; gyroscope; web-share\");\n\n            this.iframe.src = this.iframeContent;\n\n            // Remark: This is legacy settings for iframe message handling bootstrapping\n            // In more modern applications, we use broadcast channels or other methods\n            // It's important we don't attempt to setup message handling for iframes that are not from the same origin\n            let currentOrigin = window.location.origin;\n            let iframeOrigin = this.iframe.src;\n\n            // check if currentOrigin can be found in iframeOrigin\n            if (iframeOrigin.indexOf(currentOrigin) !== -1) {\n                this.iframe.onload = () => this.setupMessageHandling();\n            } else {\n\n                // hide the iframe\n                this.iframe.style.display = 'none';\n                this.iframe.onload = () => {\n                    // remove loading image\n                    loaderHolder.remove();\n                    // show the iframe\n                    this.iframe.style.display = 'block';\n                }\n\n                // add the loaderHolder\n                let loaderHolder = document.createElement(\"div\");\n                loaderHolder.id = \"loaderHolder\";\n                loaderHolder.innerHTML = `\n                <div id=\"loader\"></div>\n                <p class=\"loaderText\">Loading... ${this.id || this.title || this.label || ''}</p>\n            `;\n                this.content.appendChild(loaderHolder);\n\n                // console.log('not setting up legacy iframe message handling, as the iframe origin does not match current origin');\n            }\n        } else {\n            this.content = document.createElement(\"div\");\n            this.content.classList.add(\"bp-window-content\");\n            if (typeof this.contentValue === 'string') {\n                this.content.innerHTML = this.contentValue;\n            } else {\n                this.content.appendChild(this.contentValue);\n            }\n        }\n    }\n\n    // TODO: migrate away from iframe messages and use BroadcastChannel instead\n    setupMessageHandling() {\n        // iframe is loaded by now\n        this.onLoad(this);\n        const iframeWindow = this.iframe.contentWindow;\n\n        // Inject a script into the iframe to listen for the ESC key\n        const iframeDoc = this.iframe.contentDocument || this.iframe.contentWindow.document;\n        const script = iframeDoc.createElement(\"script\");\n        script.type = \"text/javascript\";\n        script.textContent = `\n            document.addEventListener('keydown', (event) => {\n                if (event.key === 'Escape') {\n                    window.parent.postMessage({ event: 'ESC_KEY_PRESSED' }, '*');\n                }\n            });\n        `;\n        //alert(script.textContent)\n        iframeDoc.body.appendChild(script);\n\n        // Set the message event listener on the iframe's window\n        window.addEventListener('message', this.receiveMessage.bind(this), false);\n    }\n\n\n    sendMessage(message) {\n        if (this.iframe && this.iframe.contentWindow) {\n            this.iframe.contentWindow.postMessage(message, '*'); // Consider specifying an origin here instead of '*'\n        }\n    }\n\n    receiveMessage(event) {\n        // Ensure security by checking the event.origin, if possible\n        if (typeof event.data === 'object' && event.data.event) {\n            if (event.data.event === 'ESC_KEY_PRESSED') {\n                console.log('ESC key pressed inside iframe. Closing window...');\n                this.close();\n            } else {\n                this.handleReceivedMessage(event.data);\n            }\n        }\n    }\n\n    handleReceivedMessage(data) {\n        //console.log('Handled Received message:', data, this.onMessage);\n        if (this.onMessage) {\n            this.onMessage(data);\n        }\n    }\n\n\n    move(x, y) {\n        this.x = x;\n        this.y = y;\n        this.container.style.top = `${this.y}px`;\n        this.container.style.left = `${this.x}px`;\n        this.windowManager.saveWindowsState();\n    }\n\n    serialize() {\n\n        // we need an xpath selector for this.parent\n        let parentXpath = getXPathForElement(this.parent);\n        // console.log('parentXpath', parentXpath);\n        return {\n            title: this.title,\n            width: this.width,\n            height: this.height,\n            type: this.type,\n            app: this.app,\n            x: this.x,\n            y: this.y,\n            z: this.z,\n            context: this.context,\n            parent: parentXpath,\n            id: this.id,\n            onClose: this.onClose,\n            onOpen: this.onOpen,\n            className: this.className,\n            resizeable: this.resizeable,\n            canBeBackground: this.canBeBackground\n        };\n    }\n\n    hydrate(data) {\n        console.log('hydrate', data);\n        this.title = data.title;\n        this.width = data.width;\n        this.height = data.height;\n        this.app = data.app;\n        this.type = data.type;\n        this.x = data.x;\n        this.y = data.y;\n        this.z = Number(data.z);\n        this.context = data.context;\n        // TODO: some of these are constructor...maybe all?\n        // this.parent = document.querySelector(data.parent);\n        this.id = data.id;\n        this.onClose = data.onClose;\n        this.onOpen = data.onOpen;\n        this.onMessage = data.onMessage;\n        this.className = data.className;\n        this.resizeable = data.resizeable;\n        this.canBeBackground = data.canBeBackground;\n\n        this.updateWindow();\n    }\n\n    updateWindow() {\n        this.container.style.width = `${this.width}px`;\n        this.container.style.height = `${this.height}px`;\n        this.container.style.top = `${this.y}px`;\n        this.container.style.left = `${this.x}px`;\n        this.container.style.zIndex = this.z;\n        // console.log('updateWindow', this);\n    }\n\n    setDepth(depth) {\n        this.z = depth;\n        this.container.style.zIndex = depth;\n        // console.log('container depth was set to', this.id, depth);\n        this.windowManager.saveWindowsState();\n    }\n\n    setAsBackground() {\n        console.log('setAsBackground', this.windowManager.windows);\n        if (!this.canBeBackground) {\n            console.log('This window cannot be set as background. Try setting canBeBackground:true in the Window declaration');\n            return;\n        }\n        // check other api.ui.windowManager.windows and restore them if isBackground is true\n        this.windowManager.windows.forEach((window) => {\n            if (window.isBackground) {\n                window.restoreWindowFromBackground();\n            }\n        });\n\n        this.container.style.zIndex = -1;\n\n        // make full window size\n        this.container.style.width = \"100%\";\n        this.container.style.height = \"100%\";\n\n        // set top and left to 0\n        this.container.style.top = \"0\";\n        this.container.style.left = \"0\";\n\n        this.isBackground = true;\n        this.isActive = false;\n    }\n\n    restoreWindowFromBackground() {\n\n        this.isBackground = false;\n\n        // reset the z-index\n        this.container.style.zIndex = 11000;\n\n        // reset the window size\n        this.container.style.width = `${this.width}`;\n        this.container.style.height = `${this.height}`;\n\n        // put window back to original position\n        this.container.style.top = `${this.y}px`;\n        this.container.style.left = `${this.x}px`;\n\n        // get the menubar-restore-background-window element and add disabled class\n        let el = document.getElementById('menubar-restore-background-window');\n        if (el) {\n            el.classList.add('disabled');\n        }\n\n    }\n\n    startDrag(e) {\n        this.isDragging = true;\n        this.titleBar.style.cursor = \"grabbing\";\n\n        // Disable pointer events on iframe\n        const iframes = this.container.querySelectorAll('iframe');\n        iframes.forEach(iframe => {\n            iframe.style.pointerEvents = 'none';\n        });\n\n        // Get coordinates from mouse or touch event\n        const { clientX, clientY } = this.getEventCoordinates(e);\n        this.offsetX = clientX - this.container.offsetLeft;\n        this.offsetY = clientY - this.container.offsetTop;\n\n        // Add event listeners for both mouse and touch events\n        document.addEventListener('mousemove', this.drag);\n        document.addEventListener('touchmove', this.drag, { passive: false });\n        document.addEventListener('mouseup', this.stopDrag);\n        document.addEventListener('touchend', this.stopDrag);\n    }\n\n    drag(e) {\n        if (!this.isDragging) return;\n\n        // Prevent default behavior for touchmove to avoid scrolling\n        e.preventDefault();\n\n        // Get coordinates from mouse or touch event\n        const { clientX, clientY } = this.getEventCoordinates(e);\n\n        // Update container position\n        // Ensure window does not drag off the screen\n        let menuBarHeight = 42;\n        let bottomLimit = window.innerHeight - 52; // 50px from bottom\n        if (clientY > menuBarHeight && clientY < bottomLimit) {\n            this.container.style.top = `${clientY - this.offsetY}px`;\n        }\n        let leftLimit = 52; // 0px from left\n        let rightLimit = window.innerWidth - 52; // 0px from right\n        if (clientX > leftLimit && clientX < rightLimit) {\n            this.container.style.left = `${clientX - this.offsetX}px`;\n        }\n    }\n\n    stopDrag() {\n        this.isDragging = false;\n        this.titleBar.style.cursor = \"grab\";\n\n        // Restore pointer events on iframe\n        const iframes = this.container.querySelectorAll('iframe');\n        iframes.forEach(iframe => {\n            iframe.style.pointerEvents = 'auto';\n        });\n\n        // Remove event listeners\n        document.removeEventListener('mousemove', this.drag);\n        document.removeEventListener('touchmove', this.drag);\n        document.removeEventListener('mouseup', this.stopDrag);\n        document.removeEventListener('touchend', this.stopDrag);\n\n        // Save window state\n        this.x = this.container.offsetLeft;\n        this.y = this.container.offsetTop;\n        this.z = Number(this.container.style.zIndex);\n        if (this.windowManager) {\n            this.windowManager.saveWindowsState();\n        } else {\n            console.warn('windowManager is not defined');\n        }\n    }\n\n    getEventCoordinates(e) {\n        let clientX, clientY;\n        if (e.type.startsWith('touch')) {\n            // Use the first touch point for dragging\n            const touch = e.touches[0] || e.changedTouches[0];\n            clientX = touch.clientX;\n            clientY = touch.clientY;\n        } else {\n            // Mouse event\n            clientX = e.clientX;\n            clientY = e.clientY;\n        }\n        return { clientX, clientY };\n    }\n\n    minimize(force = false) {\n        // console.log('minimize', this.isMinimized);\n\n        if (false && this.bp.isMobile()) {\n\n            if (this.isMinimized && !force) {\n                this.restore();\n                // this.content.style.display = \"block\"; // Show content area\n            } else {\n                // Minimize the window\n                // this.container.style.display = \"none\";  // Hide content area\n                // hides the `bp-window-content` area\n                //this.content.style.display = \"none\";  // Hide content area\n                // set the window-container height to 50px\n                this.container.style.height = \"120px\"; // Set height to 50px\n\n                this.isMinimized = true;\n            }\n\n            // this.windowManager.arrangeVerticalStacked();\n\n        } else {\n            if (this.isMinimized && !force) {\n                this.restore();\n            } else {\n                // Minimize the window\n                this.container.style.display = \"none\";  // Hide content area\n                this.isMinimized = true;\n            }\n        }\n        // TODO: save the window state\n    }\n\n    // Restore the window\n    restore() {\n        // console.log('restore', this)\n        // Restore the window's content and original size\n        this.container.style.display = \"flex\";\n\n        //this.container.style.top = this.y + 'px';\n        //this.container.style.left = this.x + 'px';\n\n        // Mark as not minimized\n        this.isMinimized = false;\n        // TODO: save the window state\n\n        if (this.bp.isMobile()) {\n            // this.windowManager.arrangeVerticalStacked();\n        }\n    }\n\n    maximize() {\n\n        // offset the top position by $('.desktop-menu-bar').height()\n        // so that on smaller devices the window is not hidden behind the menubar\n        if (this.isMaximized) {\n            if (this.bp.isMobile()) {\n                this.container.style.width = \"100vw\";\n                // this.container.style.height = \"calc(100vh - 185px)\";\n                //this.container.style.height = \"90vh\";\n\n                this.container.style.height = 'calc(var(--vh) * 90)';\n\n\n                this.container.style.top = \"0\";\n                this.container.style.left = \"0\";\n                // this.windowManager.arrangeVerticalStacked();\n\n            } else {\n                this.container.style.width = `${this.width}px`;\n                this.container.style.height = `${this.height}px`;\n                this.container.style.top = \"50px\";\n                this.container.style.left = \"50px\";\n                this.isMaximized = false;\n\n            }\n        } else {\n            let normalMenuBarHeight = 21;\n            let currentMenuBarHeight = $('.desktop-menu-bar').height() || normalMenuBarHeight;\n            let diff = currentMenuBarHeight - normalMenuBarHeight;\n            diff += (normalMenuBarHeight + 2); // add 2px for border\n            let pixelOffset = diff + 'px';\n\n            if (this.bp.isMobile()) {\n                this.container.style.width = \"100vw\";\n                // this.container.style.height = \"calc(100vh - 170px)\";\n                // this.container.style.height = \"90vh\";\n                this.container.style.height = 'calc(var(--vh) * 90)';\n                this.container.style.top = \"0\";\n                this.container.style.left = \"0\";\n\n            } else {\n                this.container.style.width = \"100vw\";\n                this.container.style.height = \"calc(100vh - 104px)\";\n                this.container.style.top = pixelOffset;\n                this.container.style.left = \"0\";\n\n            }\n            this.isMaximized = true;\n        }\n        // TODO: save the window state\n\n    }\n\n    focus(propigate = true) {\n        // console.log('on focus called from Window.js')\n        if (propigate) {\n            this.windowManager.focusWindow(this);\n        }\n\n        this.onFocus(this);\n\n        let appData = this.bp.apps.desktop.appList[this.id];\n        let pushStateId = this.id;\n        if (appData && appData.alias) {\n            // get the first entry in the alias array\n            let alias = appData.alias[0];\n            pushStateId = alias; // use the id if it exists, otherwise use the alias string\n        }\n        // history.pushState({ appId: pushStateId }, this.title, `/app/${pushStateId}`);\n        DelayedPushState.push({ appId: pushStateId }, this.title, `/app/${pushStateId}`);\n\n    }\n\n    open() {\n        // set focus to this window ( first )\n        this.focus();\n\n        try {\n            // onOpen may have additional focus events\n            this.onOpen(this);\n        } catch (err) {\n            console.error(err);\n        }\n        // TODO: save the window state ???\n        // ???? this.parent.appendChild(this.container);\n\n        if (this.bp.isMobile()) {\n            // this.minimizeAllWindows(true);\n            // alert('opening window on mobile');\n            // maximize the window\n            this.maximize();\n            setTimeout(() => {\n                // this.windowManager.arrangeVerticalStacked();\n            }, 100);\n        }\n\n        this.bp.emit('window::open', this);\n\n        // console.log('Window opened:', this);\n        let _app = {\n            id: this.id,\n            app: this.app,\n            label: this.title,\n            icon: this.icon,\n            // app: this.app,\n            type: this.type,\n            context: this.context\n        };\n        // console.log('openWindow openItem', _app);\n        this.bp.apps.ui.windowManager.taskBar.openItem(_app);\n\n        // add the items to this.bp.apps.ui.recentApps\n        this.bp.apps.ui.recentApps = this.bp.apps.ui.recentApps || this.bp.settings.recentApps || [];\n\n        // remove items with the same id if already exists\n        this.bp.apps.ui.recentApps = this.bp.apps.ui.recentApps.filter(app => app.id !== this.id);\n\n        this.bp.apps.ui.recentApps.unshift({\n            id: this.id,\n            app: this.app,\n            label: this.label || this.title,\n            icon: this.icon,\n            type: this.type\n        });\n\n        // update the recentApps localStorage\n        this.bp.apps.ui.recentApps = this.bp.apps.ui.recentApps.slice(0, 10); // keep only the first 10 items\n        this.bp.set('recentApps', this.bp.apps.ui.recentApps);\n\n        // update the url bar push state with app id\n        // modify the url to include the app id\n        // load app data to find any aliases\n        let appData = this.bp.apps.desktop.appList[this.id];\n        let pushStateId = this.id;\n        if (appData && appData.alias) {\n            // get the first entry in the alias array\n            let alias = appData.alias[0];\n            pushStateId = alias; // use the id if it exists, otherwise use the alias string\n        }\n\n        // history.pushState({ appId: pushStateId }, this.title, `/app/${pushStateId}`);\n        DelayedPushState.push({ appId: pushStateId }, this.title, `/app/${pushStateId}`);\n\n    }\n    close() {\n\n        if (this.parent) {\n            // check first to see if child is in parent\n            if (this.container.parentElement && this.container.parentElement === this.parent) {\n                this.parent.removeChild(this.container);\n            }\n        } else {\n            this.container.parentElement.removeChild(this.container);\n        }\n\n        // check to see if this is an iframe and remove event listener\n        if (this.content && this.content.contentWindow) {\n            this.content.contentWindow.removeEventListener('message', this.receiveMessage.bind(this), false);\n        }\n        if (this.content) {\n            if (this.content.parentNode) {\n                this.content.parentNode.removeChild(this.content);\n            }\n            this.content = null;\n        }\n\n        // check to see if no more windows\n        // TODO: remove this code from Window.js class ( it should not know about menubar )\n        // if window count is 0 get the menubar-set-window-as-background element and add disabled class\n        let windowCount = this.windowManager.windows.length;\n        if (windowCount === 0) {\n            let el = document.getElementById('menubar-set-window-as-background');\n            if (el) {\n                el.classList.add('disabled');\n            }\n        }\n        // console.log('removeWindow', this.id);\n        this.windowManager.removeWindow(this.id);\n\n\n        if (this.windowManager.taskBar) {\n            // remove the chat window from the taskbar\n            this.windowManager.taskBar.closeItem(this.id);\n        }\n\n        // TODO: save the window state ??? removeWindow could do it..?\n\n        this.onClose(this);\n        this.bp.emit('window::close', this);\n\n        if (this.bp.isMobile()) {\n            // this.minimizeAllWindows(true);\n            //this.windowManager.arrangeVerticalStacked();\n            setTimeout(() => {\n                // this.windowManager.arrangeVerticalStacked();\n            }, 100);\n        }\n\n        // clear the current pushState\n        // history.pushState({}, '', '/');\n        DelayedPushState.push({}, '', '/');\n\n    }\n\n    addResizeHandles() {\n        const resizeHandle = document.createElement(\"div\");\n        resizeHandle.classList.add(\"resize-handle\");\n        this.container.appendChild(resizeHandle);\n        resizeHandle.addEventListener(\"mousedown\", (e) => this.startResize(e), { passive: false });\n        resizeHandle.addEventListener(\"touchstart\", (e) => {\n            e.preventDefault(); // Prevent default touch behavior\n            this.startResize(e.touches[0]);\n        }, { passive: false });\n    }\n\n    setSize(width, height) {\n        this.width = width;\n        this.height = height;\n        this.container.style.width = `${this.width}`;\n        this.container.style.height = `${this.height}`;\n        // save the window state\n        this.windowManager.saveWindowsState();\n    }\n\n    startResize(e) {\n        const container = this.container;\n        const startX = e.clientX;\n        const startY = e.clientY;\n        const startWidth = container.offsetWidth;\n        const startHeight = container.offsetHeight;\n\n        const onMove = (moveEvent) => {\n            const clientX = moveEvent.clientX || moveEvent.touches[0].clientX;\n            const clientY = moveEvent.clientY || moveEvent.touches[0].clientY;\n            const newWidth = startWidth + (clientX - startX);\n            const newHeight = startHeight + (clientY - startY);\n\n            // Apply new dimensions, respecting min/max constraints\n            container.style.width = `${Math.max(100, newWidth)}px`; // Example min-width\n            container.style.height = `${Math.max(100, newHeight)}px`; // Example min-height\n        };\n\n        const onUp = () => {\n            document.removeEventListener(\"mousemove\", onMove);\n            document.removeEventListener(\"mouseup\", onUp);\n            document.removeEventListener(\"touchmove\", onMove);\n            document.removeEventListener(\"touchend\", onUp);\n        };\n\n        document.addEventListener(\"mousemove\", onMove);\n        document.addEventListener(\"mouseup\", onUp);\n        document.addEventListener(\"touchmove\", onMove, { passive: false });\n        document.addEventListener(\"touchend\", onUp);\n    }\n\n    resize(e) {\n        if (!this.isResizing) return;\n        const newWidth = this.startWidth + (e.clientX - this.startX);\n        const newHeight = this.startHeight + (e.clientY - this.startY);\n\n        this.container.style.width = `${newWidth}px`;\n        this.container.style.height = `${newHeight}px`;\n    }\n\n    stopResize() {\n        this.isResizing = false;\n        // TODO: save the window state\n\n    }\n\n    setTitle(title) {\n        this.title = title;\n        this.titleBarSpan.textContent = title;\n        // save the window state\n        this.windowManager.saveWindowsState();\n    }\n\n    setContent(content) {\n        this.contentValue = content;\n        this.content.innerHTML = content;\n        // save the window state\n        this.windowManager.saveWindowsState();\n    }\n}\n\nexport default Window;\n\n\nfunction getXPathForElement(element) {\n    const fullPath = (el) => {\n        let names = [];\n        while (el.parentNode) {\n            if (el.id) { // If the element has an ID, use it as a unique identifier\n                names.unshift('#' + el.id);\n                break;\n            } else {\n                let e = el, sibling, count = 1;\n                while (sibling = e.previousSibling) {\n                    if (sibling.nodeType === 1 && sibling.tagName === e.tagName) { count++; }\n                    e = sibling;\n                }\n                const tagName = el.tagName.toLowerCase();\n                const nth = count > 1 ? `:nth-of-type(${count})` : '';\n                names.unshift(`${tagName}${nth}`);\n                el = el.parentNode;\n            }\n        }\n        return names.length ? names.join(' > ') : null;\n    };\n    return fullPath(element);\n}\n","/* Buddy Pond - WindowManager.js - Marak Squires 2023 */\nimport TaskBar from './TaskBar.js';\nimport Window from \"./Window.js\";\n\nexport default class WindowManager {\n    constructor(ui, options = {}) {\n        this.storage = options.storage || localStorage; // Use localStorage by default\n        this.storageKey = options.storageKey || 'windowsState'; // Key for storing data\n        this.windows = [];\n        this._windows = [];\n        this.options = options;\n\n        this.bp = ui.bp;\n\n        this.useKeyboardControls = true;\n\n        if (typeof options.useKeyboardControls === \"boolean\") {\n            this.useKeyboardControls = options.useKeyboardControls;\n        }\n\n        if (typeof options.hideTaskBar === \"boolean\") {\n            this.hideTaskBar = options.hideTaskBar;\n        }\n\n        if (typeof options.openWindow === \"function\") {\n            this._openWindow = options.openWindow;\n        } else {\n            this._openWindow = function (name, config) {\n                const window = this.createWindow(config);\n                window.hydrate(config);\n            }\n        }\n\n        this.taskBar = new TaskBar({\n            bp: this.bp,\n            homeCallback: () => {\n\n                if (!this.state) {\n                    // save current window positions\n                    this.lastPositionsBeforeArranged = this.windows.map(w => {\n                        return {\n                            x: w.x,\n                            y: w.y,\n                            height: w.height,\n                            width: w.width\n                        }\n                    });\n                    // console.log('lastPositionsBeforeArranged', this.lastPositionsBeforeArranged);\n                    this.state = 'maximized';\n                }\n\n\n                if (this.state === 'minimized') {\n                    this.minimizeAllWindows();\n                    // this.arrangeHorizontalStacked();\n                    this.state = 'maximized';\n\n                } else if (this.state === 'stacked-vertical') {\n                    // stack-vertical has been removed ( for now )\n                    // it wasn't looking good as a default and was rarely used\n                    /*\n                    // restore all windows to their previous positions\n                    this.windows.forEach((w, i) => {\n                        w.move(this.lastPositionsBeforeArranged[i].x, this.lastPositionsBeforeArranged[i].y);\n                        w.setSize(this.lastPositionsBeforeArranged[i].width + 'px', this.lastPositionsBeforeArranged[i].height + 'px');\n                    });\n                    this.state = 'maximized';\n                    */\n\n                } else if (this.state === 'stacked-horizontal') {\n                    // this.arrangeVerticalStacked();\n                    // this.state = 'stacked-vertical';\n                    // restore all windows to their previous positions\n                    this.windows.forEach((w, i) => {\n                        w.move(this.lastPositionsBeforeArranged[i].x, this.lastPositionsBeforeArranged[i].y);\n                        w.setSize(this.lastPositionsBeforeArranged[i].width + 'px', this.lastPositionsBeforeArranged[i].height + 'px');\n                    });\n                    this.state = 'maximized';\n\n                } else {\n                    this.minimizeAllWindows(true);\n                    this.windows.forEach((w, i) => {\n                        w.move(this.lastPositionsBeforeArranged[i].x, this.lastPositionsBeforeArranged[i].y);\n                        w.setSize(this.lastPositionsBeforeArranged[i].width + 'px', this.lastPositionsBeforeArranged[i].height + 'px');\n                    });\n\n                    this.state = 'minimized';\n\n                }\n\n                // close all windows\n                // this.minimizeAllWindows();\n                // this.windowsClosed = true;\n\n                // hide all legacy BP windows\n                $('.window').hide();\n                $('.window').removeClass('window_stack');\n\n            }\n        });\n\n        if (this.options.hideTaskBar) {\n            this.taskBar.taskBarElement.style.display = 'none';\n        }\n\n        if (this.useKeyboardControls) {\n            window.addEventListener(\"keydown\", (e) => {\n                // alert(this.bp.editingMode);\n                if (e.key === \"Escape\" && !this.bp.ignoreUIControlKeys) {\n                    // alert(\"Escape key pressed\");\n                    // find the window with the highest depth and close it\n\n                    // first check to see if there is a dialog open, close that first\n                    const dialog = document.querySelector('.dialog');\n                    if (dialog) {\n                        dialog.remove();\n                        return;\n                    }\n\n                    const window = this.windows[0]; // no sort needed, windows are already sorted by depth\n                    if (window) {\n                        window.close();\n                    }\n                }\n            });\n        }\n\n    }\n\n    createWindow(options) {\n\n        // check to see if there is previous window data in this._windows\n        // check by id, if found, hydrate the window\n        // This is a temporary solution until full app hydration is back online\n        // This solution will allow for position and size to be saved and restored\n        options = { ...options, ...this.options.window };\n        // console.log('createWindow', options);\n        let previousWindowData = this._windows.find(w => w.id === options.id);\n        if (previousWindowData) {\n            // just merge the previous window data with the new options\n            options = { ...previousWindowData, ...options };\n        }\n\n        // check to see if window already exists with id\n        const existingWindow = this.getWindow(options.id);\n        let window;\n\n        if (existingWindow) {\n            window = existingWindow;\n            this.focusWindow(window); // Focus the newly created window\n            return window;\n        }\n        options.bp = this.bp;\n        window = new Window(options, this);\n\n        window.container.addEventListener(\"mousedown\", () => {\n            this.focusWindow(window);\n        });\n        this.addWindow(window);\n        this.focusWindow(window); // Focus the newly created window\n\n        // when opening a window, automatically add it to the taskbar\n        //alert(window.id)\n        /*\n        this.taskBar.openItem({\n            id: window.app,\n            title: window.title,\n            icon: window.icon,\n            onClick: () => {\n                // toggle window minimize / restore state\n                if (this.isMobile()) {\n                    // this.minimizeAllWindows(true);\n                    this.arrangeVerticalStacked();\n                    // we could minimize all other windows here\n                    // minimizeAllWindows();\n                }\n                if (window.isMinimized) {\n                    window.restore();\n                    window.focus();\n                } else {\n                    window.minimize();\n                }\n            }\n        });\n        */\n\n        return window;\n    }\n\n    isMobile() {\n        return window.innerWidth < 1000;\n    }\n\n    addWindow(window) {\n        this.windows.push(window);\n        this.saveWindowsState(); // Save state when a window is added\n        this.updateFocus();\n    }\n\n    removeWindow(window) {\n        // console.log(\"Removing window\", window);\n        this.windows = this.windows.filter(w => w.id !== window);\n        //console.log(\"Remaining windows\", this.windows);\n        this.saveWindowsState(); // Save state when a window is removed\n        this.updateFocus();\n    }\n\n    focusWindow(window) {\n        // window can be the window instance or the window id\n        if (typeof window === 'string') {\n            window = this.getWindow(window);\n        }\n\n        // console.log(\"Focusing window\", window);\n\n        // TODO: this isn't working consistenly?  there seems to be an issue with index\n        // console.log(\"Focusing window\", window.id);\n        const index = this.windows.indexOf(window);\n        if (index !== -1) {\n            this.windows.splice(index, 1);\n            this.windows.unshift(window);\n            // console.log('Focusing window', window.id, 'at index', index);\n            this.updateFocus();\n            window.focus(false);\n            this.saveWindowsState(); // Save state when focus changes\n        }\n        // iterate through all windows and set isFocused to false\n        // set this window isFocused to true\n        this.windows.forEach(w => {\n            if (w.id !== window) {\n                w.isFocused = false;\n\n            } else {\n                window.isFocused = true;\n\n            }\n        });\n    }\n\n    updateFocus() {\n        // console.log(\"Updating focus\");\n        this.windows.forEach((window, index) => {\n            // console.log(\"Setting depth for window\", window.id, \"to\", 1000 - index);\n            // console.log(\"setting depth for window\", window.id, \"to\", 1000 - index);\n            window.setDepth(1000 - index); // Higher index, higher depth\n        });\n    }\n\n    closeAllWindows() {\n        this.windows.forEach(window => window.close());\n        this.windows = [];\n        this.storage.removeItem(this.storageKey); // Clear storage when all windows are closed\n    }\n\n    minimizeAllWindows(force = false) {\n        if (!this.windowsHiding) {\n            this.windowsHiding = true;\n        } else {\n            this.windowsHiding = false;\n        }\n        this.windows.forEach(window => {\n\n            if (!this.windowsHiding || force) {\n                window.minimize(force);\n            } else {\n                window.restore();\n            }\n        });\n    }\n\n    getWindow(id) {\n        // console.log('searching for', id, 'in', this.windows)\n        return this.windows.find(w => w.id === id);\n    }\n\n    findWindows({ app, type }) {\n        if (!app) {\n            console.warn(\"No app provided to findWindows\");\n            return [];\n        }\n\n        // Normalize app and type to arrays for unified matching\n        const apps = Array.isArray(app) ? app : [app];\n        const types = type ? (Array.isArray(type) ? type : [type]) : null;\n\n        return this.windows.filter(w => {\n            const appMatch = apps.includes(w.app);\n            const typeMatch = types ? types.includes(w.type) : true;\n            return appMatch && typeMatch;\n        });\n    }\n\n    saveWindowsState() {\n        const state = JSON.stringify(this.windows.map(window => window.serialize()));\n        // console.log(\"Saving windows state\", JSON.parse(state));\n        this.storage.setItem(this.storageKey, state);\n    }\n\n    // Remark: This should probably be mostly in settings app or a separate app\n    loadWindows() {\n        const serializedWindows = this.storage.getItem(this.storageKey);\n        if (serializedWindows) {\n            this.restoreWindows(serializedWindows);\n        }\n    }\n\n    arrangeVerticalStacked() {\n        let containerHeight = document.body.clientHeight - 100; // Adjust for container and offset\n        let windowWidth = document.body.clientWidth - 10; // Adjust for container and offset\n        const defaultWindowHeight = containerHeight * 0.8; // Default height for non-minimized windows\n        const minimizedHeight = 120; // Height for minimized windows\n        const gap = 10; // Optional gap between windows for better spacing\n        let totalY = 0; // Initialize Y position\n\n        // console.log('window count', this.windows.length, 'defaultWindowHeight', defaultWindowHeight, 'windowWidth', windowWidth);\n        // console.log(this.windows);\n\n        this.windows.reverse().forEach((window, index) => {\n            // Determine the height for the current window\n            let currentWindowHeight = window.isMinimized ? minimizedHeight : defaultWindowHeight;\n\n            // console.log(\"index\", index, window.title, 'isMinimized', window.isMinimized, 'currentWindowHeight', currentWindowHeight, 'windowWidth', windowWidth);\n\n            // Set window size and position\n            window.setSize(windowWidth + 'px', currentWindowHeight + 'px'); // Set size\n            window.move(0, totalY); // Move to calculated Y position\n\n            // Increment totalY for the next window\n            totalY += currentWindowHeight + gap; // Add current window's height and gap\n\n            // console.log(\"totalY\", totalY, \"currentWindowHeight\", currentWindowHeight, \"windowWidth\", windowWidth);\n        });\n\n        // Position the shortCutsContainer below the last window\n        // console.log('setting shortCutsContainer top to', totalY);\n        if (this.bp.apps.desktop && this.bp.apps.desktop.shortCutsContainer) {\n            this.bp.apps.desktop.shortCutsContainer.style.position = 'absolute';\n            this.bp.apps.desktop.shortCutsContainer.style.left = '0px';\n            this.bp.apps.desktop.shortCutsContainer.style.top = totalY + 'px';\n        }\n    }\n\n    arrangeHorizontalStacked() {\n        const containerWidth = document.body.clientWidth; // Adjust to your specific container if not the body\n        const numWindows = this.windows.length;\n        let windowWidth = containerWidth / numWindows;\n        windowWidth -= 10; // Adjust to your desired offset\n        this.windows.forEach((window, index) => {\n            let xPos = windowWidth * index;\n            xPos += 5;\n            xPos += 10 * index; // Adjust to your desired offset\n            window.setSize(windowWidth + 'px', 'calc(100% - 80px)'); // Assuming you have a resize method\n            window.move(xPos, 30); // Assuming you have a move method\n        });\n\n    }\n\n    arrangeCascadeFromTopLeft() {\n        const offset = 20; // Adjust to your desired offset\n        this.windows.forEach((window, index) => {\n            const xPos = offset * index;\n            const yPos = offset * index;\n            window.move(xPos, yPos); // Assuming you have a move method\n        });\n    }\n\n    // Remark: This should probably be mostly in settings app or a separate app\n    // Restore windows from serialized state\n    restoreWindows(serializedWindows, inflate = false) {\n        const windowsData = JSON.parse(serializedWindows);\n        // console.log(\"Restoring windows\", windowsData);\n        // alert(\"Restoring windows from storage, this will be removed in the future, please use the settings app to manage windows\");\n        this._windows = windowsData;\n\n        if (!inflate) {\n            // for now, probably better suited elsewhere\n            return;\n        }\n        windowsData.forEach(data => {\n            // check to see if window already exists with id\n            const existingWindow = this.getWindow(data.id);\n            if (existingWindow) {\n                console.log(\"WARNING: Window with id\", data.id, \"already exists, hydrating instead of creating new window\");\n                existingWindow.hydrate(data);\n                return;\n            }\n            data.parent = document.querySelector(data.parent);\n            // console.log(\"hydrating window\", data);\n            // this.openWindow(data.app, data);\n            //const window = this.createWindow(data);\n            //window.hydrate(data);\n        });\n    }\n}","export default class CountdownManager {\n    constructor() {\n        this.intervalId = null;\n        this.expiryCallbacks = new WeakMap(); // store per-element callbacks\n    }\n\n    updateCountdowns() {\n        const countdownEls = $('.countdown-date').filter(function () {\n            return $(this).data('expired') !== true;\n        });\n\n        if (countdownEls.length === 0) {\n            if (this.intervalId) {\n                clearInterval(this.intervalId);\n                this.intervalId = null;\n                if (bp?.apps?.ui) {\n                    bp.apps.ui.countdownTimer = null;\n                }\n            }\n            return;\n        }\n\n        countdownEls.each((_, el) => {\n            const $el = $(el);\n\n            const expiry = new Date($el.data('expiry')).getTime();\n            const now = Date.now();\n            const distance = expiry - now;\n\n            if (!$el.data('duration')) {\n                const ctime = $el.data('ctime');\n                if (ctime) {\n                    $el.data('duration', expiry - ctime);\n                }\n            }\n            // console.log('distance for', $el, distance);\n            // distance is going negative? on recurse?\n            if (distance < 0) {\n                $el.data('expired', true);\n\n                const cb = this.expiryCallbacks.get(el);\n                if (typeof cb === 'function') {\n                    cb($el);\n                    this.expiryCallbacks.delete(el); // Cleanup\n                }\n\n                return;\n            }\n\n            const days = Math.floor(distance / (1000 * 60 * 60 * 24));\n            const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n            const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n            const seconds = Math.floor((distance % (1000 * 60)) / 1000);\n\n            let prefix = '';\n            let timeParts = [];\n\n            if (days > 0) {\n                prefix = `${days} Day${days > 1 ? 's' : ''} `;\n                timeParts.push(hours.toString().padStart(2, '0'));\n            } else if (hours > 0) {\n                timeParts.push(hours.toString());\n            }\n\n            timeParts.push(minutes.toString().padStart(2, '0'));\n            timeParts.push(seconds.toString().padStart(2, '0'));\n\n            $el.text(prefix + timeParts.join(':'));\n        });\n    }\n\n    /**\n     * Start a countdown on the given jQuery element\n     * @param {jQuery} $el - The element to attach the countdown to\n     * @param {string|Date} expiry - Expiry date/time\n     * @param {function} [onExpire] - Optional callback when countdown expires\n     */\n    startCountdown($el, expiry, onExpire) {\n        const expiryTime = new Date(expiry).getTime();\n        const now = Date.now();\n        const duration = expiryTime - now;\n\n        // console.log('Starting countdown for', $el, expiry);\n\n        $el\n            .data('expiry', expiryTime)\n            .data('ctime', now)\n            .data('duration', duration)\n            .data('expired', false);\n\n        if (typeof onExpire === 'function') {\n            this.expiryCallbacks.set($el[0], onExpire);\n        }\n\n        if (!this.intervalId) {\n            this.intervalId = setInterval(() => this.updateCountdowns(), 1000);\n            if (bp?.apps?.ui) {\n                bp.apps.ui.countdownTimer = this.intervalId;\n            }\n        }\n\n        this.updateCountdowns(); // Immediate update\n    }\n}\n","// Remark: We may be able to remove UI and put all this logic in the desktop app\nimport WindowManager from \"./Window/WindowManager.js\";\nimport CountdownManager from \"../ui/CountdownManager.js\";\n\nexport default class UI {\n    constructor(bp, options = {}) {\n        this.bp = bp;\n\n        let windowManagerOptions = {};\n        windowManagerOptions.openWindow = this.bp.open.bind(this.bp),\n        windowManagerOptions.window = options.window || {};\n        windowManagerOptions.hideTaskBar = options.hideTaskBar;\n        this.windowManager = new WindowManager(this, windowManagerOptions);\n        this.bp.windows = this.windowManager.windows;\n        // will re-load any previous stored metadata about windows\n        // storage provider is defaulted to localStorage\n        this.windowManager.loadWindows();\n\n        options.parent = options.parent || document.body;\n\n        // options.parent.classList.add('droparea');\n\n        this.options = options;\n\n        if (typeof options.fontAwesome !== 'boolean') {\n            options.fontAwesome = true;\n        }\n\n        this.parent = options.parent;\n\n        this.countdownManager = new CountdownManager(this.bp);\n        // this.countdownManager.updateCountdowns();\n        let that = this;\n        this.bp.window = that.windowManager.createWindow.bind(that.windowManager);\n\n        function setViewportHeight() {\n        const vh = window.innerHeight * 0.01;\n        document.documentElement.style.setProperty('--vh', `${vh}px`);\n        }\n\n        // Run on load and resize\n        window.addEventListener('resize', setViewportHeight);\n        setViewportHeight();\n\n\n        return this;\n    }\n\n    async init() {\n\n        // base CSS for ui, this can be themed in the future\n        if (!this.options.noCSS) {\n            this.bp.appendCSS('/v5/apps/based/ui/ui.css'); // no need to wait for CSS to load?\n            if (this.bp.mode !== 'prod') {\n                this.bp.appendCSS('/v5/apps/based/ui/mobile.css'); // no need to wait for CSS to load?\n                this.bp.appendCSS('/v5/apps/based/ui/Window/Window.css'); // no need to wait for CSS to load?\n                this.bp.appendCSS('/v5/apps/based/ui/Window/TaskBar.css'); // no need to wait for CSS to load?\n                this.bp.appendCSS('/v5/apps/based/ui/Window/StartPanel.css'); // no need to wait for CSS to load?\n\n            }\n        }\n\n        if (this.options.fontAwesome) {\n            this.bp.appendCSS('/v5/vendor/font-awesome/css/fontawesome.css', false, true);\n            this.bp.appendCSS('/v5/vendor/font-awesome/css/all.min.css', false, true);\n        }\n\n        // TODO: add these lines back after removing v4 completely ( as jQuery is already loaded in v4)\n        if (!this.options.noZepto) {\n            // If you need jQuery or another version of $\n            // we have the ability to not load Zepto as $\n            //await this.bp.appendScript('/v5/vendor/zepto.min.js');\n        } else {\n            //await this.bp.appendScript('/v5/vendor/jquery.min.js');\n\n        }\n\n        // await this.bp.appendScript('/desktop/assets/js/jquery.js');\n\n\n        if (!this.options.noTabs) {\n            // what happened here with config? we shouldn't need to reference host here,\n            // TODO: check implementation of importModule with options\n            let SimpleTabs = await this.bp.importModule(this.bp.config.host + '/v5/apps/based/ui/SimpleTabs.js', {}, false)\n            this.Tabs = SimpleTabs.default;\n\n        }\n\n        await this.bp.appendScript('/v5/vendor/DateFormat.js');\n\n        // bind common document events\n        // TODO: move UI events to separate file\n        let d = document;\n\n        $(d).on('click', '.open-app', function (e) {\n            let appName = $(this).data('app');\n            let context = $(e.target).data('context');\n            let type = $(this).data('type');\n            // let output = $(this).data('output');\n\n            console.log('open-app ' + appName);\n            // check to see if legacy app ( for now)\n            bp.open(appName, { context, type });\n\n        });\n\n        return 'loaded ui';\n    }\n\n    async appendToElement(el) {\n        console.log('appendToElement', this);\n        let html = await fetchHTMLFragment('ui.html'); // TODO: might need root\n        console.log(html);\n        el.innerHTML = html;\n        return 'hello ui';\n    }\n\n    async loadDocumentBody() {\n        console.log('loadDocumentBody', this);\n        let html = await this.bp.fetchHTMLFragment('/v5/apps/based/ui/ui.html'); // TODO: might need root\n        console.log(html);\n        $('body').append(html);\n        //document.body.innerHTML = html;\n        return 'hello ui';\n\n    }\n\n    toggleFullScreen() {\n        if (document.fullscreenElement) {\n            document.exitFullscreen();\n        } else {\n            document.documentElement.requestFullscreen();\n        }\n    }\n\n}"],"names":["StartPanel","constructor","onAppLaunch","bp","this","panelElement","open","close","panel","document","createElement","className","style","display","searchInput","id","type","placeholder","autocomplete","recentSection","innerHTML","recentGrid","appendChild","allSection","allGrid","body","$","css","opacity","transform","transition","requestAnimationFrame","window","apps","ui","recentApps","slice","forEach","appData","app","createAppTile","appList","desktop","Object","entries","appName","adminOnly","me","icon","addEventListener","query","value","toLowerCase","length","querySelectorAll","el","label","dataset","name","_app","showResult","includes","categories","some","cat","closeEventHandler","event","target","hasClass","contains","isMobile","focus","$panel","setTimeout","remove","removeEventListener","tile","img","src","alt","textContent","onclick","async","context","prototype","enableKeyboardNavigation","currentIndex","appTiles","updateTilesList","Array","from","filter","focusTile","index","console","log","i","classList","toggle","scrollIntoView","block","e","key","preventDefault","nextIndex","prevIndex","Math","min","max","click","TaskBar","homeCallback","taskBarElement","taskbarLeft","taskbarItems","taskbarRight","items","Map","shortcuts","Set","isAtEnd","scrollLeft","clientWidth","scrollWidth","setAttribute","addItem","onClick","startPanel","isShortcut","anchor","stopPropagation","$menu","animate","left","removeClass","addClass","closest","showContextMenu","clientX","clientY","enableDragAndDrop","x","y","existing","querySelector","item","get","menu","position","visibility","makeOption","handler","option","isOpen","closeItem","openItem","has","delete","removeItem","add","installedTaskBarApps","settings","taskbar_apps","set","menuHeight","offsetHeight","top","removeMenu","once","config","ev","itemElement","existingWindow","windowManager","getWindow","isMinimized","restore","minimize","draggable","itemText","itemIcon","height","width","call","alertItem","behavior","inline","element","win","warn","parentNode","removeChild","taskBarApps","getItem","dragged","over","children","indexOf","insertBefore","newOrder","map","newTaskBarApps","idCounter","Window","options","title","content","iframeContent","z","parent","onFocus","onClose","onOpen","onMessage","onLoad","resizeable","preventOverlap","canBeBackground","getElementById","isMaximized","container","contentValue","isActive","windows","saveWindowsState","removeWindow","startDrag","bind","drag","stopDrag","createWindow","screenWidth","innerWidth","screenHeight","innerHeight","adjustedPosition","newWindow","buffer","adjustedX","adjustedY","x1","y1","w1","h1","x2","y2","w2","h2","parseInt","checkOverlap","adjustPosition","zIndex","titleBar","ondblclick","maximize","iconTitleBar","titleBarSpan","passive","controls","minimizeButton","maximizeButton","closeButton","initContentArea","addResizeHandles","onload","iframeDoc","contentDocument","contentWindow","write","setupMessageHandling","iframe","currentOrigin","location","origin","loaderHolder","script","receiveMessage","sendMessage","message","postMessage","data","handleReceivedMessage","move","serialize","parentXpath","names","unshift","sibling","count","previousSibling","nodeType","tagName","nth","join","fullPath","hydrate","Number","updateWindow","setDepth","depth","setAsBackground","isBackground","restoreWindowFromBackground","isDragging","cursor","pointerEvents","getEventCoordinates","offsetX","offsetLeft","offsetY","offsetTop","bottomLimit","rightLimit","startsWith","touch","touches","changedTouches","force","normalMenuBarHeight","diff","pixelOffset","propigate","focusWindow","pushStateId","alias","DelayedPushState","push","appId","err","error","emit","taskBar","parentElement","resizeHandle","startResize","setSize","startX","startY","startWidth","offsetWidth","startHeight","onMove","moveEvent","newWidth","newHeight","onUp","resize","isResizing","stopResize","setTitle","setContent","WindowManager","storage","localStorage","storageKey","_windows","useKeyboardControls","hideTaskBar","openWindow","_openWindow","state","lastPositionsBeforeArranged","w","minimizeAllWindows","hide","ignoreUIControlKeys","dialog","previousWindowData","find","addWindow","updateFocus","splice","isFocused","closeAllWindows","windowsHiding","findWindows","isArray","types","appMatch","typeMatch","JSON","stringify","setItem","loadWindows","serializedWindows","restoreWindows","arrangeVerticalStacked","containerHeight","clientHeight","windowWidth","defaultWindowHeight","totalY","reverse","currentWindowHeight","shortCutsContainer","arrangeHorizontalStacked","xPos","arrangeCascadeFromTopLeft","yPos","inflate","windowsData","parse","CountdownManager","intervalId","expiryCallbacks","WeakMap","updateCountdowns","countdownEls","each","_","$el","expiry","Date","getTime","distance","now","ctime","cb","days","floor","hours","minutes","seconds","prefix","timeParts","toString","padStart","text","clearInterval","countdownTimer","startCountdown","onExpire","expiryTime","duration","setInterval","UI","windowManagerOptions","fontAwesome","countdownManager","setViewportHeight","vh","documentElement","setProperty","init","noCSS","appendCSS","mode","noZepto","noTabs","SimpleTabs","importModule","host","Tabs","default","appendScript","d","on","appendToElement","html","fetchHTMLFragment","loadDocumentBody","append","toggleFullScreen","fullscreenElement","exitFullscreen","requestFullscreen"],"mappings":"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"}