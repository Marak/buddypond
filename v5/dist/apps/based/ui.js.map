{"version":3,"file":"ui.js","sources":["../../../apps/based/ui/Window/StartPanel.js","../../../apps/based/ui/Window/TaskBar.js","../../../apps/based/ui/Window/Window.js","../../../apps/based/ui/Window/WindowManager.js","../../../apps/based/ui/CountdownManager.js","../../../apps/based/ui/ui.js"],"sourcesContent":["/* StartPanel.js - Marak Squires 2025 - BuddyPond */\nexport default class StartPanel {\n    constructor({ onAppLaunch, bp } = {}) {\n        this.onAppLaunch = onAppLaunch || function () { };\n        this.bp = bp;\n        this.panelElement = null;\n    }\n\n    open() {\n        // console.log('Opening start panel', this.panelElement);\n        if (this.panelElement) {\n            // if the panel is already open, close it first\n            this.close();\n            return;\n        }\n\n        const panel = document.createElement('div');\n        panel.className = 'start-panel';\n\n        const searchInput = document.createElement('input');\n        searchInput.id = 'start-panel-search';\n        searchInput.className = 'start-panel-search';\n        searchInput.type = 'text';\n        searchInput.placeholder = 'Search apps...';\n        searchInput.autocomplete = 'off'; // ✅ Disable browser autofill/autocomplete\n\n\n        const recentSection = document.createElement('div');\n        recentSection.className = 'start-panel-section';\n        recentSection.innerHTML = `<h3>Recent Apps</h3>`;\n        const recentGrid = document.createElement('div');\n        recentGrid.className = 'start-panel-grid';\n        recentSection.appendChild(recentGrid);\n\n        const allSection = document.createElement('div');\n        allSection.className = 'start-panel-section';\n        allSection.innerHTML = `<h3>All Apps</h3>`;\n        const allGrid = document.createElement('div');\n        allGrid.className = 'start-panel-grid';\n        allSection.appendChild(allGrid);\n\n        panel.appendChild(searchInput);\n        panel.appendChild(recentSection);\n        panel.appendChild(allSection);\n\n        document.body.appendChild(panel);\n        this.panelElement = panel;\n\n        // Populate recent apps (stub)\n        const recentApps = (window.bp?.apps?.ui?.recentApps || []).slice(0, 10);\n        // console.log('Recent apps:', recentApps);\n        recentApps.forEach(appData => {\n            const app = this.createAppTile(appData);\n            recentGrid.appendChild(app);\n        });\n\n        // Populate all apps (stub)\n        const appList = window.bp?.apps?.desktop?.appList || {};\n\n        const allAppEntries = Object.entries(appList);\n        allAppEntries.forEach(([appName, appData]) => {\n            if (appData.adminOnly && this.bp.me !== 'Marak') { // Remark: admin rbac\n                // Skip apps that are admin-only unless the user is Marak\n                return;\n            }\n            appData.app = appData.app || appName; // Ensure appName is available\n            appData.id = appData.id || appName; // Ensure id is available\n            const app = this.createAppTile(appData, appData.icon);\n            allGrid.appendChild(app);\n        });\n\n        // Live search filtering\n        searchInput.addEventListener('input', () => {\n            const query = searchInput.value.toLowerCase();\n\n            // Toggle recentSection visibility based on query\n            if (query.length > 0) {\n                recentSection.style.display = 'none';\n            } else {\n                recentSection.style.display = '';\n            }\n\n            allGrid.querySelectorAll('.start-panel-app').forEach(el => {\n                const label = el.dataset.name.toLowerCase();\n                let _app = this.bp.apps.desktop.appList[el.dataset.id];\n                let showResult = false;\n\n                if (_app) {\n                    if (label.includes(query)) {\n                        showResult = true;\n                    }\n                    if (!showResult && _app.categories) {\n                        showResult = _app.categories.some(cat => cat.toLowerCase().includes(query));\n                    }\n                }\n\n                el.style.display = showResult ? 'flex' : 'none';\n            });\n        });\n\n        // this.enableKeyboardNavigation(panel, searchInput);\n\n        this.closeEventHandler = (event) => {\n            // console.log('click event target', event.target);\n            if ($(event.target).hasClass('taskbar-item')) {\n                // If the click is inside the panel or on the search input, do nothing\n                return;\n            }\n            // close the panel if it exists\n            if (this.panelElement && !this.panelElement.contains(event.target) && event.target !== searchInput) {\n                this.close();\n            }\n            // If the click is outside the panel and not on the search input, close the panel\n            // .taskbar-item, .taskbar-container\n        }\n        // add event listener to close panel on click outside\n        document.addEventListener('click', this.closeEventHandler);\n\n        // focus on the start-panel-search input\n        searchInput.focus();\n\n    }\n\n    close() {\n        if (this.panelElement) {\n            this.panelElement.remove();\n            this.panelElement = null;\n        }\n        // remove the event listener for closing the panel\n        if (this.closeEventHandler) {\n            document.removeEventListener('click', this.closeEventHandler);\n            this.closeEventHandler = null;\n        }\n    }\n\n    createAppTile(appData, icon = 'icons/default.png') {\n        // console.log('Creating app tile for:', appData);\n        let name = appData.id || appData.appName || appData.name || appData.label || 'Unknown App';\n        icon = appData.icon || icon || 'icons/default.png';\n        const tile = document.createElement('div');\n        tile.className = 'start-panel-app';\n        tile.dataset.name = name;\n        tile.dataset.id = appData.id || appData.app || name;\n        tile.dataset.app = appData.app || appData.id || name;\n\n        const img = document.createElement('img');\n        img.src = icon;\n        img.alt = name;\n\n        const label = document.createElement('div');\n        label.textContent = appData.label || name;\n\n        tile.appendChild(img);\n        tile.appendChild(label);\n\n        tile.onclick = async () => {\n            let win = await this.bp.open(appData.app || appData.id, { context: appData.context });\n            this.onAppLaunch(name);\n            this.close();\n        };\n\n        return tile;\n    }\n}\n\n// Enable keyboard navigation for the start panel\nStartPanel.prototype.enableKeyboardNavigation = function (panel, searchInput) {\n    // Add keyboard navigation\n    let currentIndex = -1;\n    let appTiles = [];\n\n    function updateTilesList() {\n        appTiles = Array.from(panel.querySelectorAll('.start-panel-app'))\n            .filter(el => el.style.display !== 'none');\n    }\n    updateTilesList();\n\n    // Add highlight class\n    function focusTile(index) {\n        console.log('Focusing tile at index:', index);\n        appTiles.forEach((el, i) => {\n            el.classList.toggle('focused', i === index);\n            if (i === index) el.scrollIntoView({ block: 'nearest' });\n        });\n        currentIndex = index;\n    }\n\n    // Clear highlight\n    function clearFocus() {\n        appTiles.forEach(el => el.classList.remove('focused'));\n        currentIndex = -1;\n    }\n\n    searchInput.addEventListener('keydown', (e) => {\n        if (e.key === 'ArrowDown') {\n            updateTilesList();\n            if (appTiles.length > 0) {\n                focusTile(0);\n                e.preventDefault();\n            }\n        }\n    });\n\n    const ROW_LENGTH = 5;\n\n    panel.addEventListener('keydown', (e) => {\n        console.log('Key pressed:', e.key);\n        if (appTiles.length === 0) return;\n\n\n        // tab key should select the first tile\n        if (e.key === 'Tab') {\n            // TODO: shift tab should select the last tile\n            if (currentIndex === -1) {\n                focusTile(0);\n            } else {\n                // Move to next tile\n                let nextIndex = currentIndex + 1;\n                if (nextIndex < appTiles.length) {\n                    focusTile(nextIndex);\n                } else {\n                    // Stay on last tile if next tile is out of bounds\n                    focusTile(appTiles.length - 1);\n                }\n            }\n            e.preventDefault();\n            return;\n        }\n\n        if (e.key === 'ArrowDown') {\n            // ✅ If nothing is focused, focus first tile\n            if (currentIndex === -1) {\n                focusTile(0);\n            } else {\n                // ✅ Move down one row\n                let nextIndex = currentIndex + ROW_LENGTH;\n                if (nextIndex < appTiles.length) {\n                    focusTile(nextIndex);\n                } else {\n                    // Stay on last tile if next row is out of bounds\n                    focusTile(appTiles.length - 1);\n                }\n            }\n            e.preventDefault();\n        }\n\n        if (e.key === 'ArrowUp') {\n            if (currentIndex === -1) {\n                focusTile(0);\n            } else {\n                // ✅ Move up one row\n                let prevIndex = currentIndex - ROW_LENGTH;\n                if (prevIndex >= 0) {\n                    focusTile(prevIndex);\n                } else {\n                    // Stay on first tile if already in top row\n                    focusTile(0);\n                }\n            }\n            e.preventDefault();\n        }\n\n        if (e.key === 'ArrowRight') {\n            if (currentIndex === -1) {\n                focusTile(0);\n            } else {\n                focusTile(Math.min(currentIndex + 1, appTiles.length - 1));\n            }\n            e.preventDefault();\n        }\n\n        if (e.key === 'ArrowLeft') {\n            if (currentIndex === -1) {\n                focusTile(0);\n            } else {\n                focusTile(Math.max(currentIndex - 1, 0));\n            }\n            e.preventDefault();\n        }\n\n        if (e.key === 'Enter' && currentIndex >= 0) {\n            appTiles[currentIndex].click();\n            e.preventDefault();\n        }\n\n        if (e.key === 'Escape') {\n            clearFocus();\n            searchInput.focus();\n        }\n    });\n}","import StartPanel from \"./StartPanel.js\";\n\nexport default class TaskBar {\n    constructor({ homeCallback, bp } = {}) {\n        this.taskBarElement = document.createElement(\"div\");\n        this.taskBarElement.className = \"taskbar-container\";\n        document.body.appendChild(this.taskBarElement);\n\n        this.bp = bp; // reference to the base platform instance\n\n        this.items = new Map(); // id -> config\n        this.shortcuts = new Set(); // id\n\n\n        function openStartPanel() {\n            if (!this.startPanel) {\n                this.startPanel = new StartPanel({ bp: this.bp });\n            }\n            this.startPanel.open();\n        }\n\n        if (homeCallback) {\n            this.addItem({\n                id: \"home\",\n                label: \"Home\",\n                // onClick: homeCallback,\n                onClick: openStartPanel,\n                icon: \"desktop/assets/images/icons/icon_mantra_64.png\",\n                isShortcut: true,\n            });\n        }\n        this.taskBarElement.addEventListener('contextmenu', (e) => {\n            e.preventDefault();\n            const target = e.target.closest('.taskbar-item');\n            if (!target) return;\n            const id = target.dataset.id;\n            if (!id || id === 'home') return;\n            this.showContextMenu(id, e.clientX, e.clientY);\n        });\n\n        this.enableDragAndDrop();\n    }\n\n    showContextMenu(id, x, y) {\n        const existing = document.querySelector('.taskbar-context-menu');\n        if (existing) existing.remove();\n\n        const item = this.items.get(id);\n        if (!item) return;\n\n        const menu = document.createElement('div');\n        menu.className = 'taskbar-context-menu';\n        menu.style.position = 'fixed';\n        menu.style.left = `${x}px`;\n        menu.style.visibility = 'hidden'; // hide until we calculate dimensions\n        document.body.appendChild(menu);\n\n        // Helper\n        const makeOption = (label, handler) => {\n            const option = document.createElement('div');\n            option.className = 'taskbar-context-menu-item';\n            option.textContent = label;\n            option.onclick = () => {\n                handler();\n                menu.remove();\n            };\n            menu.appendChild(option);\n        };\n\n        // Options\n        if (item.isOpen) {\n            makeOption('Close', () => this.closeItem(id));\n        } else {\n            makeOption('Open', () => this.openItem(item));\n        }\n\n        if (this.shortcuts.has(id)) {\n            makeOption('Unpin from Taskbar', () => {\n                this.shortcuts.delete(id);\n                // this.removeItem(id);\n            });\n        } else {\n\n            if (item.app === 'buddylist' && id !== 'buddylist') {\n                // don't allow pinning buddylist with context\n            } else {\n                // Remark: Issue with non-singleton apps like 'emulator'\n                // Needs to be handled differently\n                if (item.app !== 'emulator') {\n                    makeOption('Keep in Taskbar', () => {\n                        // console.log('Pinning item to taskbar:', item);\n                        // console.log('Adding shortcut to taskbar:', item.app);\n                        this.shortcuts.add(item.app || id);\n                        // save the taskbar_apps to settings\n                        let installedTaskBarApps = this.bp.settings.taskbar_apps || {};\n                        installedTaskBarApps[item.app || id] = {\n                            app: item.app || id,\n                            context: item.context || 'default',\n                            label: item.label || id,\n                            icon: item.icon || ''\n                        };\n                        this.bp.set('taskbar_apps', installedTaskBarApps);\n                    });\n                }\n\n            }\n\n        }\n\n        // makeOption('Remove from Taskbar', () => this.removeItem(id));\n\n        // Wait for DOM to layout, then position the menu\n        requestAnimationFrame(() => {\n            const menuHeight = menu.offsetHeight;\n            const viewportHeight = window.innerHeight;\n\n            // Attempt to place above the cursor\n            let top = y - menuHeight - 4; // slight offset\n\n            // If that would go off screen, place below (fallback)\n            if (top < 0) {\n                top = y + 4;\n            }\n\n            menu.style.top = `${top}px`;\n            menu.style.visibility = 'visible';\n        });\n\n        const removeMenu = () => menu.remove();\n        setTimeout(() => {\n            window.addEventListener('click', removeMenu, { once: true });\n            window.addEventListener('contextmenu', removeMenu, { once: true });\n        }, 0);\n    }\n\n\n    addItem(config) {\n        let { app, id, context, label = \"\", onClick, icon, isShortcut = true } = config;\n        // console.log('TaskBar.addItem', config);\n\n        // save the taskbar_apps\n        if (context && context !== 'default') {\n            // app = app + '-' + context; // append context to app name\n        }\n\n        let installedTaskBarApps = this.bp.settings.taskbar_apps || {};\n        if (id !== 'home') {\n            installedTaskBarApps[app || id] = {\n                id: id,\n                app: app || id,\n                context: context || 'default',\n                label: label || id,\n                icon: icon || ''\n            };\n            // console.log('TaskBar.addItem installedTaskBarApps', installedTaskBarApps);\n\n        }\n\n        if (isShortcut) {\n            // save the taskbar_apps to settings, if it is a shortcut\n            this.bp.set('taskbar_apps', installedTaskBarApps);\n        }\n\n        // console.log('TaskBar.addItem', config);\n        if (typeof onClick !== 'function') {\n            // default action is to open the app, bp.open()\n            onClick = async (ev, itemElement) => {\n\n                // first check to see if the window exists / is open\n                let existingWindow = this.bp.apps.ui.windowManager.getWindow(id);\n\n                if (!existingWindow) {\n                    console.log('default onClick, opening window', id, config);\n                    // Remark: this.bp wasn't scoped here? should work...\n                    let win = await this.bp.open(app || id, { context });\n                    // console.log('TaskBar.onClick bp.open', id, win);\n                } else {\n                    if (existingWindow.isMinimized) {\n                        // console.log('TaskBar.onClick restoring window', existingWindow);\n                        existingWindow.restore();\n                        existingWindow.focus();\n                    } else {\n                        // console.log('TaskBar.onClick minimizing window', existingWindow);\n                        existingWindow.minimize();\n                    }\n                }\n                ev.stopPropagation();\n            };\n        }\n\n        let existing = this.taskBarElement.querySelector(`[data-id=\"${id}\"]`);\n        if (existing) return existing;\n\n        const itemElement = document.createElement(\"div\");\n        itemElement.className = \"taskbar-item\";\n        itemElement.dataset.id = id;\n        itemElement.draggable = true;\n\n        const itemText = document.createElement(\"div\");\n        itemText.className = \"taskbar-item-text\";\n        itemText.textContent = label;\n        itemElement.appendChild(itemText);\n\n        if (icon) {\n            const itemIcon = document.createElement(\"img\");\n            itemIcon.src = icon;\n            itemIcon.height = 32;\n            itemIcon.width = 32;\n            itemIcon.alt = label;\n            itemElement.appendChild(itemIcon);\n        } else {\n            itemElement.textContent = label;\n        }\n\n        itemElement.onclick = (ev) => {\n            if (onClick) onClick.call(this, ev, itemElement);\n            this.alertItem(id);\n        };\n\n        if (isShortcut) {\n            this.shortcuts.add(id);\n        }\n\n        this.taskBarElement.appendChild(itemElement);\n        this.items.set(id, {\n            ...config,\n            element: itemElement,\n            isOpen: false,\n            isShortcut: isShortcut\n        });\n\n        return itemElement;\n    }\n\n    openItem(config) {\n        // console.log('TaskBar.openItem', config);\n        let item = this.items.get(config.id);\n        if (item) {\n            item.isOpen = true;\n            item.element.classList.add(\"taskbar-item-open\");\n            // console.log('TaskBar.openItem', item);\n            // item.onClick?.(null, item.element); // call the onClick handler if it exists\n        } else {\n            this.addItem({ ...config, isShortcut: false }); // treat open as temporary unless marked otherwise\n            this.openItem(config); // re-call to apply open state\n        }\n    }\n\n    closeItem(id) {\n        const item = this.items.get(id);\n        if (!item) return;\n\n        item.isOpen = false;\n        item.element.classList.remove(\"taskbar-item-open\");\n\n        console.log('TaskBar.closeItem', id, item);\n        console.log('shortcuts', this.shortcuts);\n\n        // shouldn't this be checking this.shortcuts instead of item.isShortcut?\n        if (!this.shortcuts.has(id)) {\n            this.removeItem(id);\n        }\n        /*\n        console.log('shortcuts', this.shortcuts);\n        // If the item is NOT a shortcut, remove it from the taskbar\n        if (!item.isShortcut) {\n            this.removeItem(id);\n        }\n        */\n\n        // get the window instance and close it\n        const win = this.bp.apps.ui.windowManager.getWindow(id);\n        if (win) {\n            win.close();\n        } else {\n            console.warn(`No window found with ID: ${id}`);\n        }\n    }\n\n    removeItem(id) {\n        const item = this.items.get(id);\n        if (item) {\n            this.taskBarElement.removeChild(item.element);\n            this.items.delete(id);\n            this.shortcuts.delete(id);\n\n            // save the updated taskbar_apps\n            let taskBarApps = this.bp.settings.taskbar_apps || {};\n            if (taskBarApps[id]) {\n                delete taskBarApps[id];\n                this.bp.set('taskbar_apps', taskBarApps);\n            }\n            console.log('TaskBar.removeItem', id, item);\n\n        }\n    }\n\n    getItem(id) {\n        return this.items.get(id);\n    }\n\n    alertItem(id) {\n        const item = this.items.get(id);\n        if (item) {\n            item.element.classList.add(\"taskbar-item-alert\");\n            setTimeout(() => item.element.classList.remove(\"taskbar-item-alert\"), 3000);\n        }\n    }\n\n    enableDragAndDrop() {\n        let dragged = null;\n\n        this.taskBarElement.addEventListener(\"dragstart\", (e) => {\n            dragged = e.target.closest(\".taskbar-item\");\n        });\n\n        this.taskBarElement.addEventListener(\"dragover\", (e) => {\n            e.preventDefault();\n            const over = e.target.closest(\".taskbar-item\");\n            if (dragged && over && dragged !== over) {\n                const draggedIndex = [...this.taskBarElement.children].indexOf(dragged);\n                const overIndex = [...this.taskBarElement.children].indexOf(over);\n                if (draggedIndex < overIndex) {\n                    this.taskBarElement.insertBefore(over, dragged);\n                } else {\n                    this.taskBarElement.insertBefore(dragged, over);\n                }\n            }\n        });\n\n        this.taskBarElement.addEventListener(\"dragend\", () => {\n            dragged = null;\n\n            // resave the new order of shortcuts\n            const newOrder = Array.from(this.taskBarElement.children).map(item => item.dataset.id);\n            let taskBarApps = this.bp.settings.taskbar_apps || {};\n            // reorder the taskbar_apps based on the new order\n            const newTaskBarApps = {};\n            newOrder.forEach(id => {\n                if (taskBarApps[id]) {\n                    newTaskBarApps[id] = taskBarApps[id];\n                }\n            });\n            //console.log('New taskbar order:', newOrder);\n            this.bp.set('taskbar_apps', newTaskBarApps);\n\n        });\n    }\n}\n","// Buddy Pond - Window.js - Marak Squires 2023\n// A simple window class for creating draggable, resizable windows\n// Remark: WindowManager interface is optional and will be stubbed out if not provided\nlet idCounter = 0;\n\nclass Window {\n    constructor(options = {}, windowManager) {\n        const {\n            title = \"Window\", // Title of the window\n            width = '400px', // Default width\n            height = '300px', // Default height\n            app = 'default', // default app\n            type = 'singleton', // Default type ( intended to not have siblings )\n            context = 'default', // Default context\n            content = '', // Default content\n            iframeContent = false,\n            icon = '', // Default icon\n            x = 50, // Default x position\n            y = 50, // Default y position\n            z = 99, // Default z-index\n            parent = window.document.body, // Parent element to append to\n            id = `window-${idCounter}`, // Unique ID for the panel\n            onFocus = () => { }, // Callback when the window is focused\n            onClose = () => { }, // Callback when the window is closed\n            onOpen = () => { }, // Callback when the window is opened\n            onMessage = () => { }, // Callback when the window receives a message\n            onLoad = () => { }, // Callback when the window is loaded ( remote content )\n            className = '', // Custom classes for styling\n            resizeable = true, // Enable resizable feature\n            preventOverlap = true, // prevents direct overlap with other windows\n            canBeBackground = false // Can be set as background\n        } = options;\n\n        this.windowManager = windowManager;\n\n        // ensure that no other window has the same id\n        // we could check the windowManger.windows array for this\n        // we will check the document ( in case another system has created a window )\n        let existingWindow = document.getElementById(id);\n        if (existingWindow) {\n            console.log('Window with id already exists', id);\n            return existingWindow;\n        }\n\n        this.title = title;\n        this.icon = icon;\n        this.width = width;\n        this.height = height;\n\n        if (app !== 'default') {\n            this.app = app;\n        } else {\n            this.app = id;\n        }\n\n        \n        this.type = type;\n        this.x = x;\n        this.y = y;\n        this.z = 99;\n        this.context = context;\n        this.parent = parent;\n        this.id = id;\n        this.isMaximized = false;\n        this.isMinimized = false;\n        this.container = null;\n        this.content = null;\n        this.iframeContent = iframeContent;\n        this.contentValue = content;\n        this.isActive = false;\n        this.className = className;\n        this.resizeable = resizeable;\n        this.preventOverlap = preventOverlap;\n        this.canBeBackground = canBeBackground;\n\n        windowManager = windowManager || {\n            windows: [],\n            saveWindowsState: () => { },\n            removeWindow: () => { },\n\n        };\n\n        this.bp = options.bp;\n\n        this.onFocus = onFocus;\n        this.onClose = onClose;\n        this.onOpen = onOpen;\n        this.onLoad = onLoad;\n        this.onMessage = onMessage;\n\n        this.startDrag = this.startDrag.bind(this);\n        this.drag = this.drag.bind(this);\n        this.stopDrag = this.stopDrag.bind(this);\n\n\n        this.createWindow();\n        this.open();\n\n        return this;\n    }\n\n    createWindow() {\n        // Create the main window container\n        this.container = document.createElement(\"div\");\n        this.container.classList.add(\"window-container\");\n\n        // add dataset for app, type, context\n        this.container.dataset.app = this.app;\n        this.container.dataset.type = this.type;\n        this.container.dataset.context = this.context;\n\n        if (this.className) {\n            this.container.classList.add(this.className);\n        }\n\n        if (!this.resizeable) {\n            this.container.classList.add(\"window-not-resizeable\");\n        }\n\n\n        // Helper function to check if two rectangles overlap\n        function checkOverlap(x1, y1, w1, h1, x2, y2, w2, h2, buffer = 10) {\n            // console.log('checkOverlap', x1, y1, w1, h1, x2, y2, w2, h2, buffer);\n            w1 = parseInt(w1);\n            h1 = parseInt(h1);\n            w2 = parseInt(w2);\n            h2 = parseInt(h2);\n            return (\n                x1 < x2 + w2 + buffer &&\n                x1 + w1 + buffer > x2 &&\n                y1 < y2 + h2 + buffer &&\n                y1 + h1 + buffer > y2\n            );\n        }\n\n        // Function to adjust position to prevent overlap\n        function adjustPosition(newWindow, windows, screenWidth, screenHeight, buffer = 10) {\n            let adjustedX = newWindow.x;\n            let adjustedY = newWindow.y;\n\n            // Check overlap with other windows\n            windows.forEach((win) => {\n                if (checkOverlap(adjustedX, adjustedY, newWindow.width, newWindow.height, win.x, win.y, win.width, win.height, buffer)) {\n                    // console.log('OVERLAP DETECTED');\n                    adjustedX += buffer; // Move slightly to the right\n                    // adjustedY += buffer; // Move slightly down\n                }\n            });\n\n            // Check screen boundaries\n            if (adjustedX + newWindow.width + buffer > screenWidth) {\n                adjustedX = screenWidth - newWindow.width - buffer; // Move to the left\n            }\n            if (adjustedY + newWindow.height + buffer > screenHeight) {\n                adjustedY = screenHeight - newWindow.height - buffer; // Move up\n            }\n            if (adjustedX < buffer) {\n                adjustedX = buffer; // Move to the right\n            }\n            if (adjustedY < buffer) {\n                adjustedY = buffer; // Move down\n            }\n\n            return { x: adjustedX, y: adjustedY };\n        }\n\n        // Main Window Creation Logic\n        this.container.id = this.id;\n        this.container.style.width = `${this.width}px`;\n        this.container.style.height = `${this.height}px`;\n        this.container.style.position = \"absolute\";\n\n        // Assume screen dimensions\n        const screenWidth = window.innerWidth;\n        const screenHeight = window.innerHeight;\n\n        /*\n        // Remark: We could perform a general zoom scale for mobile devices\n        if (screenWidth <= 980) {\n            // this.container.style.zoom = 1.5; // Adjust zoom for mobile\n        } else {\n            // do nothing\n        }\n        */\n\n        // Adjust position to prevent overlap\n        let adjustedPosition = {\n            x: this.x,\n            y: this.y,\n        };\n\n        if (this.preventOverlap) {\n            adjustedPosition = adjustPosition(\n                { x: this.x, y: this.y, width: this.width, height: this.height },\n                this.windowManager.windows,\n                screenWidth,\n                screenHeight,\n                32\n            );\n        }\n\n\n        // Apply adjusted position\n        this.x = adjustedPosition.x;\n        this.y = adjustedPosition.y;\n        this.container.style.top = `${this.y}px`;\n        this.container.style.left = `${this.x}px`;\n\n        this.container.style.zIndex = 99;\n\n        // add a mousedown handler to container itself to set 'window-active' status\n        this.container.addEventListener('mousedown', () => {\n            // set all windows to inactive\n            document.querySelectorAll('.window-container').forEach((window) => {\n                window.classList.remove('window-active');\n                window.isActive = false;\n            });\n            // set this window to active\n            this.container.classList.add('window-active');\n            this.isActive = true;\n        });\n\n        // same for touchstart\n        this.container.addEventListener('touchstart', () => {\n            // set all windows to inactive\n            document.querySelectorAll('.window-container').forEach((window) => {\n                window.classList.remove('window-active');\n                window.isActive = false;\n            });\n            // set this window to active\n            this.container.classList.add('window-active');\n            this.isActive = true;\n        });\n\n        // Create the title bar\n        this.titleBar = document.createElement(\"div\");\n        this.titleBar.classList.add(\"window-title-bar\");\n\n        if (this.bp.isMobile()) {\n            this.titleBar.onclick = () => {\n                console.log('titleBar clicked on mobile');\n                this.minimize();\n                return;\n                if (!this.isMinimized) {\n                    this.minimize(true); // force minimize on mobile\n                } else {\n                    this.restore(); // restore on mobile\n                }\n            }\n        }\n\n        // on double click maximize\n        this.titleBar.ondblclick = () => this.maximize();\n\n        if (this.icon) {\n            let iconTitleBar = document.createElement(\"img\");\n            iconTitleBar.src = this.icon;\n            iconTitleBar.classList.add(\"window-icon\");\n            this.titleBar.appendChild(iconTitleBar);\n        }\n\n        let titleBarSpan = document.createElement(\"span\");\n        titleBarSpan.classList.add(\"window-title-text\");\n        titleBarSpan.textContent = this.title;\n        this.titleBarSpan = titleBarSpan;\n\n        // Drag functionality\n        // Add mouse and touch event listeners to the titleBar\n        this.titleBar.addEventListener('mousedown', this.startDrag);\n        this.titleBar.addEventListener('touchstart', this.startDrag, { passive: false });\n\n        // Touch events for mobile\n\n\n        // Create control buttons (Minimize, Maximize, Close)\n        const controls = document.createElement(\"div\");\n        controls.classList.add(\"window-controls\");\n\n        if (!this.bp.isMobile()) {\n            this.minimizeButton = document.createElement(\"button\");\n            this.minimizeButton.innerHTML = \"&#x1F7E1;\"; // Yellow circle\n            this.minimizeButton.classList.add(\"minimize-button\");\n            this.minimizeButton.title = \"Minimize\";\n            this.minimizeButton.onclick = () => this.minimize();\n\n            controls.appendChild(this.minimizeButton);\n\n\n        }\n\n\n        this.maximizeButton = document.createElement(\"button\");\n        this.maximizeButton.innerHTML = \"&#x1F7E2;\"; // Green circle\n        this.maximizeButton.classList.add(\"maximize-button\");\n        this.maximizeButton.title = \"Maximize\";\n        this.maximizeButton.onclick = () => this.maximize();\n\n        controls.appendChild(this.maximizeButton);\n\n\n        this.closeButton = document.createElement(\"button\");\n        this.closeButton.innerHTML = \"&#x1F534;\"; // Red circle\n        this.closeButton.classList.add(\"close-button\");\n        this.closeButton.title = \"Close\";\n        this.closeButton.onclick = () => this.close();\n\n        controls.appendChild(this.closeButton);\n\n        this.titleBar.appendChild(titleBarSpan);\n        this.titleBar.appendChild(controls);\n\n        this.initContentArea();\n\n        // Append components\n        this.container.appendChild(this.titleBar);\n        this.container.appendChild(this.content);\n\n        if (this.parent) {\n            this.parent.appendChild(this.container);\n        }\n\n        // Resizing\n        if (this.resizeable) {\n            this.addResizeHandles();\n        }\n\n        if (this.canBeBackground) {\n            // get the menubar-set-window-as-background element and remove disabled class\n            let el = document.getElementById('menubar-set-window-as-background');\n            if (el) {\n                el.classList.remove('disabled');\n            }\n        }\n\n\n        return this.container;\n    }\n\n\n    initContentArea() {\n        if (typeof this.iframeContent === 'boolean' && this.iframeContent) {\n            this.content = document.createElement(\"iframe\");\n            this.content.classList.add(\"bp-window-content\");\n            document.body.appendChild(this.content);\n            this.content.src = 'about:blank';\n            this.content.onload = () => {\n                let iframeDoc = this.content.contentDocument || this.content.contentWindow.document;\n                iframeDoc.open();\n                iframeDoc.write(this.contentValue);\n                iframeDoc.close();\n                this.setupMessageHandling();\n            };\n        } else if (typeof this.iframeContent === 'string' && this.iframeContent.length) {\n            this.content = document.createElement(\"iframe\");\n            this.content.classList.add(\"bp-window-content\");\n            this.content.src = this.iframeContent;\n            this.content.onload = () => this.setupMessageHandling();\n        } else {\n            this.content = document.createElement(\"div\");\n            this.content.classList.add(\"bp-window-content\");\n            if (typeof this.contentValue === 'string') {\n                this.content.innerHTML = this.contentValue;\n            } else {\n                this.content.appendChild(this.contentValue);\n            }\n        }\n    }\n\n    // TODO: migrate away from iframe messages and use BroadcastChannel instead\n    setupMessageHandling() {\n        // iframe is loaded by now\n        this.onLoad(this);\n        const iframeWindow = this.content.contentWindow;\n\n        // Inject a script into the iframe to listen for the ESC key\n        const iframeDoc = this.content.contentDocument || this.content.contentWindow.document;\n        const script = iframeDoc.createElement(\"script\");\n        script.type = \"text/javascript\";\n        script.textContent = `\n            document.addEventListener('keydown', (event) => {\n                if (event.key === 'Escape') {\n                    window.parent.postMessage({ event: 'ESC_KEY_PRESSED' }, '*');\n                }\n            });\n        `;\n        //alert(script.textContent)\n        iframeDoc.body.appendChild(script);\n\n        // Set the message event listener on the iframe's window\n        window.addEventListener('message', this.receiveMessage.bind(this), false);\n    }\n\n\n    sendMessage(message) {\n        if (this.content && this.content.contentWindow) {\n            this.content.contentWindow.postMessage(message, '*'); // Consider specifying an origin here instead of '*'\n        }\n    }\n\n    receiveMessage(event) {\n        // Ensure security by checking the event.origin, if possible\n        if (typeof event.data === 'object' && event.data.event) {\n            if (event.data.event === 'ESC_KEY_PRESSED') {\n                console.log('ESC key pressed inside iframe. Closing window...');\n                this.close();\n            } else {\n                this.handleReceivedMessage(event.data);\n            }\n        }\n    }\n\n    handleReceivedMessage(data) {\n        //console.log('Handled Received message:', data, this.onMessage);\n        if (this.onMessage) {\n            this.onMessage(data);\n        }\n    }\n\n\n    move(x, y) {\n        this.x = x;\n        this.y = y;\n        this.container.style.top = `${this.y}px`;\n        this.container.style.left = `${this.x}px`;\n        this.windowManager.saveWindowsState();\n    }\n\n    serialize() {\n\n        // we need an xpath selector for this.parent\n        let parentXpath = getXPathForElement(this.parent);\n        // console.log('parentXpath', parentXpath);\n        return {\n            title: this.title,\n            width: this.width,\n            height: this.height,\n            type: this.type,\n            app: this.app,\n            x: this.x,\n            y: this.y,\n            z: this.z,\n            context: this.context,\n            parent: parentXpath,\n            id: this.id,\n            onClose: this.onClose,\n            onOpen: this.onOpen,\n            className: this.className,\n            resizeable: this.resizeable,\n            canBeBackground: this.canBeBackground\n        };\n    }\n\n    hydrate(data) {\n        console.log('hydrate', data);\n        this.title = data.title;\n        this.width = data.width;\n        this.height = data.height;\n        this.app = data.app;\n        this.type = data.type;\n        this.x = data.x;\n        this.y = data.y;\n        this.z = Number(data.z);\n        this.context = data.context;\n        // TODO: some of these are constructor...maybe all?\n        // this.parent = document.querySelector(data.parent);\n        this.id = data.id;\n        this.onClose = data.onClose;\n        this.onOpen = data.onOpen;\n        this.onMessage = data.onMessage;\n        this.className = data.className;\n        this.resizeable = data.resizeable;\n        this.canBeBackground = data.canBeBackground;\n\n        this.updateWindow();\n    }\n\n    updateWindow() {\n        this.container.style.width = `${this.width}px`;\n        this.container.style.height = `${this.height}px`;\n        this.container.style.top = `${this.y}px`;\n        this.container.style.left = `${this.x}px`;\n        this.container.style.zIndex = this.z;\n        // console.log('updateWindow', this);\n    }\n\n    setDepth(depth) {\n        this.z = depth;\n        this.container.style.zIndex = depth;\n        // console.log('container depth was set to', this.id, depth);\n        this.windowManager.saveWindowsState();\n    }\n\n    setAsBackground() {\n        console.log('setAsBackground', this.windowManager.windows);\n        if (!this.canBeBackground) {\n            console.log('This window cannot be set as background. Try setting canBeBackground:true in the Window declaration');\n            return;\n        }\n        // check other api.ui.windowManager.windows and restore them if isBackground is true\n        this.windowManager.windows.forEach((window) => {\n            if (window.isBackground) {\n                window.restoreWindowFromBackground();\n            }\n        });\n\n        this.container.style.zIndex = -1;\n\n        // make full window size\n        this.container.style.width = \"100%\";\n        this.container.style.height = \"100%\";\n\n        // set top and left to 0\n        this.container.style.top = \"0\";\n        this.container.style.left = \"0\";\n\n        this.isBackground = true;\n        this.isActive = false;\n    }\n\n    restoreWindowFromBackground() {\n\n        this.isBackground = false;\n\n        // reset the z-index\n        this.container.style.zIndex = 11000;\n\n        // reset the window size\n        this.container.style.width = `${this.width}`;\n        this.container.style.height = `${this.height}`;\n\n        // put window back to original position\n        this.container.style.top = `${this.y}px`;\n        this.container.style.left = `${this.x}px`;\n\n        // get the menubar-restore-background-window element and add disabled class\n        let el = document.getElementById('menubar-restore-background-window');\n        if (el) {\n            el.classList.add('disabled');\n        }\n\n    }\n\n    startDrag(e) {\n        this.isDragging = true;\n        this.container.style.cursor = \"grabbing\";\n\n        // Disable pointer events on iframe\n        const iframes = this.container.querySelectorAll('iframe');\n        iframes.forEach(iframe => {\n            iframe.style.pointerEvents = 'none';\n        });\n\n        // Get coordinates from mouse or touch event\n        const { clientX, clientY } = this.getEventCoordinates(e);\n        this.offsetX = clientX - this.container.offsetLeft;\n        this.offsetY = clientY - this.container.offsetTop;\n\n        // Add event listeners for both mouse and touch events\n        document.addEventListener('mousemove', this.drag);\n        document.addEventListener('touchmove', this.drag, { passive: false });\n        document.addEventListener('mouseup', this.stopDrag);\n        document.addEventListener('touchend', this.stopDrag);\n    }\n\n    drag(e) {\n        if (!this.isDragging) return;\n\n        // Prevent default behavior for touchmove to avoid scrolling\n        e.preventDefault();\n\n        // Get coordinates from mouse or touch event\n        const { clientX, clientY } = this.getEventCoordinates(e);\n\n        // Update container position\n        // Ensure window does not drag off the screen\n        let menuBarHeight = 42;\n        let bottomLimit = window.innerHeight - 52; // 50px from bottom\n        if (clientY > menuBarHeight && clientY < bottomLimit) {\n            this.container.style.top = `${clientY - this.offsetY}px`;\n        }\n        let leftLimit = 52; // 0px from left\n        let rightLimit = window.innerWidth - 52; // 0px from right\n        if (clientX > leftLimit && clientX < rightLimit) {\n            this.container.style.left = `${clientX - this.offsetX}px`;\n        }\n    }\n\n    stopDrag() {\n        this.isDragging = false;\n        this.container.style.cursor = \"default\";\n\n        // Restore pointer events on iframe\n        const iframes = this.container.querySelectorAll('iframe');\n        iframes.forEach(iframe => {\n            iframe.style.pointerEvents = 'auto';\n        });\n\n        // Remove event listeners\n        document.removeEventListener('mousemove', this.drag);\n        document.removeEventListener('touchmove', this.drag);\n        document.removeEventListener('mouseup', this.stopDrag);\n        document.removeEventListener('touchend', this.stopDrag);\n\n        // Save window state\n        this.x = this.container.offsetLeft;\n        this.y = this.container.offsetTop;\n        this.z = Number(this.container.style.zIndex);\n        if (this.windowManager) {\n            this.windowManager.saveWindowsState();\n        } else {\n            console.warn('windowManager is not defined');\n        }\n    }\n\n    getEventCoordinates(e) {\n        let clientX, clientY;\n        if (e.type.startsWith('touch')) {\n            // Use the first touch point for dragging\n            const touch = e.touches[0] || e.changedTouches[0];\n            clientX = touch.clientX;\n            clientY = touch.clientY;\n        } else {\n            // Mouse event\n            clientX = e.clientX;\n            clientY = e.clientY;\n        }\n        return { clientX, clientY };\n    }\n\n    minimize(force = false) {\n        // console.log('minimize', this.isMinimized);\n        if (this.bp.isMobile()) {\n\n            if (this.isMinimized && !force) {\n                this.restore();\n                // this.content.style.display = \"block\"; // Show content area\n            } else {\n                // Minimize the window\n                // this.container.style.display = \"none\";  // Hide content area\n                // hides the `bp-window-content` area\n                //this.content.style.display = \"none\";  // Hide content area\n                // set the window-container height to 50px\n                this.container.style.height = \"120px\"; // Set height to 50px\n\n                this.isMinimized = true;\n            }\n\n            this.windowManager.arrangeVerticalStacked();\n\n        } else {\n            if (this.isMinimized && !force) {\n                this.restore();\n            } else {\n                // Minimize the window\n                this.container.style.display = \"none\";  // Hide content area\n                this.isMinimized = true;\n            }\n        }\n        // TODO: save the window state\n    }\n\n    // Restore the window\n    restore() {\n        // console.log('restore', this)\n        // Restore the window's content and original size\n        this.container.style.display = \"flex\";\n\n        //this.container.style.top = this.y + 'px';\n        //this.container.style.left = this.x + 'px';\n\n        // Mark as not minimized\n        this.isMinimized = false;\n        // TODO: save the window state\n\n        if (this.bp.isMobile()) {\n            this.windowManager.arrangeVerticalStacked();\n        }\n    }\n\n    maximize() {\n\n        // offset the top position by $('.desktop-menu-bar').height()\n        // so that on smaller devices the window is not hidden behind the menubar\n        if (this.isMaximized) {\n            if (this.bp.isMobile()) {\n                //this.container.style.width = \"100vw\";\n                //this.container.style.height = \"100vh\";\n                //this.container.style.top = \"0\";\n                //this.container.style.left = \"0\";\n                this.windowManager.arrangeVerticalStacked();\n\n            } else {\n                this.container.style.width = `${this.width}px`;\n                this.container.style.height = `${this.height}px`;\n                this.container.style.top = \"50px\";\n                this.container.style.left = \"50px\";\n                this.isMaximized = false;\n\n            }\n        } else {\n            let normalMenuBarHeight = 21;\n            let currentMenuBarHeight = $('.desktop-menu-bar').height() || normalMenuBarHeight;\n            let diff = currentMenuBarHeight - normalMenuBarHeight;\n            diff += (normalMenuBarHeight + 2); // add 2px for border\n            let pixelOffset = diff + 'px';\n\n            if (this.bp.isMobile()) {\n                this.container.style.width = \"100vw\";\n                this.container.style.height = \"100vh\";\n                this.container.style.top = pixelOffset;\n                this.container.style.left = \"0\";\n\n            } else {\n                this.container.style.width = \"100vw\";\n                this.container.style.height = \"calc(100vh - 104px)\";\n                this.container.style.top = pixelOffset;\n                this.container.style.left = \"0\";\n\n            }\n            this.isMaximized = true;\n        }\n        // TODO: save the window state\n\n    }\n\n    focus(propigate = true) {\n        // console.log('on focus called from Window.js')\n        if (propigate) {\n            this.windowManager.focusWindow(this);\n        }\n\n        this.onFocus(this);\n\n        let appData = this.bp.apps.desktop.appList[this.id];\n        let pushStateId = this.id;\n        if (appData && appData.alias) {\n            // get the first entry in the alias array\n            let alias = appData.alias[0];\n            pushStateId = alias; // use the id if it exists, otherwise use the alias string\n        }\n        // history.pushState({ appId: pushStateId }, this.title, `/app/${pushStateId}`);\n        DelayedPushState.push({ appId: pushStateId }, this.title, `/app/${pushStateId}`);\n\n    }\n\n    open() {\n        // set focus to this window ( first )\n        this.focus();\n\n        try {\n            // onOpen may have additional focus events\n            this.onOpen(this);\n        } catch (err) {\n            console.error(err);\n        }\n        // TODO: save the window state ???\n        // ???? this.parent.appendChild(this.container);\n\n        if (this.bp.isMobile()) {\n            // this.minimizeAllWindows(true);\n            // alert('opening window on mobile');\n            setTimeout(() => {\n                this.windowManager.arrangeVerticalStacked();\n            }, 100);\n        }\n\n        this.bp.emit('window::open', this);\n\n        // console.log('Window opened:', this);\n        let _app = {\n            id: this.id,\n            app: this.app,\n            label: this.title,\n            icon: this.icon,\n            // app: this.app,\n            type: this.type,\n            context: this.context\n        };\n        // console.log('openWindow openItem', _app);\n        this.bp.apps.ui.windowManager.taskBar.openItem(_app);\n\n        // add the items to this.bp.apps.ui.recentApps\n        // TODO: truncate the array to a maximum of 10 items, newest first\n        this.bp.apps.ui.recentApps = this.bp.apps.ui.recentApps || this.bp.settings.recentApps || [];\n\n        // remove items with the same id if already exists\n        this.bp.apps.ui.recentApps = this.bp.apps.ui.recentApps.filter(app => app.id !== this.id);\n        \n        this.bp.apps.ui.recentApps.unshift({\n            id: this.id,\n            app: this.app,\n            label: this.label || this.title,\n            icon: this.icon,\n            type: this.type\n        });\n\n        // update the recentApps localStorage\n        this.bp.apps.ui.recentApps = this.bp.apps.ui.recentApps.slice(-10); // keep only the last 10 items\n        this.bp.set('recentApps', this.bp.apps.ui.recentApps);\n\n        // update the url bar push state with app id\n        // modify the url to include the app id\n\n        // load app data to find any aliases\n\n\n        let appData = this.bp.apps.desktop.appList[this.id];\n        let pushStateId = this.id;\n        console.log('appData', appData);\n        if (appData && appData.alias) {\n            // get the first entry in the alias array\n            let alias = appData.alias[0];\n            pushStateId = alias; // use the id if it exists, otherwise use the alias string\n        }\n\n        // history.pushState({ appId: pushStateId }, this.title, `/app/${pushStateId}`);\n        DelayedPushState.push({ appId: pushStateId }, this.title, `/app/${pushStateId}`);\n\n    }\n    close() {\n\n        if (this.parent) {\n            // check first to see if child is in parent\n            if (this.container.parentElement && this.container.parentElement === this.parent) {\n                this.parent.removeChild(this.container);\n            }\n        } else {\n            this.container.parentElement.removeChild(this.container);\n        }\n\n        // check to see if this is an iframe and remove event listener\n        if (this.content && this.content.contentWindow) {\n            this.content.contentWindow.removeEventListener('message', this.receiveMessage.bind(this), false);\n        }\n        if (this.content) {\n            if (this.content.parentNode) {\n                this.content.parentNode.removeChild(this.content);\n            }\n            this.content = null;\n        }\n\n        // check to see if no more windows\n        // TODO: remove this code from Window.js class ( it should not know about menubar )\n        // if window count is 0 get the menubar-set-window-as-background element and add disabled class\n        let windowCount = this.windowManager.windows.length;\n        if (windowCount === 0) {\n            let el = document.getElementById('menubar-set-window-as-background');\n            if (el) {\n                el.classList.add('disabled');\n            }\n        }\n        // console.log('removeWindow', this.id);\n        this.windowManager.removeWindow(this.id);\n\n\n        if (this.windowManager.taskBar) {\n            // remove the chat window from the taskbar\n            this.windowManager.taskBar.closeItem(this.id);\n        }\n\n        // TODO: save the window state ??? removeWindow could do it..?\n\n        this.onClose(this);\n        this.bp.emit('window::close', this);\n\n        if (this.bp.isMobile()) {\n            // this.minimizeAllWindows(true);\n            //this.windowManager.arrangeVerticalStacked();\n            setTimeout(() => {\n                this.windowManager.arrangeVerticalStacked();\n            }, 100);\n        }\n\n        // clear the current pushState\n        // history.pushState({}, '', '/');\n        DelayedPushState.push({}, '', '/');\n\n    }\n\n    addResizeHandles() {\n        const resizeHandle = document.createElement(\"div\");\n        resizeHandle.classList.add(\"resize-handle\");\n        this.container.appendChild(resizeHandle);\n        resizeHandle.addEventListener(\"mousedown\", (e) => this.startResize(e), { passive: false });\n        resizeHandle.addEventListener(\"touchstart\", (e) => {\n            e.preventDefault(); // Prevent default touch behavior\n            this.startResize(e.touches[0]);\n        }, { passive: false });\n    }\n\n    setSize(width, height) {\n        this.width = width;\n        this.height = height;\n        this.container.style.width = `${this.width}`;\n        this.container.style.height = `${this.height}`;\n        // save the window state\n        this.windowManager.saveWindowsState();\n    }\n\n    startResize(e) {\n        const container = this.container;\n        const startX = e.clientX;\n        const startY = e.clientY;\n        const startWidth = container.offsetWidth;\n        const startHeight = container.offsetHeight;\n\n        const onMove = (moveEvent) => {\n            const clientX = moveEvent.clientX || moveEvent.touches[0].clientX;\n            const clientY = moveEvent.clientY || moveEvent.touches[0].clientY;\n            const newWidth = startWidth + (clientX - startX);\n            const newHeight = startHeight + (clientY - startY);\n\n            // Apply new dimensions, respecting min/max constraints\n            container.style.width = `${Math.max(100, newWidth)}px`; // Example min-width\n            container.style.height = `${Math.max(100, newHeight)}px`; // Example min-height\n        };\n\n        const onUp = () => {\n            document.removeEventListener(\"mousemove\", onMove);\n            document.removeEventListener(\"mouseup\", onUp);\n            document.removeEventListener(\"touchmove\", onMove);\n            document.removeEventListener(\"touchend\", onUp);\n        };\n\n        document.addEventListener(\"mousemove\", onMove);\n        document.addEventListener(\"mouseup\", onUp);\n        document.addEventListener(\"touchmove\", onMove, { passive: false });\n        document.addEventListener(\"touchend\", onUp);\n    }\n\n    resize(e) {\n        if (!this.isResizing) return;\n        const newWidth = this.startWidth + (e.clientX - this.startX);\n        const newHeight = this.startHeight + (e.clientY - this.startY);\n\n        this.container.style.width = `${newWidth}px`;\n        this.container.style.height = `${newHeight}px`;\n    }\n\n    stopResize() {\n        this.isResizing = false;\n        // TODO: save the window state\n\n    }\n\n    setTitle(title) {\n        this.title = title;\n        this.titleBarSpan.textContent = title;\n        // save the window state\n        this.windowManager.saveWindowsState();\n    }\n\n    setContent(content) {\n        this.contentValue = content;\n        this.content.innerHTML = content;\n        // save the window state\n        this.windowManager.saveWindowsState();\n    }\n}\n\nexport default Window;\n\n\nfunction getXPathForElement(element) {\n    const fullPath = (el) => {\n        let names = [];\n        while (el.parentNode) {\n            if (el.id) { // If the element has an ID, use it as a unique identifier\n                names.unshift('#' + el.id);\n                break;\n            } else {\n                let e = el, sibling, count = 1;\n                while (sibling = e.previousSibling) {\n                    if (sibling.nodeType === 1 && sibling.tagName === e.tagName) { count++; }\n                    e = sibling;\n                }\n                const tagName = el.tagName.toLowerCase();\n                const nth = count > 1 ? `:nth-of-type(${count})` : '';\n                names.unshift(`${tagName}${nth}`);\n                el = el.parentNode;\n            }\n        }\n        return names.length ? names.join(' > ') : null;\n    };\n    return fullPath(element);\n}\n","/* Buddy Pond - WindowManager.js - Marak Squires 2023 */\nimport TaskBar from './TaskBar.js';\nimport Window from \"./Window.js\";\n\nexport default class WindowManager {\n    constructor(ui, options = {}) {\n        this.storage = options.storage || localStorage; // Use localStorage by default\n        this.storageKey = options.storageKey || 'windowsState'; // Key for storing data\n        this.windows = [];\n        this._windows = [];\n        this.options = options;\n\n        this.bp = ui.bp;\n\n        this.useKeyboardControls = true;\n\n        if (typeof options.useKeyboardControls === \"boolean\") {\n            this.useKeyboardControls = options.useKeyboardControls;\n        }\n\n        if (typeof options.hideTaskBar === \"boolean\") {\n            this.hideTaskBar = options.hideTaskBar;\n        }\n\n        if (typeof options.openWindow === \"function\") {\n            this._openWindow = options.openWindow;\n        } else {\n            this._openWindow = function (name, config) {\n                const window = this.createWindow(config);\n                window.hydrate(config);\n            }\n        }\n\n        this.taskBar = new TaskBar({\n            bp: this.bp,\n            homeCallback: () => {\n\n                if (!this.state) {\n                    // save current window positions\n                    this.lastPositionsBeforeArranged = this.windows.map(w => {\n                        return {\n                            x: w.x,\n                            y: w.y,\n                            height: w.height,\n                            width: w.width\n                        }\n                    });\n                    // console.log('lastPositionsBeforeArranged', this.lastPositionsBeforeArranged);\n                    this.state = 'maximized';\n                }\n\n\n                if (this.state === 'minimized') {\n                    this.minimizeAllWindows();\n                    // this.arrangeHorizontalStacked();\n                    this.state = 'maximized';\n\n                } else if (this.state === 'stacked-vertical') {\n                    // stack-vertical has been removed ( for now )\n                    // it wasn't looking good as a default and was rarely used\n                    /*\n                    // restore all windows to their previous positions\n                    this.windows.forEach((w, i) => {\n                        w.move(this.lastPositionsBeforeArranged[i].x, this.lastPositionsBeforeArranged[i].y);\n                        w.setSize(this.lastPositionsBeforeArranged[i].width + 'px', this.lastPositionsBeforeArranged[i].height + 'px');\n                    });\n                    this.state = 'maximized';\n                    */\n\n                } else if (this.state === 'stacked-horizontal') {\n                    // this.arrangeVerticalStacked();\n                    // this.state = 'stacked-vertical';\n                    // restore all windows to their previous positions\n                    this.windows.forEach((w, i) => {\n                        w.move(this.lastPositionsBeforeArranged[i].x, this.lastPositionsBeforeArranged[i].y);\n                        w.setSize(this.lastPositionsBeforeArranged[i].width + 'px', this.lastPositionsBeforeArranged[i].height + 'px');\n                    });\n                    this.state = 'maximized';\n\n                } else {\n                    this.minimizeAllWindows(true);\n                    this.windows.forEach((w, i) => {\n                        w.move(this.lastPositionsBeforeArranged[i].x, this.lastPositionsBeforeArranged[i].y);\n                        w.setSize(this.lastPositionsBeforeArranged[i].width + 'px', this.lastPositionsBeforeArranged[i].height + 'px');\n                    });\n\n                    this.state = 'minimized';\n\n                }\n\n                // close all windows\n                // this.minimizeAllWindows();\n                // this.windowsClosed = true;\n\n                // hide all legacy BP windows\n                $('.window').hide();\n                $('.window').removeClass('window_stack');\n\n            }\n        });\n\n        if (this.options.hideTaskBar) {\n            this.taskBar.taskBarElement.style.display = 'none';\n        }\n\n        if (this.useKeyboardControls) {\n            window.addEventListener(\"keydown\", (e) => {\n                // alert(this.bp.editingMode);\n                if (e.key === \"Escape\" && !this.bp.ignoreUIControlKeys) {\n                    // alert(\"Escape key pressed\");\n                    // find the window with the highest depth and close it\n\n                    // first check to see if there is a dialog open, close that first\n                    const dialog = document.querySelector('.dialog');\n                    if (dialog) {\n                        dialog.remove();\n                        return;\n                    }\n\n                    const window = this.windows[0]; // no sort needed, windows are already sorted by depth\n                    if (window) {\n                        window.close();\n                    }\n                }\n            });\n        }\n\n    }\n\n    createWindow(options) {\n\n        // check to see if there is previous window data in this._windows\n        // check by id, if found, hydrate the window\n        // This is a temporary solution until full app hydration is back online\n        // This solution will allow for position and size to be saved and restored\n        options = { ...options, ...this.options.window };\n        // console.log('createWindow', options);\n        let previousWindowData = this._windows.find(w => w.id === options.id);\n        if (previousWindowData) {\n            // just merge the previous window data with the new options\n            options = { ...previousWindowData, ...options };\n        }\n\n        // check to see if window already exists with id\n        const existingWindow = this.getWindow(options.id);\n        let window;\n\n        if (existingWindow) {\n            window = existingWindow;\n            this.focusWindow(window); // Focus the newly created window\n            return window;\n        }\n        options.bp = this.bp;\n        window = new Window(options, this);\n\n        window.container.addEventListener(\"mousedown\", () => {\n            this.focusWindow(window);\n        });\n        this.addWindow(window);\n        this.focusWindow(window); // Focus the newly created window\n\n        // when opening a window, automatically add it to the taskbar\n        //alert(window.id)\n        /*\n        this.taskBar.openItem({\n            id: window.app,\n            title: window.title,\n            icon: window.icon,\n            onClick: () => {\n                // toggle window minimize / restore state\n                if (this.isMobile()) {\n                    // this.minimizeAllWindows(true);\n                    this.arrangeVerticalStacked();\n                    // we could minimize all other windows here\n                    // minimizeAllWindows();\n                }\n                if (window.isMinimized) {\n                    window.restore();\n                    window.focus();\n                } else {\n                    window.minimize();\n                }\n            }\n        });\n        */\n\n        return window;\n    }\n\n    isMobile() {\n        return window.innerWidth < 1000;\n    }\n\n    addWindow(window) {\n        this.windows.push(window);\n        this.saveWindowsState(); // Save state when a window is added\n        this.updateFocus();\n    }\n\n    removeWindow(window) {\n        // console.log(\"Removing window\", window);\n        this.windows = this.windows.filter(w => w.id !== window);\n        //console.log(\"Remaining windows\", this.windows);\n        this.saveWindowsState(); // Save state when a window is removed\n        this.updateFocus();\n    }\n\n    focusWindow(window) {\n        // window can be the window instance or the window id\n        if (typeof window === 'string') {\n            window = this.getWindow(window);\n        }\n\n        // console.log(\"Focusing window\", window);\n\n        // TODO: this isn't working consistenly?  there seems to be an issue with index\n        // console.log(\"Focusing window\", window.id);\n        const index = this.windows.indexOf(window);\n        if (index !== -1) {\n            this.windows.splice(index, 1);\n            this.windows.unshift(window);\n            // console.log('Focusing window', window.id, 'at index', index);\n            this.updateFocus();\n            window.focus(false);\n            this.saveWindowsState(); // Save state when focus changes\n        }\n        // iterate through all windows and set isFocused to false\n        // set this window isFocused to true\n        this.windows.forEach(w => {\n            if (w.id !== window) {\n                w.isFocused = false;\n\n            } else {\n                window.isFocused = true;\n\n            }\n        });\n    }\n\n    updateFocus() {\n        // console.log(\"Updating focus\");\n        this.windows.forEach((window, index) => {\n            // console.log(\"Setting depth for window\", window.id, \"to\", 1000 - index);\n            // console.log(\"setting depth for window\", window.id, \"to\", 1000 - index);\n            window.setDepth(1000 - index); // Higher index, higher depth\n        });\n    }\n\n    closeAllWindows() {\n        this.windows.forEach(window => window.close());\n        this.windows = [];\n        this.storage.removeItem(this.storageKey); // Clear storage when all windows are closed\n    }\n\n    minimizeAllWindows(force = false) {\n        if (!this.windowsHiding) {\n            this.windowsHiding = true;\n        } else {\n            this.windowsHiding = false;\n        }\n        this.windows.forEach(window => {\n\n            if (!this.windowsHiding || force) {\n                window.minimize(force);\n            } else {\n                window.restore();\n            }\n        });\n    }\n\n    getWindow(id) {\n        // console.log('searching for', id, 'in', this.windows)\n        return this.windows.find(w => w.id === id);\n    }\n\n    findWindows({ app, type }) {\n        if (!app) {\n            console.warn(\"No app provided to findWindows\");\n            return [];\n        }\n\n        // Normalize app and type to arrays for unified matching\n        const apps = Array.isArray(app) ? app : [app];\n        const types = type ? (Array.isArray(type) ? type : [type]) : null;\n\n        return this.windows.filter(w => {\n            const appMatch = apps.includes(w.app);\n            const typeMatch = types ? types.includes(w.type) : true;\n            return appMatch && typeMatch;\n        });\n    }\n\n    saveWindowsState() {\n        const state = JSON.stringify(this.windows.map(window => window.serialize()));\n        // console.log(\"Saving windows state\", JSON.parse(state));\n        this.storage.setItem(this.storageKey, state);\n    }\n\n    // Remark: This should probably be mostly in settings app or a separate app\n    loadWindows() {\n        const serializedWindows = this.storage.getItem(this.storageKey);\n        if (serializedWindows) {\n            this.restoreWindows(serializedWindows);\n        }\n    }\n\n    arrangeVerticalStacked() {\n        let containerHeight = document.body.clientHeight - 100; // Adjust for container and offset\n        let windowWidth = document.body.clientWidth - 10; // Adjust for container and offset\n        const defaultWindowHeight = containerHeight * 0.8; // Default height for non-minimized windows\n        const minimizedHeight = 120; // Height for minimized windows\n        const gap = 10; // Optional gap between windows for better spacing\n        let totalY = 0; // Initialize Y position\n\n        // console.log('window count', this.windows.length, 'defaultWindowHeight', defaultWindowHeight, 'windowWidth', windowWidth);\n        // console.log(this.windows);\n\n        this.windows.reverse().forEach((window, index) => {\n            // Determine the height for the current window\n            let currentWindowHeight = window.isMinimized ? minimizedHeight : defaultWindowHeight;\n\n            // console.log(\"index\", index, window.title, 'isMinimized', window.isMinimized, 'currentWindowHeight', currentWindowHeight, 'windowWidth', windowWidth);\n\n            // Set window size and position\n            window.setSize(windowWidth + 'px', currentWindowHeight + 'px'); // Set size\n            window.move(0, totalY); // Move to calculated Y position\n\n            // Increment totalY for the next window\n            totalY += currentWindowHeight + gap; // Add current window's height and gap\n\n            // console.log(\"totalY\", totalY, \"currentWindowHeight\", currentWindowHeight, \"windowWidth\", windowWidth);\n        });\n\n        // Position the shortCutsContainer below the last window\n        // console.log('setting shortCutsContainer top to', totalY);\n        if (this.bp.apps.desktop && this.bp.apps.desktop.shortCutsContainer) {\n            this.bp.apps.desktop.shortCutsContainer.style.position = 'absolute';\n            this.bp.apps.desktop.shortCutsContainer.style.left = '0px';\n            this.bp.apps.desktop.shortCutsContainer.style.top = totalY + 'px';\n        }\n    }\n\n    arrangeHorizontalStacked() {\n        const containerWidth = document.body.clientWidth; // Adjust to your specific container if not the body\n        const numWindows = this.windows.length;\n        let windowWidth = containerWidth / numWindows;\n        windowWidth -= 10; // Adjust to your desired offset\n        this.windows.forEach((window, index) => {\n            let xPos = windowWidth * index;\n            xPos += 5;\n            xPos += 10 * index; // Adjust to your desired offset\n            window.setSize(windowWidth + 'px', 'calc(100% - 80px)'); // Assuming you have a resize method\n            window.move(xPos, 30); // Assuming you have a move method\n        });\n\n    }\n\n    arrangeCascadeFromTopLeft() {\n        const offset = 20; // Adjust to your desired offset\n        this.windows.forEach((window, index) => {\n            const xPos = offset * index;\n            const yPos = offset * index;\n            window.move(xPos, yPos); // Assuming you have a move method\n        });\n    }\n\n    // Remark: This should probably be mostly in settings app or a separate app\n    // Restore windows from serialized state\n    restoreWindows(serializedWindows, inflate = false) {\n        const windowsData = JSON.parse(serializedWindows);\n        // console.log(\"Restoring windows\", windowsData);\n        // alert(\"Restoring windows from storage, this will be removed in the future, please use the settings app to manage windows\");\n        this._windows = windowsData;\n\n        if (!inflate) {\n            // for now, probably better suited elsewhere\n            return;\n        }\n        windowsData.forEach(data => {\n            // check to see if window already exists with id\n            const existingWindow = this.getWindow(data.id);\n            if (existingWindow) {\n                console.log(\"WARNING: Window with id\", data.id, \"already exists, hydrating instead of creating new window\");\n                existingWindow.hydrate(data);\n                return;\n            }\n            data.parent = document.querySelector(data.parent);\n            // console.log(\"hydrating window\", data);\n            // this.openWindow(data.app, data);\n            //const window = this.createWindow(data);\n            //window.hydrate(data);\n        });\n    }\n}","export default class CountdownManager {\n    constructor() {\n        this.intervalId = null;\n        this.expiryCallbacks = new WeakMap(); // store per-element callbacks\n    }\n\n    updateCountdowns() {\n        const countdownEls = $('.countdown-date').filter(function () {\n            return $(this).data('expired') !== true;\n        });\n\n        if (countdownEls.length === 0) {\n            if (this.intervalId) {\n                clearInterval(this.intervalId);\n                this.intervalId = null;\n                if (bp?.apps?.ui) {\n                    bp.apps.ui.countdownTimer = null;\n                }\n            }\n            return;\n        }\n\n        countdownEls.each((_, el) => {\n            const $el = $(el);\n\n            const expiry = new Date($el.data('expiry')).getTime();\n            const now = Date.now();\n            const distance = expiry - now;\n\n            if (!$el.data('duration')) {\n                const ctime = $el.data('ctime');\n                if (ctime) {\n                    $el.data('duration', expiry - ctime);\n                }\n            }\n            // console.log('distance for', $el, distance);\n            // distance is going negative? on recurse?\n            if (distance < 0) {\n                $el.data('expired', true);\n\n                const cb = this.expiryCallbacks.get(el);\n                if (typeof cb === 'function') {\n                    cb($el);\n                    this.expiryCallbacks.delete(el); // Cleanup\n                }\n\n                return;\n            }\n\n            const days = Math.floor(distance / (1000 * 60 * 60 * 24));\n            const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n            const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n            const seconds = Math.floor((distance % (1000 * 60)) / 1000);\n\n            let prefix = '';\n            let timeParts = [];\n\n            if (days > 0) {\n                prefix = `${days} Day${days > 1 ? 's' : ''} `;\n                timeParts.push(hours.toString().padStart(2, '0'));\n            } else if (hours > 0) {\n                timeParts.push(hours.toString());\n            }\n\n            timeParts.push(minutes.toString().padStart(2, '0'));\n            timeParts.push(seconds.toString().padStart(2, '0'));\n\n            $el.text(prefix + timeParts.join(':'));\n        });\n    }\n\n    /**\n     * Start a countdown on the given jQuery element\n     * @param {jQuery} $el - The element to attach the countdown to\n     * @param {string|Date} expiry - Expiry date/time\n     * @param {function} [onExpire] - Optional callback when countdown expires\n     */\n    startCountdown($el, expiry, onExpire) {\n        const expiryTime = new Date(expiry).getTime();\n        const now = Date.now();\n        const duration = expiryTime - now;\n\n        // console.log('Starting countdown for', $el, expiry);\n\n        $el\n            .data('expiry', expiryTime)\n            .data('ctime', now)\n            .data('duration', duration)\n            .data('expired', false);\n\n        if (typeof onExpire === 'function') {\n            this.expiryCallbacks.set($el[0], onExpire);\n        }\n\n        if (!this.intervalId) {\n            this.intervalId = setInterval(() => this.updateCountdowns(), 1000);\n            if (bp?.apps?.ui) {\n                bp.apps.ui.countdownTimer = this.intervalId;\n            }\n        }\n\n        this.updateCountdowns(); // Immediate update\n    }\n}\n","// Remark: We may be able to remove UI and put all this logic in the desktop app\nimport WindowManager from \"./Window/WindowManager.js\";\nimport CountdownManager from \"../ui/CountdownManager.js\";\n\nexport default class UI {\n    constructor(bp, options = {}) {\n        this.bp = bp;\n\n        let windowManagerOptions = {};\n        windowManagerOptions.openWindow = this.bp.open.bind(this.bp),\n        windowManagerOptions.window = options.window || {};\n        windowManagerOptions.hideTaskBar = options.hideTaskBar;\n        this.windowManager = new WindowManager(this, windowManagerOptions);\n        this.bp.windows = this.windowManager.windows;\n        // will re-load any previous stored metadata about windows\n        // storage provider is defaulted to localStorage\n        this.windowManager.loadWindows();\n\n        options.parent = options.parent || document.body;\n\n        // options.parent.classList.add('droparea');\n\n        this.options = options;\n\n        if (typeof options.fontAwesome !== 'boolean') {\n            options.fontAwesome = true;\n        }\n\n        this.parent = options.parent;\n\n        this.countdownManager = new CountdownManager(this.bp);\n        // this.countdownManager.updateCountdowns();\n        let that = this;\n        this.bp.window = that.windowManager.createWindow.bind(that.windowManager);\n        return this;\n    }\n\n    async init() {\n\n        // base CSS for ui, this can be themed in the future\n        if (!this.options.noCSS) {\n            this.bp.appendCSS('/v5/apps/based/ui/ui.css'); // no need to wait for CSS to load?\n            if (this.bp.mode !== 'prod') {\n                this.bp.appendCSS('/v5/apps/based/ui/mobile.css'); // no need to wait for CSS to load?\n                this.bp.appendCSS('/v5/apps/based/ui/Window/Window.css'); // no need to wait for CSS to load?\n                this.bp.appendCSS('/v5/apps/based/ui/Window/TaskBar.css'); // no need to wait for CSS to load?\n                this.bp.appendCSS('/v5/apps/based/ui/Window/StartPanel.css'); // no need to wait for CSS to load?\n\n            }\n        }\n\n        if (this.options.fontAwesome) {\n            this.bp.appendCSS('/v5/vendor/font-awesome/css/fontawesome.css', false, true);\n            this.bp.appendCSS('/v5/vendor/font-awesome/css/all.min.css', false, true);\n        }\n\n        // TODO: add these lines back after removing v4 completely ( as jQuery is already loaded in v4)\n        if (!this.options.noZepto) {\n            // If you need jQuery or another version of $\n            // we have the ability to not load Zepto as $\n            //await this.bp.appendScript('/v5/vendor/zepto.min.js');\n        } else {\n            //await this.bp.appendScript('/v5/vendor/jquery.min.js');\n\n        }\n\n        // await this.bp.appendScript('/desktop/assets/js/jquery.js');\n\n\n        if (!this.options.noTabs) {\n            // what happened here with config? we shouldn't need to reference host here,\n            // TODO: check implementation of importModule with options\n            let SimpleTabs = await this.bp.importModule(this.bp.config.host + '/v5/apps/based/ui/SimpleTabs.js', {}, false)\n            this.Tabs = SimpleTabs.default;\n\n        }\n\n        await this.bp.appendScript('/v5/vendor/DateFormat.js');\n\n        // bind common document events\n        // TODO: move UI events to separate file\n        let d = document;\n\n        $(d).on('click', '.open-app', function (e) {\n            let appName = $(this).data('app');\n            let context = $(e.target).data('context');\n            let type = $(this).data('type');\n            // let output = $(this).data('output');\n\n            console.log('open-app ' + appName);\n            // check to see if legacy app ( for now)\n            bp.open(appName, { context, type });\n\n        });\n\n        return 'loaded ui';\n    }\n\n    async appendToElement(el) {\n        console.log('appendToElement', this);\n        let html = await fetchHTMLFragment('ui.html'); // TODO: might need root\n        console.log(html);\n        el.innerHTML = html;\n        return 'hello ui';\n    }\n\n    async loadDocumentBody() {\n        console.log('loadDocumentBody', this);\n        let html = await this.bp.fetchHTMLFragment('/v5/apps/based/ui/ui.html'); // TODO: might need root\n        console.log(html);\n        $('body').append(html);\n        //document.body.innerHTML = html;\n        return 'hello ui';\n\n    }\n\n    toggleFullScreen() {\n        if (document.fullscreenElement) {\n            document.exitFullscreen();\n        } else {\n            document.documentElement.requestFullscreen();\n        }\n    }\n\n}"],"names":["StartPanel","constructor","onAppLaunch","bp","this","panelElement","open","close","panel","document","createElement","className","searchInput","id","type","placeholder","autocomplete","recentSection","innerHTML","recentGrid","appendChild","allSection","allGrid","body","window","apps","ui","recentApps","slice","forEach","appData","app","createAppTile","appList","desktop","Object","entries","appName","adminOnly","me","icon","addEventListener","query","value","toLowerCase","length","style","display","querySelectorAll","el","label","dataset","name","_app","showResult","includes","categories","some","cat","closeEventHandler","event","$","target","hasClass","contains","focus","remove","removeEventListener","tile","img","src","alt","textContent","onclick","async","context","prototype","enableKeyboardNavigation","currentIndex","appTiles","updateTilesList","Array","from","filter","focusTile","index","console","log","i","classList","toggle","scrollIntoView","block","e","key","preventDefault","nextIndex","prevIndex","Math","min","max","click","TaskBar","homeCallback","taskBarElement","items","Map","shortcuts","Set","addItem","onClick","startPanel","isShortcut","closest","showContextMenu","clientX","clientY","enableDragAndDrop","x","y","existing","querySelector","item","get","menu","position","left","visibility","makeOption","handler","option","isOpen","closeItem","openItem","has","delete","add","installedTaskBarApps","settings","taskbar_apps","set","requestAnimationFrame","menuHeight","offsetHeight","top","removeMenu","setTimeout","once","config","ev","itemElement","existingWindow","windowManager","getWindow","isMinimized","restore","minimize","stopPropagation","draggable","itemText","itemIcon","height","width","call","alertItem","element","removeItem","win","warn","removeChild","taskBarApps","getItem","dragged","over","children","indexOf","insertBefore","newOrder","map","newTaskBarApps","idCounter","Window","options","title","content","iframeContent","z","parent","onFocus","onClose","onOpen","onMessage","onLoad","resizeable","preventOverlap","canBeBackground","getElementById","isMaximized","container","contentValue","isActive","windows","saveWindowsState","removeWindow","startDrag","bind","drag","stopDrag","createWindow","screenWidth","innerWidth","screenHeight","innerHeight","adjustedPosition","newWindow","buffer","adjustedX","adjustedY","x1","y1","w1","h1","x2","y2","w2","h2","parseInt","checkOverlap","adjustPosition","zIndex","titleBar","isMobile","ondblclick","maximize","iconTitleBar","titleBarSpan","passive","controls","minimizeButton","maximizeButton","closeButton","initContentArea","addResizeHandles","onload","iframeDoc","contentDocument","contentWindow","write","setupMessageHandling","script","receiveMessage","sendMessage","message","postMessage","data","handleReceivedMessage","move","serialize","parentXpath","names","parentNode","unshift","sibling","count","previousSibling","nodeType","tagName","nth","join","fullPath","hydrate","Number","updateWindow","setDepth","depth","setAsBackground","isBackground","restoreWindowFromBackground","isDragging","cursor","iframe","pointerEvents","getEventCoordinates","offsetX","offsetLeft","offsetY","offsetTop","bottomLimit","rightLimit","startsWith","touch","touches","changedTouches","force","arrangeVerticalStacked","normalMenuBarHeight","diff","pixelOffset","propigate","focusWindow","pushStateId","alias","DelayedPushState","push","appId","err","error","emit","taskBar","parentElement","resizeHandle","startResize","setSize","startX","startY","startWidth","offsetWidth","startHeight","onMove","moveEvent","newWidth","newHeight","onUp","resize","isResizing","stopResize","setTitle","setContent","WindowManager","storage","localStorage","storageKey","_windows","useKeyboardControls","hideTaskBar","openWindow","_openWindow","state","lastPositionsBeforeArranged","w","minimizeAllWindows","hide","removeClass","ignoreUIControlKeys","dialog","previousWindowData","find","addWindow","updateFocus","splice","isFocused","closeAllWindows","windowsHiding","findWindows","isArray","types","appMatch","typeMatch","JSON","stringify","setItem","loadWindows","serializedWindows","restoreWindows","containerHeight","clientHeight","windowWidth","clientWidth","defaultWindowHeight","totalY","reverse","currentWindowHeight","shortCutsContainer","arrangeHorizontalStacked","xPos","arrangeCascadeFromTopLeft","yPos","inflate","windowsData","parse","CountdownManager","intervalId","expiryCallbacks","WeakMap","updateCountdowns","countdownEls","each","_","$el","expiry","Date","getTime","distance","now","ctime","cb","days","floor","hours","minutes","seconds","prefix","timeParts","toString","padStart","text","clearInterval","countdownTimer","startCountdown","onExpire","expiryTime","duration","setInterval","UI","windowManagerOptions","fontAwesome","countdownManager","init","noCSS","appendCSS","mode","noZepto","noTabs","SimpleTabs","importModule","host","Tabs","default","appendScript","d","on","appendToElement","html","fetchHTMLFragment","loadDocumentBody","append","toggleFullScreen","fullscreenElement","exitFullscreen","documentElement","requestFullscreen"],"mappings":"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"}