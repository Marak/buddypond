{"version":3,"file":"ui.js","sources":["../../../apps/based/ui/Window/TaskBar.js","../../../apps/based/ui/Window/Window.js","../../../apps/based/ui/Window/WindowManager.js","../../../apps/based/ui/CountdownManager.js","../../../apps/based/ui/ui.js"],"sourcesContent":["export default class TaskBar {\n    constructor({ homeCallback } = {}) {\n        this.taskBarElement = document.createElement('div');\n        this.taskBarElement.className = 'taskbar-container';\n        document.body.appendChild(this.taskBarElement);\n        this.items = new Map();\n\n        // Create home button using addItem\n        if (homeCallback) {\n            this.addItem({\n                id: 'home',\n                title: 'Home',\n                onClick: homeCallback,\n                icon: 'desktop/assets/images/icons/icon_mantra_64.png'\n            });\n        }\n    }\n\n    addItem(config) {\n        const { id, title = '', onClick, content, icon } = config;\n        const itemElement = document.createElement('div');\n        itemElement.className = 'taskbar-item';\n        const itemText = document.createElement('div');\n        itemText.className = 'taskbar-item-text';\n        itemText.textContent = title; // Tooltip text\n        itemElement.appendChild(itemText);\n\n        if (content) {\n            itemElement.innerHTML = content;\n        } else if (icon) {\n            const itemIcon = document.createElement('img');\n            itemIcon.src = icon;\n            itemIcon.height = 32;  // Standard icon size\n            itemIcon.width = 32;\n            itemIcon.alt = title;\n            itemElement.appendChild(itemIcon);\n        } else {\n            itemElement.textContent = title;\n        }\n\n        itemElement.onclick = (ev) => {\n            if (onClick) {\n                onClick(ev, itemElement);\n            }\n            this.alertItem(id);\n        };\n\n        this.taskBarElement.appendChild(itemElement);\n        this.items.set(id, itemElement);\n        return itemElement;\n    }\n\n    removeItem(itemId) {\n        const itemElement = this.items.get(itemId);\n        if (itemElement) {\n            this.taskBarElement.removeChild(itemElement);\n            this.items.delete(itemId);\n        }\n    }\n\n    getItem(itemId) {\n        return this.items.get(itemId);\n    }\n\n    alertItem(itemId) {\n        const itemElement = this.items.get(itemId);\n        if (itemElement) {\n            itemElement.classList.add('taskbar-item-alert');\n            setTimeout(() => itemElement.classList.remove('taskbar-item-alert'), 3000);\n        }\n    }\n}\n","// Buddy Pond - Window.js - Marak Squires 2023\n// A simple window class for creating draggable, resizable windows\n// Remark: WindowManager interface is optional and will be stubbed out if not provided\nlet idCounter = 0;\n\nclass Window {\n    constructor(options = {}, windowManager) {\n        const {\n            title = \"Window\", // Title of the window\n            width = '400px', // Default width\n            height = '300px', // Default height\n            app = 'ui', // default app\n            type = 'singleton', // Default type ( intended to not have siblings )\n            context = 'default', // Default context\n            content = '', // Default content\n            iframeContent = false,\n            icon = '', // Default icon\n            x = 50, // Default x position\n            y = 50, // Default y position\n            z = 99, // Default z-index\n            parent = window.document.body, // Parent element to append to\n            id = `window-${idCounter}`, // Unique ID for the panel\n            onFocus = () => { }, // Callback when the window is focused\n            onClose = () => { }, // Callback when the window is closed\n            onOpen = () => { }, // Callback when the window is opened\n            onMessage = () => { }, // Callback when the window receives a message\n            onLoad = () => { }, // Callback when the window is loaded ( remote content )\n            className = '', // Custom classes for styling\n            resizeable = true, // Enable resizable feature\n            preventOverlap = true, // prevents direct overlap with other windows\n            canBeBackground = false // Can be set as background\n        } = options;\n\n        this.windowManager = windowManager;\n\n        // ensure that no other window has the same id\n        // we could check the windowManger.windows array for this\n        // we will check the document ( in case another system has created a window )\n        let existingWindow = document.getElementById(id);\n        if (existingWindow) {\n            console.log('Window with id already exists', id);\n            return existingWindow;\n        }\n\n        this.title = title;\n        this.icon = icon;\n        this.width = width;\n        this.height = height;\n        this.app = app;\n        this.type = type;\n        this.x = x;\n        this.y = y;\n        this.z = 99;\n        this.context = context;\n        this.parent = parent;\n        this.id = id;\n        this.isMaximized = false;\n        this.isMinimized = false;\n        this.container = null;\n        this.content = null;\n        this.iframeContent = iframeContent;\n        this.contentValue = content;\n        this.isActive = false;\n        this.className = className;\n        this.resizeable = resizeable;\n        this.preventOverlap = preventOverlap;\n        this.canBeBackground = canBeBackground;\n\n        windowManager = windowManager || {\n            windows: [],\n            saveWindowsState: () => { },\n            removeWindow: () => { },\n\n        };\n\n        this.bp = options.bp;\n\n        this.onFocus = onFocus;\n        this.onClose = onClose;\n        this.onOpen = onOpen;\n        this.onLoad = onLoad;\n        this.onMessage = onMessage;\n\n        this.startDrag = this.startDrag.bind(this);\n        this.drag = this.drag.bind(this);\n        this.stopDrag = this.stopDrag.bind(this);\n\n\n        this.createWindow();\n        this.open();\n\n        return this;\n    }\n\n    createWindow() {\n        // Create the main window container\n        this.container = document.createElement(\"div\");\n        this.container.classList.add(\"window-container\");\n\n        // add dataset for app, type, context\n        this.container.dataset.app = this.app;\n        this.container.dataset.type = this.type;\n        this.container.dataset.context = this.context;\n\n        if (this.className) {\n            this.container.classList.add(this.className);\n        }\n\n        if (!this.resizeable) {\n            this.container.classList.add(\"window-not-resizeable\");\n        }\n\n\n        // Helper function to check if two rectangles overlap\n        function checkOverlap(x1, y1, w1, h1, x2, y2, w2, h2, buffer = 10) {\n            // console.log('checkOverlap', x1, y1, w1, h1, x2, y2, w2, h2, buffer);\n            w1 = parseInt(w1);\n            h1 = parseInt(h1);\n            w2 = parseInt(w2);\n            h2 = parseInt(h2);\n            return (\n                x1 < x2 + w2 + buffer &&\n                x1 + w1 + buffer > x2 &&\n                y1 < y2 + h2 + buffer &&\n                y1 + h1 + buffer > y2\n            );\n        }\n\n        // Function to adjust position to prevent overlap\n        function adjustPosition(newWindow, windows, screenWidth, screenHeight, buffer = 10) {\n            let adjustedX = newWindow.x;\n            let adjustedY = newWindow.y;\n\n            // Check overlap with other windows\n            windows.forEach((win) => {\n                if (checkOverlap(adjustedX, adjustedY, newWindow.width, newWindow.height, win.x, win.y, win.width, win.height, buffer)) {\n                    // console.log('OVERLAP DETECTED');\n                    adjustedX += buffer; // Move slightly to the right\n                    // adjustedY += buffer; // Move slightly down\n                }\n            });\n\n            // Check screen boundaries\n            if (adjustedX + newWindow.width + buffer > screenWidth) {\n                adjustedX = screenWidth - newWindow.width - buffer; // Move to the left\n            }\n            if (adjustedY + newWindow.height + buffer > screenHeight) {\n                adjustedY = screenHeight - newWindow.height - buffer; // Move up\n            }\n            if (adjustedX < buffer) {\n                adjustedX = buffer; // Move to the right\n            }\n            if (adjustedY < buffer) {\n                adjustedY = buffer; // Move down\n            }\n\n            return { x: adjustedX, y: adjustedY };\n        }\n\n        // Main Window Creation Logic\n        this.container.id = this.id;\n        this.container.style.width = `${this.width}px`;\n        this.container.style.height = `${this.height}px`;\n        this.container.style.position = \"absolute\";\n\n        // Assume screen dimensions\n        const screenWidth = window.innerWidth;\n        const screenHeight = window.innerHeight;\n\n        /*\n        // Remark: We could perform a general zoom scale for mobile devices\n        if (screenWidth <= 980) {\n            // this.container.style.zoom = 1.5; // Adjust zoom for mobile\n        } else {\n            // do nothing\n        }\n        */\n\n        // Adjust position to prevent overlap\n        let adjustedPosition = {\n            x: this.x,\n            y: this.y,\n        };\n\n        if (this.preventOverlap) {\n            adjustedPosition = adjustPosition(\n                { x: this.x, y: this.y, width: this.width, height: this.height },\n                this.windowManager.windows,\n                screenWidth,\n                screenHeight,\n                32\n            );\n        }\n\n\n        // Apply adjusted position\n        this.x = adjustedPosition.x;\n        this.y = adjustedPosition.y;\n        this.container.style.top = `${this.y}px`;\n        this.container.style.left = `${this.x}px`;\n\n        this.container.style.zIndex = 99;\n\n        // add a mousedown handler to container itself to set 'window-active' status\n        this.container.addEventListener('mousedown', () => {\n            // set all windows to inactive\n            document.querySelectorAll('.window-container').forEach((window) => {\n                window.classList.remove('window-active');\n                window.isActive = false;\n            });\n            // set this window to active\n            this.container.classList.add('window-active');\n            this.isActive = true;\n        });\n\n        // same for touchstart\n        this.container.addEventListener('touchstart', () => {\n            // set all windows to inactive\n            document.querySelectorAll('.window-container').forEach((window) => {\n                window.classList.remove('window-active');\n                window.isActive = false;\n            });\n            // set this window to active\n            this.container.classList.add('window-active');\n            this.isActive = true;\n        });\n\n        // Create the title bar\n        this.titleBar = document.createElement(\"div\");\n        this.titleBar.classList.add(\"window-title-bar\");\n\n        if (this.bp.isMobile()) {\n            this.titleBar.onclick = () => {\n                console.log('titleBar clicked on mobile');\n                this.minimize();\n                return;\n                if (!this.isMinimized) {\n                    this.minimize(true); // force minimize on mobile\n                } else {\n                    this.restore(); // restore on mobile\n                }\n            }\n        }\n\n        // on double click maximize\n        this.titleBar.ondblclick = () => this.maximize();\n\n        if (this.icon) {\n            let iconTitleBar = document.createElement(\"img\");\n            iconTitleBar.src = this.icon;\n            iconTitleBar.classList.add(\"window-icon\");\n            this.titleBar.appendChild(iconTitleBar);\n        }\n\n        let titleBarSpan = document.createElement(\"span\");\n        titleBarSpan.classList.add(\"window-title-text\");\n        titleBarSpan.textContent = this.title;\n        this.titleBarSpan = titleBarSpan;\n\n        // Drag functionality\n        // Add mouse and touch event listeners to the titleBar\n        this.titleBar.addEventListener('mousedown', this.startDrag);\n        this.titleBar.addEventListener('touchstart', this.startDrag, { passive: false });\n\n        // Touch events for mobile\n\n\n        // Create control buttons (Minimize, Maximize, Close)\n        const controls = document.createElement(\"div\");\n        controls.classList.add(\"window-controls\");\n\n        if (!this.bp.isMobile()) {\n            this.minimizeButton = document.createElement(\"button\");\n            this.minimizeButton.innerHTML = \"&#x1F7E1;\"; // Yellow circle\n            this.minimizeButton.classList.add(\"minimize-button\");\n            this.minimizeButton.title = \"Minimize\";\n            this.minimizeButton.onclick = () => this.minimize();\n\n            controls.appendChild(this.minimizeButton);\n\n\n        }\n\n\n        this.maximizeButton = document.createElement(\"button\");\n        this.maximizeButton.innerHTML = \"&#x1F7E2;\"; // Green circle\n        this.maximizeButton.classList.add(\"maximize-button\");\n        this.maximizeButton.title = \"Maximize\";\n        this.maximizeButton.onclick = () => this.maximize();\n\n        controls.appendChild(this.maximizeButton);\n\n\n        this.closeButton = document.createElement(\"button\");\n        this.closeButton.innerHTML = \"&#x1F534;\"; // Red circle\n        this.closeButton.classList.add(\"close-button\");\n        this.closeButton.title = \"Close\";\n        this.closeButton.onclick = () => this.close();\n\n        controls.appendChild(this.closeButton);\n\n        this.titleBar.appendChild(titleBarSpan);\n        this.titleBar.appendChild(controls);\n\n        this.initContentArea();\n\n        // Append components\n        this.container.appendChild(this.titleBar);\n        this.container.appendChild(this.content);\n\n        if (this.parent) {\n            this.parent.appendChild(this.container);\n        }\n\n        // Resizing\n        if (this.resizeable) {\n            this.addResizeHandles();\n        }\n\n        if (this.canBeBackground) {\n            // get the menubar-set-window-as-background element and remove disabled class\n            let el = document.getElementById('menubar-set-window-as-background');\n            if (el) {\n                el.classList.remove('disabled');\n            }\n        }\n\n\n        return this.container;\n    }\n\n\n    initContentArea() {\n        if (typeof this.iframeContent === 'boolean' && this.iframeContent) {\n            this.content = document.createElement(\"iframe\");\n            this.content.classList.add(\"bp-window-content\");\n            document.body.appendChild(this.content);\n            this.content.src = 'about:blank';\n            this.content.onload = () => {\n                let iframeDoc = this.content.contentDocument || this.content.contentWindow.document;\n                iframeDoc.open();\n                iframeDoc.write(this.contentValue);\n                iframeDoc.close();\n                this.setupMessageHandling();\n            };\n        } else if (typeof this.iframeContent === 'string' && this.iframeContent.length) {\n            this.content = document.createElement(\"iframe\");\n            this.content.classList.add(\"bp-window-content\");\n            this.content.src = this.iframeContent;\n            this.content.onload = () => this.setupMessageHandling();\n        } else {\n            this.content = document.createElement(\"div\");\n            this.content.classList.add(\"bp-window-content\");\n            if (typeof this.contentValue === 'string') {\n                this.content.innerHTML = this.contentValue;\n            } else {\n                this.content.appendChild(this.contentValue);\n            }\n        }\n    }\n\n    // TODO: migrate away from iframe messages and use BroadcastChannel instead\n    setupMessageHandling() {\n        // iframe is loaded by now\n        this.onLoad(this);\n        const iframeWindow = this.content.contentWindow;\n\n        // Inject a script into the iframe to listen for the ESC key\n        const iframeDoc = this.content.contentDocument || this.content.contentWindow.document;\n        const script = iframeDoc.createElement(\"script\");\n        script.type = \"text/javascript\";\n        script.textContent = `\n            document.addEventListener('keydown', (event) => {\n                if (event.key === 'Escape') {\n                    window.parent.postMessage({ event: 'ESC_KEY_PRESSED' }, '*');\n                }\n            });\n        `;\n        //alert(script.textContent)\n        iframeDoc.body.appendChild(script);\n\n        // Set the message event listener on the iframe's window\n        window.addEventListener('message', this.receiveMessage.bind(this), false);\n    }\n\n\n    sendMessage(message) {\n        if (this.content && this.content.contentWindow) {\n            this.content.contentWindow.postMessage(message, '*'); // Consider specifying an origin here instead of '*'\n        }\n    }\n\n    receiveMessage(event) {\n        // Ensure security by checking the event.origin, if possible\n        if (typeof event.data === 'object' && event.data.event) {\n            if (event.data.event === 'ESC_KEY_PRESSED') {\n                console.log('ESC key pressed inside iframe. Closing window...');\n                this.close();\n            } else {\n                this.handleReceivedMessage(event.data);\n            }\n        }\n    }\n\n    handleReceivedMessage(data) {\n        //console.log('Handled Received message:', data, this.onMessage);\n        if (this.onMessage) {\n            this.onMessage(data);\n        }\n    }\n\n\n    move(x, y) {\n        this.x = x;\n        this.y = y;\n        this.container.style.top = `${this.y}px`;\n        this.container.style.left = `${this.x}px`;\n        this.windowManager.saveWindowsState();\n    }\n\n    serialize() {\n\n        // we need an xpath selector for this.parent\n        let parentXpath = getXPathForElement(this.parent);\n        // console.log('parentXpath', parentXpath);\n        return {\n            title: this.title,\n            width: this.width,\n            height: this.height,\n            type: this.type,\n            app: this.app,\n            x: this.x,\n            y: this.y,\n            z: this.z,\n            context: this.context,\n            parent: parentXpath,\n            id: this.id,\n            onClose: this.onClose,\n            onOpen: this.onOpen,\n            className: this.className,\n            resizeable: this.resizeable,\n            canBeBackground: this.canBeBackground\n        };\n    }\n\n    hydrate(data) {\n        console.log('hydrate', data);\n        this.title = data.title;\n        this.width = data.width;\n        this.height = data.height;\n        this.app = data.app;\n        this.type = data.type;\n        this.x = data.x;\n        this.y = data.y;\n        this.z = Number(data.z);\n        this.context = data.context;\n        // TODO: some of these are constructor...maybe all?\n        // this.parent = document.querySelector(data.parent);\n        this.id = data.id;\n        this.onClose = data.onClose;\n        this.onOpen = data.onOpen;\n        this.onMessage = data.onMessage;\n        this.className = data.className;\n        this.resizeable = data.resizeable;\n        this.canBeBackground = data.canBeBackground;\n\n        this.updateWindow();\n    }\n\n    updateWindow() {\n        this.container.style.width = `${this.width}px`;\n        this.container.style.height = `${this.height}px`;\n        this.container.style.top = `${this.y}px`;\n        this.container.style.left = `${this.x}px`;\n        this.container.style.zIndex = this.z;\n        // console.log('updateWindow', this);\n    }\n\n    setDepth(depth) {\n        this.z = depth;\n        this.container.style.zIndex = depth;\n        // console.log('container depth was set to', this.id, depth);\n        this.windowManager.saveWindowsState();\n    }\n\n    setAsBackground() {\n        console.log('setAsBackground', this.windowManager.windows);\n        if (!this.canBeBackground) {\n            console.log('This window cannot be set as background. Try setting canBeBackground:true in the Window declaration');\n            return;\n        }\n        // check other api.ui.windowManager.windows and restore them if isBackground is true\n        this.windowManager.windows.forEach((window) => {\n            if (window.isBackground) {\n                window.restoreWindowFromBackground();\n            }\n        });\n\n        this.container.style.zIndex = -1;\n\n        // make full window size\n        this.container.style.width = \"100%\";\n        this.container.style.height = \"100%\";\n\n        // set top and left to 0\n        this.container.style.top = \"0\";\n        this.container.style.left = \"0\";\n\n        this.isBackground = true;\n        this.isActive = false;\n    }\n\n    restoreWindowFromBackground() {\n\n        this.isBackground = false;\n\n        // reset the z-index\n        this.container.style.zIndex = 11000;\n\n        // reset the window size\n        this.container.style.width = `${this.width}`;\n        this.container.style.height = `${this.height}`;\n\n        // put window back to original position\n        this.container.style.top = `${this.y}px`;\n        this.container.style.left = `${this.x}px`;\n\n        // get the menubar-restore-background-window element and add disabled class\n        let el = document.getElementById('menubar-restore-background-window');\n        if (el) {\n            el.classList.add('disabled');\n        }\n\n    }\n\n    startDrag(e) {\n        this.isDragging = true;\n        this.container.style.cursor = \"grabbing\";\n\n        // Disable pointer events on iframe\n        const iframes = this.container.querySelectorAll('iframe');\n        iframes.forEach(iframe => {\n            iframe.style.pointerEvents = 'none';\n        });\n\n        // Get coordinates from mouse or touch event\n        const { clientX, clientY } = this.getEventCoordinates(e);\n        this.offsetX = clientX - this.container.offsetLeft;\n        this.offsetY = clientY - this.container.offsetTop;\n\n        // Add event listeners for both mouse and touch events\n        document.addEventListener('mousemove', this.drag);\n        document.addEventListener('touchmove', this.drag, { passive: false });\n        document.addEventListener('mouseup', this.stopDrag);\n        document.addEventListener('touchend', this.stopDrag);\n    }\n\n    drag(e) {\n        if (!this.isDragging) return;\n\n        // Prevent default behavior for touchmove to avoid scrolling\n        e.preventDefault();\n\n        // Get coordinates from mouse or touch event\n        const { clientX, clientY } = this.getEventCoordinates(e);\n\n        // Update container position\n        // Ensure window does not drag off the screen\n        let menuBarHeight = 42;\n        let bottomLimit = window.innerHeight - 52; // 50px from bottom\n        if (clientY > menuBarHeight && clientY < bottomLimit) {\n            this.container.style.top = `${clientY - this.offsetY}px`;\n        }\n        let leftLimit = 52; // 0px from left\n        let rightLimit = window.innerWidth - 52; // 0px from right\n        if (clientX > leftLimit && clientX < rightLimit) {\n            this.container.style.left = `${clientX - this.offsetX}px`;\n        }\n    }\n\n    stopDrag() {\n        this.isDragging = false;\n        this.container.style.cursor = \"default\";\n\n        // Restore pointer events on iframe\n        const iframes = this.container.querySelectorAll('iframe');\n        iframes.forEach(iframe => {\n            iframe.style.pointerEvents = 'auto';\n        });\n\n        // Remove event listeners\n        document.removeEventListener('mousemove', this.drag);\n        document.removeEventListener('touchmove', this.drag);\n        document.removeEventListener('mouseup', this.stopDrag);\n        document.removeEventListener('touchend', this.stopDrag);\n\n        // Save window state\n        this.x = this.container.offsetLeft;\n        this.y = this.container.offsetTop;\n        this.z = Number(this.container.style.zIndex);\n        if (this.windowManager) {\n            this.windowManager.saveWindowsState();\n        } else {\n            console.warn('windowManager is not defined');\n        }\n    }\n\n    getEventCoordinates(e) {\n        let clientX, clientY;\n        if (e.type.startsWith('touch')) {\n            // Use the first touch point for dragging\n            const touch = e.touches[0] || e.changedTouches[0];\n            clientX = touch.clientX;\n            clientY = touch.clientY;\n        } else {\n            // Mouse event\n            clientX = e.clientX;\n            clientY = e.clientY;\n        }\n        return { clientX, clientY };\n    }\n\n    minimize(force = false) {\n        // console.log('minimize', this.isMinimized);\n        if (this.bp.isMobile()) {\n\n            if (this.isMinimized && !force) {\n                this.restore();\n                // this.content.style.display = \"block\"; // Show content area\n            } else {\n                // Minimize the window\n                // this.container.style.display = \"none\";  // Hide content area\n                // hides the `bp-window-content` area\n                //this.content.style.display = \"none\";  // Hide content area\n                // set the window-container height to 50px\n                this.container.style.height = \"120px\"; // Set height to 50px\n                console.log('setting content area');\n\n                this.isMinimized = true;\n            }\n\n            this.windowManager.arrangeVerticalStacked();\n\n        } else {\n            if (this.isMinimized && !force) {\n                this.restore();\n            } else {\n                // Minimize the window\n                console.log('hiding content area');\n                this.container.style.display = \"none\";  // Hide content area\n                this.isMinimized = true;\n            }\n        }\n        // TODO: save the window state\n    }\n\n    // Restore the window\n    restore() {\n        // console.log('restore', this)\n        // Restore the window's content and original size\n        this.container.style.display = \"flex\";\n\n        //this.container.style.top = this.y + 'px';\n        //this.container.style.left = this.x + 'px';\n\n        // Mark as not minimized\n        this.isMinimized = false;\n        // TODO: save the window state\n\n        if (this.bp.isMobile()) {\n            this.windowManager.arrangeVerticalStacked();\n        }\n    }\n\n    maximize() {\n\n        // offset the top position by $('.desktop-menu-bar').height()\n        // so that on smaller devices the window is not hidden behind the menubar\n        if (this.isMaximized) {\n            if (this.bp.isMobile()) {\n                //this.container.style.width = \"100vw\";\n                //this.container.style.height = \"100vh\";\n                //this.container.style.top = \"0\";\n                //this.container.style.left = \"0\";\n                this.windowManager.arrangeVerticalStacked();\n\n            } else {\n                this.container.style.width = `${this.width}px`;\n                this.container.style.height = `${this.height}px`;\n                this.container.style.top = \"50px\";\n                this.container.style.left = \"50px\";\n                this.isMaximized = false;\n\n            }\n        } else {\n            let normalMenuBarHeight = 21;\n            let currentMenuBarHeight = $('.desktop-menu-bar').height() || normalMenuBarHeight;\n            let diff = currentMenuBarHeight - normalMenuBarHeight;\n            diff += (normalMenuBarHeight + 2); // add 2px for border\n            let pixelOffset = diff + 'px';\n\n            if (this.bp.isMobile()) {\n                this.container.style.width = \"100vw\";\n                this.container.style.height = \"100vh\";\n                this.container.style.top = pixelOffset;\n                this.container.style.left = \"0\";\n\n            } else {\n                this.container.style.width = \"100vw\";\n                this.container.style.height = \"calc(100vh - 75px)\";\n                this.container.style.top = pixelOffset;\n                this.container.style.left = \"0\";\n\n            }\n            this.isMaximized = true;\n        }\n        // TODO: save the window state\n\n    }\n\n    focus(propigate = true) {\n        // console.log('on focus called from Window.js')\n        if (propigate) {\n            this.windowManager.focusWindow(this);\n        }\n        this.onFocus(this);\n    }\n\n    open() {\n        // set focus to this window ( first )\n        this.focus();\n\n        try {\n            // onOpen may have additional focus events\n            this.onOpen(this);\n        } catch (err) {\n            console.error(err);\n        }\n        // TODO: save the window state ???\n        // ???? this.parent.appendChild(this.container);\n\n        if (this.bp.isMobile()) {\n            // this.minimizeAllWindows(true);\n            // alert('opening window on mobile');\n            setTimeout(() => {\n                this.windowManager.arrangeVerticalStacked();\n            }, 100);\n        }\n\n\n        this.bp.emit('window::open', this);\n        // console.log('callling focus from open');\n    }\n    close() {\n\n        if (this.parent) {\n            // check first to see if child is in parent\n            if (this.container.parentElement && this.container.parentElement === this.parent) {\n                this.parent.removeChild(this.container);\n            }\n        } else {\n            this.container.parentElement.removeChild(this.container);\n        }\n\n        // check to see if this is an iframe and remove event listener\n        if (this.content && this.content.contentWindow) {\n            this.content.contentWindow.removeEventListener('message', this.receiveMessage.bind(this), false);\n        }\n        if (this.content) {\n            if (this.content.parentNode) {\n                this.content.parentNode.removeChild(this.content);\n            }\n            this.content = null;\n        }\n\n        // check to see if no more windows\n        // TODO: remove this code from Window.js class ( it should not know about menubar )\n        // if window count is 0 get the menubar-set-window-as-background element and add disabled class\n        let windowCount = this.windowManager.windows.length;\n        if (windowCount === 0) {\n            let el = document.getElementById('menubar-set-window-as-background');\n            if (el) {\n                el.classList.add('disabled');\n            }\n        }\n        // console.log('removeWindow', this.id);\n        this.windowManager.removeWindow(this.id);\n\n\n        if (this.windowManager.taskBar) {\n            // remove the chat window from the taskbar\n            this.windowManager.taskBar.removeItem(this.id);\n        }\n\n        // TODO: save the window state ??? removeWindow could do it..?\n\n        this.onClose(this);\n        this.bp.emit('window::close', this);\n\n        if (this.bp.isMobile()) {\n            // this.minimizeAllWindows(true);\n            //this.windowManager.arrangeVerticalStacked();\n            setTimeout(() => {\n                this.windowManager.arrangeVerticalStacked();\n            }, 100);\n        }\n\n    }\n\n    addResizeHandles() {\n        const resizeHandle = document.createElement(\"div\");\n        resizeHandle.classList.add(\"resize-handle\");\n        this.container.appendChild(resizeHandle);\n        resizeHandle.addEventListener(\"mousedown\", (e) => this.startResize(e), { passive: false });\n        resizeHandle.addEventListener(\"touchstart\", (e) => {\n            e.preventDefault(); // Prevent default touch behavior\n            this.startResize(e.touches[0]);\n        }, { passive: false });\n    }\n\n    setSize(width, height) {\n        this.width = width;\n        this.height = height;\n        this.container.style.width = `${this.width}`;\n        this.container.style.height = `${this.height}`;\n        // save the window state\n        this.windowManager.saveWindowsState();\n    }\n\n    startResize(e) {\n        const container = this.container;\n        const startX = e.clientX;\n        const startY = e.clientY;\n        const startWidth = container.offsetWidth;\n        const startHeight = container.offsetHeight;\n\n        const onMove = (moveEvent) => {\n            const clientX = moveEvent.clientX || moveEvent.touches[0].clientX;\n            const clientY = moveEvent.clientY || moveEvent.touches[0].clientY;\n            const newWidth = startWidth + (clientX - startX);\n            const newHeight = startHeight + (clientY - startY);\n\n            // Apply new dimensions, respecting min/max constraints\n            container.style.width = `${Math.max(100, newWidth)}px`; // Example min-width\n            container.style.height = `${Math.max(100, newHeight)}px`; // Example min-height\n        };\n\n        const onUp = () => {\n            document.removeEventListener(\"mousemove\", onMove);\n            document.removeEventListener(\"mouseup\", onUp);\n            document.removeEventListener(\"touchmove\", onMove);\n            document.removeEventListener(\"touchend\", onUp);\n        };\n\n        document.addEventListener(\"mousemove\", onMove);\n        document.addEventListener(\"mouseup\", onUp);\n        document.addEventListener(\"touchmove\", onMove, { passive: false });\n        document.addEventListener(\"touchend\", onUp);\n    }\n\n    resize(e) {\n        if (!this.isResizing) return;\n        const newWidth = this.startWidth + (e.clientX - this.startX);\n        const newHeight = this.startHeight + (e.clientY - this.startY);\n\n        this.container.style.width = `${newWidth}px`;\n        this.container.style.height = `${newHeight}px`;\n    }\n\n    stopResize() {\n        this.isResizing = false;\n        // TODO: save the window state\n\n    }\n\n    setTitle(title) {\n        this.title = title;\n        this.titleBarSpan.textContent = title;\n        // save the window state\n        this.windowManager.saveWindowsState();\n    }\n\n    setContent(content) {\n        this.contentValue = content;\n        this.content.innerHTML = content;\n        // save the window state\n        this.windowManager.saveWindowsState();\n    }\n}\n\nexport default Window;\n\n\nfunction getXPathForElement(element) {\n    const fullPath = (el) => {\n        let names = [];\n        while (el.parentNode) {\n            if (el.id) { // If the element has an ID, use it as a unique identifier\n                names.unshift('#' + el.id);\n                break;\n            } else {\n                let e = el, sibling, count = 1;\n                while (sibling = e.previousSibling) {\n                    if (sibling.nodeType === 1 && sibling.tagName === e.tagName) { count++; }\n                    e = sibling;\n                }\n                const tagName = el.tagName.toLowerCase();\n                const nth = count > 1 ? `:nth-of-type(${count})` : '';\n                names.unshift(`${tagName}${nth}`);\n                el = el.parentNode;\n            }\n        }\n        return names.length ? names.join(' > ') : null;\n    };\n    return fullPath(element);\n}\n","/* Buddy Pond - WindowManager.js - Marak Squires 2023 */\nimport TaskBar from './TaskBar.js';\nimport Window from \"./Window.js\";\n\nexport default class WindowManager {\n    constructor(ui, options = {}) {\n        this.storage = options.storage || localStorage; // Use localStorage by default\n        this.storageKey = options.storageKey || 'windowsState'; // Key for storing data\n        this.windows = [];\n        this._windows = [];\n        this.options = options;\n\n        this.bp = ui.bp;\n\n        this.useKeyboardControls = true;\n\n        if (typeof options.useKeyboardControls === \"boolean\") {\n            this.useKeyboardControls = options.useKeyboardControls;\n        }\n\n        if (typeof options.hideTaskBar === \"boolean\") {\n            this.hideTaskBar = options.hideTaskBar;\n        }\n\n        if (typeof options.openWindow === \"function\") {\n            this._openWindow = options.openWindow;\n        } else {\n            this._openWindow = function (name, config) {\n                const window = this.createWindow(config);\n                window.hydrate(config);\n            }\n        }\n\n        this.taskBar = new TaskBar({\n            homeCallback: () => {\n\n                if (!this.state) {\n                    // save current window positions\n                    this.lastPositionsBeforeArranged = this.windows.map(w => {\n                        return {\n                            x: w.x,\n                            y: w.y,\n                            height: w.height,\n                            width: w.width\n                        }\n                    });\n                    // console.log('lastPositionsBeforeArranged', this.lastPositionsBeforeArranged);\n                    this.state = 'maximized';\n                }\n\n\n                if (this.state === 'minimized') {\n                    this.minimizeAllWindows();\n                    this.arrangeHorizontalStacked();\n                    this.state = 'stacked-horizontal';\n\n                } else if (this.state === 'stacked-vertical') {\n                    // stack-vertical has been removed ( for now )\n                    // it wasn't looking good as a default and was rarely used\n                    /*\n                    // restore all windows to their previous positions\n                    this.windows.forEach((w, i) => {\n                        w.move(this.lastPositionsBeforeArranged[i].x, this.lastPositionsBeforeArranged[i].y);\n                        w.setSize(this.lastPositionsBeforeArranged[i].width + 'px', this.lastPositionsBeforeArranged[i].height + 'px');\n                    });\n                    this.state = 'maximized';\n                    */\n\n                } else if (this.state === 'stacked-horizontal') {\n                    // this.arrangeVerticalStacked();\n                    // this.state = 'stacked-vertical';\n                    // restore all windows to their previous positions\n                    this.windows.forEach((w, i) => {\n                        w.move(this.lastPositionsBeforeArranged[i].x, this.lastPositionsBeforeArranged[i].y);\n                        w.setSize(this.lastPositionsBeforeArranged[i].width + 'px', this.lastPositionsBeforeArranged[i].height + 'px');\n                    });\n                    this.state = 'maximized';\n\n                } else {\n                    this.minimizeAllWindows(true);\n                    this.windows.forEach((w, i) => {\n                        w.move(this.lastPositionsBeforeArranged[i].x, this.lastPositionsBeforeArranged[i].y);\n                        w.setSize(this.lastPositionsBeforeArranged[i].width + 'px', this.lastPositionsBeforeArranged[i].height + 'px');\n                    });\n\n                    this.state = 'minimized';\n\n                }\n\n                // close all windows\n                // this.minimizeAllWindows();\n                // this.windowsClosed = true;\n\n                // hide all legacy BP windows\n                $('.window').hide();\n                $('.window').removeClass('window_stack');\n\n            }\n        });\n\n        if (this.options.hideTaskBar) {\n            this.taskBar.taskBarElement.style.display = 'none';\n        }\n\n        if (this.useKeyboardControls) {\n            window.addEventListener(\"keydown\", (e) => {\n                // alert(this.bp.editingMode);\n                if (e.key === \"Escape\" && !this.bp.ignoreUIControlKeys) {\n                    // alert(\"Escape key pressed\");\n                    // find the window with the highest depth and close it\n\n                    // first check to see if there is a dialog open, close that first\n                    const dialog = document.querySelector('.dialog');\n                    if (dialog) {\n                        dialog.remove();\n                        return;\n                    }\n\n                    const window = this.windows[0]; // no sort needed, windows are already sorted by depth\n                    if (window) {\n                        window.close();\n                    }\n                }\n            });\n        }\n\n    }\n\n    createWindow(options) {\n\n        // check to see if there is previous window data in this._windows\n        // check by id, if found, hydrate the window\n        // This is a temporary solution until full app hydration is back online\n        // This solution will allow for position and size to be saved and restored\n        options = { ...options, ...this.options.window };\n        // console.log('createWindow', options);\n        let previousWindowData = this._windows.find(w => w.id === options.id);\n        if (previousWindowData) {\n            // just merge the previous window data with the new options\n            options = { ...previousWindowData, ...options };\n        }\n\n        // check to see if window already exists with id\n        const existingWindow = this.getWindow(options.id);\n        let window;\n\n        if (existingWindow) {\n            window = existingWindow;\n            this.focusWindow(window); // Focus the newly created window\n            return window;\n        }\n        options.bp = this.bp;\n        window = new Window(options, this);\n\n        window.container.addEventListener(\"mousedown\", () => {\n            this.focusWindow(window);\n        });\n        this.addWindow(window);\n        this.focusWindow(window); // Focus the newly created window\n\n        this.taskBar.addItem({\n            id: window.id,\n            title: window.title,\n            icon: window.icon,\n            onClick: () => {\n                // toggle window minimize / restore state\n                if (this.isMobile()) {\n                    // this.minimizeAllWindows(true);\n                    this.arrangeVerticalStacked();\n                    // we could minimize all other windows here\n                    // minimizeAllWindows();\n                }\n                if (window.isMinimized) {\n                    window.restore();\n                    window.focus();\n                } else {\n                    window.minimize();\n                }\n            }\n        });\n\n        return window;\n    }\n\n    isMobile() {\n        return window.innerWidth < 1000;\n    }\n\n    addWindow(window) {\n        this.windows.push(window);\n        this.saveWindowsState(); // Save state when a window is added\n        this.updateFocus();\n    }\n\n    removeWindow(window) {\n        // console.log(\"Removing window\", window);\n        this.windows = this.windows.filter(w => w.id !== window);\n        //console.log(\"Remaining windows\", this.windows);\n        this.saveWindowsState(); // Save state when a window is removed\n        this.updateFocus();\n    }\n\n    focusWindow(window) {\n        // window can be the window instance or the window id\n        if (typeof window === 'string') {\n            window = this.getWindow(window);\n        }\n\n        // console.log(\"Focusing window\", window);\n\n        // TODO: this isn't working consistenly?  there seems to be an issue with index\n        // console.log(\"Focusing window\", window.id);\n        const index = this.windows.indexOf(window);\n        if (index !== -1) {\n            this.windows.splice(index, 1);\n            this.windows.unshift(window);\n            // console.log('Focusing window', window.id, 'at index', index);\n            this.updateFocus();\n            window.focus(false);\n            this.saveWindowsState(); // Save state when focus changes\n        }\n        // iterate through all windows and set isFocused to false\n        // set this window isFocused to true\n        this.windows.forEach(w => {\n            if (w.id !== window) {\n                w.isFocused = false;\n\n            } else {\n                window.isFocused = true;\n\n            }\n        });\n    }\n\n    updateFocus() {\n        // console.log(\"Updating focus\");\n        this.windows.forEach((window, index) => {\n            // console.log(\"Setting depth for window\", window.id, \"to\", 1000 - index);\n            // console.log(\"setting depth for window\", window.id, \"to\", 1000 - index);\n            window.setDepth(1000 - index); // Higher index, higher depth\n        });\n    }\n\n    closeAllWindows() {\n        this.windows.forEach(window => window.close());\n        this.windows = [];\n        this.storage.removeItem(this.storageKey); // Clear storage when all windows are closed\n    }\n\n    minimizeAllWindows(force = false) {\n        if (!this.windowsHiding) {\n            this.windowsHiding = true;\n        } else {\n            this.windowsHiding = false;\n        }\n        this.windows.forEach(window => {\n\n            if (!this.windowsHiding || force) {\n                window.minimize(force);\n            } else {\n                window.restore();\n            }\n        });\n    }\n\n    getWindow(id) {\n        // console.log('searching for', id, 'in', this.windows)\n        return this.windows.find(w => w.id === id);\n    }\n\n    findWindows({ app, type }) {\n        if (!app) {\n            console.warn(\"No app provided to findWindows\");\n            return [];\n        }\n\n        // Normalize app and type to arrays for unified matching\n        const apps = Array.isArray(app) ? app : [app];\n        const types = type ? (Array.isArray(type) ? type : [type]) : null;\n\n        return this.windows.filter(w => {\n            const appMatch = apps.includes(w.app);\n            const typeMatch = types ? types.includes(w.type) : true;\n            return appMatch && typeMatch;\n        });\n    }\n\n    saveWindowsState() {\n        const state = JSON.stringify(this.windows.map(window => window.serialize()));\n        // console.log(\"Saving windows state\", JSON.parse(state));\n        this.storage.setItem(this.storageKey, state);\n    }\n\n    // Remark: This should probably be mostly in settings app or a separate app\n    loadWindows() {\n        const serializedWindows = this.storage.getItem(this.storageKey);\n        if (serializedWindows) {\n            this.restoreWindows(serializedWindows);\n        }\n    }\n\n    arrangeVerticalStacked() {\n        let containerHeight = document.body.clientHeight - 100; // Adjust for container and offset\n        let windowWidth = document.body.clientWidth - 10; // Adjust for container and offset\n        const defaultWindowHeight = containerHeight * 0.8; // Default height for non-minimized windows\n        const minimizedHeight = 120; // Height for minimized windows\n        const gap = 10; // Optional gap between windows for better spacing\n        let totalY = 0; // Initialize Y position\n\n        // console.log('window count', this.windows.length, 'defaultWindowHeight', defaultWindowHeight, 'windowWidth', windowWidth);\n        // console.log(this.windows);\n\n        this.windows.reverse().forEach((window, index) => {\n            // Determine the height for the current window\n            let currentWindowHeight = window.isMinimized ? minimizedHeight : defaultWindowHeight;\n\n            // console.log(\"index\", index, window.title, 'isMinimized', window.isMinimized, 'currentWindowHeight', currentWindowHeight, 'windowWidth', windowWidth);\n\n            // Set window size and position\n            window.setSize(windowWidth + 'px', currentWindowHeight + 'px'); // Set size\n            window.move(0, totalY); // Move to calculated Y position\n\n            // Increment totalY for the next window\n            totalY += currentWindowHeight + gap; // Add current window's height and gap\n\n            // console.log(\"totalY\", totalY, \"currentWindowHeight\", currentWindowHeight, \"windowWidth\", windowWidth);\n        });\n\n        // Position the shortCutsContainer below the last window\n        // console.log('setting shortCutsContainer top to', totalY);\n        if (this.bp.apps.desktop && this.bp.apps.desktop.shortCutsContainer) {\n            this.bp.apps.desktop.shortCutsContainer.style.position = 'absolute';\n            this.bp.apps.desktop.shortCutsContainer.style.left = '0px';\n            this.bp.apps.desktop.shortCutsContainer.style.top = totalY + 'px';\n        }\n    }\n\n    arrangeHorizontalStacked() {\n        const containerWidth = document.body.clientWidth; // Adjust to your specific container if not the body\n        const numWindows = this.windows.length;\n        let windowWidth = containerWidth / numWindows;\n        windowWidth -= 10; // Adjust to your desired offset\n        this.windows.forEach((window, index) => {\n            let xPos = windowWidth * index;\n            xPos += 5;\n            xPos += 10 * index; // Adjust to your desired offset\n            window.setSize(windowWidth + 'px', 'calc(100% - 80px)'); // Assuming you have a resize method\n            window.move(xPos, 30); // Assuming you have a move method\n        });\n\n    }\n\n    arrangeCascadeFromTopLeft() {\n        const offset = 20; // Adjust to your desired offset\n        this.windows.forEach((window, index) => {\n            const xPos = offset * index;\n            const yPos = offset * index;\n            window.move(xPos, yPos); // Assuming you have a move method\n        });\n    }\n\n    // Remark: This should probably be mostly in settings app or a separate app\n    // Restore windows from serialized state\n    restoreWindows(serializedWindows, inflate = false) {\n        const windowsData = JSON.parse(serializedWindows);\n        // console.log(\"Restoring windows\", windowsData);\n        // alert(\"Restoring windows from storage, this will be removed in the future, please use the settings app to manage windows\");\n        this._windows = windowsData;\n\n        if (!inflate) {\n            // for now, probably better suited elsewhere\n            return;\n        }\n        windowsData.forEach(data => {\n            // check to see if window already exists with id\n            const existingWindow = this.getWindow(data.id);\n            if (existingWindow) {\n                console.log(\"WARNING: Window with id\", data.id, \"already exists, hydrating instead of creating new window\");\n                existingWindow.hydrate(data);\n                return;\n            }\n            data.parent = document.querySelector(data.parent);\n            // console.log(\"hydrating window\", data);\n            // this.openWindow(data.app, data);\n            //const window = this.createWindow(data);\n            //window.hydrate(data);\n        });\n    }\n}","export default class CountdownManager {\n    constructor() {\n        this.intervalId = null;\n        this.expiryCallbacks = new WeakMap(); // store per-element callbacks\n    }\n\n    updateCountdowns() {\n        const countdownEls = $('.countdown-date').filter(function () {\n            return $(this).data('expired') !== true;\n        });\n\n        if (countdownEls.length === 0) {\n            if (this.intervalId) {\n                clearInterval(this.intervalId);\n                this.intervalId = null;\n                if (bp?.apps?.ui) {\n                    bp.apps.ui.countdownTimer = null;\n                }\n            }\n            return;\n        }\n\n        countdownEls.each((_, el) => {\n            const $el = $(el);\n\n            const expiry = new Date($el.data('expiry')).getTime();\n            const now = Date.now();\n            const distance = expiry - now;\n\n            if (!$el.data('duration')) {\n                const ctime = $el.data('ctime');\n                if (ctime) {\n                    $el.data('duration', expiry - ctime);\n                }\n            }\n            // console.log('distance for', $el, distance);\n            // distance is going negative? on recurse?\n            if (distance < 0) {\n                $el.data('expired', true);\n\n                const cb = this.expiryCallbacks.get(el);\n                if (typeof cb === 'function') {\n                    cb($el);\n                    this.expiryCallbacks.delete(el); // Cleanup\n                }\n\n                return;\n            }\n\n            const days = Math.floor(distance / (1000 * 60 * 60 * 24));\n            const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n            const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n            const seconds = Math.floor((distance % (1000 * 60)) / 1000);\n\n            let prefix = '';\n            let timeParts = [];\n\n            if (days > 0) {\n                prefix = `${days} Day${days > 1 ? 's' : ''} `;\n                timeParts.push(hours.toString().padStart(2, '0'));\n            } else if (hours > 0) {\n                timeParts.push(hours.toString());\n            }\n\n            timeParts.push(minutes.toString().padStart(2, '0'));\n            timeParts.push(seconds.toString().padStart(2, '0'));\n\n            $el.text(prefix + timeParts.join(':'));\n        });\n    }\n\n    /**\n     * Start a countdown on the given jQuery element\n     * @param {jQuery} $el - The element to attach the countdown to\n     * @param {string|Date} expiry - Expiry date/time\n     * @param {function} [onExpire] - Optional callback when countdown expires\n     */\n    startCountdown($el, expiry, onExpire) {\n        const expiryTime = new Date(expiry).getTime();\n        const now = Date.now();\n        const duration = expiryTime - now;\n\n        // console.log('Starting countdown for', $el, expiry);\n\n        $el\n            .data('expiry', expiryTime)\n            .data('ctime', now)\n            .data('duration', duration)\n            .data('expired', false);\n\n        if (typeof onExpire === 'function') {\n            this.expiryCallbacks.set($el[0], onExpire);\n        }\n\n        if (!this.intervalId) {\n            this.intervalId = setInterval(() => this.updateCountdowns(), 1000);\n            if (bp?.apps?.ui) {\n                bp.apps.ui.countdownTimer = this.intervalId;\n            }\n        }\n\n        this.updateCountdowns(); // Immediate update\n    }\n}\n","// Remark: We may be able to remove UI and put all this logic in the desktop app\nimport WindowManager from \"./Window/WindowManager.js\";\nimport CountdownManager from \"../ui/CountdownManager.js\";\n\nexport default class UI {\n    constructor(bp, options = {}) {\n        this.bp = bp;\n\n        let windowManagerOptions = {};\n        windowManagerOptions.openWindow = this.bp.open.bind(this.bp),\n            windowManagerOptions.window = options.window || {};\n        windowManagerOptions.hideTaskBar = options.hideTaskBar;\n        this.windowManager = new WindowManager(this, windowManagerOptions);\n        this.bp.windows = this.windowManager.windows;\n        // will re-load any previous stored metadata about windows\n        // storage provider is defaulted to localStorage\n        this.windowManager.loadWindows();\n\n        options.parent = options.parent || document.body;\n\n        // options.parent.classList.add('droparea');\n\n        this.options = options;\n\n        if (typeof options.fontAwesome !== 'boolean') {\n            options.fontAwesome = true;\n        }\n\n        this.parent = options.parent;\n\n        this.countdownManager = new CountdownManager(this.bp);\n        // this.countdownManager.updateCountdowns();\n        let that = this;\n        this.bp.window = that.windowManager.createWindow.bind(that.windowManager);\n        return this;\n    }\n\n    async init() {\n\n        // base CSS for ui, this can be themed in the future\n        if (!this.options.noCSS) {\n            this.bp.appendCSS('/v5/apps/based/ui/ui.css'); // no need to wait for CSS to load?\n            if (this.bp.mode !== 'prod') {\n                this.bp.appendCSS('/v5/apps/based/ui/mobile.css'); // no need to wait for CSS to load?\n                this.bp.appendCSS('/v5/apps/based/ui/Window/Window.css'); // no need to wait for CSS to load?\n                this.bp.appendCSS('/v5/apps/based/ui/Window/TaskBar.css'); // no need to wait for CSS to load?\n            }\n        }\n\n        if (this.options.fontAwesome) {\n            this.bp.appendCSS('/v5/vendor/font-awesome/css/fontawesome.css', false, true);\n            this.bp.appendCSS('/v5/vendor/font-awesome/css/all.min.css', false, true);\n        }\n\n        // TODO: add these lines back after removing v4 completely ( as jQuery is already loaded in v4)\n        if (!this.options.noZepto) {\n            // If you need jQuery or another version of $\n            // we have the ability to not load Zepto as $\n            //await this.bp.appendScript('/v5/vendor/zepto.min.js');\n        } else {\n            //await this.bp.appendScript('/v5/vendor/jquery.min.js');\n\n        }\n\n        // await this.bp.appendScript('/desktop/assets/js/jquery.js');\n\n\n        if (!this.options.noTabs) {\n            // what happened here with config? we shouldn't need to reference host here,\n            // TODO: check implementation of importModule with options\n            let SimpleTabs = await this.bp.importModule(this.bp.config.host + '/v5/apps/based/ui/SimpleTabs.js', {}, false)\n            this.Tabs = SimpleTabs.default;\n\n        }\n\n        await this.bp.appendScript('/v5/vendor/DateFormat.js');\n\n        // bind common document events\n        // TODO: move UI events to separate file\n        let d = document;\n\n        $(d).on('click', '.open-app', function (e) {\n            let appName = $(this).data('app');\n            let context = $(e.target).data('context');\n            let type = $(this).data('type');\n            // let output = $(this).data('output');\n\n            console.log('open-app ' + appName);\n            // check to see if legacy app ( for now)\n            bp.open(appName, { context, type });\n\n        });\n\n        return 'loaded ui';\n    }\n\n    async appendToElement(el) {\n        console.log('appendToElement', this);\n        let html = await fetchHTMLFragment('ui.html'); // TODO: might need root\n        console.log(html);\n        el.innerHTML = html;\n        return 'hello ui';\n    }\n\n    async loadDocumentBody() {\n        console.log('loadDocumentBody', this);\n        let html = await this.bp.fetchHTMLFragment('/v5/apps/based/ui/ui.html'); // TODO: might need root\n        console.log(html);\n        $('body').append(html);\n        //document.body.innerHTML = html;\n        return 'hello ui';\n\n    }\n\n    toggleFullScreen() {\n        if (document.fullscreenElement) {\n            document.exitFullscreen();\n        } else {\n            document.documentElement.requestFullscreen();\n        }\n    }\n\n}"],"names":["TaskBar","constructor","homeCallback","this","taskBarElement","document","createElement","className","body","appendChild","items","Map","addItem","id","title","onClick","icon","config","content","itemElement","itemText","textContent","innerHTML","itemIcon","src","height","width","alt","onclick","ev","alertItem","set","removeItem","itemId","get","removeChild","delete","getItem","classList","add","setTimeout","remove","idCounter","Window","options","windowManager","app","type","context","iframeContent","x","y","z","parent","window","onFocus","onClose","onOpen","onMessage","onLoad","resizeable","preventOverlap","canBeBackground","existingWindow","getElementById","console","log","isMaximized","isMinimized","container","contentValue","isActive","windows","saveWindowsState","removeWindow","bp","startDrag","bind","drag","stopDrag","createWindow","open","dataset","style","position","screenWidth","innerWidth","screenHeight","innerHeight","adjustedPosition","newWindow","buffer","adjustedX","adjustedY","forEach","win","x1","y1","w1","h1","x2","y2","w2","h2","parseInt","checkOverlap","adjustPosition","top","left","zIndex","addEventListener","querySelectorAll","titleBar","isMobile","minimize","ondblclick","maximize","iconTitleBar","titleBarSpan","passive","controls","minimizeButton","maximizeButton","closeButton","close","initContentArea","addResizeHandles","el","onload","iframeDoc","contentDocument","contentWindow","write","setupMessageHandling","length","script","receiveMessage","sendMessage","message","postMessage","event","data","handleReceivedMessage","move","serialize","parentXpath","names","parentNode","unshift","sibling","e","count","previousSibling","nodeType","tagName","toLowerCase","nth","join","fullPath","hydrate","Number","updateWindow","setDepth","depth","setAsBackground","isBackground","restoreWindowFromBackground","isDragging","cursor","iframe","pointerEvents","clientX","clientY","getEventCoordinates","offsetX","offsetLeft","offsetY","offsetTop","preventDefault","bottomLimit","rightLimit","removeEventListener","warn","startsWith","touch","touches","changedTouches","force","restore","arrangeVerticalStacked","display","normalMenuBarHeight","diff","$","pixelOffset","focus","propigate","focusWindow","err","error","emit","parentElement","taskBar","resizeHandle","startResize","setSize","startX","startY","startWidth","offsetWidth","startHeight","offsetHeight","onMove","moveEvent","newWidth","newHeight","Math","max","onUp","resize","isResizing","stopResize","setTitle","setContent","WindowManager","ui","storage","localStorage","storageKey","_windows","useKeyboardControls","hideTaskBar","openWindow","_openWindow","name","state","lastPositionsBeforeArranged","map","w","minimizeAllWindows","arrangeHorizontalStacked","i","hide","removeClass","key","ignoreUIControlKeys","dialog","querySelector","previousWindowData","find","getWindow","addWindow","push","updateFocus","filter","index","indexOf","splice","isFocused","closeAllWindows","windowsHiding","findWindows","apps","Array","isArray","types","appMatch","includes","typeMatch","JSON","stringify","setItem","loadWindows","serializedWindows","restoreWindows","containerHeight","clientHeight","windowWidth","clientWidth","defaultWindowHeight","totalY","reverse","currentWindowHeight","desktop","shortCutsContainer","xPos","arrangeCascadeFromTopLeft","yPos","inflate","windowsData","parse","CountdownManager","intervalId","expiryCallbacks","WeakMap","updateCountdowns","countdownEls","each","_","$el","expiry","Date","getTime","distance","now","ctime","cb","days","floor","hours","minutes","seconds","prefix","timeParts","toString","padStart","text","clearInterval","countdownTimer","startCountdown","onExpire","expiryTime","duration","setInterval","UI","windowManagerOptions","fontAwesome","countdownManager","init","noCSS","appendCSS","mode","noZepto","noTabs","SimpleTabs","importModule","host","Tabs","default","appendScript","d","on","appName","target","appendToElement","html","fetchHTMLFragment","loadDocumentBody","append","toggleFullScreen","fullscreenElement","exitFullscreen","documentElement","requestFullscreen"],"mappings":"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"}