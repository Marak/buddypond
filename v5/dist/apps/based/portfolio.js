const t={};class e{constructor(e){this.resourceName=e,t[this.resourceName]={},this.memoryStore=t}create(e,o,r){Object.keys(r).forEach((e=>{if(r[e].required&&(void 0===o[e]||null===o[e]))throw new Error(`${e} is required`);if(r[e].unique){if(Object.values(t[this.resourceName]).some((t=>t[e]===o[e])))throw new Error(`${e} must be unique`)}if(r[e].type&&typeof o[e]!==r[e].type)throw new Error(`${e} must be of type ${r[e].type} value is ${o[e]}`)}));const s=Math.random().toString(36).substring(2,10),i={id:s,owner:e};return Object.keys(r).forEach((t=>{i[t]=o[t]||null})),t[this.resourceName][s]=i,i}get(e,o){const r=t[this.resourceName][o];return r&&r.owner===e?r:null}update(e,o,r,s){const i=t[this.resourceName][o];if(!i||i.owner!==e)throw new Error(`${this.resourceName} not found or unauthorized`);return Object.keys(s).forEach((t=>{if(s[t].required&&(void 0===r[t]||null===r[t]))throw new Error(`${t} is required`)})),Object.keys(s).forEach((t=>{void 0!==r[t]&&(i[t]=r[t])})),i}remove(e,o){const r=t[this.resourceName][o];if(!r||r.owner!==e)throw new Error(`${this.resourceName} not found or unauthorized`);return delete t[this.resourceName][o],{success:!0}}search(e,o){return Object.values(t[this.resourceName]).filter((t=>t.owner===e&&Object.keys(o).every((e=>t[e]===o[e]))))}list(e){return Object.values(t[this.resourceName]).filter((t=>t.owner===e))}all(){return Object.values(t[this.resourceName])}}class o{constructor(t,e={}){this.resourceName=t,this.apiEndpoint=e.apiEndpoint,e.bp&&(this.bp=e.bp)}async apiRequest(t,e,o=null,r=null){const s={method:t,headers:{"Content-Type":"application/json"}};o&&(s.body=JSON.stringify(o)),this.bp.qtokenid&&(s.headers.Authorization=`Bearer ${this.bp.qtokenid}`),s.headers["X-Me"]=this.bp.me;let i=`${this.apiEndpoint}/${e}`;if(r){i+=`?${new URLSearchParams(r).toString()}`}const n=await fetch(i,s);if(!n.ok){console.log("API request failed:",n);try{let t=await n.json();throw console.log("API request failed:",t),new Error(`${t.error}`)}catch(t){throw console.log("error",t),new Error(t)}throw new Error(`API request failed: ${json.error}`)}return n.json()}async create(t,e){return console.log("calling create",`${this.resourceName}`,e),this.apiRequest("POST",`${this.resourceName}`,e)}async get(t,e){return this.apiRequest("GET",`${this.resourceName}/${t}/${e}`)}async update(t,e){return console.log(`calling update ${this.resourceName}/${t}`,e),this.apiRequest("PUT",`${this.resourceName}/${t}`,e)}async remove(t){return this.apiRequest("DELETE",`${this.resourceName}/${t}`)}async list(){return console.log("calling list",`${this.resourceName}`),this.apiRequest("GET",`${this.resourceName}`)}async all(){return this.apiRequest("GET",this.resourceName)}async search(t,e,o={}){return this.apiRequest("POST",`${this.resourceName}/search`,e,o)}}class r{constructor(t){this.resourceName=t,this.dbName="BuddyPondResourceDB",this.version=1,this.db=null,this.init()}async init(){return new Promise(((t,e)=>{const o=indexedDB.open(this.dbName,this.version);o.onupgradeneeded=t=>{let e=t.target.result;e.objectStoreNames.contains(this.resourceName)||e.createObjectStore(this.resourceName,{keyPath:"id"})},o.onsuccess=e=>{this.db=e.target.result,t()},o.onerror=t=>{e(`IndexedDB Error: ${t.target.errorCode}`)}}))}async _withStore(t,e){return this.db||await this.init(),new Promise(((o,r)=>{const s=this.db.transaction(this.resourceName,t).objectStore(this.resourceName),i=e(s);i.onsuccess=()=>o(i.result),i.onerror=()=>r(i.error)}))}async create(t,e,o){const r={id:Math.random().toString(36).substring(2,10),owner:t};return Object.keys(o).forEach((t=>{r[t]=e[t]||null})),await this._withStore("readwrite",(t=>t.add(r))),r}async get(t,e){const o=await this._withStore("readonly",(t=>t.get(e)));return o&&o.owner===t?o:null}async update(t,e,o,r){const s=await this.get(t,e);if(!s)throw new Error(`${this.resourceName} not found or unauthorized`);return Object.keys(r).forEach((t=>{void 0!==o[t]&&(s[t]=o[t])})),await this._withStore("readwrite",(t=>t.put(s))),s}async remove(t,e){if(!await this.get(t,e))throw new Error(`${this.resourceName} not found or unauthorized`);return await this._withStore("readwrite",(t=>t.delete(e))),{success:!0}}async list(t){return new Promise(((e,o)=>{this._withStore("readonly",(r=>{const s=r.getAll();s.onsuccess=()=>{e(s.result.filter((e=>e.owner===t)))},s.onerror=()=>o(s.error)}))}))}async all(){return new Promise(((t,e)=>{this._withStore("readonly",(o=>{const r=o.getAll();r.onsuccess=()=>t(r.result),r.onerror=()=>e(r.error)}))}))}}const s={};class i{constructor(t,e){if(this.name=t,this.schema=e.schema||{},this.providerType=e.provider||"memory",0===Object.keys(this.schema).length)throw new Error(`Schema definition is required for resource: ${t}`);s[this.name]=this.schema,this.provider=this._createProvider(this.providerType,e),this.provider.bp=e.bp}_createProvider(t,s){switch(t){case"rest":return new o(this.name,s);case"indexeddb":return new r(this.name,s);default:return new e(this.name)}}create(t,e){return this.provider.create(t,e,this.schema)}get(t,e){return this.provider.get(t,e)}update(t,e,o){return this.provider.update(t,e,o,this.schema)}remove(t,e){return this.provider.remove(t,e)}list(t){return this.provider.list(t)}search(t,e,o){return this.provider.search(t,e,o)}all(){return this.provider.all()}async apiRequest(t,e,o=null){return this.provider.apiRequest(t,e,o)}}let n=class{constructor(t={}){this.resource=t.resource,this.me=t.me||"Guest"}async get(){let t=await this.resource.list(this.me);return console.log("Portfoliorrrr",t),t}async search(t={}){console.log("portfolio search",this.me,t);let e=await this.resource.search(this.me,t);return console.log("search result",e),e.results}};n.prototype.transfer=async function(t,e){console.log("transfer asset",e);try{let t=await this.resource.apiRequest("POST",`portfolio/${e.from}/${e.symbol}/transfer`,e);return console.log("transfering coins",e,t),$(".coin-error").text(""),$("#coin-send-name").trigger("change"),$(".coin-send-message").html(`Sent ${e.amount} ${e.symbol} to ${e.to}!`),t}catch(t){console.error("Error sending coin:",t),$(".coin-error").text(t.message)}};class a{constructor(t={}){this.resource=t.resource,this.me=t.me||"Guest"}async get(){let t=await this.resource.list(this.me);return console.log("Portfoliorrrr",t),t}async search(t,e={},o={}){console.log("transactions search",t,e,o);let r=await this.resource.search(t,e,o);return console.log("search result",r),r}}function c(t){const e=$(".portfolio-entries",t);e.empty();const{assets:o,coins:r}=this.portfolioData;for(const t in o){const s=o[t];e.append(l(s,r[t]))}}function l(t,e={}){const o=p((t.price||0)*t.amount),r=p(t.price),s=t.amount.toLocaleString("en-US"),i=t.available.toLocaleString("en-US"),n=t.cost.toLocaleString("en-US",{style:"currency",currency:"USD"});return $(`\n        <tr data-symbol="${t.symbol}">\n            <td>${t.symbol}</td>\n            <td>${s}</td>\n            <td>${i}</td>\n            <td>${r}</td>\n            <td>${o}</td>\n            <td>${n}</td>\n        </tr>\n    `)}function h(t){const e=$("#coin-send-name",t);e.empty();const{coins:o,assets:r}=this.portfolioData;for(const t in r){if(console.log("Rendering coin selector for symbol:",o,t),!o[t])continue;const r=o[t],s=t===this.context?"selected":"";e.append(`<option value="${t}" ${s}>${t} - ${r.name}</option>`)}}function u(t){const{assets:e,initialInvestment:o}=this.portfolioData;let r=0;for(const t in e){const o=e[t];r+=(o.price||0)*o.amount}const s=r-o;$(".total-value",t).html(r.toLocaleString("en-US",{style:"currency",currency:"USD"})),$(".profit-loss",t).html(s.toLocaleString("en-US",{style:"currency",currency:"USD"}))}function p(t){const e=parseFloat(t);return isNaN(e)?"$0.00":"$"+e.toLocaleString("en-US",{minimumFractionDigits:2,maximumFractionDigits:8}).replace(/\.?0+$/,"")}async function d(t=1,e=8){try{$(".loading-transactions").show(),$(".transaction-entries").empty();const{results:o,pagination:r}=await this.transaction.search(this.bp.me,{sender:this.bp.me,receiver:this.bp.me},{page:t,limit:e});o.forEach((t=>{const e=$(`\n                <tr>\n                    <td>${t.sender}</td>\n                    <td>${t.receiver}</td>\n                    <td>${t.symbol}</td>\n                    <td>${t.amount.toLocaleString("en-US")}</td>\n                    <td>${p(t.value)}</td>\n                    <td>${DateFormat.format.date(t.timestamp,"E MMMM dd, hh:mm:ss a")}</td>\n                </tr>\n            `);$(".transaction-entries").append(e)})),$(".page-info").text(`Page ${r.page} of ${r.totalPages}`),$(".prev-page").prop("disabled",r.page<=1),$(".next-page").prop("disabled",r.page>=r.totalPages),$(".pagination-controls").data("current-page",r.page)}catch(t){console.error("Error fetching transactions:",t),$(".coin-error").text("Failed to load transactions")}finally{$(".loading-transactions").hide()}}class m{constructor(t,e={}){return this.bp=t,this}async init(){this.html=await this.bp.load("/v5/apps/based/portfolio/portfolio.html"),this.css=await this.bp.load("/v5/apps/based/portfolio/portfolio.css"),this.resource=new i("portfolio",{provider:"rest",apiEndpoint:buddypond.portfolioEndpoint||"/",schema:{symbol:{type:"string"},owner:{type:"string"},amount:{type:"number"},price:{type:"number"},cost:{type:"number"}},bp:this.bp}),this.coinResource=new i("coin",{provider:"rest",apiEndpoint:buddypond.coinEndpoint||"/",schema:{name:{type:"string",required:!0},symbol:{type:"string",unique:!0,required:!0},owner:{type:"string",required:!0},supply:{type:"number",required:!0}},bp:this.bp}),this.transactionResource=new i("transactions",{provider:"rest",apiEndpoint:buddypond.portfolioEndpoint||"/",schema:{id:{type:"string",key:!0},sender:{type:"string"},receiver:{type:"string"},symbol:{type:"string"},amount:{type:"number"},price:{type:"number"},value:{type:"number"},timestamp:{type:"string"}},bp:this.bp}),this.portfolio=new n({resource:this.resource,me:this.bp.me}),this.transaction=new a({resource:this.transactionResource,me:this.bp.me})}async close(){this.portfolioWindow=null}async open(t={}){this.portfolioWindow||(this.portfolioWindow=this.bp.apps.ui.windowManager.createWindow({id:"portfolio",title:"Portfolio",icon:"desktop/assets/images/icons/icon_portfolio_64.png",x:250,y:75,width:800,height:600,minWidth:200,minHeight:200,className:"portfolio-window-content",parent:$("#desktop")[0],resizable:!0,minimizable:!0,maximizable:!0,closable:!0,focusable:!0,maximized:!1,minimized:!1,onClose:()=>{this.close()}}),this.portfolioWindow.refreshTimer=setInterval((()=>{}),2e3)),this.render(this.portfolioWindow.content),"buddy"===t.type&&$("#coin-send-to").val(t.output),this.eventBind(this.portfolioWindow.content),console.log("focus the portfolioWindow"),this.portfolioWindow.focus(),this.bp.on("auth::qtoken","render-portfolio",(async t=>{this.portfolioWindow&&this.portfolioWindow.content&&(await this.render(this.portfolioWindow.content),await this.eventBind(this.portfolioWindow.content),$(".loggedOut",this.portfolioWindow.content).flexHide(),$(".loggedIn",this.portfolioWindow.content).flexShow())})),t.context&&"default"!==t.context&&this.tabs.showTab(t.context)}}m.prototype.render=async function(t){if($(t).html(this.html),"Marak"!==this.bp.me&&($("#portfolio-admin",t).remove(),$("#portfolio-admin-button",t).remove()),!this.bp.me||"Guest"===this.bp.me)return $(".loggedOut",this.portfolioWindow.content).flexShow(),void $(".loggedIn",this.portfolioWindow.content).flexHide();$(".loggedOut",this.portfolioWindow.content).flexHide(),$(".loggedIn",this.portfolioWindow.content).flexShow(),$(".loading-portfolio",this.portfolioWindow.content).show(),$(".loading-transactions",this.portfolioWindow.content).show();const[e,o]=await Promise.all([this.coinResource.list(),this.resource.search(this.bp.me,{owner:this.bp.me})]),r=Object.fromEntries(e.results.map((t=>[t.symbol,t])));this.portfolioData={coins:r,assets:Object.fromEntries(o.results.map((t=>[t.symbol,t]))),initialInvestment:0},c.call(this,t),h.call(this,t),u.call(this,t),await d.call(this,1,8),$(".prev-page",this.portfolioWindow.content).on("click",(()=>{const t=$(".pagination-controls").data("current-page");t>1&&d.call(this,t-1)})),$(".next-page",this.portfolioWindow.content).on("click",(()=>{const t=$(".pagination-controls").data("current-page");d.call(this,t+1)})),$(".loading-portfolio",this.portfolioWindow.content).hide(),$(".loading-transactions",this.portfolioWindow.content).hide(),$("#coin-send-name",t).trigger("change")},m.prototype.eventBind=function(t){this.tabs=new this.bp.apps.ui.Tabs(".tabs-container",t),this.tabs.onTab((t=>{$(".coin-error").text("")})),$(".send-coin",t).click((async()=>{let e=$("#coin-send-to").val(),o=$("#coin-send-name").val(),r=$("#coin-send-amount").val();console.log(`${e} ${o} ${r}`),this.portfolio.transfer(t,{from:bp.me,to:e,symbol:o,amount:r})})),$("#coin-send-name",t).change((async()=>{let e=$("#coin-send-name").val(),o=$("#current-balance",t);console.log("currentCoin",e),console.log("coinBalance",o);const r=await this.resource.search(this.bp.me,{owner:this.bp.me,symbol:e});console.log("current result",r);let s=r.results[0];if(!s)return console.error(this.bp.me+" No asset found for current coin "+e),void o.html("0");console.log("asset",s);let i=s.amount;o.html(`${i.toLocaleString("en-US")}`)})),$(".user-portfolio",t).on("click",(async()=>{await this.render(t),await this.eventBind(t),$("#user-portfolio").show()})),$(".trade-assets",t).on("click",(()=>{this.bp.open("orderbook")})),$(".mint-coins",t).on("click",(()=>{this.bp.open("coin",{type:"coin-mint"})})),$(".send-coins",t).on("click",(()=>{this.tabs.navigateToTab("#portfolio-transfer")})),$(".admin",t).on("click",(()=>{this.tabs.navigateToTab("#portfolio-admin")})),$(".user-transactions",t).on("click",(()=>{this.tabs.navigateToTab("#user-transactions")})),$("#portfolio-admin-button-submit",t).on("click",(async()=>{let t=$("#portfolio-admin-user").val(),e=$("#portfolio-admin-coin").val();if(t&&e){try{let o=`portfolio/${t}/${e}`;console.log("admin url",o,this.resource.apiRequest);let r=await this.resource.apiRequest("DELETE",o);console.log("res",r)}catch(t){console.log(t)}try{let e=`transactions/reset/${t}`;console.log("resetTransactionsUrl url",e,this.resource.apiRequest);let o=await this.resource.apiRequest("GET",e);console.log("resetTransactionsRes",o)}catch(t){console.log(t)}}}))},m.prototype.updateCoinRow=function(t,e){this.portfolioData.assets[t]=e;const o=l(e,this.portfolioData.coins[t]),r=$(`.portfolio-entries tr[data-symbol="${t}"]`);r.length?r.replaceWith(o):$(".portfolio-entries").append(o),u.call(this,this.portfolioWindow.content)};export{m as default};
//# sourceMappingURL=portfolio.js.map
