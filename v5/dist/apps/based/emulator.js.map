{"version":3,"file":"emulator.js","sources":["../../../apps/based/emulator/emulator.js"],"sourcesContent":["export default class Emulator {\n    constructor(bp, options = {}) {\n        this.bp = bp;\n        this.emulator = null;\n        this.romData = null;\n        // this.gameUrl = '';\n        // this.gameIsRunning = false;\n        this.emulatorWindows = {}; // Track open windows per context\n\n        this.emulatorIcons = {\n            nes: '/desktop/assets/images/icons/icon_nes_64.png',\n            sega: '/desktop/assets/images/icons/icon_sega_64.png',\n            snes: '/desktop/assets/images/icons/icon_snes_64.png',\n            atari2600: '/desktop/assets/images/icons/icon_atari2600_64.png',\n            n64: '/desktop/assets/images/icons/icon_n64_64.png',\n        };\n\n        return this;\n    }\n\n    async open({ context = 'nes' }) {\n\n\n        if (!this.emulatorWindows[context]) {\n            this.emulatorWindows[context] = [];\n        }\n\n        // Find an unused window slot or create a new one\n        const windowIndex = this.emulatorWindows[context].length;\n        const windowId = `emulators-${context}-${windowIndex + 1}`;\n\n        // Prevent duplicates: check if a window with this ID exists and is still open\n        if (this.emulatorWindows[context].some(w => w.id === windowId)) {\n            console.log(`Emulator window already exists: ${windowId}`);\n            return;\n        }\n\n        const emulatorWindow = this.createEmulatorWindow(context, windowId);\n        this.emulatorWindows[context].push({ id: windowId, win: emulatorWindow });\n\n\n\n\n        const content = emulatorWindow.content;\n        const logo = document.createElement('img');\n        logo.id = `emulator-logo-${context}`;\n        logo.src = this.emulatorIcons[context] || this.emulatorIcons.nes;\n        logo.style.position = 'absolute';\n        logo.style.top = '50%';\n        logo.style.left = '50%';\n        logo.style.transform = 'translate(-50%, -50%)';\n        logo.style.zIndex = '1000'; // Ensure it floats above the iframe\n        // logo.style.display = 'none'; // Initially hidden until emulator is ready\n        logo.style.opacity = '0.8'; // Optional: slight transparency\n        logo.style.maxWidth = '50%'; // Adjust size as needed\n        logo.style.maxHeight = '50%';\n\n        // on click logo trigger randomGameButton click\n        logo.onclick = () => {\n            if (emulatorWindow.randomGameButton) {\n                emulatorWindow.randomGameButton.click();\n                logo.style.display = 'none'; // Hide after first click\n            } else {\n                console.warn('Random game button not found');\n            }\n        };\n\n        logo.style.cursor = 'pointer'; // Change cursor to pointer for better UX\n        console.log('Adding logo to emulator window:', logo);\n        emulatorWindow.logo = logo; // Store reference to logo for later use\n        // content.parentNode.style.position = 'relative'; // Ensure parent can position the logo\n        content.parentNode.appendChild(emulatorWindow.logo);\n\n        // Load game list based on context\n        const games = await this.bp.load(`${cdnUrl}/${context}.json`);\n        this.setupGameSelector(emulatorWindow, games, context);\n        this.setupSearchInput(emulatorWindow, games, context);\n        this.setupRandomGameButton(emulatorWindow, games, context);\n    }\n\n    createEmulatorWindow(context, windowId) {\n        const emulatorTitles = {\n            nes: 'NES',\n            sega: 'Sega Genesis',\n            n64: 'Nintendo 64',\n            snes: 'Super Nintendo',\n            atari2600: 'Atari 2600'\n        };\n\n        return this.bp.apps.ui.windowManager.createWindow({\n            id: windowId, // Use passed-in ID\n            app: 'emulator', // Use context to differentiate apps\n            title: emulatorTitles[context] || 'Emulator',\n            // label: emulatorTitles[context] || 'Emulator',\n            x: 50,\n            y: 100,\n            width: 600,\n            height: 500,\n            minWidth: 600,\n            minHeight: 500,\n            parent: $('#desktop')[0],\n            iframeContent: '/v5/apps/based/emulator/emulator-js/index.html',\n            icon: this.emulatorIcons[context] || this.emulatorIcons.nes,\n            resizable: true,\n            minimizable: true,\n            maximizable: true,\n            closable: true,\n            focusable: true,\n            maximized: false,\n            minimized: false,\n            onClose: () => {\n                // on close we need to set this.emulatorWindows context to null\n                this.emulatorWindows[context] = this.emulatorWindows[context]\n                    .filter(w => w.id !== windowId);\n            },\n            onMessage: message => {\n                console.log('Emulator Message:', message);\n                if (message.event === 'ready') {\n                    console.log('Emulator is ready');\n                    //this.logo.style.display = 'block'; // Show logo when emulator is ready\n                }\n            },\n            onLoad: win => {\n                if (win.gameUrl) {\n                    win.sendMessage({\n                        event: 'startGame',\n                        message: 'Hello from Emulator',\n                        gameSystem: context, // Dynamically assign game system\n                        gameUrl: win.gameUrl\n                    });\n                    win.gameIsRunning = true;\n                    win.logo.style.display = 'none'; // Show logo when emulator is ready\n\n                }\n            }\n        });\n    }\n\n    setupGameSelector(emulatorWindow, games, context) {\n        const content = emulatorWindow.content;\n        const gameSelector = document.createElement('div');\n        gameSelector.classList.add('menu-bars');\n        gameSelector.innerHTML = '<select id=\"loadROM\">Load ROM</select>';\n        content.parentNode.insertBefore(gameSelector, content);\n\n        games.forEach(game => {\n            if (context === 'sega') {\n                $('#loadROM').append(`<option value=\"${cdnUrl}/${context}/${game}\">${game}</option>`);\n\n            } else {\n                // nes legacy /roms/ subfolder\n                $('#loadROM').append(`<option value=\"${cdnUrl}/${context}/roms/${game}\">${game}</option>`);\n\n            }\n        });\n\n        $(gameSelector).hide();\n        $('#loadROM').on('change', e => {\n            emulatorWindow.sendMessage({\n                event: 'unloadGame',\n                gameSystem: context,\n                gameUrl: e.target.value\n            });\n            emulatorWindow.gameUrl = e.target.value;\n            emulatorWindow.gameIsRunning = false;\n        });\n    }\n\n    setupSearchInput(emulatorWindow, games, context) {\n        const content = emulatorWindow.content;\n        const searchInput = document.createElement('input');\n        searchInput.type = 'text';\n        searchInput.id = 'searchInput';\n        searchInput.placeholder = `Search for a ${context.toUpperCase()} game`;\n        searchInput.style = 'font-size: 2.5em; background-color: black; color: white;';\n        content.parentNode.insertBefore(searchInput, content);\n\n        $(searchInput).autocomplete({\n            source: games,\n            select: (e, ui) => this.handleGameSelection(ui.item.value, emulatorWindow, context)\n        }).data('ui-autocomplete')._renderItem = (ul, item) => {\n            const prettyLabel = item.label.replace(/_/g, ' ').replace(/\\.(nes|zip|smd|bin)/, '');\n            return $(\"<li>\")\n                .attr(\"data-value\", item.value)\n                .append($(\"<div>\").text(prettyLabel))\n                .appendTo(ul);\n        };\n    }\n\n    setupRandomGameButton(emulatorWindow, games, context) {\n        const content = emulatorWindow.content;\n        const randomGameButton = document.createElement('button');\n        randomGameButton.innerHTML = 'Random Game';\n        randomGameButton.classList.add('button');\n        randomGameButton.style.width = '100%';\n        randomGameButton.onclick = () => this.handleRandomGame(games, emulatorWindow, context);\n\n        emulatorWindow.randomGameButton = randomGameButton; // Store reference for later use\n\n        content.parentNode.insertBefore(randomGameButton, content);\n    }\n\n    handleGameSelection(gameName, emulatorWindow, context) {\n        let gameUrl = `${cdnUrl}/${context}/roms/${gameName}`;\n        if (context === 'sega') {\n            gameUrl = `${cdnUrl}/${context}/${gameName}`;\n        }\n        emulatorWindow.gameUrl = gameUrl;\n        emulatorWindow.gameIsRunning = false;\n\n        emulatorWindow.sendMessage({\n            event: 'unloadGame',\n            gameSystem: context,\n            gameUrl: gameUrl\n        });\n        // emulatorWindow.randomGameButton.style.display = 'none'; // Hide random game button when a game is selected\n        emulatorWindow.logo.style.display = 'block'; // Show logo while loading game\n        setTimeout(() => {\n            emulatorWindow.sendMessage({\n                event: 'startGame',\n                message: 'Hello from Emulator',\n                gameSystem: context,\n                gameUrl: emulatorWindow.gameUrl\n            });\n            emulatorWindow.gameIsRunning = true;\n\n        }, 200);\n\n        // this.logo.style.display = 'none'; // Show logo when emulator is ready\n\n    }\n\n    handleRandomGame(games, emulatorWindow, context) {\n        const randomGame = games[Math.floor(Math.random() * games.length)];\n        emulatorWindow.logo.style.display = 'none'; // Show logo while loading game\n        this.handleGameSelection(randomGame, emulatorWindow, context);\n    }\n\n    async loadROM(url) {\n        try {\n            const response = await fetch(url);\n            this.romData = new Uint8Array(await response.arrayBuffer());\n            this.bp.log('ROM loaded successfully');\n        } catch (error) {\n            this.bp.log('Error loading ROM:', error);\n        }\n    }\n\n    startEmulator() {\n        if (this.romData) {\n            this.emulator.loadROM(this.romData);\n            this.emulator.start();\n            this.bp.log('Emulator started');\n        } else {\n            this.bp.log('No ROM loaded');\n        }\n    }\n\n    stopEmulator() {\n        if (this.emulator) {\n            this.emulator.stop();\n            this.bp.log('Emulator stopped');\n        }\n    }\n}\n\nlet cdnBase64 = 'aHR0cDovL2tyYW1lcmljYS1pbmR1c3RyaWVzLmItY2RuLm5ldA==';\ncdnBase64 = 'aHR0cHM6Ly9rcmFtZXJpY2EtaW5kdXN0cmllcy5iLWNkbi5uZXQ=';\nconst cdnUrl = atob(cdnBase64);\n"],"names":["Emulator","constructor","bp","options","this","emulator","romData","emulatorWindows","emulatorIcons","nes","sega","snes","atari2600","n64","open","context","windowId","length","some","w","id","console","log","emulatorWindow","createEmulatorWindow","push","win","content","logo","document","createElement","src","style","position","top","left","transform","zIndex","opacity","maxWidth","maxHeight","onclick","randomGameButton","click","display","warn","cursor","parentNode","appendChild","games","load","cdnUrl","setupGameSelector","setupSearchInput","setupRandomGameButton","apps","ui","windowManager","createWindow","app","title","x","y","width","height","minWidth","minHeight","parent","$","iframeContent","icon","resizable","minimizable","maximizable","closable","focusable","maximized","minimized","onClose","filter","onMessage","message","event","onLoad","gameUrl","sendMessage","gameSystem","gameIsRunning","gameSelector","classList","add","innerHTML","insertBefore","forEach","game","append","hide","on","e","target","value","searchInput","type","placeholder","toUpperCase","autocomplete","source","select","handleGameSelection","item","data","_renderItem","ul","prettyLabel","label","replace","attr","text","appendTo","handleRandomGame","gameName","setTimeout","randomGame","Math","floor","random","loadROM","url","response","fetch","Uint8Array","arrayBuffer","error","startEmulator","start","stopEmulator","stop","cdnBase64","atob"],"mappings":"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"}