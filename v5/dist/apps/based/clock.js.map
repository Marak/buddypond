{"version":3,"file":"clock.js","sources":["../../../apps/based/clock/clock.js"],"sourcesContent":["export default class Clock {\n    constructor(bp, options = {}) {\n        options.format = options.format || 'mm-dd-yyyy';\n        options.updateInterval = options.updateInterval || 60000;\n\n        if (typeof options.selector !== 'string') {\n            options.selector = '#clock'; // Default selector\n        }\n        this.selector = options.selector;\n        this.options = options;\n        this.init();\n    }\n\n    async init() {\n        this.updateTime();\n    }\n\n    updateTime() {\n        const element = $(this.selector);\n        if (!element.length) {\n            setTimeout(() => this.updateTime(), 200);\n            return; // Element not found\n        }\n        const dateObj = new Date();\n        let hour = dateObj.getHours();\n        let minute = dateObj.getMinutes();\n        const day = dateObj.getDate();\n        const year = dateObj.getFullYear();\n        const weekdayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n        const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n        const weekday = weekdayNames[dateObj.getDay()];\n        const month = monthNames[dateObj.getMonth()];\n\n        // Leading zero for minutes if needed\n        if (minute < 10) {\n            minute = '0' + minute;\n        }\n\n        let clockTime, clockDate;\n\n        if (this.options.format === 'mm-dd-yyyy') {\n            let suffix = 'AM';\n            if (hour >= 12) {\n                suffix = 'PM';\n            }\n            if (hour > 12) {\n                hour -= 12;\n            } else if (hour === 0) {\n                hour = 12; // Convert \"0\" hour to \"12\" for 12AM\n            }\n\n            clockTime = `${weekday} ${hour}:${minute} ${suffix}`;\n            clockDate = `${month} ${day}, ${year}`;\n        } else {\n            // Leading zero for hour if needed (24-hour format)\n            if (hour < 10) {\n                hour = '0' + hour;\n            }\n\n            clockTime = `${weekday} ${hour}:${minute}`;\n            clockDate = `${day} ${month}, ${year}`;\n        }\n        // Update HTML content and title\n        element.html(clockTime).attr('title', clockDate);\n\n        // Schedule the next update\n        setTimeout(() => this.updateTime(), this.options.updateInterval);\n    }\n}\n"],"names":["Clock","constructor","bp","options","format","updateInterval","selector","this","init","updateTime","element","$","length","setTimeout","dateObj","Date","hour","getHours","minute","getMinutes","day","getDate","year","getFullYear","weekday","getDay","month","getMonth","clockTime","clockDate","suffix","html","attr"],"mappings":"AAAe,MAAMA,EACjB,WAAAC,CAAYC,EAAIC,EAAU,IACtBA,EAAQC,OAASD,EAAQC,QAAU,aACnCD,EAAQE,eAAiBF,EAAQE,gBAAkB,IAEnB,iBAArBF,EAAQG,WACfH,EAAQG,SAAW,UAEvBC,KAAKD,SAAWH,EAAQG,SACxBC,KAAKJ,QAAUA,EACfI,KAAKC,MACb,CAEI,UAAMA,GACFD,KAAKE,YACb,CAEI,UAAAA,GACI,MAAMC,EAAUC,EAAEJ,KAAKD,UACvB,IAAKI,EAAQE,OAET,YADAC,YAAW,IAAMN,KAAKE,cAAc,KAGxC,MAAMK,EAAU,IAAIC,KACpB,IAAIC,EAAOF,EAAQG,WACfC,EAASJ,EAAQK,aACrB,MAAMC,EAAMN,EAAQO,UACdC,EAAOR,EAAQS,cAIfC,EAHe,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAG3DV,EAAQW,UAC/BC,EAHa,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAGzGZ,EAAQa,YAOjC,IAAIC,EAAWC,EAEf,GANIX,EAAS,KACTA,EAAS,IAAMA,GAKS,eAAxBX,KAAKJ,QAAQC,OAAyB,CACtC,IAAI0B,EAAS,KACTd,GAAQ,KACRc,EAAS,MAETd,EAAO,GACPA,GAAQ,GACQ,IAATA,IACPA,EAAO,IAGXY,EAAY,GAAGJ,KAAWR,KAAQE,KAAUY,IAC5CD,EAAY,GAAGH,KAASN,MAAQE,GAC5C,MAEgBN,EAAO,KACPA,EAAO,IAAMA,GAGjBY,EAAY,GAAGJ,KAAWR,KAAQE,IAClCW,EAAY,GAAGT,KAAOM,MAAUJ,IAGpCZ,EAAQqB,KAAKH,GAAWI,KAAK,QAASH,GAGtChB,YAAW,IAAMN,KAAKE,cAAcF,KAAKJ,QAAQE,eACzD"}