{"version":3,"file":"eth.js","sources":["../../../apps/based/eth/eth.js"],"sourcesContent":["// import { v4 } from 'uuid';\n\nconst AYYO_COLOR_KEYS_MINT_CONTRACT = '0xF1648f8547De4d7BF563A4230bD3B058F367D15b';\nconst PRICE_PER_TOKEN = 0.5;\nlet session = {};\nconst eth = {};\nconst erc20Tokens = {\n  'AYYO': {\n    symbol: 'AYYO',\n    address: '0xb2e05a88559425d5668686c81ab00dd35f1b7676',\n    decimals: 18\n  },\n  'USDC': {\n    symbol: 'USDC',\n    address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n    decimals: 6\n\n  }\n}\n\neth.miniBip = [\"crouch\", \"slogan\", \"embody\", \"tiger\", \"pistol\", \"raccoon\", \"enhance\", \"field\", \"daring\", \"air\", \"spatial\", \"ecology\", \"verify\", \"rural\", \"donor\", \"drastic\", \"scare\", \"romance\", \"evoke\", \"choice\", \"enact\", \"tortoise\", \"hover\", \"circle\", \"gospel\", \"mentor\", \"absorb\", \"viable\", \"youth\", \"isolate\", \"cactus\", \"employ\", \"banana\", \"brisk\", \"gravity\", \"portion\", \"dilemma\", \"scheme\", \"deny\", \"diamond\", \"fringe\", \"practice\", \"anchor\", \"walnut\", \"south\", \"glance\", \"diary\", \"noble\", \"adapt\", \"prosper\", \"shrimp\", \"exact\", \"exchange\", \"surge\", \"butter\", \"absent\", \"afford\", \"lounge\", \"canyon\", \"unfold\", \"matrix\", \"frequent\", \"shove\", \"rhythm\"];\n\neth.verifyIdentity = async function verifyIdentity() {\n  if (typeof window.ethereum === 'undefined') {\n    alert('Please install MetaMask to use this feature');\n    return false;\n  }\n\n  let web3 = new window.Web3(window.ethereum);\n  let accounts;\n  let gotSignature = false;\n  let walletAddress;\n  let signedMessage;\n\n  try {\n    accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n  } catch (error) {\n    if (error.code === -32002) {\n      throw new Error('Metamask needs unlock');\n      //alert('Please check that MetaMask is open and unlocked.');\n    }\n    console.error('User rejected MetaMask login:', error);\n    return false;\n  }\n\n  if (accounts.length === 0) {\n    alert('Please login to MetaMask to continue');\n    return false;\n  }\n\n  walletAddress = accounts[0];\n\n  // TODO: nonce needs to come from the server\n\n  const nonce = 'Signing this message will verify your Identity.\\nThe following is a random nonce: ' + randomArrayItems(eth.miniBip, 5).join('-') + '\\nThank you for playing AYYO!';\n\n  try {\n    signedMessage = await web3.eth.personal.sign(nonce, walletAddress);\n    gotSignature = true;\n  } catch (err) {\n    console.error('user rejected signature request or signature request error', err);\n    return false;\n  }\n\n  if (gotSignature) {\n    localStorage.setItem('ayyo-dev-auth', 'metamask');\n    localStorage.setItem('ayyo-dev-address', walletAddress);\n\n    // send wallet address to etherspace so we can associate player to wallet\n    // etherspace.identifiedWallet(walletAddress, nonce);\n\n  }\n\n  return gotSignature;\n}\n\neth.mintAyyoColorKey = async function mintAyyoColorKey(amount) {\n  if (typeof window.ethereum === 'undefined') {\n    alert('Please install MetaMask to use this feature');\n    return false;\n  }\n\n  if (typeof amount !== 'number') {\n    amount = 1;\n  }\n\n  let accounts = await window.ethereum.request({ method: 'eth_accounts' });\n\n  if (accounts.length === 0) {\n    let identityVerified = await eth.verifyIdentity();\n    if (!identityVerified) return false;\n  }\n\n  accounts = await window.ethereum.request({ method: 'eth_accounts' });\n  let walletAddress = accounts[0];\n  let web3 = new window.Web3(window.ethereum);\n\n  let contractAddress = AYYO_COLOR_KEYS_MINT_CONTRACT;\n  let contractABI = [\n    {\n      \"constant\": false,\n      \"inputs\": [\n        {\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"mintAyyoColorKey\",\n      \"outputs\": [\n        {\n          \"name\": \"\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"payable\": true,\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    }\n  ];\n  console.log('sending eth to contract', walletAddress, contractAddress, amount)\n  let ethAmount = web3.utils.toWei((PRICE_PER_TOKEN * amount).toString(), 'ether');\n  let contract = new web3.eth.Contract(contractABI, contractAddress);\n\n  /*\n  const method = contract.methods.mintAyyoColorKey(amount);\n\n  const gasEstimate = await method.estimateGas({ from: walletAddress, value: ethAmount });\n\n  const data = method.encodeABI();\n\n  console.log('gasEstimate', gasEstimate, data);\n\n\n  const transactionParameters = {\n    gas: gasEstimate,\n    from: walletAddress,\n    to: contractAddress,\n    data: data,\n    value: ethAmount,\n  };\n\n  */\n  let tokenIds;\n  let hudScene = game.scene.getScene('HUD');\n\n  try {\n\n    //let result = await web3.eth.sendTransaction(transactionParameters);\n    let result = await contract.methods.mintAyyoColorKey(amount).send({ from: walletAddress, value: ethAmount });\n    console.log('rrrr', result)\n\n    console.log('mintAyyoColorKey success', tokenIds);\n    hudScene.mintPanel.mintSuccess();\n  } catch (err) {\n    console.error('mintAyyoColorKey error', err);\n    hudScene.mintPanel.mintFailed();\n    return false;\n  }\n\n  return tokenIds;\n}\n\n\nwindow.mint = async function mint(count) {\n  if (typeof window.ethereum !== 'undefined') {\n\n    // check to see if eth already authorized\n    /*\n    let walletVerified = await eth.verifyIdentity();\n    //let user = await eth.verifyIdentity();\n    console.log('walletVerified', walletVerified)\n    if (walletVerified) {\n      localStorage.setItem('ayyo-dev-auth', 'metamask');\n    } else {\n      alert('MetaMask signed messaged request failed.\\n\\nPlease try again or contact AYYO support.');\n    }\n    */\n\n    await eth.mintAyyoColorKey(count);\n  } else {\n    let hudScene = game.scene.getScene('HUD');\n    hudScene.mintPanel.metaMaskMissing();\n  }\n}\n\neth.redeemPuzzle = async function redeemPuzzle(secret) {\n\n  if (typeof window.ethereum === 'undefined') {\n    alert('Please install MetaMask to use this feature');\n    return false;\n  }\n\n  let accounts = await window.ethereum.request({ method: 'eth_accounts' });\n\n  if (accounts.length === 0) {\n    let identityVerified = await eth.verifyIdentity();\n    if (!identityVerified) return false;\n  }\n\n  accounts = await window.ethereum.request({ method: 'eth_accounts' });\n  let walletAddress = accounts[0];\n\n  let owner = walletAddress;\n\n  const web3 = new window.Web3(window.ethereum);\n\n  // Set the address and ABI of your smart contract\n  const contractAddress = AYYO_COLOR_KEYS_MINT_CONTRACT;\n  const contractABI = [\n    {\n      \"constant\": false,\n      \"inputs\": [\n        {\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"name\": \"secret\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"redeemPuzzle\",\n      \"outputs\": [],\n      \"payable\": false,\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ];\n\n  // Instantiate the contract object\n  const contract = new web3.eth.Contract(contractABI, contractAddress);\n  console.log('owner', owner, 'secret', secret);\n\n  // Call the redeemPuzzle function of your smart contract\n  let result;\n  try {\n    result = await contract.methods.redeemPuzzle(owner, secret).send({ from: walletAddress, gas: 6000000 });\n    console.log('redeemPuzzle success');\n  } catch (err) {\n    console.error('redeemPuzzle error', err);\n    throw err;\n  }\n\n  return result;\n\n\n}\n\nwindow.redeem = eth.redeemPuzzle;\n\n\neth.getOwnedTokens = async function getOwnedTokens() {\n\n  if (typeof window.ethereum === 'undefined') {\n    //alert('Please install MetaMask to use this feature');\n    return false;\n  }\n\n  let accounts = await window.ethereum.request({ method: 'eth_accounts' });\n\n\n  console.log('getOwnedTokens found accounts ', accounts);\n  if (accounts.length === 0) {\n    let identityVerified = await eth.verifyIdentity();\n    if (!identityVerified) return false;\n  }\n\n  accounts = await window.ethereum.request({ method: 'eth_accounts' });\n\n  const walletAddress = accounts[0];\n\n\n  console.log('what is my walletAddress', walletAddress)\n\n  const web3 = new window.Web3(window.ethereum);\n\n  // Set the address and ABI of your ERC721 contract\n  const contractAddress = AYYO_COLOR_KEYS_MINT_CONTRACT;\n  const contractABI = [\n    {\n      \"constant\": true,\n      \"inputs\": [\n        {\n          \"name\": \"_owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"payable\": false,\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"constant\": true,\n      \"inputs\": [\n        {\n          \"name\": \"_owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"name\": \"_index\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"tokenOfOwnerByIndex\",\n      \"outputs\": [\n        {\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"payable\": false,\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ];\n\n  // Instantiate the contract object\n  const contract = new web3.eth.Contract(contractABI, contractAddress);\n\n  console.log('contract', contract)\n\n  // Get the balance of tokens owned by the user\n  const balance = await contract.methods.balanceOf(walletAddress).call();\n\n  console.log(\"my balance\", balance)\n\n  // Retrieve the token IDs owned by the user\n  const tokenIds = [];\n  for (let i = 0; i < balance; i++) {\n    const tokenId = await contract.methods.tokenOfOwnerByIndex(walletAddress, i).call();\n    tokenIds.push(tokenId);\n  }\n\n  console.log('current have', tokenIds)\n  return tokenIds;\n}\n\n\nwindow.getOwnedTokens = eth.getOwnedTokens;\n\n\neth.getMintCount = async function getMintCount() {\n\n  const web3 = new window.Web3(window.ethereum);\n\n  // Set the address and ABI of your ERC721 contract\n  const contractAddress = AYYO_COLOR_KEYS_MINT_CONTRACT;\n  const contractABI = [\n    {\n      \"constant\": true,\n      \"inputs\": [],\n      \"name\": \"getCurrentMintIndex\",\n      \"outputs\": [\n        {\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"payable\": false,\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n    \n  ];\n\n  // Instantiate the contract object\n  const contract = new web3.eth.Contract(contractABI, contractAddress);\n\n  const mintIndex = await contract.methods.getCurrentMintIndex().call();\n  console.log('mintIndex', mintIndex);\n  return mintIndex;\n};\n\nwindow.getMintCount = eth.getMintCount;\n\neth.getRedeemedPieces = async function getRedeemedPieces() {\n\n\n  const web3 = new window.Web3(window.ethereum);\n\n  // Set the address and ABI of your ERC721 contract\n  const contractAddress = AYYO_COLOR_KEYS_MINT_CONTRACT;\n  const contractABI = [\n    {\n      \"constant\": true,\n      \"inputs\": [],\n      \"name\": \"getRedeemedTokens\",\n      \"outputs\": [\n        {\n          \"name\": \"\",\n          \"type\": \"uint256[]\"\n        }\n      ],\n      \"payable\": false,\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n    \n    \n  ];\n\n  // Instantiate the contract object\n  const contract = new web3.eth.Contract(contractABI, contractAddress);\n\n\n  const redeemedTokens = await contract.methods.getRedeemedTokens().call();\n  console.log('redeemedTokens', redeemedTokens);\n  return redeemedTokens;\n};\n\nwindow.getRedeemedPieces = eth.getRedeemedPieces;\n\neth.getEthBalance = async function getEthBalance() {\n  let web3 = new window.Web3(window.ethereum);\n  const accounts = await window.ethereum.request({ method: 'eth_accounts' });\n  const balance = await window.ethereum.request({ method: 'eth_getBalance', params: [accounts[0], 'latest'] });\n  return web3.utils.fromWei(balance, 'ether');\n}\n\neth.checkERC20TokenBalance = async function checkERC20TokenBalance(symbol) {\n  let web3 = new window.Web3(window.ethereum);\n  let token = erc20Tokens[symbol];\n  const accounts = await window.ethereum.request({ method: 'eth_accounts' });\n  // const balance = await window.ethereum.request({ method: 'eth_getBalance', params: [accounts[0], 'latest'] });\n  //console.log('aaa', accounts)\n  if (!accounts || accounts.length === 0) {\n    //alert('Could not get accounts. Needs to show retry auth button.');\n    return null;\n  }\n\n\n  let walletAddress = accounts[0];\n  web3 = new window.Web3(window.ethereum);\n\n  // The minimum ABI to get ERC20 Token balance\n  let minABI = [\n    // balanceOf\n    {\n      \"constant\": true,\n      \"inputs\": [{ \"name\": \"_owner\", \"type\": \"address\" }],\n      \"name\": \"balanceOf\",\n      \"outputs\": [{ \"name\": \"balance\", \"type\": \"uint256\" }],\n      \"type\": \"function\"\n    },\n    // decimals\n    {\n      \"constant\": true,\n      \"inputs\": [],\n      \"name\": \"decimals\",\n      \"outputs\": [{ \"name\": \"\", \"type\": \"uint8\" }],\n      \"type\": \"function\"\n    }\n  ];\n\n  console.log('metamask accounts', accounts);\n  console.log(`checking erc20TokenBalance for ${token.symbol}`)\n  const contract = new web3.eth.Contract(minABI, token.address);\n\n  let erc20TokenBalance = await contract.methods.balanceOf(walletAddress).call();\n  console.log('erc20TokenBalance', erc20TokenBalance);\n\n  const format = erc20TokenBalance / (10 ** token.decimals);\n  console.log('erc20TokenBalance formatted', format);\n\n  return {\n    symbol: token.symbol,\n    balance: erc20TokenBalance,\n    formatted: format\n  };\n\n}\n\nconst sendERC20Tokens = async function sendERC20Tokens(symbol, amount) {\n  console.log('session', session)\n  if (session.user) {\n    alert('signature verification is required to send tokens')\n    await verifyIdentity();\n    return;\n  }\n\n  const accounts = await window.ethereum.request({ method: 'eth_accounts' });\n\n  let walletAddress = accounts[0];\n  let web3 = new window.Web3(window.ethereum);\n\n  let token = erc20Tokens[symbol];\n  console.log('sending amount', symbol, amount)\n  // TODO: update with config, this is hard-coded wallet\n  let toAddress = \"\";\n\n  let minABI_transfer = [\n    {\n      \"constant\": false,\n      \"inputs\": [\n        {\n          \"name\": \"_to\",\n          \"type\": \"address\"\n        },\n        {\n          \"name\": \"_value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transfer\",\n      \"outputs\": [\n        {\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"type\": \"function\"\n    }\n  ];\n\n  // get ERC20 Token contract instance\n  let contract_transfer = new web3.eth.Contract(minABI_transfer, token.address);\n\n  // calculate ERC20 token amount\n  let value = web3.utils.toBN(amount * (10 ** token.decimals));\n\n  // call transfer function\n  let transferResult;\n  try {\n    transferResult = await contract_transfer.methods.transfer(toAddress, value).send({ from: walletAddress });\n    console.log('transferResult', transferResult)\n  } catch (err) {\n    alert(err.message);\n    console.log('erc20 token transfer error', err)\n  }\n  if (transferResult) {\n    // assume transfer success and will eventually confirm\n    alert('deposit is now processing...');\n    // let result = await api.submitUserPaymentTx({ symbol: symbol, amount: amount, txhash: '1234', user_id: eth.session.user_id });\n  }\n}\n\n\n/*\nRemark: We could also accept ETH directly, TODO accept ETH or USDC for BuddyBux\n// the way this works is that we have a single deposit address\n// and each time a user makes a deposit via the web client, we know the address that its coming from\n// this means the transaction is secure and verified\n// it also means its possible to buy buddybux for a user who is not us ( if we have their public wallet address )\n// this is fine and secure because the transaction is signed by the user\n// i think we need to run a cron that will check transations for deposite\n// and then make verified api call from cron to buddybux server to credit the user\n// is important that buddybux.js is separate meme coin namespace in order to only allow purchasing and selling of buddybux to real-world currency\n// this makes buddybux the singlular currency for the app\n// there will be no way to convert buddybux to other currencies, this is done to prevent money laundering\n// means we have \"disney dollars\" that can only be used in the app\n// also enables gift giving outside app, etc\nRemark: ETH transfers are not ERC20 Token transfer, they require separate code paths\nweb3.eth.sendTransaction({\n  from: fromAccount,\n  to: toAccount,\n  value: value\n}).then(function (receipt) {\n    web3.eth.getBalance('' + toAccount + '').then(function (result) {\n        console.log(\" Result in getbalance function\", result);\n    }).catch(function (error) {\n        console.log(\"Error\", error);\n    });\n}).catch(function (error) { console.log(\"Error is:-\", error); })\n*/\n\nfunction randomArrayItems(items, count) {\n  // does not allow duplicates\n  let result = [];\n  let itemsCopy = items.slice();\n  for (let i = 0; i < count; i++) {\n    let index = Math.floor(Math.random() * itemsCopy.length);\n    result.push(itemsCopy.splice(index, 1)[0]);\n  }\n  return result;\n}\n\nif (typeof ethereum !== 'undefined') {\n  // listen for accounts changed and reload entire page\n  // this is done to ensure that state of HUD and login is fully updated\n  // it would be possible to update in place without full page reload\n\n  if (typeof ethereum.on === 'function') {\n    ethereum.on('accountsChanged', function (accounts) {\n      window.location.reload();\n    });\n  }\n\n  if (typeof window.ethereum.request === 'function') {\n    window.ethereum.request({\n      method: 'wallet_switchEthereumChain',\n      params: [{ chainId: '0x1' }], // chainId must be in hexadecimal numbers\n    });\n  }\n\n} else {\n  // console.log('MetaMask is not installed!');\n}\n\n\nexport default eth;"],"names":["AYYO_COLOR_KEYS_MINT_CONTRACT","eth","erc20Tokens","AYYO","symbol","address","decimals","USDC","miniBip","verifyIdentity","async","window","ethereum","alert","accounts","walletAddress","signedMessage","web3","Web3","gotSignature","request","method","error","code","Error","console","length","nonce","items","count","result","itemsCopy","slice","i","index","Math","floor","random","push","splice","randomArrayItems","join","personal","sign","err","localStorage","setItem","mintAyyoColorKey","amount","contractAddress","log","tokenIds","ethAmount","utils","toWei","toString","contract","Contract","constant","inputs","name","type","outputs","payable","stateMutability","hudScene","game","scene","getScene","methods","send","from","value","mintPanel","mintSuccess","mintFailed","mint","metaMaskMissing","redeemPuzzle","secret","owner","gas","redeem","getOwnedTokens","balance","balanceOf","call","tokenId","tokenOfOwnerByIndex","getMintCount","mintIndex","getCurrentMintIndex","getRedeemedPieces","redeemedTokens","getRedeemedTokens","getEthBalance","params","fromWei","checkERC20TokenBalance","token","erc20TokenBalance","format","formatted","on","location","reload","chainId"],"mappings":"AAEA,MAAMA,EAAgC,6CAGhCC,EAAM,CAAA,EACNC,EAAc,CAClBC,KAAQ,CACNC,OAAQ,OACRC,QAAS,6CACTC,SAAU,IAEZC,KAAQ,CACNH,OAAQ,OACRC,QAAS,6CACTC,SAAU,IAKdL,EAAIO,QAAU,CAAC,SAAU,SAAU,SAAU,QAAS,SAAU,UAAW,UAAW,QAAS,SAAU,MAAO,UAAW,UAAW,SAAU,QAAS,QAAS,UAAW,QAAS,UAAW,QAAS,SAAU,QAAS,WAAY,QAAS,SAAU,SAAU,SAAU,SAAU,SAAU,QAAS,UAAW,SAAU,SAAU,SAAU,QAAS,UAAW,UAAW,UAAW,SAAU,OAAQ,UAAW,SAAU,WAAY,SAAU,SAAU,QAAS,SAAU,QAAS,QAAS,QAAS,UAAW,SAAU,QAAS,WAAY,QAAS,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,WAAY,QAAS,UAEnoBP,EAAIQ,eAAiBC,iBACnB,QAA+B,IAApBC,OAAOC,SAEhB,OADAC,MAAM,gDACC,EAGT,IACIC,EAEAC,EACAC,EAJAC,EAAO,IAAIN,OAAOO,KAAKP,OAAOC,UAE9BO,GAAe,EAInB,IACEL,QAAiBH,OAAOC,SAASQ,QAAQ,CAAEC,OAAQ,uBACpD,CAAC,MAAOC,GACP,YAAIA,EAAMC,KACR,MAAM,IAAIC,MAAM,yBAIlB,OADAC,QAAQH,MAAM,gCAAiCA,IACxC,CACX,CAEE,GAAwB,IAApBR,EAASY,OAEX,OADAb,MAAM,yCACC,EAGTE,EAAgBD,EAAS,GAIzB,MAAMa,EAAQ,qFAsgBhB,SAA0BC,EAAOC,GAE/B,IAAIC,EAAS,GACTC,EAAYH,EAAMI,QACtB,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAOI,IAAK,CAC9B,IAAIC,EAAQC,KAAKC,MAAMD,KAAKE,SAAWN,EAAUL,QACjDI,EAAOQ,KAAKP,EAAUQ,OAAOL,EAAO,GAAG,GAC3C,CACE,OAAOJ,CACT,CA/gBuGU,CAAiBvC,EAAIO,QAAS,GAAGiC,KAAK,KAAO,gCAElJ,IACEzB,QAAsBC,EAAKhB,IAAIyC,SAASC,KAAKhB,EAAOZ,GACpDI,GAAe,CAChB,CAAC,MAAOyB,GAEP,OADAnB,QAAQH,MAAM,6DAA8DsB,IACrE,CACX,CAWE,OATIzB,IACF0B,aAAaC,QAAQ,gBAAiB,YACtCD,aAAaC,QAAQ,mBAAoB/B,IAOpCI,CACT,EAEAlB,EAAI8C,iBAAmBrC,eAAgCsC,GACrD,QAA+B,IAApBrC,OAAOC,SAEhB,OADAC,MAAM,gDACC,EAGa,iBAAXmC,IACTA,EAAS,GAGX,IAAIlC,QAAiBH,OAAOC,SAASQ,QAAQ,CAAEC,OAAQ,iBAEvD,GAAwB,IAApBP,EAASY,OAAc,CAEzB,UAD6BzB,EAAIQ,iBACV,OAAO,CAClC,CAEEK,QAAiBH,OAAOC,SAASQ,QAAQ,CAAEC,OAAQ,iBACnD,IAAIN,EAAgBD,EAAS,GACzBG,EAAO,IAAIN,OAAOO,KAAKP,OAAOC,UAE9BqC,EAAkBjD,EAsBtByB,QAAQyB,IAAI,0BAA2BnC,EAAekC,EAAiBD,GACvE,IAsBIG,EAtBAC,EAAYnC,EAAKoC,MAAMC,OArHL,GAqH8BN,GAAQO,WAAY,SACpEC,EAAW,IAAIvC,EAAKhB,IAAIwD,SAvBV,CAChB,CACEC,UAAY,EACZC,OAAU,CACR,CACEC,KAAQ,SACRC,KAAQ,YAGZD,KAAQ,mBACRE,QAAW,CACT,CACEF,KAAQ,GACRC,KAAQ,cAGZE,SAAW,EACXC,gBAAmB,UACnBH,KAAQ,aAKsCZ,GAsB9CgB,EAAWC,KAAKC,MAAMC,SAAS,OAEnC,IAGE,IAAItC,QAAe0B,EAASa,QAAQtB,iBAAiBC,GAAQsB,KAAK,CAAEC,KAAMxD,EAAeyD,MAAOpB,IAChG3B,QAAQyB,IAAI,OAAQpB,GAEpBL,QAAQyB,IAAI,2BAA4BC,GACxCc,EAASQ,UAAUC,aACpB,CAAC,MAAO9B,GAGP,OAFAnB,QAAQH,MAAM,yBAA0BsB,GACxCqB,EAASQ,UAAUE,cACZ,CACX,CAEE,OAAOxB,CACT,EAGAxC,OAAOiE,KAAOlE,eAAoBmB,GAChC,QAA+B,IAApBlB,OAAOC,eAcVX,EAAI8C,iBAAiBlB,OACtB,CACUqC,KAAKC,MAAMC,SAAS,OAC1BK,UAAUI,iBACvB,CACA,EAEA5E,EAAI6E,aAAepE,eAA4BqE,GAE7C,QAA+B,IAApBpE,OAAOC,SAEhB,OADAC,MAAM,gDACC,EAGT,IAAIC,QAAiBH,OAAOC,SAASQ,QAAQ,CAAEC,OAAQ,iBAEvD,GAAwB,IAApBP,EAASY,OAAc,CAEzB,UAD6BzB,EAAIQ,iBACV,OAAO,CAClC,CAEEK,QAAiBH,OAAOC,SAASQ,QAAQ,CAAEC,OAAQ,iBACnD,IAAIN,EAAgBD,EAAS,GAEzBkE,EAAQjE,EAEZ,MAAME,EAAO,IAAIN,OAAOO,KAAKP,OAAOC,UAG9BqC,EAAkBjD,EAuBlBwD,EAAW,IAAIvC,EAAKhB,IAAIwD,SAtBV,CAClB,CACEC,UAAY,EACZC,OAAU,CACR,CACEC,KAAQ,QACRC,KAAQ,WAEV,CACED,KAAQ,SACRC,KAAQ,WAGZD,KAAQ,eACRE,QAAW,GACXC,SAAW,EACXC,gBAAmB,aACnBH,KAAQ,aAKwCZ,GAIpD,IAAInB,EAHJL,QAAQyB,IAAI,QAAS8B,EAAO,SAAUD,GAItC,IACEjD,QAAe0B,EAASa,QAAQS,aAAaE,EAAOD,GAAQT,KAAK,CAAEC,KAAMxD,EAAekE,IAAK,MAC7FxD,QAAQyB,IAAI,uBACb,CAAC,MAAON,GAEP,MADAnB,QAAQH,MAAM,qBAAsBsB,GAC9BA,CACV,CAEE,OAAOd,CAGT,EAEAnB,OAAOuE,OAASjF,EAAI6E,aAGpB7E,EAAIkF,eAAiBzE,iBAEnB,QAA+B,IAApBC,OAAOC,SAEhB,OAAO,EAGT,IAAIE,QAAiBH,OAAOC,SAASQ,QAAQ,CAAEC,OAAQ,iBAIvD,GADAI,QAAQyB,IAAI,iCAAkCpC,GACtB,IAApBA,EAASY,OAAc,CAEzB,UAD6BzB,EAAIQ,iBACV,OAAO,CAClC,CAEEK,QAAiBH,OAAOC,SAASQ,QAAQ,CAAEC,OAAQ,iBAEnD,MAAMN,EAAgBD,EAAS,GAG/BW,QAAQyB,IAAI,2BAA4BnC,GAExC,MAAME,EAAO,IAAIN,OAAOO,KAAKP,OAAOC,UAG9BqC,EAAkBjD,EA+ClBwD,EAAW,IAAIvC,EAAKhB,IAAIwD,SA9CV,CAClB,CACEC,UAAY,EACZC,OAAU,CACR,CACEC,KAAQ,SACRC,KAAQ,YAGZD,KAAQ,YACRE,QAAW,CACT,CACEF,KAAQ,GACRC,KAAQ,YAGZE,SAAW,EACXC,gBAAmB,OACnBH,KAAQ,YAEV,CACEH,UAAY,EACZC,OAAU,CACR,CACEC,KAAQ,SACRC,KAAQ,WAEV,CACED,KAAQ,SACRC,KAAQ,YAGZD,KAAQ,sBACRE,QAAW,CACT,CACEF,KAAQ,GACRC,KAAQ,YAGZE,SAAW,EACXC,gBAAmB,OACnBH,KAAQ,aAKwCZ,GAEpDxB,QAAQyB,IAAI,WAAYM,GAGxB,MAAM4B,QAAgB5B,EAASa,QAAQgB,UAAUtE,GAAeuE,OAEhE7D,QAAQyB,IAAI,aAAckC,GAG1B,MAAMjC,EAAW,GACjB,IAAK,IAAIlB,EAAI,EAAGA,EAAImD,EAASnD,IAAK,CAChC,MAAMsD,QAAgB/B,EAASa,QAAQmB,oBAAoBzE,EAAekB,GAAGqD,OAC7EnC,EAASb,KAAKiD,EAClB,CAGE,OADA9D,QAAQyB,IAAI,eAAgBC,GACrBA,CACT,EAGAxC,OAAOwE,eAAiBlF,EAAIkF,eAG5BlF,EAAIwF,aAAe/E,iBAEjB,MAAMO,EAAO,IAAIN,OAAOO,KAAKP,OAAOC,UAG9BqC,EAAkBjD,EAoBlBwD,EAAW,IAAIvC,EAAKhB,IAAIwD,SAnBV,CAClB,CACEC,UAAY,EACZC,OAAU,GACVC,KAAQ,sBACRE,QAAW,CACT,CACEF,KAAQ,GACRC,KAAQ,YAGZE,SAAW,EACXC,gBAAmB,OACnBH,KAAQ,aAMwCZ,GAE9CyC,QAAkBlC,EAASa,QAAQsB,sBAAsBL,OAE/D,OADA7D,QAAQyB,IAAI,YAAawC,GAClBA,CACT,EAEA/E,OAAO8E,aAAexF,EAAIwF,aAE1BxF,EAAI2F,kBAAoBlF,iBAGtB,MAAMO,EAAO,IAAIN,OAAOO,KAAKP,OAAOC,UAG9BqC,EAAkBjD,EAqBlBwD,EAAW,IAAIvC,EAAKhB,IAAIwD,SApBV,CAClB,CACEC,UAAY,EACZC,OAAU,GACVC,KAAQ,oBACRE,QAAW,CACT,CACEF,KAAQ,GACRC,KAAQ,cAGZE,SAAW,EACXC,gBAAmB,OACnBH,KAAQ,aAOwCZ,GAG9C4C,QAAuBrC,EAASa,QAAQyB,oBAAoBR,OAElE,OADA7D,QAAQyB,IAAI,iBAAkB2C,GACvBA,CACT,EAEAlF,OAAOiF,kBAAoB3F,EAAI2F,kBAE/B3F,EAAI8F,cAAgBrF,iBAClB,IAAIO,EAAO,IAAIN,OAAOO,KAAKP,OAAOC,UAClC,MAAME,QAAiBH,OAAOC,SAASQ,QAAQ,CAAEC,OAAQ,iBACnD+D,QAAgBzE,OAAOC,SAASQ,QAAQ,CAAEC,OAAQ,iBAAkB2E,OAAQ,CAAClF,EAAS,GAAI,YAChG,OAAOG,EAAKoC,MAAM4C,QAAQb,EAAS,QACrC,EAEAnF,EAAIiG,uBAAyBxF,eAAsCN,GACjE,IAAIa,EAAO,IAAIN,OAAOO,KAAKP,OAAOC,UAC9BuF,EAAQjG,EAAYE,GACxB,MAAMU,QAAiBH,OAAOC,SAASQ,QAAQ,CAAEC,OAAQ,iBAGzD,IAAKP,GAAgC,IAApBA,EAASY,OAExB,OAAO,KAIT,IAAIX,EAAgBD,EAAS,GAC7BG,EAAO,IAAIN,OAAOO,KAAKP,OAAOC,UAsB9Ba,QAAQyB,IAAI,oBAAqBpC,GACjCW,QAAQyB,IAAI,kCAAkCiD,EAAM/F,UACpD,MAAMoD,EAAW,IAAIvC,EAAKhB,IAAIwD,SArBjB,CAEX,CACEC,UAAY,EACZC,OAAU,CAAC,CAAEC,KAAQ,SAAUC,KAAQ,YACvCD,KAAQ,YACRE,QAAW,CAAC,CAAEF,KAAQ,UAAWC,KAAQ,YACzCA,KAAQ,YAGV,CACEH,UAAY,EACZC,OAAU,GACVC,KAAQ,WACRE,QAAW,CAAC,CAAEF,KAAQ,GAAIC,KAAQ,UAClCA,KAAQ,aAMmCsC,EAAM9F,SAErD,IAAI+F,QAA0B5C,EAASa,QAAQgB,UAAUtE,GAAeuE,OACxE7D,QAAQyB,IAAI,oBAAqBkD,GAEjC,MAAMC,EAASD,EAAqB,IAAMD,EAAM7F,SAGhD,OAFAmB,QAAQyB,IAAI,8BAA+BmD,GAEpC,CACLjG,OAAQ+F,EAAM/F,OACdgF,QAASgB,EACTE,UAAWD,EAGf,EA0GwB,oBAAbzF,WAKkB,mBAAhBA,SAAS2F,IAClB3F,SAAS2F,GAAG,mBAAmB,SAAUzF,GACvCH,OAAO6F,SAASC,QACtB,IAGyC,mBAA5B9F,OAAOC,SAASQ,SACzBT,OAAOC,SAASQ,QAAQ,CACtBC,OAAQ,6BACR2E,OAAQ,CAAC,CAAEU,QAAS"}