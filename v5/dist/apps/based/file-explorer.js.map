{"version":3,"file":"file-explorer.js","sources":["../../../apps/based/file-explorer/FileTree/FileTree.js","../../../apps/based/file-explorer/FileUploadOverlay.js","../../../apps/based/file-explorer/FileExplorer.js","../../../apps/based/file-explorer/lib/handleDrop.js","../../../apps/based/file-explorer/lib/handleUpload.js","../../../apps/based/file-explorer/lib/open.js","../../../apps/based/file-explorer/lib/create.js","../../../apps/based/file-explorer/lib/onClick.js","../../../apps/based/file-explorer/lib/renderFolderContents.js","../../../apps/based/file-explorer/lib/renderPathContents.js","../../../apps/based/file-explorer/lib/getUsage.js","../../../apps/based/file-explorer/lib/showFile.js","../../../apps/based/browser/BrowserWindow.js","../../../apps/based/pad/PadEditor.js","../../../apps/based/file-explorer/lib/buildJsTreeData.js","../../../apps/based/file-explorer/file-explorer.js","../../../apps/based/file-explorer/lib/getCloudFiles.js"],"sourcesContent":["// FileTree.js\n// Remark: 1/6/2025 - Deciding to use jsTree instead of FileTree.js\n//                    jsTree is very mature and has all APIs we need for file-explorer v1\n// This file is currently not being used\nexport default class FileTree {\n    constructor(bp, options = {}) {\n        this.bp = bp;\n    }\n\n    async init() {\n        await this.bp.appendCSS('/v5/apps/based/file-explorer/FileTree/FileTree.css', false, true);\n\n    }\n\n    create(container, options) {\n\n        this.options = {\n            onFileSelect: options.onFileSelect || ((file) => console.log('File selected:', file)),\n            onFolderToggle: options.onFolderToggle || ((folder, isExpanded) => console.log('Folder toggled:', folder, isExpanded)),\n            indent: options.indent || 20,\n        };\n\n\n        this.container = typeof container === 'string' ? document.querySelector(container) : container;\n\n\n        // Initialize root container\n        this.treeRoot = document.createElement('div');\n        this.treeRoot.className = 'bp-filetree-container';\n        this.container.appendChild(this.treeRoot);\n\n        // Bind methods\n        this.handleClick = this.handleClick.bind(this);\n        this.renderItem = this.renderItem.bind(this);\n\n        // Add event listener\n        this.treeRoot.addEventListener('click', this.handleClick);\n        return this;\n\n    }\n\n    handleClick(event) {\n        const target = event.target.closest('.bp-filetree-item');\n        if (!target) return;\n\n        const isFolder = target.dataset.type === 'folder';\n        const path = target.dataset.path;\n\n        if (isFolder) {\n            const isExpanded = target.classList.toggle('bp-filetree-expanded');\n            const childContainer = target.nextElementSibling;\n            childContainer.style.display = isExpanded ? 'block' : 'none';\n            this.options.onFolderToggle(path, isExpanded);\n        } else {\n            this.options.onFileSelect(path, target);\n        }\n    }\n\n    getFileIcon(filename) {\n        // Basic file type detection based on extension\n        const ext = filename.split('.').pop().toLowerCase();\n        const iconMap = {\n            js: '📄',\n            json: '📋',\n            html: '🌐',\n            css: '🎨',\n            png: '🖼️',\n            jpg: '🖼️',\n            pdf: '📑',\n            default: '📄'\n        };\n        return iconMap[ext] || iconMap.default;\n    }\n\n    renderItem(item, level = 0) {\n        const itemContainer = document.createElement('div');\n        itemContainer.className = 'bp-filetree-item-container';\n\n        const itemElement = document.createElement('div');\n        itemElement.className = 'bp-filetree-item';\n        itemElement.dataset.path = item.path;\n        itemElement.dataset.type = item.type;\n        itemElement.style.paddingLeft = `${level * this.options.indent}px`;\n\n        // Create icon element\n        const icon = document.createElement('span');\n        icon.className = 'bp-filetree-icon';\n        icon.textContent = item.type === 'folder' ? '📁' : this.getFileIcon(item.name);\n\n        // Create name element\n        const name = document.createElement('span');\n        name.className = 'bp-filetree-name';\n        name.textContent = item.name;\n\n        itemElement.appendChild(icon);\n        itemElement.appendChild(name);\n        itemContainer.appendChild(itemElement);\n\n        if (item.type === 'folder' && Array.isArray(item.children)) {\n            const childContainer = document.createElement('div');\n            childContainer.className = 'bp-filetree-children';\n            childContainer.style.display = 'none';\n\n            item.children.forEach(child => {\n                childContainer.appendChild(this.renderItem(child, level + 1));\n            });\n\n            itemContainer.appendChild(childContainer);\n        }\n\n        return itemContainer;\n    }\n\n    toggleFolder(path) {\n        const folder = this.treeRoot.querySelector(`.bp-filetree-item[data-path=\"${path}\"]`);\n        if (!folder) return;\n\n        const isExpanded = folder.classList.toggle('bp-filetree-expanded');\n        const childContainer = folder.nextElementSibling;\n        childContainer.style.display = isExpanded ? 'block' : 'none';\n        this.options.onFolderToggle(path, isExpanded);\n    }\n\n    render(files) {\n        // Clear existing content\n        this.treeRoot.innerHTML = '';\n        this.files = files;\n        // Render each root item\n        files.forEach(file => {\n            this.treeRoot.appendChild(this.renderItem(file));\n        });\n    }\n\n    destroy() {\n        this.treeRoot.removeEventListener('click', this.handleClick);\n        this.container.removeChild(this.treeRoot);\n    }\n\n\n    buildFileTree(paths) {\n        const root = { type: 'folder', name: 'root', path: '', children: [] };\n\n        paths.forEach(path => {\n            if (!path) return;\n            const parts = path.split('/').filter(part => part.length);\n            let current = root;\n\n            for (let i = 0; i < parts.length; i++) {\n                const part = parts[i];\n                const isFile = i === parts.length - 1 && part.includes('.');\n                const newPath = '/' + parts.slice(0, i + 1).join('/');\n\n                let node = current.children.find(child => child.name === part);\n                if (!node) {\n                    node = {\n                        type: isFile ? 'file' : 'folder',\n                        name: part,\n                        path: newPath,\n                        children: []\n                    };\n                    current.children.push(node);\n                }\n\n                if (!isFile) {\n                    current = node;\n                }\n            }\n        });\n\n        return root.children; // Remove root if you don't want the top-level folder\n    }\n\n\n    // Helper function to find a node based on a path\n    findNodeByPath(root, path) {\n        const parts = path.split('/').filter(part => part.length);\n        let current = root;\n        for (let part of parts) {\n            let next = current.find(child => child.name === part);\n            if (!next) {\n                return null; // Node not found\n            }\n            current = next;\n        }\n        return current;\n    }\n\n    // Function to merge new tree into the target node\n    mergeTrees(targetNode, newChildren) {\n        const existingNames = targetNode.children.map(child => child.name);\n        newChildren.forEach(newChild => {\n            if (!existingNames.includes(newChild.name)) {\n                targetNode.children.push(newChild); // Add new child if it doesn't exist\n            } else {\n                // If the child exists and is a folder, merge recursively\n                let existingChild = targetNode.children.find(child => child.name === newChild.name);\n                if (existingChild.type === 'folder' && newChild.type === 'folder') {\n                    mergeTrees(existingChild, newChild.children);\n                }\n            }\n        });\n    }\n\n\n}","export default class FileUploadOverlay {\n    constructor({\n        parent,\n        fileExplorer\n    }, uploadFn) {\n        this.parent = parent;\n        this.fileExplorer = fileExplorer;\n        this.files = [];\n        this.initializeElements();\n        this.bindEvents();\n        this.uploadFn = uploadFn;\n        this.bp = fileExplorer.bp;\n    }\n\n    initializeElements() {\n        this.overlay = this.parent.querySelector('.bp-file-explorer-upload-overlay');\n        this.filesList = this.parent.querySelector('.bp-file-explorer-upload-files-list');\n        this.totalSize = this.parent.querySelector('.bp-file-explorer-total-size');\n        this.uploadButton = this.parent.querySelector('.bp-file-explorer-upload-start');\n        this.cancelButton = this.parent.querySelector('.bp-file-explorer-upload-cancel');\n        this.progressContainer = this.parent.querySelector('.bp-file-explorer-upload-progress-container');\n        this.progressBar = this.parent.querySelector('.bp-file-explorer-upload-progress-bar');\n        this.progressPercentage = this.parent.querySelector('.bp-file-explorer-upload-progress-percentage');\n        this.currentFile = this.parent.querySelector('.bp-file-explorer-current-file');\n        this.fileCount = this.parent.querySelector('.bp-file-explorer-file-count');\n    }\n\n    bindEvents() {\n        this.uploadButton.addEventListener('click', () => this.startUpload());\n        this.cancelButton.addEventListener('click', () => this.hide());\n    }\n\n    show(files) {\n        this.files = Array.from(files);\n        this.overlay.style.display = 'flex';\n        this.renderFiles();\n        this.updateTotalSize();\n        if (this.bp.me === \"Guest\") {\n            $('.bp-file-explorer-upload-controls').html('<h2>Guest account may not upload files.</hr><br/>Please  <button class=\"open-app action-button\" data-app=\"buddylist\">log in</button> to BuddyPond.');\n        }\n\n    }\n\n    hide() {\n        this.overlay.style.display = 'none';\n        this.progressContainer.style.display = 'none';\n        this.files = [];\n        this.filesList.innerHTML = '';\n    }\n\n    formatSize(bytes) {\n        const sizes = ['B', 'KB', 'MB', 'GB'];\n        if (bytes === 0) return '0 B';\n        const i = Math.floor(Math.log(bytes) / Math.log(1024));\n        return `${(bytes / Math.pow(1024, i)).toFixed(2)} ${sizes[i]}`;\n    }\n\n    renderFiles() {\n        // TODO: clone this from HTML template instead of duplicating string\n        this.filesList.innerHTML = this.files.map((file, index) => `\n        <div class=\"bp-file-explorer-upload-file-item\" data-file-id=\"${index}\">\n          <div class=\"bp-file-explorer-upload-column-name\">${file.path}</div>\n          <div class=\"bp-file-explorer-upload-column-size\">${this.formatSize(file.file.size)}</div>\n          <div class=\"bp-file-explorer-upload-column-status\">Pending</div>\n        </div>\n      `).join('');\n    }\n\n    updateTotalSize() {\n        const totalBytes = this.files.reduce((acc, file) => acc + file.file.size, 0);\n        this.totalSize.textContent = this.formatSize(totalBytes);\n\n        // TODO: better scope, us localstorage or another class\n        if (typeof this.fileExplorer.currentStorageRemaining === 'number') {\n            // console.log(\"comparing\", totalBytes, this.fileExplorer.currentStorageRemaining);\n            if (totalBytes > this.fileExplorer.currentStorageRemaining) {\n                // this.totalSize.textContent = `${this.totalSize.textContent} (Not enough space)`;\n                $('.bp-file-explorer-storage-warning').show();\n                this.uploadButton.disabled = true;\n                this.uploadButton.classList.add('disabled');\n            }\n        }\n\n    }\n\n    async startUpload() {\n        this.uploadButton.disabled = true;\n        this.progressContainer.style.display = 'block';\n        console.log('FileUploadOverlay.startUpload() called');\n\n        let uploadedFiles = 0;\n        let uploadedAllFiles = true;\n        let errors = [];\n        for (const file of this.files) {\n            uploadedFiles++;\n            this.currentFile.textContent = file.name;\n            this.fileCount.textContent = `(File ${uploadedFiles} of ${this.files.length})`;\n            $(`.bp-file-explorer-upload-file-item[data-file-id=\"${uploadedFiles - 1}\"] .bp-file-explorer-upload-column-status`).text('Uploading...');\n\n            try {\n                await this.uploadFn(file, (progress) => {\n                    const totalProgress = progress * 100;\n                    this.updateProgress(totalProgress);\n                });\n                $(`.bp-file-explorer-upload-file-item[data-file-id=\"${uploadedFiles - 1}\"] .bp-file-explorer-upload-column-status`).text('Completed');\n                this.uploadButton.disabled = false;\n\n            } catch (error) {\n                uploadedAllFiles = false;\n                errors.push(error);\n                console.error('Upload failed:', error);\n                // console.log(\"trying to find element\", `.bp-file-explorer-upload-file-item[data-file-id=\"${uploadedFiles - 1}\"] .bp-file-explorer-upload-column-error`);\n                //$(`.bp-file-explorer-upload-file-item[data-file-id=\"${uploadedFiles - 1}\"] .bp-file-explorer-upload-column-error`).text(error.message).show();\n                $('.bp-file-explorer-upload-errors').append(`<div class=\"bp-file-explorer-upload-error\">${error.message}</div>`).show();\n                $(`.bp-file-explorer-upload-file-item[data-file-id=\"${uploadedFiles - 1}\"] .bp-file-explorer-upload-column-status`).text('Failed').addClass('error');\n            }\n        }\n\n        if (uploadedAllFiles) {\n            setTimeout(() => {\n                // should show final status\n                $('.bp-file-explorer-upload-status').text('Upload completed');\n                this.hide();\n            }, 2200);\n\n            // wait just a moment until attempting to get files\n            this.fileExplorer.refreshFileTree();\n\n\n\n            setTimeout(() => {\n                // takes a moment for durable objects to update\n                // probably want to poll this?\n                this.fileExplorer.getUsage();\n            }, 1000)\n\n\n\n        } else {\n            // throw new Error(`Failed to upload ${errors.length} files`);\n            console.error(`Failed to upload ${errors.length} files`, errors);\n        }\n    }\n\n    // TODO: is this no longer being called/\n    // Remark: Remove this FN?  \n    async uploadFile(file, onProgress) {\n        console.log(\"calling uploadFn\", file, onProgress);\n        // This is a placeholder for your actual upload implementation\n        // Replace this with your actual upload logic\n\n        alert('FileUploadOverlay.uploadFile() called');\n        try {\n            await this.uploadFn(file, onProgress);\n        } catch (error) {\n            // show the error in the UI, could be out of space, etc\n            console.error('Upload failed:', error);\n            alert(error.message)\n            //$('.bp-file-explorer-upload-column-status').textContent = 'Failed'; // should be more specific\n        }\n\n\n        /*\n        return new Promise((resolve) => {\n          let progress = 0;\n          const interval = setInterval(() => {\n            progress += 0.1;\n            onProgress(progress);\n            if (progress >= 1) {\n              clearInterval(interval);\n              resolve();\n            }\n          }, 100);\n        });\n        */\n    }\n\n    updateProgress(percentage) {\n        const roundedPercentage = Math.min(100, Math.round(percentage));\n        this.progressBar.style.width = `${roundedPercentage}%`;\n        this.progressPercentage.textContent = `${roundedPercentage}%`;\n    }\n}\n","import handleDrop from \"./lib/handleDrop.js\";\nimport handleUpload from \"./lib/handleUpload.js\";\nimport FileTree from \"./FileTree/FileTree.js\";\nimport renderFolderContents from \"./lib/renderFolderContents.js\";\nimport renderPathContents from \"./lib/renderPathContents.js\";\nimport open from \"./lib/open.js\";\nimport create from \"./lib/create.js\";\nimport getUsage from \"./lib/getUsage.js\";\nimport onClick from \"./lib/onClick.js\";\nimport showFile from \"./lib/showFile.js\";\n\nexport default class FileExplorer {\n    constructor(bp, options = {}) {\n        this.bp = bp;\n\n        if (!options.fileTree) {\n            options.fileTree = {};\n        }\n\n        this.options = options;\n\n        // root path\n        this.currentSelectedNode = {\n            id: \"\"\n        };\n    }\n\n\n    async init() {\n\n        this.html = await this.bp.load('/v5/apps/based/file-explorer/file-explorer.html');\n\n        await this.bp.load('/v5/apps/based/file-explorer/file-explorer.css');\n\n        let bytes = await this.bp.importModule('/v5/apps/based/file-explorer/lib/bytes.js', {}, false);\n        this.bytes = bytes.default;\n\n\n        this.fileTreeInstance = new FileTree(this.bp, this.options.fileTree);\n\n        await this.fileTreeInstance.init();\n\n        this.fileTree = this.fileTreeInstance;\n\n        // async import import mime from 'mime';\n        // is most likely already loaded and cached at this point\n        let mime = await this.bp.importModule('/v5/apps/based/file-explorer/lib/mime.js', {}, false);\n        this.mime = mime.default;\n\n        this.onClick();\n\n        return 'loaded file explorer';\n    }\n\n\n    setPreviewAddressBar(path) {\n        $('.bp-file-explorer-address-input').val(path);\n        let host = this.bp.config.host;\n        // this.bp.emit('browser::setAddressBar', host + path);\n        this.bp.emit('browser::setAddressBar', host + '/' + this.bp.me + path);\n\n    }\n\n}\n\nFileExplorer.prototype.handleDrop = handleDrop;\nFileExplorer.prototype.handleUpload = handleUpload;\nFileExplorer.prototype.open = open;\nFileExplorer.prototype.create = create;\nFileExplorer.prototype.onClick = onClick;\nFileExplorer.prototype.renderFolderContents = renderFolderContents;\nFileExplorer.prototype.renderPathContents = renderPathContents;\nFileExplorer.prototype.getUsage = getUsage;\nFileExplorer.prototype.showFile = showFile;","export default function dropareaEvent(e) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    console.log(\"file-explorer handling drop event\", e);\n    let items = e.dataTransfer.items;\n\n    let ignoredFiles = ['.DS_Store', '.git', '.gitignore', '.gitattributes', '.gitmodules', '.gitkeep', '.npmignore', '.npmrc', '.yarnignore', '.yarnrc', '.editorconfig', '.eslint'];\n    let ignoredDirs = ['.git', 'node_modules'];\n\n    // Function to check if the file or directory should be ignored\n    const shouldIgnore = (fileName, fullPath) => {\n        return ignoredFiles.includes(fileName) || ignoredDirs.some(dir => fullPath.includes(`/${dir}/`));\n    };\n\n\n\n    const processEntry = (entry, path = '') => {\n        return new Promise((resolve, reject) => {\n            console.log('processing item:', entry, 'currentNode', this.currentSelectedNode);\n    \n            // Scope the path to the current selected folder if applicable\n            if (this.currentSelectedNode) {\n                // path += this.currentSelectedNode.id + '/';\n                console.log('Updated path to scope to the selected folder:', path);\n            }\n    \n            if (entry.isFile) {\n                entry.file(file => {\n                    const filePath = path + file.name;\n                    if (shouldIgnore(file.name, filePath)) {\n                        console.log('Ignoring file:', filePath);\n                        resolve([]);\n                    } else {\n                        file.filePath = filePath;\n                        console.log(filePath); // Optionally log the file path\n                        resolve({path: filePath, file: file});\n                    }\n                }, reject);\n            } else if (entry.isDirectory) {\n                let reader = entry.createReader();\n                reader.readEntries(entries => {\n                    Promise.all(entries.map(entryItem => processEntry(entryItem, path + entry.name + '/')))\n                        .then(files => resolve(files.flat()))\n                        .catch(reject);\n                }, reject);\n            }\n        });\n    };\n    \n\n    const promises = [];\n    // Process each dragged item\n    for (let i = 0; i < items.length; i++) {\n        const item = items[i].webkitGetAsEntry ? items[i].webkitGetAsEntry() : items[i].getAsEntry();\n        if (item) {\n            if (!shouldIgnore(item.name, item.fullPath)) {\n                // check if this is the root node\n                // we could also check bp.me === node.id, checking for jsTree parent indicator seems safer\n                if (this.currentSelectedNode.parent !== '#') {\n                    promises.push(processEntry(item, this.currentSelectedNode.id + '/'));\n                } else {\n                    promises.push(processEntry(item));\n                }\n            }\n        }\n    }\n\n    Promise.all(promises)\n        .then(files => {\n            console.log('All files:', files.flat());\n            // Here, you would typically update your UI to show the files and await user confirmation before upload\n            this.uploadOverlay.show(files.flat());\n        })\n        .catch(error => console.error('Error processing files:', error));\n}\n","export default async function handleUploadEvent(e) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    console.log(\"Handling file input event\", e);\n    const items = e.target.files; // This is a FileList object, not a DataTransferItem\n\n    let ignoredFiles = ['.DS_Store', '.git', '.gitignore', '.gitattributes', '.gitmodules', '.gitkeep', '.npmignore', '.npmrc', '.yarnignore', '.yarnrc', '.editorconfig', '.eslint'];\n    let ignoredDirs = ['.git', 'node_modules'];\n\n    // Function to check if the file or directory should be ignored\n    const shouldIgnore = (fileName, fullPath) => {\n        return ignoredFiles.includes(fileName) || ignoredDirs.some(dir => fullPath.includes(`/${dir}/`));\n    };\n\n    const processFile = (file, path = '') => {\n        return new Promise((resolve) => {\n            // Assume path includes directory structure if supported\n            const fullPath = path + file.webkitRelativePath || file.name; // Use webkitRelativePath if available\n            if (shouldIgnore(file.name, fullPath)) {\n                console.log('Ignoring file:', fullPath);\n                resolve([]);\n            } else {\n                if (this.currentSelectedNode.parent !== '#') {\n                    file.filePath = this.currentSelectedNode.id + '/' + fullPath;\n                } else {\n                    file.filePath = fullPath;\n                }\n                console.log('assigning filePath:', file.filePath);\n                resolve({ path: file.filePath, file: file });\n            }\n        });\n    };\n\n    // Initialize path if directory input is supported\n    const promises = Array.from(items).map(file => processFile(file, ''));\n\n    await Promise.all(promises)\n        .then(files => {\n            console.log('All processed files:', files.flat());\n            // Update your UI to show these files or handle them further\n            this.uploadOverlay.show(files.flat());\n        })\n        .catch(error => console.error('Error processing files:', error));\n}\n","export default async function open({ context }) {\n        // console.log(`Opening file explorer with context ${context}`);\n        this.options.context = context;\n        if (!this.fileExplorer) {\n            this.fileExplorer = this.fileExplorerInstance.create();\n            this.fileExplorer.getCloudFiles = this.getCloudFiles.bind(this);\n            this.fileExplorer.refreshFileTree = this.refreshFileTree.bind(this);\n            this.handleDrop = this.fileExplorer.handleDrop.bind(this.fileExplorer);\n            this.handleUpload = this.fileExplorer.handleUpload.bind(this.fileExplorer);\n        }\n\n        // console.log('created explorer', this.fileExplorer);\n\n\n        if (!this.fileExplorerWindow) {\n            this.fileExplorerWindow = this.bp.apps.ui.windowManager.createWindow({\n                id: 'file-explorer',\n                title: 'Buddy Files',\n                app: 'file-explorer',\n                icon: 'desktop/assets/images/icons/icon_file-explorer_64.png',\n                x: 100,\n                y: 30,\n                width: 1000,\n                height: 600,\n                minWidth: 200,\n                minHeight: 200,\n                parent: $('#desktop')[0],\n                content: this.fileExplorer.container,\n                resizable: true,\n                minimizable: true,\n                maximizable: true,\n                closable: true,\n                focusable: true,\n                maximized: false,\n                minimized: false,\n                onClose: async () => {\n                    // delete the local reference to the file explorer\n\n                    await this.remove();\n\n                    this.fileExplorerWindow = null;\n                }\n            });\n\n            this.fileExplorerWindow.container.classList.add('has-droparea');\n\n            // this window should have no selectable text\n            this.fileExplorerWindow.container.style.userSelect = 'none';\n            this.create();\n\n        } else {\n            // jsTree should be ready at this point ( as file-explorer was already created )\n            // this could have race condition if spammed opened on first load\n            if (this.options.context) {\n                this.fileExplorer.renderPathContents(this.options.context);\n\n            } else {\n                this.fileExplorer.renderPathContents('/');\n\n            }\n\n        }\n\n    }\n","import FileUploadOverlay from \"../FileUploadOverlay.js\";\n\n\nexport default function create(options = {}) {\n\n    let container = document.createElement('div');\n    container.innerHTML = this.html;\n    container.classList.add('bp-file-explorer');\n    /*\n    let fileTreeHolder = $('.bp-file-explorer-tree', container);\n    fileTreeHolder.html('');\n    this.fileTree = this.fileTreeInstance.create(fileTreeHolder[0], this.options.fileTree);\n\n    this.fileTree.render([\n        {\n            name: 'index.html',\n            type: 'file',\n        },\n        {\n            name: 'style.css',\n            type: 'file',\n        },\n        {\n            name: 'script.js',\n            type: 'file',\n        },\n        {\n            name: 'images',\n            type: 'folder',\n            children: [\n                {\n                    name: 'logo.png',\n                    type: 'file',\n                },\n                {\n                    name: 'background.jpg',\n                    type: 'file',\n                },\n            ]\n        }\n    ]);\n    */\n\n    this.uploadOverlay = new FileUploadOverlay({ parent: container, fileExplorer: this }, async (file, onProgress) => {\n        // upload file here\n        // console.log(\"uploading file\", file);\n        await this.bp.apps.client.api.uploadFile(file.file, onProgress);\n    });\n    this.uploadOverlay.hide();\n    this.container = container;\n\n    // TODO\n    /*\n    $('.bp-file-explorer-sidebar').resizable({\n        handles: 'e' // 'e' stands for east, i.e., the right side\n    });\n    */\n\n    $('.bp-file-explorer-address-input', this.container).on('keyup', (e) => {\n        // check to see if we matched a node in the jstree\n        // if so, load the contents of that node\n        // check on each keyup\n        let path = $('.bp-file-explorer-address-input').val();\n        this.renderPathContents(path);\n\n    });\n\n\n    return this;\n\n\n}\n","export default function onClick() {\n    $(document).on('click', (e) => {\n        // check to see if target was '.bp-file-explorer-item'\n        let target = $(e.target);\n        if (target.hasClass('bp-file-explorer-column')) {\n\n            let parent = target.parent();\n\n            let type = parent.data('type');\n            let name = parent.data('name');\n            let size = parent.data('size');\n            let date = parent.data('date');\n            let path = parent.data('path');\n            // console.log('clicked', type, path);\n\n\n            // update the .bp-file-explorer-address-input with the folder path\n            this.setPreviewAddressBar('/' + path);\n            // $('.bp-file-explorer-address-input').val('/' + path);\n\n            if (type === 'folder') {\n                // open folder\n                // console.log('open folder', type, path);\n                // TODO: path is the node.js from the jsTree\n                // we need to get that node reference and get its children\n                //let node = this.fileTree.getNode(path);\n                let instance = $('#jtree').jstree(true);\n                let node = instance.get_node(path);\n\n\n                let contents = node.children;\n                // console.log('111 showing contents of folder', node.id, contents);\n\n                // go through each child and get their node data from jstree\n                contents = contents.map(child => {\n                    let childNode = instance.get_node(child);\n                    return {\n                        name: childNode.text,\n                        type: childNode.children.length > 0 ? 'folder' : 'file',\n                        path: childNode.id\n                    };\n                });\n                // console.log('222 showing contents of folder', node.id, contents);\n                // update the .bp-file-explorer-address-input with the folder path\n                // $('.bp-file-explorer-address-input').val('/' + node.id);\n                this.setPreviewAddressBar('/' + node.id);\n\n                this.renderFolderContents(contents);\n\n                $('.bp-file-explorer-file-viewer').hide();\n                $('.bp-file-explorer-files').show();\n                $('.bp-file-explorer-header').flexShow();\n\n                $('.bp-file-explorer-drag-upload').flexShow();\n\n\n            } else {\n                // open file\n                // console.log('open file', type);\n                this.showFile(this.bp.me, path);\n                $('.bp-file-explorer-drag-upload').hide();\n\n                //this.showFile('/v5/apps/based/file-explorer/files', name);\n            }\n        }\n    });\n}\n","export default function renderFolderContents(files) {\n\n        $('.bp-file-explorer-header').flexShow();\n\n        // clear the bp-file-explorer-files div\n        let filesContainer = $('.bp-file-explorer-files', this.container);\n        filesContainer.html('');\n\n        // iterate over the files and add them to the bp-file-explorer-files div\n        for (let file of files) {\n            // create using JS DOM API not string\n            let item = document.createElement('div');\n            item.classList.add('bp-file-explorer-item');\n            item.dataset.type = file.type;\n            item.dataset.name = file.name;\n            item.dataset.size = file.size;\n            item.dataset.date = file.date;\n            item.dataset.path = file.path;\n            // console.log('file', file);\n            let columns = ['name', 'size', 'type', 'date'];\n            for (let column of columns) {\n                let columnDiv = document.createElement('div');\n                columnDiv.classList.add('bp-file-explorer-column');\n                let val = file[column];\n                if (column === 'size') {\n                    val = this.bytes(file[column]);\n                }\n                if (column === 'date') {\n                    val = new Date(file[column]).toLocaleString();\n                    // check if val is valid date, if not revert to original value\n                    if (val === 'Invalid Date') {\n                        val = file[column];\n                    }\n                }\n\n                columnDiv.textContent = val;\n                item.appendChild(columnDiv);\n            }\n\n\n\n\n            filesContainer.append(item);\n        }\n\n        $('.bp-file-explorer-file-viewer-iframe', this.content).hide();\n        $('.bp-file-explorer-file-viewer-editor', this.content).hide();\n        $('.bp-file-explorer-files', this.content).show();\n\n    }\n","export default function renderPathContents(path) {\n    // $('.bp-file-explorer-address-input').val(path); // maybe no slash?\n\n    this.setPreviewAddressBar(path);\n\n    path = path.replace('/', '');\n    let instance = $('#jtree').jstree(true);\n\n    if (path === '') {\n        path = this.bp.me;\n    }\n\n    // console.log('going to merge metadata from ', this.cloudFiles)\n    let node = instance.get_node(path);\n    if (node) {\n        // console.log('found node', node);\n\n        let type = node.children.length > 0 ? 'folder' : 'file';\n\n        if (type === 'file') {\n            this.showFile(this.bp.me, path);\n            return;\n        }\n\n        this.currentSelectedNode = node;\n\n        let contents = node.children;\n        // console.log('444 showing contents of folder', node.id, contents);\n\n        // check this.cloudFiles.metadata[node.id] for the contents of the folder\n        // it *should* always exist, if not show error\n\n        if (!this.cloudFiles) {\n            alert('cloudFiles not loaded cannot show contents');\n            return;\n        }\n\n\n        // go through each child and get their node data from jstree\n        contents = contents.map(child => {\n            let childNode = instance.get_node(child);\n\n            let metadata = {};\n            // console.log('this.cloudFiles', this.cloudFiles.metadata);\n            if (!this.cloudFiles.metadata[childNode.id]) {\n                // Remark: Folders are not returning metadata?\n                // TODO: should server return folder metadata?\n                //console.error(`No metadata found for ${childNode.id} cannot show metadata`);\n                //console.error(`This should *not* happen and indicates that the metadata and Object Store are out of sync`);\n            } else {\n                // we found the metadata ( as expected )\n                metadata = this.cloudFiles.metadata[childNode.id];\n            }\n\n            return {\n                name: childNode.text,\n                type: childNode.children.length > 0 ? 'folder' : 'file',\n                path: childNode.id,\n                size: metadata.size,\n                date: metadata.lastModified\n            };\n        });\n        // console.log('5555 showing contents of folder', node.id, contents);\n        // update the .bp-file-explorer-address-input with the folder path\n        //$('.bp-file-explorer-address-input').val('/' + this.bp.me + '/' + node.id);\n\n        this.renderFolderContents(contents);\n\n    }\n\n}","    export default async function getUsage() {\n\n        // get initial file usage\n        let currentUsage = await this.bp.apps.client.api.getFileUsage();\n        // console.log('currentUsage', currentUsage);\n        this.currentStorageUsage = currentUsage.usage;\n        console.log('got back currentUsage', currentUsage);\n        let storageLimit = currentUsage.storageLimit || 10000000; // 10mb\n        let storageRemaining = storageLimit - currentUsage.usage;\n        this.currentStorageRemaining = storageRemaining;\n\n        $('.storageUsed', this.content).text(this.bytes(currentUsage.usage));\n        $('.storageRemaining', this.content).text(this.bytes(storageRemaining));\n    }\n","export default async function showFile(root, file, showEditor = false) {\n\n    if (!file) {\n        console.error('no file specified');\n        return;\n    }\n\n    $('.bp-file-explorer-file-viewer').show();\n    $('.bp-file-explorer-files').hide();\n    $('.bp-file-explorer-header').flexHide();\n\n\n    let supportedEditorTypes = ['js', 'json', 'html', 'css', 'txt', 'yml', 'md'];\n\n    // check to see if the file is a supported editor type\n    let ext = file.split('.').pop();\n    if (supportedEditorTypes.includes(ext)) {\n        showEditor = true;\n    }\n\n    // show the file in the iframe\n\n    if (!showEditor) {\n\n        let fileViewerIframe = $('.bp-file-explorer-file-viewer-iframe', this.container);\n        // set height and width of iframe\n        //fileViewerIframe.css('height', '100%');\n        //fileViewerIframe.css('width', '500px');\n        let src = root + '/' + file;\n        console.log('loading src', src);\n        fileViewerIframe.attr('src', src);\n\n        $('.bp-file-explorer-file-viewer-iframe').show();\n        $('.bp-file-explorer-file-viewer-editor').hide();\n\n    }\n\n    if (showEditor) {\n        // instead of loading the file in iframe, we will display its contents in the code editor\n\n        // first we fetch the file contents using fetch\n        let filePath = '/' + root + '/' + file;\n        let fileCDN = 'https://files.buddypond.com';\n        filePath = fileCDN + filePath;\n        // console.log(\"fetching filePath\", filePath);\n        let fileContents = await fetch(filePath);\n\n        // now we will write the contents to the editor\n        // for now just JSON.stringify the contents to .bp-file-explorer-file-viewer\n        let fileText = await fileContents.text();\n        // let fileExt = file.split('.').pop();\n        let fileMimeType = this.mime.getType(filePath);\n        if (this.editor) {\n            if (fileMimeType) {\n                this.editor.changeEditorLanguage(fileMimeType);\n            }\n            this.editor.editor.setValue(fileText);\n            this.editor.filePath = filePath;\n        } else {\n            let fileViewerEditor = $('.bp-file-explorer-file-viewer-editor', this.container);\n            // console.log(\"setting text content\", fileText);\n\n        }\n\n        //fileViewerEditor.html('');\n        //let pre = document.createElement('pre');\n        //pre.textContent = await fileContents.text();\n        //fileViewerEditor.append(pre);\n\n        // show the iframe, hide the editor\n        $('.bp-file-explorer-file-viewer-iframe').hide();\n        $('.bp-file-explorer-file-viewer-editor').show();\n        $('.bp-file-explorer-drag-upload').hide();\n        // for now, ensure that editor state resets to editor showing code ( not preview or upload )\n        // this is in case the user has previous entered preview mode and then clicked new file on file tree\n        $('.pad-editor-button-edit').click();\n\n    }\n\n}","export default class BrowserWindow {\n    constructor(bp, container, initialUrl = 'https://example.com') {\n        this.bp = bp;\n        this.container = container;\n        this.currentUrl = initialUrl;\n        this.iframe = null; // Reference to the iframe\n        this.history = [initialUrl]; // Store visited URLs\n        this.currentIndex = 0; // Current position in history\n        this.baseUrl = ''; // Base URL for relative links\n        this.init();\n        return this;\n    }\n\n    init() {\n        // Create and inject HTML\n        let html = `\n            <div class=\"bp-browserwindow-container\">\n                <div class=\"bp-browserwindow-toolbar\">\n                    <div class=\"bp-browserwindow-navigation\">\n                        <button class=\"bp-browserwindow-nav-btn back\" disabled>←</button>\n                        <button class=\"bp-browserwindow-nav-btn forward\" disabled>→</button>\n                        <button class=\"bp-browserwindow-nav-btn reload\">↻</button>\n                    </div>\n                    <div class=\"bp-browserwindow-addressbar\">\n                        <span class=\"ssl-indicator\">🔒</span>\n                        <input type=\"text\" class=\"bp-browserwindow-url\" value=\"${this.currentUrl}\">\n                    </div>\n                </div>\n                <div class=\"bp-browserwindow-content\">\n                    <iframe src=\"about:blank\" style=\"width:100%; height:100%; border:none;\"></iframe>\n                </div>\n            </div>\n        `\n        let el = document.createElement('div');\n        el.className = 'bp-browserwindow';\n        el.innerHTML = html;\n        this.container.append(el);\n        \n        // Reference the iframe\n        this.iframe = this.container.querySelector('iframe');\n        // Set up event listeners\n        this.setupEventListeners();\n        \n        // Initialize with the first URL\n        this.navigate(this.currentUrl);\n\n        this.bp.on('browser::setAddressBar', 'update-address-bar-value', (url) => {\n            this.setAddressBar(url);\n        })\n\n    }\n\n    setBaseUrl(url) {\n        this.baseUrl = url;\n    }\n\n    setContent(htmlContent, attempts = 1) {\n        try {\n            const doc = this.iframe.contentDocument || this.iframe.contentWindow.document;\n            doc.open();\n            // Set the base URL before writing the content\n            const baseTag = `<base href=\"${this.baseUrl}\" target=\"_blank\">`;\n            // set the base of the current document\n            // doc.write(baseTag);\n            const contentWithBase = baseTag + htmlContent;\n            //console.log('writing', contentWithBase)\n            doc.write(contentWithBase);\n            doc.close();\n    \n        } catch (e) {\n            console.log('Error setting content:', e);\n            // clear out the iframe and reload it with about:blank\n            // this could be due to previous page being remote url / cross-domain\n            this.iframe.src = 'about:blank';\n            // console.error('Error setting content:', e);\n            if (attempts < 9001) {\n                setTimeout(() => {\n                    this.setContent(htmlContent, attempts + 1);\n                }, 100);\n            } else {\n                console.error('Failed to set content after 2 attempts');\n            }\n        }\n    }\n\n    setupEventListeners() {\n        const urlInput = this.container.querySelector('.bp-browserwindow-url');\n        const backBtn = this.container.querySelector('.bp-browserwindow-nav-btn.back');\n        const forwardBtn = this.container.querySelector('.bp-browserwindow-nav-btn.forward');\n        const reloadBtn = this.container.querySelector('.bp-browserwindow-nav-btn.reload');\n\n        urlInput.addEventListener('keypress', (e) => {\n            if (e.key === 'Enter') {\n                this.navigate(urlInput.value);\n            }\n        });\n\n        backBtn.addEventListener('click', () => this.goBack());\n        forwardBtn.addEventListener('click', () => this.goForward());\n        reloadBtn.addEventListener('click', () => this.reload());\n    }\n\n    navigate(url) {\n\n        // console.log('navigating to', url);\n\n        // lets' check url for http or https\n        // if either are missing, add https\n        if (!url.startsWith('http://') && !url.startsWith('https://')) {\n            url = 'https://' + url;\n        }\n\n        // If we're not at the end of the history, remove all entries after current position\n        if (this.currentIndex < this.history.length - 1) {\n            this.history = this.history.slice(0, this.currentIndex + 1);\n        }\n\n        // Add new URL to history and update current index\n        this.history.push(url);\n        this.currentIndex = this.history.length - 1;\n        \n        // Update current URL and UI\n        this.currentUrl = url;\n        this.updateAddressBar();\n        this.updateNavigationButtons();\n    }\n\n    goBack() {\n        if (this.currentIndex > 0) {\n            this.currentIndex--;\n            this.currentUrl = this.history[this.currentIndex];\n            this.updateAddressBar();\n            this.updateNavigationButtons();\n        }\n    }\n\n    goForward() {\n        if (this.currentIndex < this.history.length - 1) {\n            this.currentIndex++;\n            this.currentUrl = this.history[this.currentIndex];\n            this.updateAddressBar();\n            this.updateNavigationButtons();\n        }\n    }\n\n    reload() {\n        // Reload the current URL\n        this.iframe.src = this.currentUrl;\n    }\n\n    setAddressBar(url) {\n        const urlInput = this.container.querySelector('.bp-browserwindow-url');\n        urlInput.value = url;\n    }\n\n    updateAddressBar() {\n        // console.log('updating address bar', this.currentUrl);\n        const urlInput = this.container.querySelector('.bp-browserwindow-url');\n        urlInput.value = this.currentUrl;\n        // set the src of the iframe to the currentUrl\n        this.iframe.src = this.currentUrl;\n    }\n\n    updateNavigationButtons() {\n        const backBtn = this.container.querySelector('.bp-browserwindow-nav-btn.back');\n        const forwardBtn = this.container.querySelector('.bp-browserwindow-nav-btn.forward');\n\n        // Enable/disable back button\n        backBtn.disabled = this.currentIndex <= 0;\n\n        // Enable/disable forward button\n        forwardBtn.disabled = this.currentIndex >= this.history.length - 1;\n    }\n\n    // Helper method to get navigation history\n    getHistory() {\n        return {\n            history: this.history,\n            currentIndex: this.currentIndex,\n            currentUrl: this.currentUrl\n        };\n    }\n}","import BrowserWindow from '../browser/BrowserWindow.js';\n\nexport default class PadEditor {\n    constructor(parentElement, options = {}) {\n        if (!parentElement) {\n            throw new Error('PadEditor requires a parent element');\n        }\n\n        options.files = options.files || [];\n        this.bp = options.bp;\n        this.options = options;\n        this.files = options.files;\n        \n        this.parentElement = parentElement;\n        this.options = options;\n        this.editor = null;\n        this.currentContent = '';\n        this.previewMode = false;\n        \n        // Create main container\n        this.container = document.createElement('div');\n        this.container.className = 'pad-editor';\n        this.container.style.display = 'flex';\n        this.container.style.flexDirection = 'column';\n        this.parentElement.appendChild(this.container);\n        \n        // Create controls\n        this.controls = document.createElement('div');\n        this.controls.className = 'editor-controls';\n        \n        // Create main content area\n        this.contentArea = document.createElement('div');\n        this.contentArea.className = 'editor-content';\n        this.contentArea.style.display = 'flex';\n        this.contentArea.style.flex = '1';\n        \n        // Create editor container\n        this.editorContainer = document.createElement('div');\n        this.editorContainer.className = 'editor-container';\n        this.editorContainer.style.flex = '1';\n        \n        // Create preview iframe\n        /*\n        this.previewFrame = document.createElement('iframe');\n        this.previewFrame.className = 'preview-frame';\n        this.previewFrame.style.flex = '1';\n        this.previewFrame.style.display = 'none';\n        this.previewFrame.style.border = 'none';\n        this.previewFrame.src = 'about:blank';\n        */\n\n        let liveLink = this.bp.config.host + '/' + this.bp.me\n\n\n        // TODO: replace all this.previewFrame with this.browserPreview\n        // we now have the BrowserWindow ( which has its own iframe )\n        // console.log('this.previewFrame', this.previewFrame);\n        // Assemble the DOM structure\n        this.container.appendChild(this.controls);\n        this.container.appendChild(this.contentArea);\n        this.previewFrame = new BrowserWindow(this.bp, this.container, liveLink);\n        this.previewFrame.setContent('loading...');\n        // set the base url to this.bp.config.host + '/' + this.bp.me\n        this.previewFrame.setBaseUrl(this.bp.config.cdn + '/' + this.bp.me + '/');\n        this.contentArea.appendChild(this.editorContainer);\n        \n        this.setupControls();\n        \n        return this;\n    }\n\n    setupControls() {\n        const buttons = [\n            { text: 'Preview', action: () => this.onPreview() },\n            { text: 'Edit', action: () => this.onEdit() },\n            { text: 'Update', action: () => this.onUpdate() },\n            { text: 'Delete', action: () => this.onDelete() },\n\n            // { text: 'Cancel', action: () => this.onCancel() }\n        ];\n\n        buttons.forEach(({ text, action }) => {\n            const button = document.createElement('button');\n            button.className = 'desktopButton';\n             button.classList.add('pad-editor-button-' + text.toLowerCase());\n            button.textContent = text;\n            button.onclick = action;\n            this.controls.appendChild(button);\n        });\n    }\n\n    async init() {\n        await this.loadMonaco();\n        await this.initializeEditor();\n        await this.initializeFileTree(this.files);\n        await this.bp.load('browser');\n\n        // hide the update and cancel buttons\n        // this.controls.children[2].style.display = 'none';\n        // this.controls.children[3].style.display = 'none';\n\n        return this;\n    }\n\n    async loadMonaco() {\n        if (!window.require) {\n            await this.loadScript('https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.52.2/min/vs/loader.js');\n        }\n\n        return new Promise((resolve) => {\n            require.config({ paths: { 'vs': 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.52.2/min/vs' } });\n            require(['vs/editor/editor.main'], resolve);\n        });\n    }\n\n    loadScript(url) {\n        return new Promise((resolve, reject) => {\n            const script = document.createElement('script');\n            script.src = url;\n            script.onload = resolve;\n            script.onerror = reject;\n            document.head.appendChild(script);\n        });\n    }\n\n    async initializeEditor() {\n        this.editor = monaco.editor.create(this.editorContainer, {\n            value: this.currentContent,\n            language: 'html',\n            theme: 'vs-dark',\n            automaticLayout: true,\n            minimap: { enabled: false }\n        });\n    }\n    \n    changeEditorLanguage(newLanguage) {\n        const model = this.editor.getModel();\n        monaco.editor.setModelLanguage(model, newLanguage);\n    }\n\n    async initializeFileTree(files = []) {\n        if (this.options.fileTree) {\n            this.fileTreeComponent = this.options.fileTree.create(this.fileTree, {\n                onFileSelect: (filePath, target) => {\n                    this.loadFile(filePath);\n                },\n                onFolderToggle: (folderPath, isExpanded) => {\n                    // console.log('Folder toggled:', folderPath, isExpanded);\n                }\n            });\n            \n            this.fileTreeComponent.render(files);\n        }\n    }\n\n    loadFile(filePath) {\n        const content = this.options.getFileContent?.(filePath) || '';\n        // this.filePath = filePath;\n        this.setContent(content);\n    }\n\n    getContent() {\n        return this.editor ? this.editor.getValue() : this.currentContent;\n    }\n\n    setContent(content) {\n        this.currentContent = content;\n        if (this.editor) {\n            this.editor.setValue(content);\n        }\n    }\n\n    togglePreview(show) {\n        this.previewMode = show;\n        this.editorContainer.style.display = show ? 'none' : 'block';\n        //this.previewFrame.style.display = show ? 'block' : 'none';\n        // hide tree\n        //this.fileTree.style.display = 'none';\n        \n    }\n\n    updatePreview(content) {\n\n        // we need to get all three files content (index.html, style.css, script.js)\n        // and write all of them to the iframe\n\n        if (!content) {\n            content = this.getContent();\n        }\n        // console.log('setting preview content', content);\n        this.previewFrame.setContent(content);\n    }\n\n    onEdit() {\n        this.togglePreview(false);\n        if (this.options.onEdit) {\n            this.options.onEdit(this.getContent());\n        }\n    }\n\n    onUpdate() {\n        if (this.options.onUpdate) {\n            this.options.onUpdate(this.filePath, this.getContent());\n        }\n        if (this.previewMode) {\n            this.updatePreview();\n        }\n    }\n\n    onDelete() {\n        if (this.options.onDelete) {\n            this.options.onDelete(this.filePath);\n        }\n    }\n\n    onPreview() {\n        this.togglePreview(true);\n        if (this.options.onPreview) {\n            this.options.onPreview(this.getContent());\n        }\n\n        // TODO: reload the preview from this.currentContent\n        // Needs to reset the iframe between about:blank type and iframe.src remote type    \n        this.updatePreview();\n\n    }\n\n    onCancel() {\n        this.togglePreview(false);\n        if (this.options.onCancel) {\n            this.options.onCancel();\n        }\n    }\n\n    dispose() {\n        if (this.editor) {\n            this.editor.dispose();\n        }\n        this.container.remove();\n    }\n}","export default function buildJsTreeData(id, paths) {\n    const root = { id: id, text: id, state: { opened: true }, children: [] };\n\n    paths.forEach(path => {\n        const parts = path.split('/').filter(part => part.length);\n        let current = root;\n\n        for (let i = 0; i < parts.length; i++) {\n            const part = parts[i];\n            const isFile = i === parts.length - 1 && part.includes('.');\n            const newPath = parts.slice(0, i + 1).join('/');\n\n            let node = current.children.find(child => child.text === part);\n            if (!node) {\n                node = {\n                    id: newPath, // Unique identifier based on the path\n                    text: part,  // Display text\n                    icon: isFile ? 'jstree-file' : 'jstree-folder', // Custom icon class if needed\n                    children: isFile ? [] : [],\n                    state: {\n                        opened: false, // Folders are closed by default unless specified\n                        selected: false,\n                        disabled: false\n                    }\n                };\n                current.children.push(node);\n            }\n\n            // Only navigate into non-file nodes\n            if (!isFile) {\n                current = node;\n            }\n        }\n    });\n\n    return [root]; // jsTree expects an array of nodes\n}","import FileExplorerClass from \"./FileExplorer.js\";\nimport getCloudFiles from \"./lib/getCloudFiles.js\";\nimport PadEditor from \"../pad/PadEditor.js\";\nimport buildJsTreeData from \"./lib/buildJsTreeData.js\";\n\nexport default class FileExplorer {\n    constructor(bp, options = {}) {\n        this.bp = bp;\n        this.options = options;\n        this.isPolling = false;\n        return this;\n    }\n\n    async init() {\n\n        let mime = await this.bp.importModule('/v5/apps/based/file-explorer/lib/mime.js', {}, false);\n        this.mime = mime.default;\n\n        // load jstree from CDN ( for now )\n        // TODO: vendor\n        await this.bp.appendScript('https://cdnjs.cloudflare.com/ajax/libs/jstree/3.2.1/jstree.min.js');\n\n        this.bp.log('Hello from File Explorer');\n        //await this.bp.load('/v5/apps/based/file-explorer/FileTree/jsTree.css');\n        await this.bp.load('https://cdnjs.cloudflare.com/ajax/libs/jstree/3.2.1/themes/default/style.min.css');\n\n        this.fileExplorerInstance = new FileExplorerClass(this.bp, {\n            fileTree: {\n                onFileSelect: (filePath, target) => {\n                    $('.bp-file-explorer-drag-upload').hide();\n                    console.log('File selected:', filePath);\n                },\n                onFolderToggle: async (folderPath, isExpanded) => {\n                    $('.bp-file-explorer-drag-upload').hide();\n                    // display the contents of the folder in the main window\n                    console.log(\"Folder toggled:\", folderPath, isExpanded);\n                    return;\n                },\n                onFolderSelect: async (folderPath, target) => {\n                    $('.bp-file-explorer-drag-upload').hide();\n                    console.log('Folder selected:', folderPath);\n                }\n            }\n        });\n        await this.fileExplorerInstance.init();\n\n\n        return 'loaded File Explorer';\n    }\n\n    async create() {\n\n        if (!this.fileExplorer) {\n            this.fileExplorer = this.fileExplorerInstance.create();\n            this.fileExplorer.getCloudFiles = this.getCloudFiles.bind(this);\n            this.fileExplorer.refreshFileTree = this.refreshFileTree.bind(this);\n            this.handleDrop = this.fileExplorer.handleDrop.bind(this.fileExplorer);\n            this.handleUpload = this.fileExplorer.handleUpload.bind(this.fileExplorer);\n        }\n        // TODO: move all this code to inside FileExplorer class\n        // keep file-explorer app very minimal and just wrapper to FileExplorer class + optional windowing\n\n        let defaultFileContent = {};\n\n        let padEditorHolder = document.createElement('div');\n        padEditorHolder.className = 'pad-editor-holder';\n        $('.bp-file-explorer-file-viewer-editor', this.fileExplorer.content).append(padEditorHolder);\n\n        this.fileExplorer.getUsage();\n        const editor = new PadEditor(padEditorHolder, {\n            bp: this.bp,\n            // fileTree: fileTreeComponent, // Your file tree implementation\n            files: [],\n            getFileContent: (filePath) => {\n                // Your logic to get file content\n                return defaultFileContent[filePath];\n            },\n            onEdit: (content) => {\n                // hide the preview and show the code editor\n                $('.editor-content').flexShow();\n                //$('.myProfile').flexHide();\n\n                // show the Update and Cancel buttons\n                $('.pad-editor-button-update').show();\n                $('.pad-editor-button-cancel').show();\n\n            },\n\n            onDelete: async (filePath) => {\n                let relativePath = filePath.replace('https://files.buddypond.com/' + this.bp.me + '/', '');\n                // console.log('relativePath', relativePath);\n                try {\n                    await this.bp.apps.client.api.removeFile(relativePath);\n                    // at this point we have confirmd with server that file is being deleted\n                    // we should immediately remove the file from the file tree\n                    let tree = $('#jtree').jstree(true);\n                    // let localPath = filePath.replace('https://files.buddypond.com/', '');\n                    // console.log('looking for node with path', relativePath);\n                    let node = tree.get_node(relativePath);\n                    // console.log('found node', node);\n                    tree.delete_node(node);\n\n                } catch (err) {\n                    console.error('Error deleting file:', err);\n                }\n            },\n\n            onUpdate: async (filePath, content) => {\n\n                // show \"updating\" overlay\n                $('.bp-file-explorer-update-overlay').flexShow();\n\n                // console.log(\"onUpdate\", filePath, content);\n\n                let relativePath = filePath.replace('https://files.buddypond.com/' + this.bp.me + '/', '');\n                // console.log('relativePath', relativePath);\n                // console.log(\"MIMMMMME\", this.mime);\n\n                let mimeType = this.mime.getType(relativePath);\n                // console.log('using mimeType', mimeType);\n\n                // Assuming 'content' is a string, we need to convert it to a Blob, then to a File\n                const blob = new Blob([content], { type: mimeType });  // Adjust the MIME type as necessary\n\n                // Creating a File object from the Blob\n                const file = new File([blob], relativePath.split('/').pop(), {\n                    type: blob.type,\n                    lastModified: new Date()  // You might need to adjust this if you have specific requirements\n                });\n                file.filePath = relativePath;\n\n                // console.log('going to upload file', file);\n\n                // Assuming uploadFile() expects a standard File type object\n                try {\n                    let files = await this.bp.apps.client.api.uploadFile(file);\n                    // TODO: take all files add them to jsTree... is there easier better way?\n                    //        we could re-render and wait...might be best as they are 404 until they are ready\n                } catch (err) {\n                    alert('Error uploading file: ' + err.message);\n                }\n\n                this.fileExplorer.getUsage();\n\n                this.bp.emit('file-explorer::update', {\n                    path: relativePath,\n                });\n\n                $('.bp-file-explorer-update-overlay').flexHide();\n\n            },\n\n            onPreview: (content) => {\n                // hide the code editor and show the preview .myProfile\n                // what is handling this now? directly calling into browser app?\n                // check and ensure that we don't need to move that logic here\n                // console.log(\"onPreview\", content);\n            },\n            onCancel: () => {\n                // console.log('Cancel clicked');\n                // hide the Update and Cancel buttons\n                $('.pad-editor-button-update').hide();\n                $('.pad-editor-button-cancel').hide();\n                // hide the code editor and show the preview\n                $('.pad-editor-button-preview').click();\n\n            }\n        });\n\n        this.editor = editor;\n\n        await editor.init();\n\n        // set the editor in the file explorer\n        this.fileExplorer.editor = editor;\n\n        // load the content of the first file\n        //editor.loadFile('/myprofile/index.html');\n\n        // set the height of the editor\n        editor.editorContainer.style.height = '600px';\n        // this.editor.previewFrame.setContent(buddyProfilePad.content);\n\n\n        // get the latest cloud files to populate the file explorer\n        let cloudFiles = await this.getCloudFiles('', 6); // hard-coded to 6 ( for now )\n        const treeData = buildJsTreeData(this.bp.me, cloudFiles.files);\n        this.fileExplorer.cloudFiles = cloudFiles;\n        // console.log(\"making tree with data\", treeData);\n        // console.log(\"treeData\", JSON.stringify(treeData, true, 2));\n        // TODO: connect tree to AJAX backend for granular loading ( not just loading the whole tree at once )\n\n        $('#jtree').jstree({\n            'core': {\n                'data': treeData,\n                // This option ensures that when a node is selected by clicking it won't be opened/closed\n                'multiple': true,  // This allows single selection of nodes\n                'check_callback': true  // This allows certain operations in the tree\n            },\n            'plugins': ['contextmenu'],  // Add 'contextmenu' to the list of plugins\n            'contextmenu': {\n                'items': function (node) {\n                    // console.log(node)\n                    var tree = $('#jtree').jstree(true);\n\n                    return {\n                        /* TODO: create and delete\n                        \"Create\": {\n                            \"separator_before\": false,\n                            \"separator_after\": false,\n                            \"label\": \"Create\",\n                            \"action\": function (obj) {\n                                tree.create_node(node);\n                            }\n                        },\n                        \"Rename\": {\n                            \"separator_before\": false,\n                            \"separator_after\": false,\n                            \"label\": \"Rename\",\n                            \"action\": function (obj) {\n                                tree.edit(node);\n                            }\n                        },\n                        */\n                        \"Delete\": {\n                            \"separator_before\": false,\n                            \"separator_after\": true,\n                            \"label\": \"Delete\",\n                            \"action\": function (obj) {\n                                tree.delete_node(node);\n                            }\n                        }\n                    }\n                }\n            }\n        }).on('ready.jstree', (e, data) => {\n            // console.log('Tree is now ready');\n            // render the root folder contents\n            //let jsTree = $('#jtree').jstree(true);\n\n            if (this.options.context) {\n                if (this.options.context === 'default') { // TODO: why is default value here?\n                    this.fileExplorer.renderPathContents('/');\n\n                } else {\n                    this.fileExplorer.renderPathContents(this.options.context);\n                }\n\n            } else {\n                this.fileExplorer.renderPathContents('/');\n            }\n\n        }).on(\"select_node.jstree\", (e, data) => {\n            // Get the reference to the jsTree instance\n            var instance = data.instance;\n            var node = data.node;\n\n            if (node.children.length > 0) {  // Check if the node has children, indicating it's a folder\n                // Prevent the default select action to toggle on first click\n                e.preventDefault();\n                // Toggle open/close on single click\n                this.fileExplorer.currentSelectedNode = node;\n                instance.toggle_node(node);\n            }\n            $('.bp-file-explorer-drag-upload').hide();\n\n        });\n\n        $('.bp-file-explorer-drag-upload').flexShow();\n\n        this.fileExplorer.setPreviewAddressBar('/');\n        // $('.bp-file-explorer-address-input').val('/');\n\n        // TODO: move as much of this logic to the FileExplorer class as possible\n\n        $('#jtree').on(\"delete_node.jstree\", (e, data) => {\n            // delete the file or directory from CDN\n            // console.log(\"delete_node.jstree\", e, data);\n            let node = data.node;\n            let path = node.id;\n            // console.log('jstree request to delete', path);\n\n            // delete the file from the CDN\n            // not needed?\n            //let relativePath = path.replace('https://files.buddypond.com/' + this.bp.me + '/', '');\n            let relativePath = path;\n            // console.log('relativePath', relativePath);\n\n            this.bp.apps.client.api.removeFile(relativePath).then(() => {\n                // console.log('file removed from CDN', relativePath);\n                // console.log('this.fileExplorer.cloudFiles.files', this.fileExplorer.cloudFiles.files);\n\n                this.fileExplorer.cloudFiles.files = this.fileExplorer.cloudFiles.files.filter(file => file !== relativePath);\n                // console.log('this.fileExplorer.cloudFiles.files', this.fileExplorer.cloudFiles.files);\n\n            });\n\n        });\n\n        $('#jtree').on(\"changed.jstree\", (e, data) => {\n            // console.log('changed.jstree', e, data.selected);\n\n            // determine if the selected node is a file or folder\n            let node = data.instance.get_node(data.selected[0]);\n            // console.log('attempted to get node with id', data.selected[0]);\n            // renderNodeContents(data, node);\n            if (node) {\n\n                this.fileExplorer.renderPathContents('/' + node.id);\n\n            } else {\n                console.log('node not found', data.selected[0]);\n            }\n\n        });\n\n        // when click .upload-files, dynamically create input with directory support and click it\n        // take the results and send them to handleDrop\n        $('.upload-files').on('click', async (e) => {\n            // console.log('upload files clicked');\n            let input = document.createElement('input');\n            input.type = 'file';\n            input.multiple = true;\n            input.webkitdirectory = false;\n            input.directory = false;\n            input.click();\n\n            input.onchange = async (e) => {\n                // console.log('files selected', e.target.files);\n                let items = e.target.files;\n                await this.handleUpload(e);\n            };\n        });\n\n        $('.upload-directory').on('click', async (e) => {\n            // console.log('upload directory clicked');\n            let input = document.createElement('input');\n            input.type = 'file';\n            input.multiple = true;\n            input.webkitdirectory = true;\n            input.directory = true;\n            input.click();\n\n            input.onchange = async (e) => {\n                // console.log('files selected', e.target.files);\n                let items = e.target.files;\n                await this.handleUpload(e);\n            };\n        });\n\n        $('.refresh-files').on('click', async (e) => {\n\n            await this.refreshFileTree();\n\n\n        });\n\n        // console.log('got the cloud files', cloudFiles.files);\n        return this;\n\n    }\n\n    async refreshFileTree() {\n\n        if (this.isPolling) {\n            console.log('Already polling for changes, please wait...');\n            return;\n        }\n\n        this.isPolling = true;\n\n        // console.log('previous cloud files', this.fileExplorer.cloudFiles.files);\n        let attempts = 0;\n        const maxAttempts = 10; // You can adjust the maximum number of polling attempts\n    \n        const pollForChanges = async () => {\n            let cloudFiles = await this.getCloudFiles('', 6); // hard-coded to 6 (for now)\n    \n            // Compare current cloud files with previous ones\n            if (!this.areFilesSame(this.fileExplorer.cloudFiles.files, cloudFiles.files)) {\n                // console.log('Cloud files have changed, updating tree...');\n                const treeData = buildJsTreeData(this.bp.me, cloudFiles.files);\n                this.fileExplorer.cloudFiles = cloudFiles;\n    \n                // get the jsTree instance\n                let jsTree = $('#jtree').jstree(true);\n                // re-render the tree contents, we don't wish to destroy our previous configuration\n                jsTree.settings.core.data = treeData;\n                jsTree.refresh();\n                this.isPolling = false;\n                this.fileExplorer.getUsage();\n            } else if (attempts < maxAttempts) {\n                // console.log('No changes detected, trying again...');\n                attempts++;\n                setTimeout(pollForChanges, 1000); // Try again each second\n            }\n\n            if (attempts >= maxAttempts) {\n                // console.log('Max attempts reached, stopping polling...');\n                this.isPolling = false;\n            }\n\n        };\n    \n        pollForChanges();\n    }\n    \n    // Helper function to compare two arrays of files\n    areFilesSame(oldFiles, newFiles) {\n\n        const oldSet = new Set(oldFiles.map(file => file)); // Assuming each file has a unique 'id'\n        const newSet = new Set(newFiles.map(file => file));\n    \n        if (oldSet.size !== newSet.size) {\n            return false;\n        }\n    \n        for (let id of newSet) {\n            if (!oldSet.has(id)) {\n                return false;\n            }\n        }\n    \n        return true;\n    }\n    \n    async remove() {\n        // Clean up the file explorer instance and its event handlers\n        if (this.fileExplorer) {\n            // Remove the drag/drop handler\n            if (this.handleDrop) {\n                // Assuming handleDrop was bound to some element, remove it\n                $('.bp-file-explorer-drag-upload').off('drop', this.handleDrop);\n            }\n\n            // Clean up the jstree events and instance\n            $('#jtree').off('ready.jstree changed.jstree delete_node.jstree');\n            $('#jtree').jstree('destroy');\n\n            // Clean up the editor if it exists\n            if (this.editor) {\n                // Remove the editor instance\n                this.editor.destroy?.();\n                this.editor = null;\n            }\n\n            // Remove DOM elements created by the component\n            $('.bp-file-explorer-file-viewer-editor .pad-editor-holder').remove();\n            $('.bp-file-explorer-drag-upload').remove();\n            $('.bp-file-explorer-address-input').remove();\n\n            // Clear the file explorer instance\n            this.fileExplorer.destroy?.();\n            this.fileExplorer = null;\n            this.handleDrop = null;\n            this.handleUpload = null;\n        }\n    }\n\n    async open({ context } = {}) {\n        // console.log(`Opening file explorer with context ${context}`);\n        this.options.context = context;\n        if (!this.fileExplorer) {\n            this.fileExplorer = this.fileExplorerInstance.create();\n            this.fileExplorer.getCloudFiles = this.getCloudFiles.bind(this);\n            this.fileExplorer.refreshFileTree = this.refreshFileTree.bind(this);\n            this.handleDrop = this.fileExplorer.handleDrop.bind(this.fileExplorer);\n            this.handleUpload = this.fileExplorer.handleUpload.bind(this.fileExplorer);\n        }\n\n        // console.log('created explorer', this.fileExplorer);\n\n\n        if (!this.fileExplorerWindow) {\n            this.fileExplorerWindow = this.bp.apps.ui.windowManager.createWindow({\n                id: 'file-explorer',\n                title: 'Buddy Files',\n                app: 'file-explorer',\n                icon: 'desktop/assets/images/icons/icon_file-explorer_64.png',\n                x: 100,\n                y: 30,\n                width: 1000,\n                height: 600,\n                minWidth: 200,\n                minHeight: 200,\n                parent: $('#desktop')[0],\n                content: this.fileExplorer.container,\n                resizable: true,\n                minimizable: true,\n                maximizable: true,\n                closable: true,\n                focusable: true,\n                maximized: false,\n                minimized: false,\n                onClose: async () => {\n                    // delete the local reference to the file explorer\n\n                    await this.remove();\n\n                    this.fileExplorerWindow = null;\n                }\n            });\n\n            this.fileExplorerWindow.container.classList.add('has-droparea');\n\n            // this window should have no selectable text\n            this.fileExplorerWindow.container.style.userSelect = 'none';\n            this.create();\n\n             this.bp.on('auth::qtoken', 'reload-file-explorer', async (data) => {\n                // console.log('auth::qtoken event received, reloading file explorer');\n                // reload the file explorer\n                // just close and re-open the file explorer window ( for now )\n                // TODO: make it easier to refresh the file explorer session without closing it\n                if (this.fileExplorerWindow) {\n                    await this.remove();\n                    this.fileExplorerWindow.close();\n                }\n                this.fileExplorerWindow = null;\n                this.fileExplorer = null;\n                this.open();\n                \n             });\n\n        } else {\n            // jsTree should be ready at this point ( as file-explorer was already created )\n            // this could have race condition if spammed opened on first load\n            if (this.options.context) {\n                this.fileExplorer.renderPathContents(this.options.context);\n\n            } else {\n                this.fileExplorer.renderPathContents('/');\n\n            }\n\n        }\n        this.fileExplorerWindow.maximize();\n\n        if (this.bp.me === \"Guest\") {\n            $('.upload-message', '.bp-file-explorer-drag-upload').html('Guest account files are read-only.<br/>Please  <button class=\"open-app action-button\" data-app=\"buddylist\">log in</button> to BuddyPond.');\n            $('.storage-used', '.bp-file-explorer-drag-upload').remove();\n\n        }\n        \n\n        return this.fileExplorerWindow;\n    }\n\n}\n\nFileExplorer.prototype.getCloudFiles = getCloudFiles;\nFileExplorer.prototype.buildJsTreeData = buildJsTreeData;","export default async function getCloudFiles(prefix, depth) {\n\n    // users can query their cloud files by glob\n    // users can only modify files in their home directory ( /buddyname )\n\n    // console.log('this.bp getting cloud files', this.bp);\n    // console.log(\"using prefix\", prefix, 'at depth', depth);\n\n    let userFiles = await this.bp.apps.client.api.listFiles(prefix, depth);\n    // console.log('userFiles', userFiles);\n    return userFiles;\n\n}"],"names":["FileTree","constructor","bp","options","this","init","appendCSS","create","container","onFileSelect","file","console","log","onFolderToggle","folder","isExpanded","indent","document","querySelector","treeRoot","createElement","className","appendChild","handleClick","bind","renderItem","addEventListener","event","target","closest","isFolder","dataset","type","path","classList","toggle","nextElementSibling","style","display","getFileIcon","filename","iconMap","js","json","html","css","png","jpg","pdf","default","split","pop","toLowerCase","item","level","itemContainer","itemElement","paddingLeft","icon","textContent","name","Array","isArray","children","childContainer","forEach","child","toggleFolder","render","files","innerHTML","destroy","removeEventListener","removeChild","buildFileTree","paths","root","parts","filter","part","length","current","i","isFile","includes","newPath","slice","join","node","find","push","findNodeByPath","next","mergeTrees","targetNode","newChildren","existingNames","map","newChild","existingChild","FileUploadOverlay","parent","fileExplorer","uploadFn","initializeElements","bindEvents","overlay","filesList","totalSize","uploadButton","cancelButton","progressContainer","progressBar","progressPercentage","currentFile","fileCount","startUpload","hide","show","from","renderFiles","updateTotalSize","me","$","formatSize","bytes","Math","floor","pow","toFixed","index","size","totalBytes","reduce","acc","currentStorageRemaining","disabled","add","uploadedFiles","uploadedAllFiles","errors","text","progress","totalProgress","updateProgress","error","append","message","addClass","setTimeout","refreshFileTree","getUsage","uploadFile","onProgress","alert","percentage","roundedPercentage","min","round","width","FileExplorer$1","fileTree","currentSelectedNode","id","load","importModule","fileTreeInstance","mime","onClick","setPreviewAddressBar","val","host","config","emit","FileExplorer","prototype","handleDrop","e","preventDefault","stopPropagation","items","dataTransfer","ignoredFiles","ignoredDirs","shouldIgnore","fileName","fullPath","some","dir","processEntry","entry","Promise","resolve","reject","filePath","isDirectory","createReader","readEntries","entries","all","entryItem","then","flat","catch","promises","webkitGetAsEntry","getAsEntry","uploadOverlay","handleUpload","async","processFile","webkitRelativePath","open","context","fileExplorerInstance","getCloudFiles","fileExplorerWindow","renderPathContents","apps","ui","windowManager","createWindow","title","app","x","y","height","minWidth","minHeight","content","resizable","minimizable","maximizable","closable","focusable","maximized","minimized","onClose","remove","userSelect","client","api","on","hasClass","data","instance","jstree","get_node","contents","childNode","renderFolderContents","flexShow","showFile","filesContainer","date","columns","column","columnDiv","Date","toLocaleString","replace","cloudFiles","metadata","lastModified","currentUsage","getFileUsage","currentStorageUsage","usage","storageRemaining","storageLimit","showEditor","flexHide","ext","fileViewerIframe","src","attr","fileContents","fetch","fileText","fileMimeType","getType","editor","changeEditorLanguage","setValue","click","BrowserWindow","initialUrl","currentUrl","iframe","history","currentIndex","baseUrl","el","setupEventListeners","navigate","url","setAddressBar","setBaseUrl","setContent","htmlContent","attempts","doc","contentDocument","contentWindow","contentWithBase","write","close","urlInput","backBtn","forwardBtn","reloadBtn","key","value","goBack","goForward","reload","startsWith","updateAddressBar","updateNavigationButtons","getHistory","PadEditor","parentElement","Error","currentContent","previewMode","flexDirection","controls","contentArea","flex","editorContainer","liveLink","previewFrame","cdn","setupControls","action","onPreview","onEdit","onUpdate","onDelete","button","onclick","loadMonaco","initializeEditor","initializeFileTree","window","require","loadScript","vs","script","onload","onerror","head","monaco","language","theme","automaticLayout","minimap","enabled","newLanguage","model","getModel","setModelLanguage","fileTreeComponent","loadFile","folderPath","getFileContent","getContent","getValue","togglePreview","updatePreview","onCancel","dispose","buildJsTreeData","state","opened","selected","isPolling","appendScript","FileExplorerClass","onFolderSelect","defaultFileContent","padEditorHolder","relativePath","removeFile","tree","delete_node","err","mimeType","blob","Blob","File","treeData","core","multiple","check_callback","plugins","contextmenu","Delete","separator_before","separator_after","label","obj","toggle_node","input","webkitdirectory","directory","onchange","pollForChanges","areFilesSame","jsTree","settings","refresh","oldFiles","newFiles","oldSet","Set","newSet","has","off","maximize","prefix","depth","listFiles"],"mappings":"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"}