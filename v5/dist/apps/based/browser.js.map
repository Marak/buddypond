{"version":3,"file":"browser.js","sources":["../../../apps/based/browser/BrowserWindow.js","../../../apps/based/browser/browser.js"],"sourcesContent":["export default class BrowserWindow {\n    constructor(bp, container, initialUrl = 'https://example.com') {\n        this.bp = bp;\n        this.container = container;\n        this.currentUrl = initialUrl;\n        this.iframe = null; // Reference to the iframe\n        this.history = [initialUrl]; // Store visited URLs\n        this.currentIndex = 0; // Current position in history\n        this.baseUrl = ''; // Base URL for relative links\n        this.init();\n        return this;\n    }\n\n    init() {\n        // Create and inject HTML\n        let html = `\n            <div class=\"bp-browserwindow-container\">\n                <div class=\"bp-browserwindow-toolbar\">\n                    <div class=\"bp-browserwindow-navigation\">\n                        <button class=\"bp-browserwindow-nav-btn back\" disabled>‚Üê</button>\n                        <button class=\"bp-browserwindow-nav-btn forward\" disabled>‚Üí</button>\n                        <button class=\"bp-browserwindow-nav-btn reload\">‚Üª</button>\n                    </div>\n                    <div class=\"bp-browserwindow-addressbar\">\n                        <span class=\"ssl-indicator\">üîí</span>\n                        <input type=\"text\" class=\"bp-browserwindow-url\" value=\"${this.currentUrl}\">\n                    </div>\n                </div>\n                <div class=\"bp-browserwindow-content\">\n                    <iframe src=\"about:blank\" style=\"width:100%; height:100%; border:none;\"></iframe>\n                </div>\n            </div>\n        `\n        let el = document.createElement('div');\n        el.className = 'bp-browserwindow';\n        el.innerHTML = html;\n        this.container.append(el);\n        \n        // Reference the iframe\n        this.iframe = this.container.querySelector('iframe');\n        // Set up event listeners\n        this.setupEventListeners();\n        \n        // Initialize with the first URL\n        this.navigate(this.currentUrl);\n\n        this.bp.on('browser::setAddressBar', 'update-address-bar-value', (url) => {\n            this.setAddressBar(url);\n        })\n\n    }\n\n    setBaseUrl(url) {\n        this.baseUrl = url;\n    }\n\n    setContent(htmlContent, attempts = 1) {\n        try {\n            const doc = this.iframe.contentDocument || this.iframe.contentWindow.document;\n            doc.open();\n            // Set the base URL before writing the content\n            const baseTag = `<base href=\"${this.baseUrl}\" target=\"_blank\">`;\n            // set the base of the current document\n            // doc.write(baseTag);\n            const contentWithBase = baseTag + htmlContent;\n            //console.log('writing', contentWithBase)\n            doc.write(contentWithBase);\n            doc.close();\n    \n        } catch (e) {\n            console.log('Error setting content:', e);\n            // clear out the iframe and reload it with about:blank\n            // this could be due to previous page being remote url / cross-domain\n            this.iframe.src = 'about:blank';\n            // console.error('Error setting content:', e);\n            if (attempts < 9001) {\n                setTimeout(() => {\n                    this.setContent(htmlContent, attempts + 1);\n                }, 100);\n            } else {\n                console.error('Failed to set content after 2 attempts');\n            }\n        }\n    }\n\n    setupEventListeners() {\n        const urlInput = this.container.querySelector('.bp-browserwindow-url');\n        const backBtn = this.container.querySelector('.bp-browserwindow-nav-btn.back');\n        const forwardBtn = this.container.querySelector('.bp-browserwindow-nav-btn.forward');\n        const reloadBtn = this.container.querySelector('.bp-browserwindow-nav-btn.reload');\n\n        urlInput.addEventListener('keypress', (e) => {\n            if (e.key === 'Enter') {\n                this.navigate(urlInput.value);\n            }\n        });\n\n        backBtn.addEventListener('click', () => this.goBack());\n        forwardBtn.addEventListener('click', () => this.goForward());\n        reloadBtn.addEventListener('click', () => this.reload());\n    }\n\n    navigate(url) {\n\n        // console.log('navigating to', url);\n\n        // lets' check url for http or https\n        // if either are missing, add https\n        if (!url.startsWith('http://') && !url.startsWith('https://')) {\n            url = 'https://' + url;\n        }\n\n        // If we're not at the end of the history, remove all entries after current position\n        if (this.currentIndex < this.history.length - 1) {\n            this.history = this.history.slice(0, this.currentIndex + 1);\n        }\n\n        // Add new URL to history and update current index\n        this.history.push(url);\n        this.currentIndex = this.history.length - 1;\n        \n        // Update current URL and UI\n        this.currentUrl = url;\n        this.updateAddressBar();\n        this.updateNavigationButtons();\n    }\n\n    goBack() {\n        if (this.currentIndex > 0) {\n            this.currentIndex--;\n            this.currentUrl = this.history[this.currentIndex];\n            this.updateAddressBar();\n            this.updateNavigationButtons();\n        }\n    }\n\n    goForward() {\n        if (this.currentIndex < this.history.length - 1) {\n            this.currentIndex++;\n            this.currentUrl = this.history[this.currentIndex];\n            this.updateAddressBar();\n            this.updateNavigationButtons();\n        }\n    }\n\n    reload() {\n        // Reload the current URL\n        this.iframe.src = this.currentUrl;\n    }\n\n    setAddressBar(url) {\n        const urlInput = this.container.querySelector('.bp-browserwindow-url');\n        urlInput.value = url;\n    }\n\n    updateAddressBar() {\n        // console.log('updating address bar', this.currentUrl);\n        const urlInput = this.container.querySelector('.bp-browserwindow-url');\n        urlInput.value = this.currentUrl;\n        // set the src of the iframe to the currentUrl\n        this.iframe.src = this.currentUrl;\n    }\n\n    updateNavigationButtons() {\n        const backBtn = this.container.querySelector('.bp-browserwindow-nav-btn.back');\n        const forwardBtn = this.container.querySelector('.bp-browserwindow-nav-btn.forward');\n\n        // Enable/disable back button\n        backBtn.disabled = this.currentIndex <= 0;\n\n        // Enable/disable forward button\n        forwardBtn.disabled = this.currentIndex >= this.history.length - 1;\n    }\n\n    // Helper method to get navigation history\n    getHistory() {\n        return {\n            history: this.history,\n            currentIndex: this.currentIndex,\n            currentUrl: this.currentUrl\n        };\n    }\n}","import BrowserWindow from './BrowserWindow.js';\n\nexport default class Browser {\n    constructor(bp, options = {}) {\n        this.bp = bp;\n        return this;\n    }\n\n    async init() {\n        this.bp.log('Hello from Example');\n        // we can load modules or html fragments or css files here\n        // using this.bp.load() method\n\n        // injects CSS link tag into the head of document\n        await this.bp.load('/v5/apps/based/browser/browser.css');\n\n\n\n        return 'loaded Example';\n    }\n\n    async open() {\n\n        let exampleWindow = this.bp.apps.ui.windowManager.createWindow({\n            id: 'browser-window',\n            title: 'Hello World',\n            x: 50,\n            y: 100,\n            width: 400,\n            height: 300,\n            minWidth: 200,\n            minHeight: 200,\n            parent: $('#desktop')[0],\n            content: '',\n            resizable: true,\n            minimizable: true,\n            maximizable: true,\n            closable: true,\n            focusable: true,\n            maximized: false,\n            minimized: false\n        });\n\n\n        this.browser = new BrowserWindow(this.bp, exampleWindow.content, 'https://example.com');\n    }\n}\n\nBrowser.prototype.BrowserWindow = BrowserWindow;"],"names":["BrowserWindow","constructor","bp","container","initialUrl","this","currentUrl","iframe","history","currentIndex","baseUrl","init","html","el","document","createElement","className","innerHTML","append","querySelector","setupEventListeners","navigate","on","url","setAddressBar","setBaseUrl","setContent","htmlContent","attempts","doc","contentDocument","contentWindow","open","contentWithBase","write","close","e","console","log","src","setTimeout","error","urlInput","backBtn","forwardBtn","reloadBtn","addEventListener","key","value","goBack","goForward","reload","startsWith","length","slice","push","updateAddressBar","updateNavigationButtons","disabled","getHistory","Browser","options","load","exampleWindow","apps","ui","windowManager","createWindow","id","title","x","y","width","height","minWidth","minHeight","parent","$","content","resizable","minimizable","maximizable","closable","focusable","maximized","minimized","browser","prototype"],"mappings":"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"}