{"version":3,"file":"profile.js","sources":["../../../apps/based/profile/lib/wallpapers.js","../../../apps/based/profile/lib/updateProfilePicture.js","../../../apps/based/profile/profile.js","../../../apps/based/profile/lib/user-settings.js"],"sourcesContent":["const wallpapers = {};\n\nwallpapers.legacyWallpapers = function (bp) {\n\n\n  if (bp.apps.wallpaper) {\n    renderWallpaperTypes($('.wallpaperTypes'));\n    bp.on('settings::wallpaper_color', 'update-wallpaper-color-picker', function(color){\n      $('.wallpaperOptionColor').setColor(color)\n      $('.simpleColorDisplay').html(color)\n\n      // update the color of the active wallpaper\n      let activeName = bp.apps.wallpaper.wallpaperManager.active;\n      let active = bp.apps.wallpaper.wallpaperManager.wallpapers[activeName];\n      if (active) {\n        active.changeColor(color);\n      } else {\n        console.log('cannot change color, active wallpaper not found', activeName)\n      }\n    });\n\n    function onSelect (context, hex) {\n      bp.set('wallpaper_color', '#' + hex);\n    }\n\n    function onCellEnter (context, hex) {\n      bp.set('wallpaper_color', '#' + hex);\n    }\n\n    $('.wallpaperOptionColor').simpleColor({\n      boxHeight: 20,\n      cellWidth: 16,\n      cellHeight: 16,\n      defaultColor: desktop.settings.wallpaper_color || '#008F11',\n      inputCSS: { 'border-radius': '4px', 'font-size': '4px', 'width': '10px' },\n      chooserCSS: { 'border': '1px solid #660033', 'top': '20px' },\n      displayCSS: {  },\n      displayColorCode: true,\n      livePreview: true,\n      insert: 'before',\n      onSelect: function (hex, element) {\n        onSelect(bp.apps.wallpaper.active, hex);\n      },\n      onCellEnter: function (hex, element) {\n        onCellEnter(bp.apps.wallpaper.active, hex);\n      },\n      onClose: function (element) {\n      }\n    });\n\n\n    $('input[name=wallpaper_opt]').on('input', function () {\n      let radioValue = $('input[name=wallpaper_opt]:checked').val();\n      // update desktop.settings.wallpaper_name\n      bp.set('wallpaper_name', radioValue);\n    });\n\n\n  }\n\n}\n\nfunction renderWallpaperTypes (el) {\n    for (let w in bp.apps.wallpaper.wallpaperManager._wallpapers) {\n      let _wallpaper = bp.apps.wallpaper.wallpaperManager._wallpapers[w];\n      let checked = '';\n      if (w === desktop.settings.wallpaper_name) {\n        checked = 'checked';\n      }\n      let str = `\n      <input type=\"radio\" id=\"wallPaperRadio${w}\" name=\"wallpaper_opt\" class=\"wallpaper_opt\" value=\"${w}\" ${checked}>\n      <label for=\"wallPaperRadio${w}\">${_wallpaper.label}</label>\n      <br>\n      `;\n      el.append(str);\n    }\n  }\n\n  export default wallpapers;","export default function updateProfilePicture(event, profilePictureImg) {\n  const file = event.target.files[0];\n  const profilePictureInput = event.target;\n  const statusElement = document.querySelector('.aim-profile-picture-upload-status');\n  const statusText = statusElement.querySelector('.status-text');\n\n  // Helper function to update status\n  const updateStatus = (text, state) => {\n    statusElement.classList.remove('uploading', 'success', 'error', 'hidden');\n    statusText.textContent = text;\n    statusElement.classList.add(state);\n    statusElement.style.display = 'block';\n  };\n\n  // Helper function to hide status after delay\n  const hideStatusAfterDelay = (delay = 3000) => {\n    setTimeout(() => {\n      statusElement.classList.add('hidden');\n      statusElement.style.display = 'none';\n    }, delay);\n  };\n\n  if (file) {\n    // Validate file type\n    const validImageTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/jpg', 'image/webp'];\n    if (!validImageTypes.includes(file.type)) {\n      updateStatus('Please select a valid image file (JPEG, PNG, or GIF).', 'error');\n      profilePictureInput.value = ''; // Clear the input\n      hideStatusAfterDelay();\n      return;\n    }\n\n    // Load and resize image\n    const img = new Image();\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      img.src = e.target.result;\n      img.onload = async () => {\n        // Resize image to 128x128 using Canvas\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        canvas.width = 128;\n        canvas.height = 128;\n\n        // Calculate scaling to maintain aspect ratio\n        const scale = Math.min(128 / img.width, 128 / img.height);\n        const scaledWidth = img.width * scale;\n        const scaledHeight = img.height * scale;\n        const offsetX = (128 - scaledWidth) / 2;\n        const offsetY = (128 - scaledHeight) / 2;\n\n        // Draw scaled image on canvas\n        ctx.fillStyle = 'white'; // Optional: white background for transparency\n        ctx.fillRect(0, 0, 128, 128);\n        ctx.drawImage(img, offsetX, offsetY, scaledWidth, scaledHeight);\n\n        // Convert canvas to blob (JPEG for compression)\n        try {\n          const blob = await new Promise((resolve) => {\n            canvas.toBlob(\n              (blob) => resolve(blob),\n              'image/jpeg',\n              0.8 // JPEG quality (0.8 balances size and quality)\n            );\n          });\n\n          // Validate resized file size (300KB = 300 * 1024 bytes)\n          const maxSize = 300 * 1024;\n          if (blob.size > maxSize) {\n            updateStatus('Resized image exceeds 300KB. Please choose a smaller image.', 'error');\n            profilePictureInput.value = ''; // Clear the input\n            hideStatusAfterDelay();\n            return;\n          }\n\n          // Show preview\n          const previewUrl = URL.createObjectURL(blob);\n          profilePictureImg.src = previewUrl;\n\n          // Create a new img element inside .aim-profile-picture-preview\n          const previewImg = document.createElement('img');\n          previewImg.src = previewUrl;\n          previewImg.classList.add('aim-profile-picture-img');\n          const profilePicturePreview = document.querySelector('.aim-profile-picture-preview');\n          profilePicturePreview.innerHTML = ''; // Clear previous preview\n          profilePicturePreview.appendChild(previewImg);\n\n          // Proceed with upload\n          updateStatus('Uploading...', 'uploading');\n          const resizedFile = new File([blob], file.name, {\n            type: 'image/jpeg',\n            lastModified: Date.now(),\n          });\n\n          try {\n            let onProgress = (progress) => {\n              // Assuming progress is a value between 0 and 1\n              const percentage = Math.round(progress * 100);\n              updateStatus(`Uploading: ${percentage}%`, 'uploading');\n            };\n\n\n            // prefix '/profile-pics/' to the file path\n            resizedFile.filePath = '/profile-pics/' + resizedFile.name;\n\n            console.log('Uploading file:', resizedFile);\n\n            let url;\n            try {\n              url = await buddypond.uploadFile(resizedFile, onProgress);\n              console.log('File uploaded to:', url);\n              updateStatus('Upload complete!', 'success');\n              hideStatusAfterDelay();\n\n            } catch (err) {\n              console.error('Error uploading file:', err);\n              updateStatus('Upload failed: ' + err.message, 'error');\n              return;\n            }\n\n            //let url = 'https://files.buddypond.com/Jane/profile-pics/terry-called.jpg';\n            console.log('File uploaded to:', url);\n\n            await this.bp.apps.buddylist.client.setStatus(this.bp.me, {\n              profilePicture : url\n            });\n\n\n            // set the local profile state ( for use in sending messages)\n            this.bp.apps.buddylist.data.profileState.profilePicture = url;\n\n            /*\n            // Simulate upload for testing (remove when real upload is implemented)\n            await new Promise((resolve) => setTimeout(resolve, 2000));\n            onProgress(0.5); // Simulate 50% progress\n            await new Promise((resolve) => setTimeout(resolve, 1000));\n            onProgress(1); // Simulate 100% progress\n            */\n\n\n            // Stub for uploading profile picture API call\n            // await this.bp.apps.client.api.uploadProfilePicture(resizedFile);\n          } catch (error) {\n            console.error('Upload error:', error);\n            updateStatus('Upload failed. Please try again.', 'error');\n            hideStatusAfterDelay();\n          }\n\n          // Clean up (only revoke if not needed for persistent preview)\n          // URL.revokeObjectURL(previewUrl);\n        } catch (error) {\n          console.error('Error processing image:', error);\n          updateStatus('Error processing image. Please try again.', 'error');\n          profilePictureInput.value = ''; // Clear the input\n          hideStatusAfterDelay();\n        }\n      };\n      img.onerror = () => {\n        updateStatus('Failed to load image. Please select a valid image file.', 'error');\n        profilePictureInput.value = ''; // Clear the input\n        hideStatusAfterDelay();\n      };\n    };\n    reader.readAsDataURL(file);\n  }\n}","import wallpapers from './lib/wallpapers.js';\nimport audioSettings from './lib/audio-settings.js';\nimport userSettings from './lib/user-settings.js';\nimport PadEditor from '../pad/PadEditor.js';\n// import LoadingContainer from '../ui/LoadingContainer/LoadingContainer.js';\nimport updateProfilePicture from './lib/updateProfilePicture.js';\nlet defaultFileContent = {};\n\n\nexport default class Profile {\n    constructor(bp, options = {}) {\n        this.bp = bp;\n        return this;\n    }\n\n    async init() {\n\n        // injects CSS link tag into the head of document\n        await this.bp.load('/v5/apps/based/profile/profile.css');\n        // await this.bp.load('/v5/apps/based/ui/LoadingContainer/LoadingContainer.css');\n        await this.bp.load('browser');\n        await this.bp.appendScript('/desktop/assets/js/jquery.simple-color.js');\n\n        // fetches html from the fragment and returns it as a string\n        this.html = await this.bp.load('/v5/apps/based/profile/profile.html');\n\n        return 'loaded Profile';\n    }\n\n    async open(options = {}) {\n\n        let buddyname = this.bp.me || options.context;\n        buddyname = buddyname.replace(\":\", \"\"); // remove any colons for now\n        buddyname = buddyname.replace(\" \", \"\"); // remove any spaces for now\n\n        // Create main content div and setup for tabs\n        let contentDiv = document.createElement('div');\n        contentDiv.classList.add('customProfile');\n\n        // create a new element from the html string\n        let profileContent = document.createElement('div');\n        profileContent.innerHTML = this.html;\n        //contentDiv.append($(buddyProfilePad.content).html());\n        //$(contentDiv).html(buddyProfilePad.content);\n        // $('.myProfile', profileContent).html(contentDiv);\n        //profileContent.append(contentDiv);\n\n        // Initialize tabs\n        if (!this.profileWindow) {\n            this.profileWindow = this.bp.apps.ui.windowManager.createWindow({\n                id: 'profile',\n                title: 'Profile - ' + buddyname,\n                x: 50,\n                y: 100,\n                width: 800,\n                height: 500,\n                minWidth: 200,\n                minHeight: 200,\n                parent: $('#desktop')[0],\n                icon: '/desktop/assets/images/icons/icon_profile_64.png',\n                context: buddyname || 'default',\n                content: profileContent,\n                resizable: true,\n                minimizable: true,\n                maximizable: true,\n                closable: true,\n                focusable: true,\n                maximized: false,\n                minimized: false,\n                onClose: () => {\n                    this.profileWindow = null;\n                }\n            });\n            this.profileWindow.loggedIn = true;\n            this.tabs = new this.bp.apps.ui.Tabs('.tabs-container', '#' + this.profileWindow.id); // Initialize the tab functionality\n\n            wallpapers.legacyWallpapers(bp);\n\n            const profilePictureInput = document.getElementById('profile-picture-input');\n            const profilePictureImg = document.querySelector('.aim-profile-picture-img');\n            // const removeButton = document.querySelector('.aim-profile-picture-remove');\n\n            $('.aim-set-password-email').on('click', (e) => {\n                this.tabs.navigateToTab('#tabs-3');\n            });\n\n            // Handle file selection\n            profilePictureInput.addEventListener('change', async (event) => {\n                updateProfilePicture.call(this, event, profilePictureImg);\n            });\n            /*\n            // Handle remove button click\n            removeButton.addEventListener('click', () => {\n                // Reset to default avatar\n\n                // This is done by calling setStatus profile.profilePicture = '';\n                // await this.bp.apps.client.api.uploadProfilePicture(resizedFile);\n\n                // profilePictureImg.src = '/default-avatar.png';\n\n                // Stub for removing profile picture API call\n                // TODO: Replace with actual API call\n                console.log('Removing profile picture');\n                // Example: removeProfilePicture().then(() => {\n                //     profilePictureImg.src = '/default-avatar.png';\n                // }).catch(error => {\n                //     console.error('Remove failed:', error);\n                // });\n            });\n            */\n\n            // check if user profile has a profilePicture\n            let profilePicture = this.bp.apps.buddylist.data.profileState.profilePicture;\n            let profilePicturePreview = $('.aim-profile-picture-preview');\n\n            if (profilePicture) {\n\n                // profilePicture is a url, set the profilePicturePreview to the url\n                // create a new img element inside .aim-profile-picture-preview\n                let img = document.createElement('img');\n                img.src = profilePicture;\n                img.classList.add('aim-profile-picture-img');\n                profilePicturePreview.append(img);\n\n\n            } else {\n                const avatar = this.bp.vendor.dicebear.createAvatar(this.bp.vendor.dicebearAvatars, {\n                    seed: this.bp.me, // Username as seed for consistent avatar\n                    size: 128, // Avatar size in pixels\n                    backgroundColor: [\"#f0f0f0\"], // Optional: Customize background\n                });\n\n                // Convert avatar to SVG string\n                const svg = avatar.toString();\n                console.log('Avatar SVG:', svg);\n\n                profilePicturePreview.html(svg);\n\n            }\n\n        } else {\n            // this.profileWindow.content.innerHTML = '';\n            // If the window exists and the context has changed, re-render the content\n            this.profileWindow.content = contentDiv;\n            if (this.profileWindow.context !== buddyname) {\n                this.profileWindow.context = buddyname;\n                $(this.profileWindow.content).html(contentDiv.innerHTML);\n                this.profileWindow.setTitle('Profile - ' + buddyname);\n                new this.bp.apps.ui.Tabs('#' + this.profileWindow.id); // Re-initialize the tab functionality\n                // this.profileWindow.render(); Uncomment if there's a render method to refresh the window\n            }\n\n        }\n\n        $('.yourApps tbody', this.profileWindow.content).html('');\n        for (let appName in bp.settings.apps_installed) {\n            renderProfileApp(appName, $('.yourApps')[0]);\n        }\n\n        //$('.profileContent .ctime', this.profileWindow.content).html(buddyProfile.ctime);\n        //console.log('buddyProfile', buddyProfile);\n        //$('.buddyname', this.profileWindow.content).html(buddyProfile.buddyProfile.me);\n\n        // set the liveProfileLink\n        let liveLink = this.bp.config.host + '/' + this.bp.me\n        $('.liveProfileLink', this.profileWindow.content).attr('href', liveLink);\n        $('.liveProfileLink', this.profileWindow.content).html(liveLink);\n\n\n        $('.editProfileButton', this.profileWindow.content).on('click', () => {\n            // show the profile editor\n            $('.profileEditor', this.profileWindow.content).flexShow();\n            // hide the profile content\n            $('.customProfile', this.profileWindow.content).flexHide();\n            $('.updateProfileHtml', this.profileWindow.content).flexShow();\n            $('.cancelProfileEdit', this.profileWindow.content).flexShow();\n        });\n\n        //        $('.profileEditor', this.profileWindow.content).appendTo(this.profileWindow.content);\n\n        // $('.profileHtml', this.profileWindow.content).val(buddyProfilePad.content);\n\n        $('.cancelProfileEdit', this.profileWindow.content).on('click', () => {\n            // hide the profile editor\n            $('.profileEditor', this.profileWindow.content).flexHide();\n            // show the profile content\n            $('.customProfile', this.profileWindow.content).flexShow();\n            $('.updateProfileHtml', this.profileWindow.content).flexHide();\n            $('.cancelProfileEdit', this.profileWindow.content).flexHide();\n        });\n\n        $('.updateProfileHtml').flexHide();\n        $('.cancelProfileEdit').flexHide();\n\n        // TODO: add these back\n        //audioSettings(bp);\n        userSettings(bp);\n\n\n        let padEditorHolder = $('.pad-editor-holder', this.profileWindow.content)[0];\n        // padEditorHolder.className = 'pad-editor-holder';\n\n        /*\n        let fileExplorer = await this.bp.apps['file-explorer'].create();\n        console.log('fffff', fileExplorer.fileExplorer.container)\n        padEditorHolder.append(fileExplorer.fileExplorer.container);\n        profileContent.append(padEditorHolder);\n        */\n\n        let profileUrl = this.bp.config.host + '/' + this.bp.me;\n        // check if this.bp.config.host contains buddypond.com, if not append /index.html\n        if (this.bp.config.host.indexOf('buddypond.com') === -1) {\n            profileUrl = profileUrl + '/index.html';\n        }\n\n        if (!this.browser) {\n            this.browser = new this.bp.apps.browser.BrowserWindow(this.bp, padEditorHolder, profileUrl);\n\n        }\n\n        let yourProfile = $('#your-profile', this.profileWindow.content);\n        this.bp.on('file-explorer::update', 'update-profile-preview-if-profile-index', (data) => {\n            // check if data.path is /index.html\n            // if so, we wish to reload the browser window\n            this.browser.navigate(profileUrl);\n        });\n\n        yourProfile.append(padEditorHolder);\n\n        // TODO: navigate to tabs? this.tabs.showTab(options.context);\n        if (options.context && options.context === 'themes') {\n            $('.themesLink').click();\n        }\n\n        $('.me').html(this.bp.me);\n\n        if (options && options.type === 'settings') {\n            // if type is user-settings, show the user settings tab\n            this.tabs.showTab('#tabs-3');\n        }\n\n        if (options && options.type === 'themes') {\n            // if type is user-settings, show the user settings tab\n            this.tabs.showTab('#tabs-2');\n        }\n\n\n        $('.themeSelect', this.profileWindow.content).on('change', (e) => {\n            let val = $(e.target).val();\n            if (val === 'Custom') {\n                // do nothing\n                return;\n            }\n            this.bp.apps.themes.applyTheme(val); // Apply selected theme\n\n            let themeData = this.bp.apps.themes.themes[val];\n            let themeStyles = themeData.styles || {};\n            let themeStylesTable = $('.theme-styles', this.profileWindow.content);\n            themeStylesTable.html(''); // clear table\n\n            // Create a deep copy so edits don't mutate original\n            let editableTheme = JSON.parse(JSON.stringify(themeData));\n\n            for (let styleName in themeStyles) {\n                let styleValue = themeStyles[styleName];\n                let row = $('<tr></tr>');\n                let propsCell = $('<td colspan=\"2\"></td>');\n\n               propsCell.append(`<div class=\"style-block\"><div class=\"style-title\">${styleName}</div>`);\n\nfor (let prop in styleValue) {\n    let val = styleValue[prop];\n    let inputId = `input_${styleName}_${prop}`.replace(/\\W+/g, '_');\n\n    let colorInput = '';\n    if (isColorProperty(prop, val)) {\n        let safeColor = val.startsWith('#') ? val : '#ffffff';\n        colorInput = `<input type=\"color\" value=\"${safeColor}\" data-style=\"${styleName}\" data-prop=\"${prop}\" class=\"color-picker\" />`;\n    }\n\n    propsCell.append(`\n        <div class=\"prop-row\">\n            <label class=\"prop-name\">${prop}:</label>\n            <input type=\"text\" id=\"${inputId}\" value=\"${val}\" data-style=\"${styleName}\" data-prop=\"${prop}\" />\n            ${colorInput}\n        </div>\n    `);\n    //  <button class=\"remove-prop-btn\" data-style=\"${styleName}\" data-prop=\"${prop}\">✕</button>\n\n}\n\n/*\npropsCell.append(`\n    <div class=\"prop-row\">\n        <label class=\"prop-name\">+</label>\n        <input type=\"text\" class=\"new-prop-name\" placeholder=\"property\" data-style=\"${styleName}\" />\n        <input type=\"text\" class=\"new-prop-value\" placeholder=\"value\" data-style=\"${styleName}\" />\n        <button class=\"add-prop-btn\" data-style=\"${styleName}\">Add</button>\n    </div>\n</div>`);\n*/\n\n\n                row.append(propsCell);\n                themeStylesTable.append(row);\n            }\n\n            // 🔁 Listen to changes and update theme live\n            themeStylesTable.on('input', 'input[type=\"text\"], input.color-picker', function (e) {\n                // set dropdown to Custom\n                $('.themeSelect', this.profileWindow.content).val('Custom');\n                let style = $(e.target).data('style');\n                let prop = $(e.target).data('prop');\n                console.log('style', style, 'prop', prop);\n                if (!style || !prop) return;\n\n                let newValue = $(e.target).val();\n                editableTheme.styles[style][prop] = newValue;\n                console.log('editableTheme.styles', editableTheme);\n                this.bp.apps.themes.applyTheme(editableTheme); // re-apply updated theme\n            }.bind(this));\n\n            // ➕ Add new property\n            themeStylesTable.on('click', '.add-prop-btn', function (e) {\n                let style = $(e.target).data('style');\n                let row = $(e.target).closest('div');\n                let propInput = row.find('.new-prop-name');\n                let valInput = row.find('.new-prop-value');\n\n                let newProp = propInput.val().trim();\n                let newVal = valInput.val().trim();\n\n                if (newProp && newVal) {\n                    editableTheme.styles[style][newProp] = newVal;\n                    $('.themeSelect', this.profileWindow.content).trigger('change'); // re-render\n                }\n            }.bind(this));\n\n            // ❌ Remove property\n            themeStylesTable.on('click', '.remove-prop-btn', function (e) {\n                let style = $(e.target).data('style');\n                let prop = $(e.target).data('prop');\n                delete editableTheme.styles[style][prop];\n                $('.themeSelect', this.profileWindow.content).trigger('change'); // re-render\n            }.bind(this));\n\n            console.log('themeData', themeData);\n        });\n\n        // set value of themeSelect to current theme\n        let currentTheme = this.bp.get('active_theme') || 'Light';\n        $('.themeSelect', this.profileWindow.content).val(currentTheme);\n        // trigger change to apply the theme\n        $('.themeSelect', this.profileWindow.content).trigger('change');\n\n        this.bp.on('settings::active_theme', 'update-dropdown', (data) => {\n            // Update the dropdown to reflect the new active theme\n            let activeTheme = this.bp.get('active_theme') || 'Light';\n            //$('.themeSelect', this.profileWindow.content).val(activeTheme);\n            //$('.themeSelect', this.profileWindow.content).trigger('change');\n        });\n\n        return this.profileWindow;\n\n\n    }\n}\n\nfunction renderProfileApp(appName, container) {\n    //app = desktop.app.appstore.apps[appName]\n    let app = bp.apps.appstore.apps[appName];\n    //console.log('renderProfileApp', appName, app);\n\n    //console.log('renderProfileApp', appName, app);\n    // don't show Profile App itself in Profile App List\n    if (appName === 'profile') {\n        return;\n    }\n    let str = `\n      <tr class=\"open-app\" data-app=\"${appName}\">\n        <td>\n          <img class=\"appStoreIcon float-left\" src=\"desktop/assets/images/icons/icon_${app.icon || appName}_64.png\" />\n        </td>\n        <td>\n         ${app.description || app.label || appName}\n        </td>\n    </tr>`;\n    let el = document.createElement('tr');\n    el.classList.add('open-app');\n    el.setAttribute('data-app', appName);\n    el.innerHTML = str;\n    container.append(el);\n    return str;\n}\n\nfunction isColorProperty(prop, value) {\n    const colorProps = [\n        'color', 'background', 'background-color', 'border-color',\n        'outline-color', 'text-decoration-color', 'column-rule-color',\n        'fill', 'stroke'\n    ];\n\n    const isColorKey = colorProps.includes(prop.toLowerCase());\n\n    const colorRegex = /^#([0-9a-f]{3}|[0-9a-f]{6})$/i\n        || /^rgba?\\(.+\\)$/i\n        || /^hsla?\\(.+\\)$/i\n        || /^[a-z]+$/i; // named colors\n\n    const isColorValue = colorRegex.test(value);\n\n    return isColorKey || isColorValue;\n}\n","export default async function legacyUserSettings(bp) {\n    $('.updateProfileButton').on('click', async function () {\n        let updates = {};\n        updates.email = $('.buddy_email').val();\n        updates.password = $('.buddy_password').val();\n        updates.confirmPassword = $('.confirm_buddy_password').val();\n        $('.updateProfileResponse').html('');\n        if (updates.password) {\n            if (!updates.confirmPassword || (updates.password !== updates.confirmPassword)) {\n                $('.updateProfileResponse').addClass('error');\n                $('.updateProfileResponse').html('Passwords do not match');\n                return;\n            }\n        }\n        console.log('Updating profile with', updates);\n        $('.updateProfileResponse').removeClass('error');\n        try {\n            let passwordChanged = await buddypond.updateAccount({ buddyname: bp.me, password: updates.password, email: updates.email });\n            console.log('password changed', passwordChanged);\n            // update successful\n            if (passwordChanged) {\n                $('.updateProfileResponse').html('Account updated successfully');\n            }\n        } catch (e) {\n            $('.updateProfileResponse').addClass('error');\n            $('.updateProfileResponse').html('Failed to change password ' + e.message);\n            return;\n        }\n\n        /*\n        buddypond.updateBuddyProfile({ updates: updates }, function (err, res) {\n            if (res.error) {\n                alert(res.message);\n                return;\n            }\n            $('.updateProfileResponse').html('Updated!');\n        });\n        */\n    });\n\n\n    if (bp.apps.buddylist && bp.apps.buddylist.data.profileState && bp.apps.buddylist.data.profileState.email) {\n        $('.buddy_email').val(bp.apps.buddylist.data.profileState.email);\n    }\n\n    $('.updateProfileForm').on('submit', function (e) {\n        e.preventDefault();\n        // clear out local profile cache, this will trigger a re-render from next server update\n        // desktop.app.profileCache = {};\n        return false;\n    });\n\n    if (bp.apps.say) {\n        let voices = bp.apps.say.voices;\n        voices.forEach(function (v) {\n            $('.ttsVoice').append(`<option value=\"${v.voiceURI}\">${v.name} ${v.lang}</option>`);\n        });\n    \n    }\n\n    if (desktop.settings.tts_voice_index) {\n        $('.ttsVoice').prop('selectedIndex', desktop.settings.tts_voice_index);\n    }\n\n    $('.ttsVoice').on('change', function () {\n        //desktop.app.tts.voice = voices[$(this).prop('selectedIndex')];\n        let voice = voices[$(this).prop('selectedIndex')];\n        bp.apps.say.setVoice($(this).prop('selectedIndex'));\n        desktop.set('tts_voice', voice);\n        desktop.set('tts_voice_index', $(this).prop('selectedIndex'));\n        bp.say('Hello Beautiful');\n    });\n\n\n    $('.hideFlag').on('click', function () {\n        if ($(this).prop('checked')) {\n            desktop.set('geo_flag_hidden', true);\n        } else {\n            desktop.set('geo_flag_hidden', false);\n        }\n    });\n\n\n\n}"],"names":["wallpapers","renderWallpaperTypes","el","w","bp","apps","wallpaper","wallpaperManager","_wallpapers","_wallpaper","checked","desktop","settings","wallpaper_name","str","label","append","updateProfilePicture","event","profilePictureImg","file","target","files","profilePictureInput","statusElement","document","querySelector","statusText","updateStatus","text","state","classList","remove","textContent","add","style","display","hideStatusAfterDelay","delay","setTimeout","includes","type","value","img","Image","reader","FileReader","onload","e","src","result","async","canvas","createElement","ctx","getContext","width","height","scale","Math","min","scaledWidth","scaledHeight","offsetX","offsetY","fillStyle","fillRect","drawImage","blob","Promise","resolve","toBlob","maxSize","size","previewUrl","URL","createObjectURL","previewImg","profilePicturePreview","innerHTML","appendChild","resizedFile","File","name","lastModified","Date","now","url","onProgress","progress","percentage","round","filePath","console","log","buddypond","uploadFile","err","error","message","this","buddylist","client","setStatus","me","profilePicture","data","profileState","onerror","readAsDataURL","legacyWallpapers","onSelect","context","hex","set","onCellEnter","$","on","color","setColor","html","activeName","active","changeColor","simpleColor","boxHeight","cellWidth","cellHeight","defaultColor","wallpaper_color","inputCSS","chooserCSS","border","top","displayCSS","displayColorCode","livePreview","insert","element","onClose","radioValue","val","Profile","constructor","options","init","load","appendScript","open","buddyname","replace","contentDiv","profileContent","profileWindow","content","setTitle","ui","Tabs","id","windowManager","createWindow","title","x","y","minWidth","minHeight","parent","icon","resizable","minimizable","maximizable","closable","focusable","maximized","minimized","loggedIn","tabs","getElementById","navigateToTab","addEventListener","call","svg","vendor","dicebear","createAvatar","dicebearAvatars","seed","backgroundColor","toString","appName","apps_installed","renderProfileApp","liveLink","config","host","attr","flexShow","flexHide","updates","email","password","confirmPassword","addClass","removeClass","passwordChanged","updateAccount","preventDefault","say","voices","forEach","v","voiceURI","lang","tts_voice_index","prop","voice","setVoice","userSettings","padEditorHolder","profileUrl","indexOf","browser","BrowserWindow","yourProfile","navigate","click","showTab","themes","applyTheme","themeData","themeStyles","styles","themeStylesTable","editableTheme","JSON","parse","stringify","styleName","styleValue","row","propsCell","inputId","colorInput","isColorProperty","startsWith","newValue","bind","closest","propInput","find","valInput","newProp","trim","newVal","trigger","currentTheme","get","container","app","appstore","description","setAttribute","isColorKey","toLowerCase","isColorValue","test"],"mappings":"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"}