{"version":3,"file":"pond.js","sources":["../../../apps/based/pond/pond.js"],"sourcesContent":["export default class Pond {\n    constructor(bp, options = {}) {\n        this.bp = bp;\n        options.window = options.window || {};\n        this.options = options;\n        return this;\n    }\n\n\n    async init() {\n        // injects CSS link tag into the head of document\n        await this.bp.load('/v5/apps/based/pond/pond.css');\n        // fetches html from the fragment and returns it as a string\n        this.html = await this.bp.load('/v5/apps/based/pond/pond.html');\n        return 'loaded pond';\n    }\n\n    updateHotPonds(data) {\n        let hotPonds = data;\n        // console.log('updateHotPonds called with data:', hotPonds);\n        let html = '';\n        const $joinPondTable = $('.joinPondTable');\n\n        // Clear existing entries in the HTML representation (optional, based on whether you want to append or replace)\n        $joinPondTable.empty();\n\n        // console.log('Processed hotPonds:', hotPonds);\n        // order hotPonds by score\n        hotPonds.sort((a, b) => b.connection_count - a.connection_count);\n\n        // Iterate through the hot ponds data\n        for (let i = 0; i < hotPonds.length; i++) {\n            let pond = hotPonds[i];\n            // pond has value and score properties\n\n            // Create a selector for the specific pond row based on the data-pond attribute\n            let $existingRow = $joinPondTable.find(`tr[data-pond=\"${pond.value}\"]`);\n\n            // Check if the row already exists\n            if ($existingRow.length > 0) {\n                // Update the existing row if needed\n                $existingRow.find('td').eq(1).text(pond.connection_count); // Update the score column\n            } else {\n                let pondName = pond.pond_id.replace('pond/', '');\n                // If the row does not exist, append a new row to the table\n                $joinPondTable.append(`<tr data-pond=\"${pond.pond_id}\"><td>#${pondName}</td><td>${pond.connection_count}</td><td><button class=\"joinPondButton open-app\" data-app=\"buddylist\" data-type=\"pond\" data-context=\"${pondName}\">Join</button></td></tr>`);\n            }\n        }\n\n        // Update the HTML representation in the pond list\n        $('.pond-list', this.pondWindow.content).html(html);\n    }\n\n\n    open(options = {}) {\n\n        if (options.context) {\n            this.bp.apps.buddylist.openChatWindow({ pondname: options.context })\n            return;\n        }\n\n        let iconImagePath = 'desktop/assets/images/icons/icon_pond_64.png';\n\n        if (!this.pondWindow) {\n\n            this.pondWindow = this.bp.apps.ui.windowManager.createWindow({\n                id: 'pond',\n                title: 'Ponds',\n                app: 'pond',\n                icon: iconImagePath,\n                x: 100,\n                y: 100,\n                width: 400,\n                height: 470,\n                minWidth: 200,\n                minHeight: 200,\n                parent: $('#desktop')[0],\n                content: this.html,\n                resizable: true,\n                minimizable: true,\n                maximizable: true,\n                closable: true,\n                focusable: true,\n                maximized: false,\n                minimized: false,\n                preventOverlap: this.options.window.preventOverlap,\n                onClose: () => {\n                    console.log('pond window closed');\n                    this.pondWindow = null;\n                    clearInterval(this.updatePondsTimer);\n                }\n            });\n\n            $('.loggedIn', this.pondWindow.content).show();\n            $('.loggedOut', this.pondWindow.content).hide();\n\n            // joinPondForm cancel submission ( for now )\n            // should not hijack joinPond, use proper submit handler\n            $('.joinPondForm').on('submit', (e) => {\n                e.preventDefault();\n                /*\n                // get value from #customPondName\n                let pondName = $('#customPondName').val();\n                if (pondName) {\n                    this.bp.apps.buddylist.openChatWindow({ pondname: pondName });\n                } else {\n                    alert('Please enter a pond name');\n                }\n                */\n                joinPond.call(this);\n                return false;\n            });\n\n            function joinPond() {\n                // get value from #customPondName\n                let pondName = $('#customPondName').val();\n                if (pondName) {\n                    this.bp.apps.buddylist.openChatWindow({ pondname: pondName, type: 'pond', context: pondName });\n                }\n            };\n\n            $('.joinPond').on('click', (e) => {\n                e.preventDefault();\n                joinPond.call(this);\n                return false;\n            });\n\n        }\n\n        // TODO: switch to websocket connection?\n        function fetchPondData() {\n            // make initial fetch API request to buddypond.messagesApiEndpoint\n            let url = buddypond.messagesApiEndpoint + '/hotponds';\n            // console.log('Fetching hot ponds from:', url);\n            fetch(url, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${this.bp.qtokenid}`, // Use Authorization header\n                    'x-me': this.bp.me\n                }\n            }).then(response => {\n                if (response.ok) {\n                    return response.json();\n                } else {\n                    throw new Error('Failed to fetch hot ponds');\n                }\n            }).then(data => {\n                // console.log('Hot ponds data:', data);\n                this.updateHotPonds(data);\n            }).catch(error => {\n                console.error('Error fetching hot ponds:', error);\n            });\n\n        }\n\n        fetchPondData.call(this);\n        this.updatePondsTimer = setInterval(() => {\n            fetchPondData.call(this);\n        }, 5000);\n\n        return this.pondWindow;\n\n    }\n\n}"],"names":["Pond","constructor","bp","options","this","window","init","load","html","updateHotPonds","data","hotPonds","$joinPondTable","$","empty","sort","a","b","connection_count","i","length","pond","$existingRow","find","value","eq","text","pondName","pond_id","replace","append","pondWindow","content","open","context","apps","buddylist","openChatWindow","pondname","joinPond","val","type","ui","windowManager","createWindow","id","title","app","icon","x","y","width","height","minWidth","minHeight","parent","resizable","minimizable","maximizable","closable","focusable","maximized","minimized","preventOverlap","onClose","console","log","clearInterval","updatePondsTimer","show","hide","on","e","preventDefault","call","fetchPondData","url","buddypond","messagesApiEndpoint","fetch","method","headers","Authorization","qtokenid","me","then","response","ok","json","Error","catch","error","setInterval"],"mappings":"AAAe,MAAMA,EACjB,WAAAC,CAAYC,EAAIC,EAAU,IAItB,OAHAC,KAAKF,GAAKA,EACVC,EAAQE,OAASF,EAAQE,QAAU,CAAE,EACrCD,KAAKD,QAAUA,EACRC,IACf,CAGI,UAAME,GAKF,aAHMF,KAAKF,GAAGK,KAAK,gCAEnBH,KAAKI,WAAaJ,KAAKF,GAAGK,KAAK,iCACxB,aACf,CAEI,cAAAE,CAAeC,GACX,IAAIC,EAAWD,EAGf,MAAME,EAAiBC,EAAE,kBAGzBD,EAAeE,QAIfH,EAASI,MAAK,CAACC,EAAGC,IAAMA,EAAEC,iBAAmBF,EAAEE,mBAG/C,IAAK,IAAIC,EAAI,EAAGA,EAAIR,EAASS,OAAQD,IAAK,CACtC,IAAIE,EAAOV,EAASQ,GAIhBG,EAAeV,EAAeW,KAAK,iBAAiBF,EAAKG,WAG7D,GAAIF,EAAaF,OAAS,EAEtBE,EAAaC,KAAK,MAAME,GAAG,GAAGC,KAAKL,EAAKH,sBACrC,CACH,IAAIS,EAAWN,EAAKO,QAAQC,QAAQ,QAAS,IAE7CjB,EAAekB,OAAO,kBAAkBT,EAAKO,iBAAiBD,aAAoBN,EAAKH,wHAAwHS,6BAC/N,CACA,CAGQd,EAAE,aAAcT,KAAK2B,WAAWC,SAASxB,KA9B9B,GA+BnB,CAGI,IAAAyB,CAAK9B,EAAU,IAEX,GAAIA,EAAQ+B,QAER,YADA9B,KAAKF,GAAGiC,KAAKC,UAAUC,eAAe,CAAEC,SAAUnC,EAAQ+B,UAM9D,IAAK9B,KAAK2B,WAAY,CAkDlB,SAASQ,IAEL,IAAIZ,EAAWd,EAAE,mBAAmB2B,MAChCb,GACAvB,KAAKF,GAAGiC,KAAKC,UAAUC,eAAe,CAAEC,SAAUX,EAAUc,KAAM,OAAQP,QAASP,GAEvG,CAtDYvB,KAAK2B,WAAa3B,KAAKF,GAAGiC,KAAKO,GAAGC,cAAcC,aAAa,CACzDC,GAAI,OACJC,MAAO,QACPC,IAAK,OACLC,KARY,+CASZC,EAAG,IACHC,EAAG,IACHC,MAAO,IACPC,OAAQ,IACRC,SAAU,IACVC,UAAW,IACXC,OAAQ1C,EAAE,YAAY,GACtBmB,QAAS5B,KAAKI,KACdgD,WAAW,EACXC,aAAa,EACbC,aAAa,EACbC,UAAU,EACVC,WAAW,EACXC,WAAW,EACXC,WAAW,EACXC,eAAgB3D,KAAKD,QAAQE,OAAO0D,eACpCC,QAAS,KACLC,QAAQC,IAAI,sBACZ9D,KAAK2B,WAAa,KAClBoC,cAAc/D,KAAKgE,qBAI3BvD,EAAE,YAAaT,KAAK2B,WAAWC,SAASqC,OACxCxD,EAAE,aAAcT,KAAK2B,WAAWC,SAASsC,OAIzCzD,EAAE,iBAAiB0D,GAAG,UAAWC,IAC7BA,EAAEC,iBAUFlC,EAASmC,KAAKtE,OACP,KAWXS,EAAE,aAAa0D,GAAG,SAAUC,IACxBA,EAAEC,iBACFlC,EAASmC,KAAKtE,OACP,IAGvB,CAGQ,SAASuE,IAEL,IAAIC,EAAMC,UAAUC,oBAAsB,YAE1CC,MAAMH,EAAK,CACPI,OAAQ,MACRC,QAAS,CACL,eAAgB,mBAChBC,cAAiB,UAAU9E,KAAKF,GAAGiF,WACnC,OAAQ/E,KAAKF,GAAGkF,MAErBC,MAAKC,IACJ,GAAIA,EAASC,GACT,OAAOD,EAASE,OAEhB,MAAM,IAAIC,MAAM,gCAErBJ,MAAK3E,IAEJN,KAAKK,eAAeC,MACrBgF,OAAMC,IACL1B,QAAQ0B,MAAM,4BAA6BA,KAG3D,CAOQ,OALAhB,EAAcD,KAAKtE,MACnBA,KAAKgE,iBAAmBwB,aAAY,KAChCjB,EAAcD,KAAKtE,QACpB,KAEIA,KAAK2B,UAEpB"}