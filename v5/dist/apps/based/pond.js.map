{"version":3,"file":"pond.js","sources":["../../../apps/based/pond/client.js","../../../apps/based/pond/pond.js"],"sourcesContent":["export default class HotPondsWebSocketClient {\n  constructor({ pondId, endpoint, bp }) {\n    this.pondId = pondId;\n    this.endpoint = buddypond.pondsWsEndpoint;\n    this.bp = bp;\n\n    this.ws = null;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.maxBackoffDelay = 10000; // 10 seconds\n    this.isIntentionallyClosed = false;\n  }\n\n  async connect() {\n    const url = `${this.endpoint}?me=${buddypond.me}&qtokenid=${buddypond.qtokenid}`;\n    console.log(`üîå Connecting to HotPonds...`);\n\n    return new Promise((resolve, reject) => {\n      const ws = new WebSocket(url);\n\n      const onOpen = () => {\n        console.log('‚úÖ WebSocket connected to HotPond');\n        this.reconnectAttempts = 0;\n        this.ws = ws;\n\n        this.bp?.emit('hotpond::connected', { pondId: this.pondId });\n        resolve(this);\n      };\n\n      const onMessage = (event) => {\n        let data;\n        try {\n          data = JSON.parse(event.data);\n        } catch (err) {\n          console.error('‚ùå Failed to parse message:', event.data);\n          this.bp?.emit('hotpond::error', { error: 'Invalid JSON', raw: event.data });\n          return;\n        }\n\n        // üîß Add support for custom actions later\n        console.log('üì¨ Message received from HotPond:', data);\n\n        let action = data.action;\n\n        switch (action) {\n            case 'activePonds':\n                // console.log('Active ponds:', data.ponds);\n                this.bp?.emit('hotpond::activePonds', data.ponds);\n                break;\n        }\n\n        // this.bp?.emit('hotpond::message', { pondId: this.pondId, message: data });\n      };\n\n      const onClose = (event) => {\n        console.warn(`‚ö†Ô∏è WebSocket closed [${event.code}]: ${event.reason}`);\n\n        this.bp?.emit('hotpond::disconnected', {\n          pondId: this.pondId,\n          code: event.code,\n          reason: event.reason,\n        });\n\n        if (!this.isIntentionallyClosed && this.reconnectAttempts < this.maxReconnectAttempts) {\n          const delay = Math.min(\n            200 * Math.pow(2, this.reconnectAttempts) * (1 + 0.1 * Math.random()),\n            this.maxBackoffDelay\n          );\n          console.log(`‚è≥ Reconnecting in ${Math.floor(delay)}ms...`);\n          setTimeout(() => {\n            this.reconnectAttempts++;\n            this.connect().catch(() => {});\n            this.bp?.emit('hotpond::reconnecting', { attempt: this.reconnectAttempts });\n          }, delay);\n        } else {\n          if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n            console.error('‚ùå Max reconnect attempts reached. Giving up.');\n            this.bp?.emit('hotpond::reconnect_failed', { pondId: this.pondId });\n          }\n        }\n      };\n\n      const onError = (event) => {\n        console.error('‚ùå WebSocket error:', event);\n        this.bp?.emit('hotpond::error', { error: 'WebSocket error', event });\n        ws.close(1000, 'Error occurred');\n        reject(new Error('WebSocket connection failed'));\n      };\n\n      // Attach handlers\n      ws.addEventListener('open', onOpen);\n      ws.addEventListener('message', onMessage);\n      ws.addEventListener('close', onClose);\n      ws.addEventListener('error', onError);\n\n      // Store methods for teardown\n      this._teardown = () => {\n        ws.removeEventListener('open', onOpen);\n        ws.removeEventListener('message', onMessage);\n        ws.removeEventListener('close', onClose);\n        ws.removeEventListener('error', onError);\n      };\n    });\n  }\n\n  disconnect() {\n    if (this.ws) {\n      this.isIntentionallyClosed = true;\n      this._teardown?.();\n      this.ws.close(1000, 'Normal closure');\n      this.bp?.emit('hotpond::closed', { pondId: this.pondId });\n      this.ws = null;\n    }\n  }\n\n  send(data) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      const msg = typeof data === 'string' ? data : JSON.stringify(data);\n      this.ws.send(msg);\n    } else {\n      console.warn('‚ö†Ô∏è Tried to send message but WebSocket is not open');\n    }\n  }\n\n  listActivePonds() {\n\n    // sends a listActivePonds action message to the server\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.send({ action: 'listActivePonds' });\n    } else {\n      console.warn('‚ö†Ô∏è Tried to list active ponds but WebSocket is not open');\n    }\n  }\n\n  clearAllPonds() {\n    // sends a clearAllPonds action message to the server\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.send({ action: 'clearAllPonds' });\n    } else {\n      console.warn('‚ö†Ô∏è Tried to clear all ponds but WebSocket is not open');\n    }\n  }\n\n}\n","import HotPondsWebSocketClient from './client.js';\n\nexport default class Pond {\n    constructor(bp, options = {}) {\n        this.bp = bp;\n        this.options = options;\n        this.options.window = this.options.window || {};\n        this.data = {};\n        this.pondWindow = null;\n    }\n\n    async init() {\n        await this.bp.load('/v5/apps/based/pond/pond.css');\n        this.html = await this.bp.load('/v5/apps/based/pond/pond.html');\n\n        // this may need to be bound to pond::open event...\n        this.bp.on('auth::qtoken', 'ponds-connect-client', async (data) => {\n            if (this.pondWindow && this.pondWindow.content) {\n                $('.loggedIn', this.pondWindow.content).show();\n                $('.loggedOut', this.pondWindow.content).hide();\n            }\n            connectPonds.call(this);\n        });\n\n        if (this.bp.qtokenid) {\n            connectPonds.call(this);\n        }\n\n        async function connectPonds() {\n\n            this.client = new HotPondsWebSocketClient({ bp: this.bp });\n            await this.client.connect();\n\n            this.bp.on('hotpond::activePonds', 'update-pond-room-list', (data) => {\n                // console.log('Received hotpond::activePonds event with data:', data);\n                this.data.hotPonds = data;\n\n                const chatWindow = this.bp.apps.ui.windowManager.getWindow('pond_message_main');\n                if (!chatWindow) {\n                    console.log('Pond message main window not found, cannot update room list');\n                } else {\n                    this.bp.apps.buddylist.populateRoomList(data, chatWindow);\n                }\n                if (this.pondWindow?.content) {\n                    this.updateHotPonds(data);\n                }\n            });\n\n            this.bp.on('pond::connectedUsers', 'update-pond-connected-users', (data) => {\n                // console.log('Received pond::connectedUsers event with data:', data);\n                this.bp.apps.buddylist.updatePondConnectedUsers(data);\n            });\n\n            this.client.listActivePonds();\n\n        }\n\n        return 'loaded pond';\n    }\n\n    updateHotPonds(data) {\n        const $joinPondTable = $('.joinPondTable');\n        $joinPondTable.empty();\n\n        data.sort((a, b) => b.connection_count - a.connection_count);\n\n        for (let pond of data) {\n            const pondName = pond.pond_id.replace('pond/', '');\n            const $existingRow = $joinPondTable.find(`tr[data-pond=\"${pond.pond_id}\"]`);\n\n            if ($existingRow.length > 0) {\n                $existingRow.find('td').eq(1).text(pond.connection_count);\n            } else {\n                $joinPondTable.append(`\n                    <tr data-pond=\"${pond.pond_id}\">\n                        <td>#${pondName}</td>\n                        <td>${pond.connection_count}</td>\n                        <td><button class=\"joinPondButton\" data-context=\"${pondName}\">Join</button></td>\n                    </tr>\n                `);\n            }\n        }\n    }\n\n    joinPondByName(pondName) {\n        if (!pondName) return;\n\n        // check for bad names\n        let invalidName = this.bp.apps.buddylist.forbiddenNotes.containsBadWord(pondName);\n        if (invalidName) {\n            alert('Invalid pond name. Please choose a different name.');\n            return;\n        }\n\n        const pondMainWindow = this.bp.apps.ui.windowManager.getWindow('pond_message_main');\n        if (pondMainWindow) {\n            this.bp.apps.buddylist.joinPond(pondName);\n            pondMainWindow.focus();\n        } else {\n            this.bp.apps.buddylist.openChatWindow({ pondname: pondName });\n        }\n    }\n\n    open(options = {}) {\n        const iconImagePath = 'desktop/assets/images/icons/icon_pond_64.png';\n\n        if (!this.pondWindow) {\n            this.pondWindow = this.bp.apps.ui.windowManager.createWindow({\n                id: 'pond',\n                title: 'Ponds',\n                app: 'pond',\n                icon: iconImagePath,\n                x: 100,\n                y: 100,\n                width: 400,\n                height: 470,\n                minWidth: 200,\n                minHeight: 200,\n                parent: $('#desktop')[0],\n                content: this.html,\n                resizable: true,\n                minimizable: true,\n                maximizable: true,\n                closable: true,\n                focusable: true,\n                maximized: false,\n                minimized: false,\n                preventOverlap: this.options.window.preventOverlap,\n                onClose: () => {\n                    console.log('pond window closed');\n                    this.pondWindow = null;\n                    clearInterval(this.updatePondsTimer);\n                }\n            });\n\n            if (this.bp.qtokenid) {\n            $('.loggedIn', this.pondWindow.content).show();\n            $('.loggedOut', this.pondWindow.content).hide();\n\n            } else {\n                $('.loggedIn', this.pondWindow.content).hide();\n                $('.loggedOut', this.pondWindow.content).show();\n            }\n\n\n            // Manual pond join via input\n            const $form = $('.joinCustomPondForm', this.pondWindow.content);\n            const $input = $('#customPondName', this.pondWindow.content);\n\n            $form.on('submit', (e) => {\n                e.preventDefault();\n                const pondName = $input.val();\n                this.joinPondByName(pondName);\n            });\n\n            // Table-based join buttons\n            const $joinPondTable = $('.joinPondTable', this.pondWindow.content);\n            $joinPondTable.on('click', '.joinPondButton', (e) => {\n                e.preventDefault();\n                const pondName = $(e.currentTarget).data('context');\n                this.joinPondByName(pondName);\n            });\n\n            // Legacy \"Join Pond\" button (if needed)\n            $('.joinPond', this.pondWindow.content).on('click', (e) => {\n                e.preventDefault();\n                const pondName = $input.val();\n                this.joinPondByName(pondName);\n            });\n        }\n        if (this.client) { // only call if client is initialized / connected\n            this.client.listActivePonds();\n        }\n        return this.pondWindow;\n    }\n}"],"names":["HotPondsWebSocketClient","constructor","pondId","endpoint","bp","this","buddypond","pondsWsEndpoint","ws","reconnectAttempts","maxReconnectAttempts","maxBackoffDelay","isIntentionallyClosed","connect","url","me","qtokenid","console","log","Promise","resolve","reject","WebSocket","onOpen","emit","onMessage","event","data","JSON","parse","err","error","raw","action","ponds","onClose","warn","code","reason","delay","Math","min","pow","random","floor","setTimeout","catch","attempt","onError","close","Error","addEventListener","_teardown","removeEventListener","disconnect","send","readyState","OPEN","msg","stringify","listActivePonds","clearAllPonds","Pond","options","window","pondWindow","init","async","connectPonds","client","on","hotPonds","chatWindow","apps","ui","windowManager","getWindow","buddylist","populateRoomList","content","updateHotPonds","updatePondConnectedUsers","load","html","$","show","hide","call","$joinPondTable","empty","sort","a","b","connection_count","pond","pondName","pond_id","replace","$existingRow","find","length","eq","text","append","joinPondByName","forbiddenNotes","containsBadWord","alert","pondMainWindow","joinPond","focus","openChatWindow","pondname","open","createWindow","id","title","app","icon","x","y","width","height","minWidth","minHeight","parent","resizable","minimizable","maximizable","closable","focusable","maximized","minimized","preventOverlap","clearInterval","updatePondsTimer","$form","$input","e","preventDefault","val","currentTarget"],"mappings":"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"}